<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[kernel之Makefile分析]]></title>
      <url>https://draapho.github.io/2017/09/14/1724-kernel-makefile/</url>
      <content type="html"><![CDATA[<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><ul>
<li><a href="https://draapho.github.io/2017/02/21/1707-jz2440-env/">嵌入式linux环境搭建-jz2440开发板</a>, 回顾一下s3c2440的地址分配</li>
<li><a href="https://draapho.github.io/2017/07/07/1719-uboot-makefile/">uboot之makefile分析</a></li>
<li><a href="https://draapho.github.io/2017/08/25/1720-uboot-source/">uboot之源码分析</a></li>
<li><a href="https://draapho.github.io/2017/08/30/1721-uboot-modify/">uboot之定制指令</a></li>
<li><a href="https://draapho.github.io/2017/09/01/1722-kernel-compile/">kernel之编译体验</a></li>
<li><a href="https://draapho.github.io/2017/09/14/1724-kernel-makefile/">kernel之Makefile分析</a></li>
<li><a href="https://draapho.github.io/2017/09/15/1725-kernel-launch/">kernel之内核启动分析</a></li>
</ul>
<p>本文使用 linux-2.6.22.6 内核, 使用jz2440开发板.</p>
<h1 id="Makefile-概览"><a href="#Makefile-概览" class="headerlink" title="Makefile 概览"></a>Makefile 概览</h1><p><code>.\linux-2.6.22.6\Documentation\kbuild\makefiles.txt</code> 详细介绍了 kernel 的 makefile用法.<br>建议完整过一遍, 它对如何配置, 生成配置, 编译过程有完整的阐述.</p>
<p>Makefile分为5个部分:</p>
<ul>
<li><code>Makefile</code>, 位于kernel根目录, 顶层Makefile. 最终目的是编译内核, 生成 <code>vmlinux</code> 和 <code>modules</code>.</li>
<li><code>.config</code>, kernel配置文件, 已在 <a href="https://draapho.github.io/2017/09/01/1722-kernel-compile/">kernel之编译体验</a>分析过生成方式和过程</li>
<li><code>arch/$(ARCH)/Makefile</code>, 芯片架构相关的Makefile</li>
<li><code>scripts/Makefile.*</code>, Makefile的规则和脚本</li>
<li><code>kbuild Makefiles</code>, 即各子目录下的<code>Makefile</code>, 最终都会被顶层Makefile调用的.</li>
</ul>
<p><code>obj-y</code>, 表示需要编译进内核, 其形式很简单</p>
<ul>
<li><code>obj-$(CONFIG_DM9000) += dm9dev9000c.o</code>, 含变量的形式.</li>
<li><code>obj-y += dm9dev9000c.o</code>, 替换变量后的直观形式.</li>
</ul>
<p><code>obj-m</code>, 表示需要编译为<code>.ko</code>模块. 有三种形式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># 单文件编译为模块, 变量$(CONFIG_ISDN_PPP_BSDCOMP)为m</div><div class="line">obj-$(CONFIG_ISDN_PPP_BSDCOMP) += isdn_bsdcomp.o</div><div class="line"></div><div class="line"># 多文件编译为模块, 变量$(CONFIG_ISDN)为m</div><div class="line"># 目标模块名称 isdn.ko</div><div class="line">obj-$(CONFIG_ISDN) += isdn.o</div><div class="line"># 关联相关源文件, 使用 xxx-objs. $(LD) 链接命令会链接如下文件.</div><div class="line">isdn-objs := isdn_net_lib.o isdn_v110.o isdn_common.o</div><div class="line"></div><div class="line"># 多文件可配置, 编译为模块. 可使用 xxx-$(CONFIG_) 来配置</div><div class="line"># $(CONFIG_EXT2_FS) 为m, 即需要生成 ext2.ko 模块文件</div><div class="line">obj-$(CONFIG_EXT2_FS)        += ext2.o</div><div class="line"># 必须的关联文件有如下两个, 此处效果等同于 ext2-objs := balloc.o bitmap.o</div><div class="line">ext2-y                       := balloc.o bitmap.o</div><div class="line"># 另外一个文件则根据配置决定是否编译进模块. 其值为 y 或者空.</div><div class="line">ext2-$(CONFIG_EXT2_FS_XATTR) += xattr.o</div></pre></td></tr></table></figure>
<p><code>lib-y</code> 编译为库文件. 形如 <code>lib-y := checksum.o delay.o</code><br>一般仅用于 <code>lib/</code> 以及 <code>arch/*/lib-y</code> 目录下面</p>
<p>另外还有一些 <code>EXTRA_CFLAGS</code>, <code>EXTRA_AFLAGS</code>, <code>EXTRA_LDFLAGS</code>, <code>EXTRA_ARFLAGS</code> 的 flag配置<br>此处略过不表.</p>
<h1 id="linux下关键字搜索技巧"><a href="#linux下关键字搜索技巧" class="headerlink" title="linux下关键字搜索技巧"></a>linux下关键字搜索技巧</h1><p>由于有多个Makefile, 变量也分布在不同的文件中, 所以阅读起来比较麻烦.<br>此处再重复列举一下linux下的搜索技巧</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">grep -n 100ask24x0 ./Makefile       <span class="comment"># 在Makefile文件下查找 100ask24x0, 并显示行号</span></div><div class="line">grep -nr 100ask24x0 *               <span class="comment"># 当前目录递归查找 100ask24x0</span></div><div class="line">grep -nwr 100ask24x0 *              <span class="comment"># w=word, 100ask24x0 作为一个单词查找</span></div><div class="line">grep -nd skip 100ask24x0 *          <span class="comment"># 仅在当前目录查找, 不显示子目录信息</span></div><div class="line"></div><div class="line"><span class="comment"># 特别强大的一条指令, 可针对指定文件搜索指定关键字!</span></div><div class="line"><span class="comment"># 先用find找出所有的Makefile文件, 然后在Makefile文件内查找 uImage 关键字.</span></div><div class="line">find ./ -name <span class="string">"Makefile"</span> | xargs grep -nw --color <span class="string">"uImage"</span></div></pre></td></tr></table></figure>
<h1 id="Makefile整体分析"><a href="#Makefile整体分析" class="headerlink" title="Makefile整体分析"></a>Makefile整体分析</h1><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">    <span class="comment"># 顶层Makefile, 位于 "./linux-2.6.22.6/Makefile"</span></div><div class="line">    <span class="comment"># 这里就不按文件顺序排列, 而按照分析Makefile的逻辑顺序排列了.</span></div><div class="line"></div><div class="line">186 ARCH		?= arm                  <span class="comment"># arm 架构</span></div><div class="line">187 CROSS_COMPILE	?= arm-linux-       <span class="comment"># 指定编译器</span></div><div class="line"></div><div class="line">192 KCONFIG_CONFIG	?= .config          <span class="comment"># 指定配置文件</span></div><div class="line"></div><div class="line">284 LD		= $(CROSS_COMPILE)ld        <span class="comment"># 指定一些列指令</span></div><div class="line">285 CC		= $(CROSS_COMPILE)gcc</div><div class="line"></div><div class="line">    <span class="comment"># 编译时, 我们使用 make uImage, 因为需要uImage格式.</span></div><div class="line">    <span class="comment"># 但过程和 make all 是一样的, 都需要生成 vmlinux </span></div><div class="line">484 all: vmlinux                       <span class="comment"># 直接make, 就是生成vmlinux</span></div><div class="line"></div><div class="line">581 <span class="comment"># Build vmlinux. 可以看一行开始的注释, 说明了vmlinux的依赖结构</span></div><div class="line"></div><div class="line">    <span class="comment"># 找到了 vmlinux 这个目标有关的依赖文件, 逐一扩展来看</span></div><div class="line">745 vmlinux: $(vmlinux-lds) $(vmlinux-init) $(vmlinux-main) $(kallsyms.o) FORCE</div><div class="line">    <span class="comment"># kernel/kallsyms.c</span></div><div class="line"></div><div class="line">608 vmlinux-init := $(head-y) $(init-y)</div><div class="line">609 vmlinux-main := $(core-y) $(libs-y) $(drivers-y) $(net-y)</div><div class="line">611 vmlinux-lds  := arch/$(ARCH)/kernel/vmlinux.lds</div><div class="line">    <span class="comment"># vmlinux-lds:= arch/arm/kernel/vmlinux.lds</span></div><div class="line">    <span class="comment"># 此文件由 vmlinux.lds.S 在make时自动生成!</span></div><div class="line"></div><div class="line">434 init-y		:= init/</div><div class="line">435 drivers-y	:= drivers/ sound/</div><div class="line">436 net-y		:= net/</div><div class="line">437 libs-y		:= lib/</div><div class="line">438 core-y		:= usr/</div><div class="line">562 core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/</div><div class="line"></div><div class="line">573 init-y		:= $(patsubst %/, %/built-in.o, $(init-y))</div><div class="line">574 core-y		:= $(patsubst %/, %/built-in.o, $(core-y))</div><div class="line">575 drivers-y	:= $(patsubst %/, %/built-in.o, $(drivers-y))</div><div class="line">576 net-y		:= $(patsubst %/, %/built-in.o, $(net-y))</div><div class="line">577 libs-y1		:= $(patsubst %/, %/lib.a, $(libs-y))</div><div class="line">578 libs-y2		:= $(patsubst %/, %/built-in.o, $(libs-y))</div><div class="line">579 libs-y		:= $(libs-y1) $(libs-y2)</div><div class="line"></div><div class="line">    <span class="comment"># patsubst 是makefile内的字符串替换函数, 替换结果为:</span></div><div class="line">    <span class="comment"># init-y    := init/built-in.o</span></div><div class="line">    <span class="comment"># core-y    := usr/built-in.o kernel/built-in.o mm/built-in.o fs/built-in.o ... (略)</span></div><div class="line">    <span class="comment"># drivers-y := drivers/built-in.o sound/built-in.o</span></div><div class="line">    <span class="comment"># net-y     := net/built-in.o</span></div><div class="line">    <span class="comment"># libs-y    := lib/lib.a lib/built-in.o</span></div><div class="line">    </div><div class="line">    <span class="comment"># find ./ -name "Makefile" | xargs grep -nw --color "head-y"</span></div><div class="line">    <span class="comment"># 查出 head-y 位于 "./arch/arm/Makefile" 以及 "./arch/arm/kernel/Makefile" 内</span></div><div class="line">    <span class="comment"># head-y	:= arch/arm/kernel/head.S arch/arm/kernel/init_task.c, 分析见 架构文件内的Makefile.</span></div><div class="line">    </div><div class="line"></div><div class="line">    </div><div class="line">    <span class="comment"># 此句就是执行指令, 将上述相关文件打包生成vmlinux二进制内核文件. 太难懂, 先略过.</span></div><div class="line">745 vmlinux: $(vmlinux-lds) $(vmlinux-init) $(vmlinux-main) $(kallsyms.o) FORCE</div><div class="line">749	$(call if_changed_rule,vmlinux__)</div><div class="line">750	$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.modpost $@</div><div class="line">751	$(Q)rm -f .old_version</div></pre></td></tr></table></figure>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">    <span class="comment"># 架构文件内的 Makefile, 位于 "./arch/arm/Makefile"</span></div><div class="line"></div><div class="line">    <span class="comment"># 查找 .config 文件可知, CONFIG_MMU=y</span></div><div class="line">26  ifeq ($(CONFIG_MMU),)       <span class="comment"># CONFIG_MMU不为空, 条件不成立</span></div><div class="line">27  MMUEXT		:= -nommu</div><div class="line">28  endif                       <span class="comment"># 因此 $(MMUEXT) 为空</span></div><div class="line"></div><div class="line">94  head-y		:= arch/arm/kernel/head$(MMUEXT).o arch/arm/kernel/init_task.o</div><div class="line">    <span class="comment"># head-y	:= arch/arm/kernel/head.S arch/arm/kernel/init_task.c</span></div><div class="line">    <span class="comment"># 至于 "./arch/arm/kernel/Makefile" 内的head-y, 猜测是为 extra-y 服务的, 不去追究.</span></div><div class="line">    </div><div class="line">    <span class="comment"># make uImage时, 也需要先生成 vmlinux. 事实上, uImage格式只是比vmlinux多64字节的头.</span></div><div class="line">227 zImage Image xipImage bootpImage uImage: vmlinux</div></pre></td></tr></table></figure>
<p>至此, 为生成vmlinux的原材料都已经分析完成, 就看如何执行指令了.<br>但是, 由Makefile进行分析的话, 需要去看一系列的脚本文件, 工作量太大, 也难以理解.<br>我们倒过来分析, 直接执行 <code>make uImage V=1</code>, 查看编译指令是否和分析的一致.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pwd = ./linux-2.6.22.6</span></div><div class="line">make uImage             <span class="comment"># 生成 uImage, 如有必要, 先 make clean</span></div><div class="line">rm vmlinux              <span class="comment"># 删除目标文件vmlinux</span></div><div class="line">make uImage V=1         <span class="comment"># 查看生成vmlinux时, 详细的编译指令</span></div><div class="line"></div><div class="line"><span class="comment"># 可以在执行结果中, 找到这么一行:</span></div><div class="line"><span class="comment"># arm-linux-ld -EL  -p --no-undefined -X -o vmlinux -T arch/arm/kernel/vmlinux.lds </span></div><div class="line"><span class="comment"># arch/arm/kernel/head.o arch/arm/kernel/init_task.o  init/built-in.o </span></div><div class="line"><span class="comment"># --start-group  usr/built-in.o  arch/arm/kernel/built-in.o  arch/arm/mm/built-in.o  arch/arm/common/built-in.o  arch/arm/mach-s3c2410/built-in.o  arch/arm/mach-s3c2400/built-in.o  arch/arm/mach-s3c2412/built-in.o  arch/arm/mach-s3c2440/built-in.o  arch/arm/mach-s3c2442/built-in.o  arch/arm/mach-s3c2443/built-in.o  arch/arm/nwfpe/built-in.o  arch/arm/plat-s3c24xx/built-in.o  kernel/built-in.o  mm/built-in.o  fs/built-in.o  ipc/built-in.o  security/built-in.o  crypto/built-in.o  block/built-in.o  arch/arm/lib/lib.a  lib/lib.a  arch/arm/lib/built-in.o  lib/built-in.o  drivers/built-in.o  sound/built-in.o  net/built-in.o </span></div><div class="line"><span class="comment"># --end-group .tmp_kallsyms2.o</span></div><div class="line"></div><div class="line"><span class="comment"># 分析如下:</span></div><div class="line">    <span class="comment"># "arm-linux-ld"                    链接命令</span></div><div class="line">    <span class="comment"># "-o vmlinux"                      目标文件</span></div><div class="line">    <span class="comment"># "-T arch/arm/kernel/vmlinux.lds"  指定链接脚本</span></div><div class="line">    <span class="comment"># 一系列的 ".o" 文件, 就是前文分析出的相关文件, 能一一对应的.</span></div></pre></td></tr></table></figure>
<h1 id="链接指令的工作方式"><a href="#链接指令的工作方式" class="headerlink" title="链接指令的工作方式"></a>链接指令的工作方式</h1><p>链接指令的工作方式为, 根据链接脚本的要求对每个文件内的段按顺序排放. 相同的段, 则按照指令的文件顺序排放.<br>譬如: lds 一开始的段位 <code>.text.head</code> 和 <code>.init</code>. 那么以 head.o 和 init_task.o 为例, 其排放顺序为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># .text.head 段开始</div><div class="line">head.text.head          # 第一个文件的 .text.head 段</div><div class="line">init_task.text.head     # 第二个文件的 .text.head 段</div><div class="line"># .text.head 段结束</div><div class="line"></div><div class="line"># .init 段开始</div><div class="line">head.init               # 第一个文件的 .init 段</div><div class="line">init_task.init          # 第二个文件的 .init 段</div><div class="line"># .init 段结束</div><div class="line"></div><div class="line"># 这样, 链接指令就会把各文件打包生成一个最终的二进制文件, 名称为 vmlinux</div></pre></td></tr></table></figure></p>
<p>为分析内核启动过程, 重要的信息如下:</p>
<ul>
<li>第1个文件: <code>arch/arm/kernel/head.S</code></li>
<li>链接脚本:  <code>arch/arm/kernel/vmlinux.lds</code></li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[最实用的 Linux 命令行使用技巧]]></title>
      <url>https://draapho.github.io/2017/09/07/1723-linux-cmd-useful/</url>
      <content type="html"><![CDATA[<p><strong><em>转载自 <a href="https://www.oschina.net/translate/most-useful-linux-command-line-tricks#comments" target="_blank" rel="external">最实用的 Linux 命令行使用技巧</a></em></strong><br><strong><em>英文原文 <a href="https://dzone.com/articles/most-useful-linux-command-line-tricks" target="_blank" rel="external">Most Useful Linux Command Line Tricks</a></em></strong></p>
<hr>
<h1 id="将输出内容以表格的形式显示出来"><a href="#将输出内容以表格的形式显示出来" class="headerlink" title="将输出内容以表格的形式显示出来"></a>将输出内容以表格的形式显示出来</h1><p>可以使用 <code>cmd | column -t</code> 指令, 譬如:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mount | column –t                   <span class="comment"># 默认空格进行制表</span></div><div class="line">cat /etc/passwd | column -t <span class="_">-s</span>:     <span class="comment"># 指定冒号进行制表</span></div></pre></td></tr></table></figure>
<h1 id="重复执行一个命令，直到它运行成功"><a href="#重复执行一个命令，直到它运行成功" class="headerlink" title="重复执行一个命令，直到它运行成功"></a>重复执行一个命令，直到它运行成功</h1><p>如果在 Google 上搜索这个功能，你会发现很多人都问到了如何重复执行命令，直到这个命令成功返回并且运行正常。 Google上的建议里就包括 ping 服务器，直到它变得空闲为止，还有就是检查是否有向特定的目录上传了具有特定扩展名的文件，还有就是检查特定的URL是否已经存在，诸如此类的办法。</p>
<p>其实你还可以使用 while true 的循环来实现来实现这个功能：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">while</span> <span class="literal">true</span>    <span class="comment"># 检测文件是否存在, 直到创建成功</span></div><div class="line">&gt; <span class="keyword">do</span></div><div class="line">&gt; cat <span class="built_in">test</span> &gt; /dev/null 2&gt;&amp;1 &amp;&amp; <span class="built_in">break</span></div><div class="line">&gt; <span class="keyword">done</span></div><div class="line"></div><div class="line">$ <span class="keyword">while</span> <span class="literal">true</span>    <span class="comment"># ping google, 直到成功</span></div><div class="line">&gt; <span class="keyword">do</span></div><div class="line">&gt; ping -c 1 google.com &gt; /dev/null 2&gt;&amp;1 &amp;&amp; <span class="built_in">break</span></div><div class="line">&gt; <span class="keyword">done</span></div></pre></td></tr></table></figure></p>
<p>在上面这个示例中，<code>&gt;/dev/null 2&gt;＆1</code> 会让程序的输出重定向到 <code>/dev/ null</code>。 标准错误和标准输出都会被包含进去。<br>这是我认为最酷的Linux命令行技巧之一。</p>
<h1 id="对进程进行排序"><a href="#对进程进行排序" class="headerlink" title="对进程进行排序"></a>对进程进行排序</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ps aux | sort -rnk 4        <span class="comment"># 内存资源的使用量排序</span></div><div class="line">ps aux | sort -nk 3         <span class="comment"># 按CPU资源的使用量排序</span></div></pre></td></tr></table></figure>
<h1 id="定时的监视性命令输出"><a href="#定时的监视性命令输出" class="headerlink" title="定时的监视性命令输出"></a>定时的监视性命令输出</h1><p>使用 watch 命令，你就可以查看到任何命令的任何输出。例如，你可以查看可用空间以及它的使用量增长情况。<br>通过利用 watch 命令来操作会变化的数据，你可以尽情想象自己能拿这个来做些什么哦。 譬如</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">watch df -h                 <span class="comment"># 实时查看磁盘空间情况</span></div></pre></td></tr></table></figure>
<h1 id="在会话关掉以后继续运行程序"><a href="#在会话关掉以后继续运行程序" class="headerlink" title="在会话关掉以后继续运行程序"></a>在会话关掉以后继续运行程序</h1><p>可以用 nohup 命令做到 - 该指令表示不做挂断操作：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">nohup wget site.com/file.zip</div><div class="line">nohup ping -c 10 google.com</div><div class="line"><span class="comment"># 会在同一个目录下生成一个名称为 nohup.out 的文件，其中包含了正在运行的程序的输出内容</span></div></pre></td></tr></table></figure></p>
<h1 id="自动对任何命令回答-Yes-或者-No"><a href="#自动对任何命令回答-Yes-或者-No" class="headerlink" title="自动对任何命令回答 Yes 或者 No"></a>自动对任何命令回答 Yes 或者 No</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yes | apt-get update</div><div class="line">no | apt-get update</div></pre></td></tr></table></figure>
<h1 id="创建具有指定大小的文件"><a href="#创建具有指定大小的文件" class="headerlink" title="创建具有指定大小的文件"></a>创建具有指定大小的文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dd <span class="keyword">if</span>=/dev/zero of=out.txt bs=1M count=10</div><div class="line"><span class="comment"># 创建出一个 10 MB 的文件，填充零作为内容</span></div></pre></td></tr></table></figure>
<h1 id="以根目录用户来运行最后一个命令"><a href="#以根目录用户来运行最后一个命令" class="headerlink" title="以根目录用户来运行最后一个命令"></a>以根目录用户来运行最后一个命令</h1><p>有时，你会忘记在需要 root 权限的命令之前敲入 sudo。 这时候你没必要去重写命令;<br>只要输入 <code>sudo !!</code> 就行了！</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cat /etc/shadow</div><div class="line">!!                  <span class="comment"># 重复执行最后一条指令 cat /etc/shadow</span></div><div class="line">sudo !!             <span class="comment"># 等同于最后一条指令前面加上sudo</span></div></pre></td></tr></table></figure>
<h1 id="对命令行会话进行记录"><a href="#对命令行会话进行记录" class="headerlink" title="对命令行会话进行记录"></a>对命令行会话进行记录</h1><p>如果想要把自己在 shell 屏幕上敲的内容记录下来，可以使用 <code>script</code> 命令<br>将所有敲写的内容保存到一个名为 <code>typescript</code> 的文件中去。<br>等你敲入 <code>exit</code> 命令以后，所有命令就都会被写入该文件，以便你事后再回过头去查看。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">script</div><div class="line"><span class="comment"># Script started, file is typescript</span></div><div class="line">ll                  <span class="comment"># normal cmd, will be　saved to typescript</span></div><div class="line"><span class="built_in">exit</span>                <span class="comment"># exit script</span></div><div class="line"><span class="comment"># Script done, file is typescript</span></div><div class="line"></div><div class="line">cat typescript      <span class="comment"># show what you do</span></div></pre></td></tr></table></figure>
<h1 id="用标签符号替换空格符"><a href="#用标签符号替换空格符" class="headerlink" title="用标签符号替换空格符"></a>用标签符号替换空格符</h1><p>可以使用 tr 命令替换任何字符，这个用起来非常方便：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cat typescript | tr <span class="string">' '</span> <span class="string">'\t'</span> &gt; out      <span class="comment"># 空格替换为制表符, 保存为out文件</span></div><div class="line">cat myfile | tr a-z A-Z&gt; output         <span class="comment"># 大小写转换</span></div></pre></td></tr></table></figure></p>
<h1 id="强大的-Xargs-命令"><a href="#强大的-Xargs-命令" class="headerlink" title="强大的 Xargs 命令"></a>强大的 Xargs 命令</h1><p>xargs 命令是最重要的 Linux 命令行技巧之一。你可以使用这个命令将命令的输出作为参数传递给另一个命令。例如，搜索 png 文件然后对其进行压缩或者其它操作：<br><code>find. -name *.png -type f -print | xargs tar -cvzf images.tar.gz</code></p>
<p>又或者你的文件中有一个 URL 的列表，而你想要做的是以不同的方式下载或者处理这些 URL，可以这样做：<br><code>cat urls.txt | xargs wget</code></p>
<p>请你要记得，<strong>第一个命令的输出会在 xargs 命令结尾处传递</strong>。<br>那如果命令需要中间过程的输出，该怎么办呢？这个简单！<br>只需要使用 <code>xargs -i</code> 并结合 <code>{}</code> 就行了。如下所示，替换在第一个命令的输出应该去的地方的参数：<br><code>ls /etc/*.conf | xargs -i cp {} /home/out</code></p>
<h1 id="其它指令"><a href="#其它指令" class="headerlink" title="其它指令"></a>其它指令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> -                        <span class="comment"># 回到你操作过的上一个目录去</span></div><div class="line">getconf LONG_BIT            <span class="comment"># 检查机器架构的位数 32/64</span></div></pre></td></tr></table></figure>
<hr>
<p><strong><em>转载自 <a href="https://www.oschina.net/translate/most-useful-linux-command-line-tricks#comments" target="_blank" rel="external">最实用的 Linux 命令行使用技巧</a></em></strong><br><strong><em>英文原文 <a href="https://dzone.com/articles/most-useful-linux-command-line-tricks" target="_blank" rel="external">Most Useful Linux Command Line Tricks</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[kernel之编译体验]]></title>
      <url>https://draapho.github.io/2017/09/01/1722-kernel-compile/</url>
      <content type="html"><![CDATA[<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><ul>
<li><a href="https://draapho.github.io/2017/02/21/1707-jz2440-env/">嵌入式linux环境搭建-jz2440开发板</a>, 回顾一下s3c2440的地址分配</li>
<li><a href="https://draapho.github.io/2017/07/07/1719-uboot-makefile/">uboot之makefile分析</a></li>
<li><a href="https://draapho.github.io/2017/08/25/1720-uboot-source/">uboot之源码分析</a></li>
<li><a href="https://draapho.github.io/2017/08/30/1721-uboot-modify/">uboot之定制指令</a></li>
<li><a href="https://draapho.github.io/2017/09/01/1722-kernel-compile/">kernel之编译体验</a></li>
<li><a href="https://draapho.github.io/2017/09/14/1724-kernel-makefile/">kernel之Makefile分析</a></li>
<li><a href="https://draapho.github.io/2017/09/15/1725-kernel-launch/">kernel之内核启动分析</a></li>
</ul>
<p>本文使用 linux-2.6.22.6 内核, 使用jz2440开发板.</p>
<h1 id="解压缩和打补丁"><a href="#解压缩和打补丁" class="headerlink" title="解压缩和打补丁"></a>解压缩和打补丁</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ubuntu shell</span></div><div class="line"></div><div class="line">tar xjvf linux-2.6.22.6.tar.bz2             <span class="comment"># 解压kernel源码</span></div><div class="line"><span class="built_in">cd</span> linux-2.6.22.6                           <span class="comment"># 进入kernel源码目录</span></div><div class="line">patch -p1 &lt; ../linux-2.6.22.6_jz2440.patch  <span class="comment"># 打补丁文件, p1表忽略patch文件内的1层目录</span></div><div class="line"></div><div class="line"><span class="comment"># pwd = linux-2.6.22.6</span></div><div class="line">mv ../4.3寸LCD_mach-smdk2440.c arch/arm/mach<span class="_">-s</span>3c2440/mach-smdk2440.c    <span class="comment"># 替换为4.3寸屏源码</span></div></pre></td></tr></table></figure>
<h1 id="生成配置文件-“-config”"><a href="#生成配置文件-“-config”" class="headerlink" title="生成配置文件 “.config”"></a>生成配置文件 “.config”</h1><p>整个嵌入式linux系统的配置, 其根源就是这么一个 “.config” 文件.<br>然后编译时, 会通过makefile变量和C语言的宏定义来实现模块的使能, 禁止或生成为<code>.ko</code>模块.</p>
<h2 id="生成”-config”"><a href="#生成”-config”" class="headerlink" title="生成”.config”"></a>生成”.config”</h2><p>生成<code>.config</code>配置文件有三种方法:</p>
<ul>
<li>直接使用 <code>make menuconfig</code> 进行配置<ul>
<li>配置项太多了, 基本不会直接用这种方式</li>
</ul>
</li>
<li>基于默认配置自行修改<ul>
<li>确保 <code>pwd</code> 路径在kernel源码路径下: <code>./linux-2.6.22.6/</code></li>
<li><code>find -name &quot;*defconfig&quot;</code>, 查找默认配置文件</li>
<li>可以找到, 最相关的配置文件为 <code>./arch/arm/configs/s3c2410_defconfig</code></li>
<li><code>make s3c2410_defconfig</code>, 加载这个默认配置.</li>
<li>注意最后一句 “configuration written to .config”, 因此最终生成的就是一个 <code>.config</code> 文件</li>
<li><code>make menuconfig</code> 根据需求, 部分修改配置 <code>.config</code> 文件.</li>
<li>如果遇到错误提示 <code>fatal error: curses.h:</code>. 安装 <code>sudo apt-get install libncurses5-dev libncursesw5-dev</code></li>
</ul>
</li>
<li>使用厂家提供的配置文件<ul>
<li>jz2440 提供的配置文件名为 <code>config_ok</code></li>
<li><code>cp config_ok .config</code> 直接改名为 <code>.config</code> 文件即可.</li>
<li><code>make menuconfig</code>, 一样可以再自己定制配置.</li>
</ul>
</li>
</ul>
<h2 id="修改”-config”"><a href="#修改”-config”" class="headerlink" title="修改”.config”"></a>修改”.config”</h2><p>执行 <code>make menuconfig</code> 后, 有个简单的用户界面. 关键操作如下:</p>
<ul>
<li><code>上下左右</code>键进行移动, <code>Enter</code>键进入子菜单.</li>
<li>按两边 <code>ESC</code> 返回上一级, 或退出界面.</li>
<li><code>蓝色高亮字母</code> 为快捷键, 按了直接跳到那一行</li>
<li><code>Y</code> 表示需要加载这个模块</li>
<li><code>N</code> 表示不要加载这个模块</li>
<li><code>M</code> 表示将此模块生成 <code>.ko</code> 文件, 可动态加载.</li>
<li><code>?</code> 显示当前行的帮助信息, 帮助页按 <code>上下</code> 或 <code>jk</code> 进行翻页</li>
<li><code>/</code> 搜索关键字</li>
</ul>
<h1 id="分析配置过程"><a href="#分析配置过程" class="headerlink" title="分析配置过程"></a>分析配置过程</h1><p>从 “.config” 文件出发, 分析查看该文件如何影响 Makefile 文件以及C语言的宏定义.</p>
<h2 id="“-config”-文件"><a href="#“-config”-文件" class="headerlink" title="“.config” 文件"></a>“.config” 文件</h2><p>使用 <code>vim .config</code> 查看该文件, 可知其基本格式为 <code>CONFIG_XXX=</code></p>
<ul>
<li><code># CONFIG_XXX is not set</code> 此项被配置为 <code>N</code>, 不编译</li>
<li><code>CONFIG_XXX=y</code> 此项被配置为 <code>Y</code>, 直接编译进内核</li>
<li><code>CONFIG_XXX=m</code> 此项被配置为 <code>M</code>, 编译为<code>.ko</code>文件, 供动态加载</li>
<li><code>CONFIG_LOCALVERSION=&quot;&quot;</code> 此项为字符串, 也可能是数值</li>
</ul>
<p>我们以 <code>CONFIG_DM9000</code> 为例, 进行搜索. 忽略一些其他的配置文件, 关键的文件有如下几个:</p>
<ul>
<li><code>include/linux/autoconf.h:129:   #define CONFIG_DM9000 1</code><ul>
<li>这是个C语言的头文件, 很明显是给C语言代码调用的.</li>
<li>该文件由Makefile调用 <code>./scripts/kconfig/</code> 内的脚本自动生成.</li>
<li>对于 <code>y</code> <code>m</code> 的配置项, 宏定义为 <code>1</code></li>
<li>对于 <code>n</code> 的配置项, 不进行宏定义</li>
</ul>
</li>
<li><code>include/config/auto.conf:128:   CONFIG_DM9000=y</code><ul>
<li>这个文件是给 Makefile 调用的, 里面的值全部被认为是Makefile变量.</li>
<li>该文件由Makefile调用 <code>./scripts/kconfig/</code> 内的脚本自动生成.</li>
<li>对于 <code>y</code> <code>m</code> 以及其它值的配置项, 照抄一遍 <code>.config</code> 里的内容</li>
<li>对于 <code>n</code> 的配置项, 无定义!</li>
</ul>
</li>
<li><code>drivers/net/Makefile:197:   obj-$(CONFIG_DM9000) += dm9dev9000c.o</code><ul>
<li>子目录下的 Makefile 会被顶层的 Makefile 包含</li>
<li>由<code>auto.conf</code>文件可知<code>$(CONFIG_DM9000)=y</code></li>
<li>所以此句等同于 <code>obj-y += dm9dev9000c.o</code></li>
<li>同理, 被设置成 <code>m</code> 的变量就会有 <code>obj-m += xxx.o</code></li>
<li>如果配置项被设为 <code>n</code>, 则变量为空, 替换后为 <code>obj- += xxx.o</code>, 会被直接忽略</li>
<li>Makefile 最后就通过 <code>obj-y</code> 或 <code>obj-m</code> 来识别配置, 编译模块.</li>
</ul>
</li>
<li><code>.config:588:   CONFIG_DM9000=y</code><ul>
<li><code>./.config</code> 配置文件. 一切配置的源头文件.</li>
</ul>
</li>
</ul>
<h1 id="编译和烧录内核"><a href="#编译和烧录内核" class="headerlink" title="编译和烧录内核"></a>编译和烧录内核</h1><h2 id="编译内核"><a href="#编译内核" class="headerlink" title="编译内核"></a>编译内核</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">cp config_ok .config                        <span class="comment"># 加载厂家默认配置</span></div><div class="line">make clean                                  <span class="comment"># 清空</span></div><div class="line">make uImage                                 <span class="comment"># 编译获得内核image</span></div><div class="line"></div><div class="line"><span class="comment"># 可能在make时, 提示如下错误信息. 原因是新版的make对老的Makefile规则不兼容</span></div><div class="line">Makefile:1449: *** mixed implicit and normal rules.  Stop.</div><div class="line"></div><div class="line">vim Makefile</div><div class="line">    <span class="comment"># 416行      config %config: scripts_basic outputmakefile FORCE</span></div><div class="line">    <span class="comment">#   改为 -&gt;  %config: scripts_basic outputmakefile FORCE</span></div><div class="line">    <span class="comment"># 1449行     / %/: prepare scripts FORCE</span></div><div class="line">    <span class="comment">#   改为 -&gt;  %/: prepare scripts FORCE</span></div><div class="line">    <span class="comment"># 保存后重新编译即可.</span></div></pre></td></tr></table></figure>
<h2 id="使用-nfs-烧录"><a href="#使用-nfs-烧录" class="headerlink" title="使用 nfs 烧录"></a>使用 nfs 烧录</h2><p>如果配置好网路, 建议使用 nfs 进行烧录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 开发板 uboot</span></div><div class="line"><span class="comment"># 要使用nfs功能, 必须正确设置uboot的ip地址</span></div><div class="line"><span class="comment"># 将 .../linux-2.6.22.6/arch/arm/boot/uImage 拷贝到 /jz2440/</span></div><div class="line"></div><div class="line"><span class="comment"># kernel: 在OpenJTAG&gt; 提示符下</span></div><div class="line">nfs 30000000 10.0.0.98:/jz2440/uImage       <span class="comment"># nfs 加载 kernel 固件到ram中 (0x30000000是sdram的地址)</span></div><div class="line">nand erase kernel                           <span class="comment"># 擦除 falsh 的 kernel 区</span></div><div class="line">nand write.jffs2 30000000 kernel            <span class="comment"># 烧录 kernel (ram-&gt;flash)</span></div></pre></td></tr></table></figure></p>
<h2 id="使用-dnw-烧录"><a href="#使用-dnw-烧录" class="headerlink" title="使用 dnw 烧录"></a>使用 dnw 烧录</h2><p><strong>确保链接了开发板的串口和usb口, 并把usb口关联到Ubuntu上.</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 开发板 uboot</span></div><div class="line"></div><div class="line"><span class="comment"># 打开 jz2440 开发板串口终端, 启动时输入空格键, 进入如下菜单</span></div><div class="line"><span class="comment">##### 100ask Bootloader for OpenJTAG #####</span></div><div class="line">[n] Download u-boot to Nand Flash</div><div class="line">[o] Download u-boot to Nor Flash            <span class="comment"># 如果是Nand Flash启动的话，这个菜单项没有</span></div><div class="line">[k] Download Linux kernel uImage</div><div class="line">[j] Download root_jffs2 image</div><div class="line">[y] Download root_yaffs image</div><div class="line">[d] Download to SDRAM &amp; Run</div><div class="line">[z] Download zImage into RAM</div><div class="line">[g] Boot linux from RAM</div><div class="line">[f] Format the Nand Flash</div><div class="line">[s] Set the boot parameters</div><div class="line">[b] Boot the system</div><div class="line">[r] Reboot u-boot</div><div class="line">[q] Quit from menu</div><div class="line"></div><div class="line">Enter your selection: k                     <span class="comment"># 输入k, 烧录 kernel</span></div><div class="line">USB host is connected. Waiting a download.  <span class="comment"># 提示连接成功</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 切换到 Ubuntu 终端, 输入</span></div><div class="line"><span class="comment"># pwd = ./linux-2.6.22.6                    # 确保在 kernel 源码路径下</span></div><div class="line">sudo dnw ./arch/arm/boot/uImage             <span class="comment"># 输入dnw指令, 指明烧录文件</span></div><div class="line"><span class="comment"># DNW usb device found!                     # 开始烧录</span></div></pre></td></tr></table></figure>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[uboot之定制指令]]></title>
      <url>https://draapho.github.io/2017/08/30/1721-uboot-modify/</url>
      <content type="html"><![CDATA[<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><ul>
<li><a href="https://draapho.github.io/2017/02/21/1707-jz2440-env/">嵌入式linux环境搭建-jz2440开发板</a>, 回顾一下s3c2440的地址分配</li>
<li><a href="https://draapho.github.io/2017/07/07/1719-uboot-makefile/">uboot之makefile分析</a></li>
<li><a href="https://draapho.github.io/2017/08/25/1720-uboot-source/">uboot之源码分析</a></li>
<li><a href="https://draapho.github.io/2017/08/30/1721-uboot-modify/">uboot之定制指令</a></li>
<li><a href="https://draapho.github.io/2017/09/01/1722-kernel-compile/">kernel之编译体验</a></li>
<li><a href="https://draapho.github.io/2017/09/14/1724-kernel-makefile/">kernel之Makefile分析</a></li>
<li><a href="https://draapho.github.io/2017/09/15/1725-kernel-launch/">kernel之内核启动分析</a></li>
</ul>
<p>本文基于 u-boot-1.1.6, 使用jz2440开发板. 若要使用最新的u-boot版本见: <a href="http://www.denx.de/wiki/U-Boot/WebHome" target="_blank" rel="external">u-boot官网</a>  <a href="ftp://ftp.denx.de/pub/u-boot/" target="_blank" rel="external">u-boot下载</a></p>
<h1 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h1><ol>
<li>新建文件 <code>./common/cmd_hello.c</code>, 按照其他 cmd_XXX 文件内容, 依样画葫芦即可.</li>
<li>打开文件 <code>./common/Makefile</code>, 在 <code>COBJS = ...</code> 一行, 加入 <code>cmd_hello.o</code> 即可.</li>
<li>Linux主机下, <code>make</code> 指令重新编译 u-boot, 并生成 <code>u-boot.bin</code> 文件</li>
<li>烧录并执行, 测试新指令即可, 譬如在uboot命令行下, 输入 <code>hello DRA&amp;PHO</code>.</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;common.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;command.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">do_hello</span> <span class="params">(<span class="keyword">cmd_tbl_t</span> *cmdtp, <span class="keyword">int</span> flag, <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span> (<span class="string">"hello world!, %d\n"</span>, argc);</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;argc; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"argv[%d]: %s\n"</span>, i, argv[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">U_BOOT_CMD(</div><div class="line">    hello,  CFG_MAXARGS,    <span class="number">1</span>,  do_hello,</div><div class="line">    <span class="string">"hello   - print hello world and arguments\n"</span>,</div><div class="line">    <span class="string">"[arg [arg ...]]\n    - print hello and arguments\n"</span></div><div class="line">    <span class="string">"\ttest purpose, learn to write uboot command\n"</span></div><div class="line">);</div></pre></td></tr></table></figure>
<h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>我们用倒推法, 从关键的 <code>U_BOOT_CMD</code> 宏定义开始分析.<br>找到其宏定义所在的文件 <code>./include/command.h</code></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="number">39</span>  <span class="keyword">struct</span> cmd_tbl_s &#123;</div><div class="line"><span class="number">40</span>      <span class="keyword">char</span>        *name;      <span class="comment">/* Command Name         */</span>          <span class="comment">// 指令名称</span></div><div class="line"><span class="number">41</span>      <span class="keyword">int</span>     maxargs;    <span class="comment">/* maximum number of arguments  */</span>      <span class="comment">// 参数最大数量</span></div><div class="line"><span class="number">42</span>      <span class="keyword">int</span>     repeatable; <span class="comment">/* autorepeat allowed?      */</span>          <span class="comment">// 空格键是否可自动重复指令</span></div><div class="line"><span class="number">44</span>      <span class="keyword">int</span>     (*cmd)(<span class="keyword">struct</span> cmd_tbl_s *, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">char</span> *[]);     <span class="comment">// 指令函数</span></div><div class="line"><span class="number">45</span>      <span class="keyword">char</span>        *usage;     <span class="comment">/* Usage message    (short) */</span>      <span class="comment">// 短帮助说明</span></div><div class="line"><span class="number">47</span>      <span class="keyword">char</span>        *help;      <span class="comment">/* Help  message    (long)  */</span>      <span class="comment">// 长帮助说明</span></div><div class="line"><span class="number">53</span>  &#125;;</div><div class="line"><span class="number">55</span>  <span class="keyword">typedef</span> <span class="keyword">struct</span> cmd_tbl_s    <span class="keyword">cmd_tbl_t</span>;</div><div class="line"></div><div class="line"><span class="number">57</span>  <span class="keyword">extern</span> <span class="keyword">cmd_tbl_t</span>  __u_boot_cmd_start;</div><div class="line"><span class="number">58</span>  <span class="keyword">extern</span> <span class="keyword">cmd_tbl_t</span>  __u_boot_cmd_end;</div><div class="line">    <span class="comment">// 这两个变量不存在与任何的C或者汇编文件中, 其来源于 "./board/100ask24x0/u-boot.lds" 链接脚本里面</span></div><div class="line"></div><div class="line"><span class="number">93</span>  <span class="meta">#<span class="meta-keyword">define</span> Struct_Section  __attribute__ ((unused,section (<span class="meta-string">".u_boot_cmd"</span>)))</span></div><div class="line">    <span class="comment">// 指定变量存放的段位置, 由链接脚本决定.</span></div><div class="line"></div><div class="line"><span class="number">97</span>  <span class="meta">#<span class="meta-keyword">define</span> U_BOOT_CMD(name,maxargs,rep,cmd,usage,help) \</span></div><div class="line">98  cmd_tbl_t __u_boot_cmd_##name Struct_Section = &#123;#name, maxargs, rep, cmd, usage, help&#125;</div><div class="line"></div><div class="line">    <span class="comment">// 已 U_BOOT_CMD(hello,  CFG_MAXARGS, 1, do_hello, ...); 为例, 展开后为</span></div><div class="line">    <span class="keyword">cmd_tbl_t</span> __u_boot_cmd_hello __attribute__ ((unused,section (<span class="string">".u_boot_cmd"</span>))) = &#123;</div><div class="line">    <span class="comment">// 这个变量结构被指定存放在 ".u_boot_cmd" 段内</span></div><div class="line">        hello,                                                      <span class="comment">// 指令名称 hello</span></div><div class="line">        CFG_MAXARGS,                                                <span class="comment">// 参数最大数量</span></div><div class="line">        <span class="number">1</span>,                                                          <span class="comment">// 可重复指令</span></div><div class="line">        do_hello,                                                   <span class="comment">// 指令函数</span></div><div class="line">        <span class="string">"hello   - print hello world and arguments\n"</span>,              <span class="comment">// 短帮助说明</span></div><div class="line">        <span class="string">"..."</span>                                                       <span class="comment">// 长帮助说明</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>清楚了指令的结构体存放方式后, 需要考虑uboot是如何识别输入的指令, 并执行其指定的函数 <code>do_XXX</code><br>这个文件位于 <code>./common/command.c</code></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="number">346</span> <span class="keyword">cmd_tbl_t</span> *find_cmd (<span class="keyword">const</span> <span class="keyword">char</span> *cmd) &#123;</div><div class="line"><span class="number">360</span>     <span class="keyword">for</span> (cmdtp = &amp;__u_boot_cmd_start;                           <span class="comment">// 在".u_boot_cmd"段内查找指令</span></div><div class="line"><span class="number">361</span>          cmdtp != &amp;__u_boot_cmd_end;</div><div class="line"><span class="number">362</span>          cmdtp++) &#123;</div><div class="line"><span class="number">363</span>          <span class="keyword">if</span> (<span class="built_in">strncmp</span> (cmd, cmdtp-&gt;name, len) == <span class="number">0</span>) &#123;</div><div class="line"><span class="number">364</span>             <span class="keyword">if</span> (len == <span class="built_in">strlen</span> (cmdtp-&gt;name))</div><div class="line"><span class="number">365</span>                 <span class="keyword">return</span> cmdtp;   <span class="comment">/* full match */</span></div><div class="line"><span class="number">367</span>             cmdtp_temp = cmdtp; <span class="comment">/* abbreviated command ? */</span></div><div class="line"><span class="number">368</span>             n_found++;</div><div class="line"><span class="number">369</span>         &#125;</div><div class="line"><span class="number">370</span>     &#125;</div><div class="line"><span class="number">371</span>     <span class="keyword">if</span> (n_found == <span class="number">1</span>) &#123;         <span class="comment">/* exactly one match */</span></div><div class="line"><span class="number">372</span>         <span class="keyword">return</span> cmdtp_temp;</div><div class="line"><span class="number">373</span>     &#125;</div><div class="line"><span class="number">376</span> &#125;</div></pre></td></tr></table></figure>
<p>此时, 通过查找 find_cmd 函数, 发现被多次调用, 其中一条路径是指令自动完成, 此处忽略.<br>可以发现它也被 <code>./common/main.c</code> 的 <code>run_command</code> 调用了</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="number">301</span>  <span class="function"><span class="keyword">void</span> <span class="title">main_loop</span> <span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">        <span class="comment">// 源码分析中, 已经分析到此函数. 用于自动启动kernel, 或者等待终端输入指令并执行</span></div><div class="line"><span class="number">488</span>     <span class="keyword">for</span> (;;) &#123;                                  <span class="comment">// 死循环, 等待终端输入</span></div><div class="line"><span class="number">497</span>         len = readline (CFG_PROMPT);            <span class="comment">// 读取整行, 会存放到 console_buffer 中</span></div><div class="line"><span class="number">501</span>         <span class="built_in">strcpy</span> (lastcommand, console_buffer);   <span class="comment">// 赋值给 lastcommand, 譬如 hello 指令</span></div><div class="line"><span class="number">521</span>         rc = run_command (lastcommand, flag);   <span class="comment">// 执行 lastcommand</span></div><div class="line"><span class="number">527</span>     &#125;</div><div class="line"><span class="number">529</span>  &#125;</div><div class="line"></div><div class="line"><span class="number">1280</span> <span class="function"><span class="keyword">int</span> <span class="title">run_command</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *cmd, <span class="keyword">int</span> flag)</span> </span>&#123;</div><div class="line"><span class="number">1361</span>    <span class="keyword">if</span> ((cmdtp = find_cmd(argv[<span class="number">0</span>])) == <span class="literal">NULL</span>) &#123;...&#125;          <span class="comment">// 查找指令</span></div><div class="line"><span class="number">1391</span>    <span class="keyword">if</span> ((cmdtp-&gt;cmd) (cmdtp, flag, argc, argv) != <span class="number">0</span>) &#123;...&#125;  <span class="comment">// 执行指令函数, 譬如调用 do_hello</span></div><div class="line"><span class="number">1403</span> &#125;</div></pre></td></tr></table></figure>
<p>至此, 指令部分的实现分析完成. 再倒过来总结一下:</p>
<ul>
<li>main_loop 中, 终端等待用户输入指令, 譬如 “hello”</li>
<li>run_command 先查找指令是否存在, 调用find_cmd</li>
<li>find_cmd 会在 “.u_boot_cmd” 段内查找指令是否存在</li>
<li>因此, 增减指令很简单, 只有两个关键点:<ul>
<li>使用 <code>U_BOOT_CMD</code> 宏定义, 定义好指令结构, 编译器会自动存放进”.u_boot_cmd” 段</li>
<li>实现指令函数. 习惯上将其命名为 “do_XXX”, 如 “do_hello”.</li>
</ul>
</li>
<li>指令存在的话, 执行指令函数, 即通过 (cmdtp-&gt;cmd) (cmdtp, flag, argc, argv) 的形式调用 do_hello</li>
<li>执行完成后, 继续死循环等待下一条输入</li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[uboot之源码分析]]></title>
      <url>https://draapho.github.io/2017/08/25/1720-uboot-source/</url>
      <content type="html"><![CDATA[<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><ul>
<li><a href="https://draapho.github.io/2017/02/21/1707-jz2440-env/">嵌入式linux环境搭建-jz2440开发板</a>, 回顾一下s3c2440的地址分配</li>
<li><a href="https://draapho.github.io/2017/07/07/1719-uboot-makefile/">uboot之makefile分析</a></li>
<li><a href="https://draapho.github.io/2017/08/25/1720-uboot-source/">uboot之源码分析</a></li>
<li><a href="https://draapho.github.io/2017/08/30/1721-uboot-modify/">uboot之定制指令</a></li>
<li><a href="https://draapho.github.io/2017/09/01/1722-kernel-compile/">kernel之编译体验</a></li>
<li><a href="https://draapho.github.io/2017/09/14/1724-kernel-makefile/">kernel之Makefile分析</a></li>
<li><a href="https://draapho.github.io/2017/09/15/1725-kernel-launch/">kernel之内核启动分析</a></li>
</ul>
<p>本文基于 u-boot-1.1.6, 使用jz2440开发板. 若要使用最新的u-boot版本见: <a href="http://www.denx.de/wiki/U-Boot/WebHome" target="_blank" rel="external">u-boot官网</a>  <a href="ftp://ftp.denx.de/pub/u-boot/" target="_blank" rel="external">u-boot下载</a></p>
<h1 id="u-boot功能"><a href="#u-boot功能" class="headerlink" title="u-boot功能:"></a>u-boot功能:</h1><ul>
<li>本质是单片机程序</li>
<li>硬件相关初始化<ul>
<li>关看门狗</li>
<li>初始化时钟</li>
<li>初始化SDRAM</li>
<li>从Flash读取内核</li>
</ul>
</li>
<li>最终目的: 启动内核</li>
<li>为开发方便, 还支持:<ul>
<li>烧写flash</li>
<li>网卡</li>
<li>USB</li>
<li>串口</li>
</ul>
</li>
</ul>
<p><img src="https://draapho.github.io/images/1720/uboot-start.png" alt="uboot-start"></p>
<h1 id="查看内存地址分配"><a href="#查看内存地址分配" class="headerlink" title="查看内存地址分配"></a>查看内存地址分配</h1><p>可以使用指令 <code>readelf -s u-boot | grep _start</code> 查看uboot的内存地址分配<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ readelf -s u-boot|grep _start</div><div class="line">    63: 33f80118     0 NOTYPE  LOCAL  DEFAULT    1 _start_armboot</div><div class="line">   218: 33fb0798     4 OBJECT  LOCAL  DEFAULT   10 mem_malloc_start</div><div class="line">   906: 33fb5a0c     4 OBJECT  LOCAL  DEFAULT   10 bin_start_address</div><div class="line">  1303: 33f9f274    88 FUNC    LOCAL  DEFAULT    1 setup_start_tag</div><div class="line">  1507: 33f80000     0 NOTYPE  GLOBAL DEFAULT    1 _start   // 等同于 config.mk 中的 TEXT_BASE值</div><div class="line">  1657: 33f80044     0 NOTYPE  GLOBAL DEFAULT    1 _armboot_start</div><div class="line">  1776: 33f80048     0 NOTYPE  GLOBAL DEFAULT    1 _bss_start</div><div class="line">  1869: 33fb06ac     0 NOTYPE  GLOBAL DEFAULT  ABS __bss_start</div><div class="line">  2038: 33fb016c     0 NOTYPE  GLOBAL DEFAULT  ABS __u_boot_cmd_start</div></pre></td></tr></table></figure></p>
<p><img src="https://draapho.github.io/images/1720/uboot-ram.gif" alt="uboot-ram"></p>
<h1 id="一-汇编初始化-start-s"><a href="#一-汇编初始化-start-s" class="headerlink" title="一 汇编初始化, start.s"></a>一 汇编初始化, start.s</h1><p>由链接脚本 <code>./board/100ask24x0/u-boot.lds</code> 可知,<br>uboot启动后, 首先执行的就是 <code>cpu/arm920t/start.s</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">41 .globl _start                        // 程序入口</div><div class="line">42 _start:	b       reset               // 跳转到reset执行</div><div class="line"></div><div class="line">75 _TEXT_BASE:                          // _TEXT_BASE值, 可知等同于 _start</div><div class="line">76	    .word	TEXT_BASE               // 赋值</div><div class="line">79 _armboot_start:                      // _armboot_start 值等同于 TEXT_BASE</div><div class="line">80	    .word _start                    // 赋值 _start 给 _armboot_start</div><div class="line"></div><div class="line">122 reset:                      </div><div class="line">124 /* set the cpu to SVC32 mode */     // 1. 将CPU设置为SVC32管理模式</div><div class="line">131 /* turn off the watchdog */         // 2. 关闭看门狗</div><div class="line">150 /* mask all IRQs ... - default */   // 3. 关中断</div><div class="line"></div><div class="line">                                        // 4. 初始化SDRAM</div><div class="line">174 #ifndef CONFIG_SKIP_LOWLEVEL_INIT     // 一个宏定义开关</div><div class="line">175 	adr	r0, _start                    // 读取当前地址, 如果是从nand flash启动, 这段代码被自动拷贝到片内4K RAM, 初始地址为0</div><div class="line">                                          // 反之, 如果代码是直接复制到SDRAM中并运行(如调试器), 则_start和_TEXT_BASE值相等</div><div class="line">176 	ldr	r1, _TEXT_BASE                // TEXT_BASE 由 &quot;./board/100ask24x0/config.mk&quot; 赋值为 0x33F80000</div><div class="line">                                          // 可在linux用指令 &quot;grep -nr TEXT_BASE *&quot; 搜索</div><div class="line">177 	cmp     r0, r1                    // 比较两个值. 不等的话, 说明片外SDRAM还没有被初始化过</div><div class="line">178 	blne	cpu_init_crit             // 初始化片外SDRAM的控制 (关MMU, 初始化存储控制器)</div><div class="line">179 #endif</div><div class="line"></div><div class="line">182 stack_setup:                        // 5. 设置栈指针, 栈指针向下递减, 推指针向上递增.</div><div class="line">183 	ldr	r0, _TEXT_BASE		          // 从 _TEXT_BASE 开始分配空间. _TEXT_BASE	上面是uboot代码段</div><div class="line">184 	sub	r0, r0, #CFG_MALLOC_LEN	      // uboot 自己用的 malloc 堆空间</div><div class="line">185 	sub	r0, r0, #CFG_GBL_DATA_SIZE    // 全局变量, 保存uboot系统参数的预留空间</div><div class="line">187 #ifdef CONFIG_USE_IRQ</div><div class="line">188 	sub	r0, r0, #(CONFIG_STACKSIZE_IRQ+CONFIG_STACKSIZE_FIQ)    // IRQ 以及 FIQ, 中断模式的栈</div><div class="line">189 #endif</div><div class="line">190 	sub	sp, r0, #12		            // 再减去12字节后, 就是sp栈指针的起始位置</div><div class="line"></div><div class="line">193 bl clock_init                       // 6. 初始化系统时钟, 设置为400MHz</div><div class="line"></div><div class="line">197 relocate:                           // 7. 拷贝代码. 把uboot代码从nand/nor flash拷贝到片外 SDRAM 中</div><div class="line"></div><div class="line">219 clear_bss:                          // 8. 清bss. 将未初始化过的全局变量设为0. Block Started by Symbol     </div><div class="line"></div><div class="line">261 _start_armboot:	.word start_armboot // 9. 调用 start_armboot, c语言函数.</div></pre></td></tr></table></figure>
<h1 id="二-板级初始化-board-c"><a href="#二-板级初始化-board-c" class="headerlink" title="二 板级初始化, board.c"></a>二 板级初始化, board.c</h1><p><code>grep -nwr start_armboot *</code>, 找出 <code>start_armboot</code> 源码文件和行号.<br>可知, 其位于 <code>./lib_arm/board.c</code> 的236行.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="number">216</span> <span class="keyword">init_fnc_t</span> *init_sequence[] = &#123;...&#125;;    <span class="comment">// 初始化函数组</span></div><div class="line"></div><div class="line"><span class="number">236</span> <span class="function"><span class="keyword">void</span> <span class="title">start_armboot</span> <span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line"><span class="number">248</span>     gd = (<span class="keyword">gd_t</span>*)(_armboot_start - CFG_MALLOC_LEN - <span class="keyword">sizeof</span>(<span class="keyword">gd_t</span>));</div><div class="line">        <span class="comment">// 实际指向的就是 CFG_GBL_DATA_SIZE 段, 下面是清零, 对应的结构体是 gd_t</span></div><div class="line"></div><div class="line"><span class="number">258</span>     <span class="keyword">for</span> (init_fnc_ptr = init_sequence; *init_fnc_ptr; ++init_fnc_ptr) &#123;&#125;</div><div class="line">        <span class="comment">// 依次调用初始化函数, 如果返回值为0, 则初始化失败, 系统出错!</span></div><div class="line">        <span class="comment">// 在init的过程中, 相关的函数对 gd_t 内容赋值.</span></div><div class="line"></div><div class="line"><span class="number">266</span>     size = flash_init ();               <span class="comment">// 初始化nor flash</span></div><div class="line"><span class="number">267</span>     display_flash_config (size);</div><div class="line"></div><div class="line"><span class="number">297</span>     mem_malloc_init (_armboot_start - CFG_MALLOC_LEN);  <span class="comment">// 堆地址的初始化</span></div><div class="line"></div><div class="line"><span class="number">301</span>     nand_init();	                    <span class="comment">// 初始化 nand flash</span></div><div class="line"></div><div class="line"><span class="number">310</span>     env_relocate ();                    <span class="comment">// 加载uboot的环境变量</span></div><div class="line"></div><div class="line">...     <span class="comment">// 网卡, devices_init, 显示终端, 控制台, 其它驱动等等 初始化, 略过不表</span></div><div class="line"></div><div class="line"><span class="number">403</span>     main_loop ();                       <span class="comment">// 初始化结束, 跳转到 main.c 文件的 void main_loop(void)</span></div><div class="line"><span class="number">407</span> &#125;</div></pre></td></tr></table></figure>
<h1 id="三-识别终端指令-main-c"><a href="#三-识别终端指令-main-c" class="headerlink" title="三 识别终端指令, main.c"></a>三 识别终端指令, main.c</h1><p><code>grep -nr &quot;main_loop (void)&quot; *</code>, 可找到 <code>./common/main.c</code> 的301行 main_loop<br>整个文件的最核心指令就是 run_command(), 即识别和运行指令函数.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="number">301</span> <span class="function"><span class="keyword">void</span> <span class="title">main_loop</span> <span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="number">404</span>     s = getenv (<span class="string">"bootdelay"</span>);           <span class="comment">// 获取 bootdelay 环境变量</span></div><div class="line"><span class="number">405</span>     bootdelay = s ? (<span class="keyword">int</span>)simple_strtol(s, <span class="literal">NULL</span>, <span class="number">10</span>) : CONFIG_BOOTDELAY;</div><div class="line"></div><div class="line"><span class="number">432</span>     s = getenv (<span class="string">"bootcmd"</span>);             <span class="comment">// 加载 bootcmd 环境变量, 此变量为linux加载和启动指令</span></div><div class="line"><span class="number">436</span>     <span class="keyword">if</span> (bootdelay &gt;= <span class="number">0</span> &amp;&amp; s &amp;&amp; !abortboot (bootdelay)) &#123;    <span class="comment">// 倒计时结束, 自动加载linux</span></div><div class="line"><span class="number">443</span>         <span class="built_in">printf</span>(<span class="string">"Booting Linux ...\n"</span>);  <span class="comment">// 终端打印信息</span></div><div class="line"><span class="number">444</span>         run_command (s, <span class="number">0</span>);             <span class="comment">// 运行 bootcmd 的指令.</span></div><div class="line"><span class="number">454</span>     &#125;</div><div class="line"></div><div class="line">        <span class="comment">// abortboot 函数内会判断倒计时, 并获取按键操作, 只有 ' ' 空格才能跳出启动</span></div><div class="line">        <span class="comment">// 457-467行不会运行, 因为没有宏定义 CONFIG_MENUKEY</span></div><div class="line"><span class="number">478</span>     run_command(<span class="string">"menu"</span>, <span class="number">0</span>);             <span class="comment">// 执行 "menu" 指令, 打印jz2440定制的菜单信息</span></div><div class="line"></div><div class="line"><span class="number">488</span>     <span class="keyword">for</span> (;;) &#123;                          <span class="comment">// 死循环, 等待终端输入指令</span></div><div class="line"><span class="number">497</span>         len = readline (CFG_PROMPT);    <span class="comment">// 读取终端输入, 提示符为 "OpenJTAG&gt; "</span></div><div class="line"><span class="number">521</span>         rc = run_command (lastcommand, flag);   <span class="comment">// 执行输入的指令</span></div><div class="line"><span class="number">527</span>     &#125;</div><div class="line"><span class="number">529</span> &#125; </div><div class="line"></div><div class="line">        <span class="comment">// 指令数据结构被放在 __u_boot_cmd 段内, 对应的指令函数可以在 ./common/cmd_***.c 内找到</span></div><div class="line"><span class="number">1280</span>    <span class="function"><span class="keyword">int</span> <span class="title">run_command</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *cmd, <span class="keyword">int</span> flag)</span> </span>&#123;</div><div class="line"><span class="number">1361</span>        <span class="keyword">if</span> ((cmdtp = find_cmd(argv[<span class="number">0</span>])) == <span class="literal">NULL</span>) &#123;...&#125;      <span class="comment">// 查找指令是否存在</span></div><div class="line"><span class="number">1391</span>        <span class="keyword">if</span> ((cmdtp-&gt;cmd) (cmdtp, flag, argc, argv) != <span class="number">0</span>) &#123;&#125; <span class="comment">// 调用指令函数</span></div><div class="line"><span class="number">1403</span>    &#125;</div></pre></td></tr></table></figure>
<h1 id="四-加载和启动linux"><a href="#四-加载和启动linux" class="headerlink" title="四 加载和启动linux"></a>四 加载和启动linux</h1><h2 id="bootcmd-指令分析"><a href="#bootcmd-指令分析" class="headerlink" title="bootcmd 指令分析"></a>bootcmd 指令分析</h2><p>在uboot命令行下, 输入 <code>printenv</code> 可以查看uboot的环境变量<br>可以找到如下信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">bootcmd=nand read.jffs2 0x30007FC0 kernel; bootm 0x30007FC0</div><div class="line">    // 启动指令分为了两条:</div><div class="line">    // 1. nand read.jffs2 0x30007FC0 kernel</div><div class="line">        // 从 nand flash 的 kernel 分区读取数据, 放到地址 0x30007FC0 处(SDRAM)</div><div class="line">    // 2. bootm 0x30007FC0</div><div class="line">        // 从 0x30007FC0 启动linux</div><div class="line"></div><div class="line">bootdelay=2</div><div class="line">    // 启动延时参数为2S</div><div class="line">    // 因此uboot的环境变量可以是参数设置, 也可以是命令行, 命令行的本质是字符串</div></pre></td></tr></table></figure></p>
<h2 id="flash-分区信息"><a href="#flash-分区信息" class="headerlink" title="flash 分区信息"></a>flash 分区信息</h2><p>可以通过 “./include/configs/100ask24x0.h” 中的 MTDPARTS_DEFAULT 来分析获得flash分区情况<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MTDPARTS_DEFAULT <span class="meta-string">"mtdparts=nandflash0:256k@0(bootloader),"</span> \</span></div><div class="line">                            <span class="meta-string">"128k(params),"</span> \</div><div class="line">                            <span class="meta-string">"2m(kernel),"</span> \</div><div class="line">                            <span class="meta-string">"-(root)"</span></div><div class="line"><span class="comment">// nandflash0: 分区位于 nandflash 上</span></div><div class="line"><span class="comment">// 256k@0(bootloader), 第一个分区从0地址开始, 占用256k, 分区名称 bootloader</span></div><div class="line"><span class="comment">// 128k(params), 第二个分区紧邻第一个分区, 占用128K, 分区名称 params</span></div><div class="line"><span class="comment">// 2m(kernel), 第三个分区紧邻第二个分区, 占用2m字节, 分区名称 kernel</span></div><div class="line"><span class="comment">// -(root), 剩余的空间全部分配给第四个分区, 名称为 root</span></div></pre></td></tr></table></figure></p>
<p>也可以在uboot下, 使用 “mtdparts” 可以查看 flash 的分区情况<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">OpenJTAG&gt; mtdparts</div><div class="line"> <span class="comment">#: name                size            offset          mask_flags</span></div><div class="line"> 0: bootloader          0x00040000      0x00000000      0</div><div class="line"> 1: params              0x00020000      0x00040000      0</div><div class="line"> 2: kernel              0x00200000      0x00060000      0</div><div class="line"> 3: root                0x0fda0000      0x00260000      0</div></pre></td></tr></table></figure></p>
<h2 id="加载linux内核"><a href="#加载linux内核" class="headerlink" title="加载linux内核"></a>加载linux内核</h2><p>执行 <code>nand read.jffs2 0x30007FC0 kernel</code> 指令, 源码在 <code>./common/cmd_nand.c</code> 的 do_nand 函数</p>
<ul>
<li>jffs2 是读取的格式, 但此处并非是指 kernel 是jffs2格式. jffs2方式无需块对齐和页对齐, 提高通用性.</li>
<li>可知 kernel 分区大小为 0x200000 (2M), 起始地址为 0x60000</li>
<li>所以整条指令等价于: nand read.jffs2 0x30007FC0(目标地址) 0x60000(源地址) 0x200000(字节大小)</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">// nand     read.jffs2  0x30007FC0  kernel </span></div><div class="line">    <span class="comment">// argv[0]  argv[1]     argv[2]     argv[3]</span></div><div class="line"></div><div class="line"><span class="number">166</span> <span class="function"><span class="keyword">int</span> <span class="title">do_nand</span><span class="params">(<span class="keyword">cmd_tbl_t</span> * cmdtp, <span class="keyword">int</span> flag, <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"><span class="number">316</span>     <span class="keyword">if</span> (<span class="built_in">strncmp</span>(cmd, <span class="string">"read"</span>, <span class="number">4</span>) == <span class="number">0</span> || <span class="built_in">strncmp</span>(cmd, <span class="string">"write"</span>, <span class="number">5</span>) == <span class="number">0</span>) &#123;</div><div class="line"><span class="number">322</span>         addr = (ulong)simple_strtoul(argv[<span class="number">2</span>], <span class="literal">NULL</span>, <span class="number">16</span>);                    <span class="comment">// 目标地址 addr = 0x30007FC0</span></div><div class="line"><span class="number">326</span>         <span class="keyword">if</span> (arg_off_size(argc - <span class="number">3</span>, argv + <span class="number">3</span>, nand, &amp;off, &amp;size) != <span class="number">0</span>) &#123;...&#125; <span class="comment">// 获取源地址以及长度</span></div><div class="line">            <span class="comment">// arg_off_size 中, 如果发现导入的参数是分区名字, 就会调用 find_dev_and_part() 来获取改分区的地址和长度</span></div><div class="line">            <span class="comment">// 最终会将源地址以及长度放入 &amp;off, &amp;size 中</span></div><div class="line"><span class="number">336</span>         opts.buffer = (u_char*) addr;                                       <span class="comment">// sdram, 直接就是一片buffer</span></div><div class="line"><span class="number">337</span>         opts.length = size;</div><div class="line"><span class="number">338</span>         opts.offset = off;</div><div class="line"><span class="number">340</span>         ret = nand_read_opts(nand, &amp;opts);                                  <span class="comment">// 读取nand到buffer中</span></div><div class="line"><span class="number">416</span>     <span class="built_in">printf</span>(<span class="string">" %d bytes %s: %s\n"</span>, size, read ? <span class="string">"read"</span> : <span class="string">"written"</span>, ret ? <span class="string">"ERROR"</span> : <span class="string">"OK"</span>); <span class="comment">// 打印进度</span></div><div class="line"><span class="number">419</span>     <span class="keyword">return</span> ret == <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span>;                        返回读取结果</div><div class="line"><span class="number">511</span> &#125;</div></pre></td></tr></table></figure>
<h2 id="启动linux内核"><a href="#启动linux内核" class="headerlink" title="启动linux内核"></a>启动linux内核</h2><p>执行 <code>bootm 0x30007FC0</code> 指令, 源码在 <code>./common/cmd_bootm.c</code> 的 do_bootm 函数</p>
<ul>
<li>设置 0x30007FC0 这个奇怪的值, 是有原因的. 简而言之, 是为了避免拷贝内核两次, 加快启动速度</li>
<li>kernel 最后编译时的指令是 <code>make uImage</code>, 因此其格式是 uImage</li>
<li>相比于纯压缩文件 zImage 的内核文件, uImage 在 zImage之前加上了长度为 0x40 的头部信息 (image_header_t)</li>
<li>0x30007FC0 + 0x40 = 0x30008000, 正好就是 uImage 头部信息要求的加载地址.</li>
<li>而 0x30008000 这个地址, 是有linux源码在 <code>Makefile</code> 里写死的. 可搜索关键字 <code>zreladdr-y</code> 和 <code>ZRELADDR</code><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="number">149</span> <span class="keyword">image_header_t</span> header;              <span class="comment">// uImage的头部信息, 占用0x40字节</span></div><div class="line">        <span class="comment">// ih_load, Data Load Address,   加载地址, 如果发现加载地址不对, do_bootm会重新移动内核文件到此地址</span></div><div class="line">        <span class="comment">// ih_ep,   Entry Point Address, 入口地址, 跳转到此地址开始执行linux内核</span></div><div class="line"></div><div class="line">    <span class="comment">// bootm    0x30007FC0</span></div><div class="line">    <span class="comment">// argv[0]  argv[1]</span></div><div class="line"><span class="number">153</span> <span class="function"><span class="keyword">int</span> <span class="title">do_bootm</span> <span class="params">(<span class="keyword">cmd_tbl_t</span> *cmdtp, <span class="keyword">int</span> flag, <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"><span class="number">163</span>     <span class="keyword">image_header_t</span> *hdr = &amp;header;                              <span class="comment">// 指针 hdr 指向头部信息</span></div><div class="line"><span class="number">171</span>     addr = simple_strtoul(argv[<span class="number">1</span>], <span class="literal">NULL</span>, <span class="number">16</span>);                   <span class="comment">// 获取地址, 0x30007FC0</span></div><div class="line"><span class="number">183</span>     memmove (&amp;header, (<span class="keyword">char</span> *)addr, <span class="keyword">sizeof</span>(<span class="keyword">image_header_t</span>));    <span class="comment">// 读取头部信息</span></div><div class="line"><span class="number">229</span>     data = addr + <span class="keyword">sizeof</span>(<span class="keyword">image_header_t</span>);                       <span class="comment">// data为linux内核起始地址</span></div><div class="line"><span class="number">321</span>     <span class="keyword">if</span>(ntohl(hdr-&gt;ih_load) == data) &#123;</div><div class="line"><span class="number">322</span>         <span class="built_in">printf</span> (<span class="string">"   XIP %s ... "</span>, name);                        <span class="comment">// 一致, 不用移动了</span></div><div class="line"><span class="number">323</span>     &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">340</span>         memmove ((<span class="keyword">void</span> *) ntohl(hdr-&gt;ih_load), (uchar *)data, len);     <span class="comment">// 否则, 把内核移动到加载地址</span></div><div class="line"><span class="number">342</span>     &#125;</div><div class="line"><span class="number">418</span>     do_bootm_linux  (cmdtp, flag, argc, argv, addr, len_ptr, verify);   <span class="comment">// 启动linux</span></div><div class="line"><span class="number">477</span> &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>do_bootm_linux</code> 函数位于 <code>./lib_arm/armlinux.c</code>,<br><strong>注意</strong>, cmd_bootm.c文件内的那个do_bootm_linux不会被调用, 因为没有宏定义 CONFIG_PPC</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="number">79</span>  <span class="function"><span class="keyword">void</span> <span class="title">do_bootm_linux</span> <span class="params">(...)</span> </span>&#123;</div><div class="line">    <span class="comment">// 此函数主要做两件事情:</span></div><div class="line">    <span class="comment">// 1. uboot 需要告诉内核一些系统参数 (内存大小, 终端波特率等等)</span></div><div class="line">    <span class="comment">// 2. 跳转到入口地址, 启动内核</span></div><div class="line"><span class="number">85</span>    	<span class="keyword">void</span> (*theKernel)(<span class="keyword">int</span> zero, <span class="keyword">int</span> arch, uint params);         <span class="comment">// linux启动函数</span></div><div class="line"><span class="number">86</span>      <span class="keyword">image_header_t</span> *hdr = &amp;header;                              <span class="comment">// uImage 头部信息</span></div><div class="line"><span class="number">87</span>      <span class="keyword">bd_t</span> *bd = gd-&gt;bd;                                          <span class="comment">// 处于 CFG_GBL_DATA_SIZE 段内</span></div><div class="line"><span class="number">90</span>      <span class="keyword">char</span> *commandline = getenv (<span class="string">"bootargs"</span>);                    <span class="comment">// 获取 bootargs 参数</span></div><div class="line">        </div><div class="line"><span class="number">93</span>      theKernel = (<span class="keyword">void</span> (*)(<span class="keyword">int</span>, <span class="keyword">int</span>, uint))ntohl(hdr-&gt;ih_ep);    <span class="comment">// ih_ep, 即linux入口地址</span></div><div class="line"></div><div class="line"><span class="number">235</span>     setup_start_tag (bd);                                       <span class="comment">// 一系列的TAG参数设置, 准备传递给linux</span></div><div class="line">        <span class="comment">// 对jz2440, TAG地址是 0x30000100. </span></div><div class="line">        <span class="comment">// 在 "./board/100ask24x0/100ask24x0.c" 中, gd-&gt;bd-&gt;bi_boot_params = 0x30000100;</span></div><div class="line"><span class="number">237</span>	    setup_serial_tag (&amp;params);</div><div class="line"><span class="number">240</span>	    setup_revision_tag (&amp;params);</div><div class="line"><span class="number">243</span>	    setup_memory_tags (bd);</div><div class="line"><span class="number">246</span>	    setup_commandline_tag (bd, commandline);                    <span class="comment">// 告知linux文件系统的位置</span></div><div class="line"><span class="number">250</span>	    setup_initrd_tag (bd, initrd_start, initrd_end);</div><div class="line"><span class="number">253</span>	    setup_videolfb_tag ((<span class="keyword">gd_t</span> *) gd);</div><div class="line"><span class="number">255</span>	    setup_end_tag (bd);                                         <span class="comment">// 参数设置结束</span></div><div class="line"></div><div class="line"><span class="number">259</span>     <span class="built_in">printf</span> (<span class="string">"\nStarting kernel ...\n\n"</span>);</div><div class="line"><span class="number">270</span>     theKernel (<span class="number">0</span>, bd-&gt;bi_arch_number, bd-&gt;bi_boot_params);      <span class="comment">// 调用入口地址, 传入参数, 启动linux</span></div><div class="line"><span class="number">271</span> &#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[uboot之makefile分析]]></title>
      <url>https://draapho.github.io/2017/07/07/1719-uboot-makefile/</url>
      <content type="html"><![CDATA[<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><ul>
<li><a href="https://draapho.github.io/2017/02/21/1707-jz2440-env/">嵌入式linux环境搭建-jz2440开发板</a>, 回顾一下s3c2440的地址分配</li>
<li><a href="https://draapho.github.io/2017/07/07/1719-uboot-makefile/">uboot之makefile分析</a></li>
<li><a href="https://draapho.github.io/2017/08/25/1720-uboot-source/">uboot之源码分析</a></li>
<li><a href="https://draapho.github.io/2017/08/30/1721-uboot-modify/">uboot之定制指令</a></li>
<li><a href="https://draapho.github.io/2017/09/01/1722-kernel-compile/">kernel之编译体验</a></li>
<li><a href="https://draapho.github.io/2017/09/14/1724-kernel-makefile/">kernel之Makefile分析</a></li>
<li><a href="https://draapho.github.io/2017/09/15/1725-kernel-launch/">kernel之内核启动分析</a></li>
</ul>
<p>本文基于 u-boot-1.1.6, 使用jz2440开发板. 若要使用最新的u-boot版本见: <a href="http://www.denx.de/wiki/U-Boot/WebHome" target="_blank" rel="external">u-boot官网</a>  <a href="ftp://ftp.denx.de/pub/u-boot/" target="_blank" rel="external">u-boot下载</a></p>
<h1 id="u-boot-编译过程"><a href="#u-boot-编译过程" class="headerlink" title="u-boot 编译过程"></a>u-boot 编译过程</h1><ol>
<li>解压缩 u-boot-1.1.6</li>
<li>打补丁 针对特定开发板发布的补丁. 打补丁方法<br><code>uboot目录下$ patch -p1 &lt; ../补丁文件</code>  p1表示忽略补丁目标目录的第一层</li>
<li>配置 <code>make 100ask24x0_config</code></li>
<li>编译: <code>make</code>, 获取 <code>u-boot.bin</code> 文件</li>
<li>烧录, 多种方式, 可以用jlink烧录到 NOR Flash 中</li>
</ol>
<h1 id="u-boot功能"><a href="#u-boot功能" class="headerlink" title="u-boot功能:"></a>u-boot功能:</h1><ul>
<li>本质是单片机程序</li>
<li>硬件相关初始化<ul>
<li>关看门狗</li>
<li>初始化时钟</li>
<li>初始化SDRAM</li>
<li>从Flash读取内核</li>
</ul>
</li>
<li>最终目的: 启动内核</li>
<li>为开发方便, 还支持:<ul>
<li>烧写flash</li>
<li>网卡</li>
<li>USB</li>
<li>串口</li>
</ul>
</li>
</ul>
<h1 id="u-boot的README"><a href="#u-boot的README" class="headerlink" title="u-boot的README"></a>u-boot的README</h1><p>要了解 u-boot 的架构和设计思路, 建议先看自带的 <code>README</code> 文件. 重要信息如下:</p>
<ul>
<li><code>include/configs/&lt;board_name&gt;.h</code>  板级配置头文件</li>
<li><code>make NAME_config</code>                加载配置, 准备编译</li>
<li><code>make</code> or <code>make all</code>              编译生成bin文件</li>
<li><code>Monitor Commands - Overview:</code>    u-boot 指令概览</li>
<li><code>Environment Variables:</code>          u-boot 环境变量</li>
<li><code>Linux HOWTO:</code>                    编译linux uImage</li>
<li><code>Boot Linux:</code>                     u-boot 启动Linux相关设置</li>
</ul>
<p>自己设置板级配置的步骤: (位于 README line 2375)</p>
<ol>
<li>Add a new configuration option for your board to the toplevel<br>“Makefile” and to the “MAKEALL” script, using the existing<br>entries as examples. Note that here and at many other places<br>boards and other names are listed in alphabetical sort order. Please<br>keep this order.</li>
<li>Create a new directory to hold your board specific code. Add any<br>files you need. In your board directory, you will need at least<br>the “Makefile”, a “<board>.c”, “flash.c” and “u-boot.lds”.</board></li>
<li>Create a new configuration file “include/configs/<board>.h” for<br>your board</board></li>
<li>If you’re porting U-Boot to a new CPU, then also create a new<br>directory to hold your CPU specific code. Add any files you need.</li>
<li>Run “make <board>_config” with your new name.</board></li>
<li>Type “make”, and you should get a working “u-boot.srec” file<br>to be installed on your target system.</li>
<li>Debug and solve any problems that might arise.</li>
</ol>
<h1 id="u-boot的Makefile"><a href="#u-boot的Makefile" class="headerlink" title="u-boot的Makefile"></a>u-boot的Makefile</h1><p>分析 <code>100ask24x0</code> 即jz2440板子的Makefile实现. Linux下可以使用grep搜索.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pwd = u-boot-1.1.6 文件夹下</span></div><div class="line">grep -n 100ask24x0 ./Makefile       <span class="comment"># 在Makefile文件下查找 100ask24x0, 并显示行号</span></div><div class="line">grep -nr 100ask24x0 *               <span class="comment"># 当前目录递归查找 100ask24x0</span></div><div class="line">grep -nwr 100ask24x0 *              <span class="comment"># w=word, 100ask24x0 作为一个单词查找</span></div><div class="line">grep -nd skip 100ask24x0 *          <span class="comment"># 仅在当前目录查找, 不显示子目录信息</span></div><div class="line"></div><div class="line"><span class="comment"># 特别强大的一条指令, 可针对指定文件搜索指定关键字!</span></div><div class="line"><span class="comment"># 先用find找出所有的Makefile文件, 然后在Makefile文件内查找 uImage 关键字.</span></div><div class="line">find ./ -name <span class="string">"Makefile"</span> | xargs grep -nw --color <span class="string">"uboot"</span></div></pre></td></tr></table></figure></p>
<h2 id="‘make-100ask24x0-config’-指令分析"><a href="#‘make-100ask24x0-config’-指令分析" class="headerlink" title="‘make 100ask24x0_config’ 指令分析"></a>‘make 100ask24x0_config’ 指令分析</h2><p><code>make 100ask24x0_config</code> 其指令结构和 <code>make clean</code> 是一样的.<br>因此在 Makefile 里找到 <code>100ask24x0_config</code> 为目标的行即可:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">1886    100ask24x0_config	:	unconfig    </div><div class="line">1887	    @$(MKCONFIG) $(@:_config=) arm arm920t 100ask24x0 NULL s3c24x0</div><div class="line"></div><div class="line"><span class="comment"># 目标为 100ask24x0_config, 没有依赖</span></div><div class="line"><span class="comment"># 执行 make 100ask24x0_config 后, 实际运行的就是第二行的指令</span></div><div class="line"><span class="comment"># 找到并替换里面的变量:</span></div><div class="line"><span class="comment">#   MKCONFIG	:= $(SRCTREE)/mkconfig</span></div><div class="line"><span class="comment">#   SRCTREE		:= $(CURDIR)</span></div><div class="line"><span class="comment">#   $(@:_config=) 其中 $(@) 表示目标, 即 `100ask24x0_config:_config=空`, 最终得到 `100ask24x0`</span></div><div class="line"><span class="comment"># 整句替换下来的指令就变成了:</span></div><div class="line">    ./mkconfig 100ask24x0 arm arm920t 100ask24x0 NULL s3c24x0</div></pre></td></tr></table></figure></p>
<p>因此, 我们需要去当前文件夹下查找 <code>mkconfig</code> 这个脚本文件.<br>下面直接删减成最终执行的样子, 前面加上原来的行号便于学习比较<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 输入为: ./mkconfig 100ask24x0 arm arm920t 100ask24x0 NULL s3c24x0</span></div><div class="line"><span class="comment"># 对应的变量:  $0        $1      $2   $3       $4        $5    $6</span></div><div class="line"></div><div class="line"><span class="comment"># 打印信息</span></div><div class="line">23  BOARD_NAME=<span class="string">"<span class="variable">$1</span>"</span>                             <span class="comment"># BOARD_NAME=100ask24x0</span></div><div class="line">28  <span class="string">"Configuring for <span class="variable">$&#123;BOARD_NAME&#125;</span> board..."</span>    <span class="comment"># Configuring for 100ask24x0 board...</span></div><div class="line"></div><div class="line"><span class="comment"># 重新创建一系列的软链接:</span></div><div class="line">46  <span class="built_in">cd</span> ./include</div><div class="line">47  rm <span class="_">-f</span> asm</div><div class="line">48  ln <span class="_">-s</span> asm-<span class="variable">$2</span> asm                            <span class="comment"># asm-&gt;asm-arm, 建立一个软连接, 使用asm-arm</span></div><div class="line">51  rm <span class="_">-f</span> asm-<span class="variable">$2</span>/arch                           <span class="comment"># asm-arm/arch</span></div><div class="line">56  ln <span class="_">-s</span> <span class="variable">$&#123;LNPREFIX&#125;</span>arch-<span class="variable">$6</span> asm-<span class="variable">$2</span>/arch        <span class="comment"># LNPREFIX. 因此 asm-arm/arch-&gt;arch-s3c24x0</span></div><div class="line">60  rm <span class="_">-f</span> asm-<span class="variable">$2</span>/proc</div><div class="line">61	ln <span class="_">-s</span> <span class="variable">$&#123;LNPREFIX&#125;</span>proc-armv asm-<span class="variable">$2</span>/proc      <span class="comment"># asm-arm/proc-&gt;proc-armv, </span></div><div class="line"></div><div class="line"><span class="comment"># 创建 config.mk 文件</span></div><div class="line">67  <span class="built_in">echo</span> <span class="string">"ARCH   = <span class="variable">$2</span>"</span> &gt;  config.mk             <span class="comment"># &gt;  新建, "ARCH   = arm"</span></div><div class="line">68  <span class="built_in">echo</span> <span class="string">"CPU    = <span class="variable">$3</span>"</span> &gt;&gt; config.mk             <span class="comment"># &gt;&gt; 追加, "CPU    = arm920t"</span></div><div class="line">69  <span class="built_in">echo</span> <span class="string">"BOARD  = <span class="variable">$4</span>"</span> &gt;&gt; config.mk             <span class="comment"># &gt;&gt; 追加, "BOARD  = 100ask24x0"</span></div><div class="line">71  [ <span class="string">"<span class="variable">$5</span>"</span> ] &amp;&amp; [ <span class="string">"<span class="variable">$5</span>"</span> != <span class="string">"NULL"</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">"VENDOR = <span class="variable">$5</span>"</span> &gt;&gt; config.mk   <span class="comment"># $5 = NULL, 不写VENDOR字段</span></div><div class="line">73  [ <span class="string">"<span class="variable">$6</span>"</span> ] &amp;&amp; [ <span class="string">"<span class="variable">$6</span>"</span> != <span class="string">"NULL"</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">"SOC    = <span class="variable">$6</span>"</span> &gt;&gt; config.mk   <span class="comment"># "SOC = s3c24x0"</span></div><div class="line"><span class="comment"># 可以使用 `cat ./include/config.mk` 查看该文件的内容.</span></div><div class="line"></div><div class="line"><span class="comment"># 创建 config.h 文件. 为了 `#include &lt;configs/100ask24x0.h&gt;`</span></div><div class="line">82  &gt; config.h                                                      <span class="comment"># &gt;  新建 config.h</span></div><div class="line">84  <span class="built_in">echo</span> <span class="string">"/* Automatically generated - do not edit */"</span> &gt;&gt;config.h   <span class="comment"># &gt;&gt; 追加写入</span></div><div class="line">85  <span class="built_in">echo</span> <span class="string">"#include &lt;configs/<span class="variable">$1</span>.h&gt;"</span> &gt;&gt;config.h                       <span class="comment"># &gt;&gt; 追加写入, $1=100ask24x0</span></div><div class="line"><span class="comment"># 可以使用 `cat ./include/config.h` 查看该文件的内容.</span></div></pre></td></tr></table></figure></p>
<h2 id="‘make’-指令分析"><a href="#‘make’-指令分析" class="headerlink" title="‘make’ 指令分析"></a>‘make’ 指令分析</h2><p><code>make</code> 实际上执行的是 <code>make all</code>, Makefile 中比较重要的几行为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">116 # load ARCH, BOARD, and CPU configuration</div><div class="line">117 include $(OBJTREE)/include/config.mk</div><div class="line">118 export	ARCH CPU BOARD VENDOR SOC</div><div class="line"># ./include/config.mk 这个文件由 `make 100ask24x0_config` 指令生成, 可获得如下变量</div><div class="line"># ARCH   = arm</div><div class="line"># CPU    = arm920t</div><div class="line"># BOARD  = 100ask24x0</div><div class="line"># SOC    = s3c24x0</div><div class="line"></div><div class="line">164 include $(TOPDIR)/config.mk</div><div class="line"># u-boot-1.1.6 根目录下的配置文件, 里面有一些变量的定义</div><div class="line"></div><div class="line">169 OBJS  = cpu/$(CPU)/start.o</div><div class="line">193 LIBS  = lib_generic/libgeneric.a</div><div class="line">194 LIBS += board/$(BOARDDIR)/lib$(BOARD).a</div><div class="line">195 LIBS += cpu/$(CPU)/lib$(CPU).a</div><div class="line">197 LIBS += cpu/$(CPU)/$(SOC)/lib$(SOC).a</div><div class="line">199 LIBS += lib_$(ARCH)/lib$(ARCH).a</div><div class="line"># 加载几个板级参数相关的变量值. 特别注意 start.o 这个文件, 是整个u-boot最先运行的文件</div><div class="line"></div><div class="line">239 ALL = $(obj)u-boot.srec $(obj)u-boot.bin $(obj)System.map $(U_BOOT_NAND)</div><div class="line">241 all:		$(ALL)</div><div class="line"># `make` 指令的入口就在这里. 可以根据 ALL 目标后面的依赖开始看这个 make 的过程</div><div class="line"></div><div class="line">262 $(obj)u-boot:		depend version $(SUBDIRS) $(OBJS) $(LIBS) $(LDSCRIPT)</div><div class="line">263		    UNDEF_SYM=`$(OBJDUMP) -x $(LIBS) |sed  -n -e &apos;s/.*\(__u_boot_cmd_.*\)/-u\1/p&apos;|sort|uniq`;\</div><div class="line">264		    cd $(LNDIR) &amp;&amp; $(LD) $(LDFLAGS) $$UNDEF_SYM $(__OBJS) \</div><div class="line">265             --start-group $(__LIBS) --end-group $(PLATFORM_LIBS) \</div><div class="line">266             -Map u-boot.map -o u-boot</div><div class="line"># 比较重要的一个指令. 可以运行 `make`, 在最后会看到这条指令的展开式, 用这种倒推的方式比较方便. 其展开如下:</div><div class="line"></div><div class="line">make[1]: Leaving directory &apos;/home/draapho/jz2440/uboot/u-boot-1.1.6/common&apos;</div><div class="line"># 这句不重要, 但这句的位置很明显, 所以写在这里了.</div><div class="line"></div><div class="line">UNDEF_SYM=`arm-linux-objdump -x lib_generic/libgeneric.a board/100ask24x0/lib100ask24x0.a cpu/arm920t/libarm920t.a cpu/arm920t/s3c24x0/libs3c24x0.a lib_arm/libarm.a fs/cramfs/libcramfs.a fs/fat/libfat.a fs/fdos/libfdos.a fs/jffs2/libjffs2.a fs/reiserfs/libreiserfs.a fs/ext2/libext2fs.a net/libnet.a disk/libdisk.a rtc/librtc.a dtt/libdtt.a drivers/libdrivers.a drivers/nand/libnand.a drivers/nand_legacy/libnand_legacy.a drivers/usb/libusb.a drivers/sk98lin/libsk98lin.a common/libcommon.a |sed  -n -e &apos;s/.*\(__u_boot_cmd_.*\)/-u\1/p&apos;|sort|uniq`;\</div><div class="line"># 整个语句有点复杂, 用了一系列管道指令, 将最终结果赋值给 UNDEF_SYM 这么一个变量</div><div class="line"># 对 &quot;UNDEF_SYM=`$(OBJDUMP) -x $(LIBS) |sed  -n -e &apos;s/.*\(__u_boot_cmd_.*\)/-u\1/p&apos;|sort|uniq`;\&quot; 的展开</div><div class="line"># 其中 &quot;board/100ask24x0/lib100ask24x0.a cpu/arm920t/libarm920t.a cpu/arm920t/s3c24x0/libs3c24x0.a lib_arm/libarm.a&quot; 就是对 $(LIBS) 的展开</div><div class="line">  </div><div class="line">cd /home/draapho/jz2440/uboot/u-boot-1.1.6 &amp;&amp; </div><div class="line"># &quot;cd $(LNDIR) &amp;&amp;&quot; 的展开, 进入 u-boot-1.1.6 目录. </div><div class="line"></div><div class="line">arm-linux-ld -Bstatic -T /home/draapho/jz2440/uboot/u-boot-1.1.6/board/100ask24x0/u-boot.lds -Ttext 0x33F80000  $UNDEF_SYM cpu/arm920t/start.o \</div><div class="line"># &quot;$(LD) $(LDFLAGS) $$UNDEF_SYM $(__OBJS) \&quot; 的展开</div><div class="line"># $(LD) 就是 arm-linux-ld 链接指令. 其中 &quot;LD	= $(CROSS_COMPILE)ld&quot;, 定义在 &quot;./config.mk&quot;, $(CROSS_COMPILE) 在 Makefile 下面. </div><div class="line"># $(LDFLAGS) 给出了链接指令的参数, 定义在 &quot;./config.mk&quot;, 形式为 &quot;LDFLAGS += -Bstatic -T $(LDSCRIPT) -Ttext $(TEXT_BASE) $(PLATFORM_LDFLAGS)&quot;</div><div class="line"># 根据 &quot;cpu/arm920t/start.o&quot;, 可以知道 start.s 的文件位置, 便于以后查看. (由u-boot.lds可知, 这是u-boot第一个运行的代码段)</div><div class="line"># !!! 其中 $(LDSCRIPT) 和 $(TEXT_BASE) 很重要 !!!</div><div class="line">    # &quot;LDSCRIPT := $(TOPDIR)/board/$(BOARDDIR)/u-boot.lds&quot;, 定义在 &quot;./config.mk&quot;. 可以查看链接脚本</div><div class="line">    # &quot;TEXT_BASE = 0x33F80000&quot;, 定义在 &quot;./board/100ask24x0/config.mk&quot;. 这个参数明显是板级相关的. 也可以使用 0x33F80000 来搜索.</div><div class="line"></div><div class="line">                --start-group lib_generic/libgeneric.a board/100ask24x0/lib100ask24x0.a cpu/arm920t/libarm920t.a cpu/arm920t/s3c24x0/libs3c24x0.a lib_arm/libarm.a fs/cramfs/libcramfs.a fs/fat/libfat.a fs/fdos/libfdos.a fs/jffs2/libjffs2.a fs/reiserfs/libreiserfs.a fs/ext2/libext2fs.a net/libnet.a disk/libdisk.a rtc/librtc.a dtt/libdtt.a drivers/libdrivers.a drivers/nand/libnand.a drivers/nand_legacy/libnand_legacy.a drivers/usb/libusb.a drivers/sk98lin/libsk98lin.a common/libcommon.a --end-group -L /usr/local/gcc-3.4.5-glibc-2.3.6/bin/../lib/gcc/arm-linux/3.4.5 -lgcc \</div><div class="line">                -Map u-boot.map -o u-boot</div><div class="line"># 依旧属于 arm-linux-ld 的指令, 这里就是对 &quot;$(__LIBS)&quot; 和 &quot;$(PLATFORM_LIBS)&quot; 的展开, 忽略这一段, 对理解没有影响.</div></pre></td></tr></table></figure></p>
<h2 id="‘u-boot-lds’-链接脚本分析"><a href="#‘u-boot-lds’-链接脚本分析" class="headerlink" title="‘u-boot.lds’ 链接脚本分析"></a>‘u-boot.lds’ 链接脚本分析</h2><p>根据对 Makefile 的分析, 可以知道uboot代码的偏移地址被设置成了 <code>-Ttext 0x33F80000</code> 这么一个值.<br>其含义就是, <strong>给u-boot的代码段分配的空间位于SDRAM最顶部的512K.</strong><br>jz2440使用的SDRAM大小为 64M, 即 0x400_0000, 预留512K (0x8_0000)给u-boot代码, 得到地址 0x3F8_0000.<br>因为 s3c24x0 给SDRAM分配的地址是从 0x3000_0000 开始的, 所以有了 0x33F8_0000 这么一个值. </p>
<p>链接脚本 <code>./board/100ask24x0/u-boot.lds</code> 也很重要. 从中可以知道u-boot整个代码段的分配情况. 下面来分析一下:<br>链接脚本的作用就是安排目标文件在可执行文件中的顺序, 便于链接器生成最终的可执行文件.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">OUTPUT_FORMAT(&quot;elf32-littlearm&quot;, &quot;elf32-littlearm&quot;, &quot;elf32-littlearm&quot;)</div><div class="line">/*OUTPUT_FORMAT(&quot;elf32-arm&quot;, &quot;elf32-arm&quot;, &quot;elf32-arm&quot;)*/</div><div class="line">OUTPUT_ARCH(arm)</div><div class="line">ENTRY(_start)</div><div class="line">SECTIONS</div><div class="line">&#123;</div><div class="line">    // . 表示当前位置, 设置当前位置为 0. 实际物理地址需要加上偏移量 0x33F80000</div><div class="line">	. = 0x00000000;</div><div class="line"></div><div class="line">	. = ALIGN(4);                   // 4字节对齐</div><div class="line">	.text      :                    // 代码段</div><div class="line">	&#123;</div><div class="line">	  cpu/arm920t/start.o	(.text) // 第一段代码放 start.s</div><div class="line">      board/100ask24x0/boot_init.o (.text)  // 第二段代码放 boot_init.c (非必须)</div><div class="line">	  *(.text)                      // 其它的代码段</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	. = ALIGN(4);</div><div class="line">	.rodata : &#123; *(.rodata) &#125;        // 只读数据段, RO段</div><div class="line"></div><div class="line">	. = ALIGN(4);</div><div class="line">	.data : &#123; *(.data) &#125;            // 数据段, RW段</div><div class="line"></div><div class="line">	. = ALIGN(4);</div><div class="line">	.got : &#123; *(.got) &#125;              // uboot自定义, 非标准段</div><div class="line"></div><div class="line">	. = .;</div><div class="line">	__u_boot_cmd_start = .;         // 赋值 __u_boot_cmd_start, 命令段起始位置</div><div class="line">	.u_boot_cmd : &#123; *(.u_boot_cmd) &#125;// uboot 命令段, uboot通过宏定义, 将命令放在该段</div><div class="line">	__u_boot_cmd_end = .;           // 赋值 __u_boot_cmd_end, 命令段结束位置</div><div class="line"></div><div class="line">	. = ALIGN(4);</div><div class="line">	__bss_start = .;                // 赋值 __bss_start</div><div class="line">	.bss : &#123; *(.bss) &#125;              // bss 段</div><div class="line">	_end = .;                       // 赋值 _end</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu下配置支持Windows访问的samba共享]]></title>
      <url>https://draapho.github.io/2017/07/06/1718-linux-samba/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>家用电脑, 环境的搭建思路可参考<a href="https://draapho.github.io/2017/02/16/1705-linux-env/">嵌入式linux环境搭建</a></p>
<p>单位电脑, 没有使用nfs共享文件.<br>用的环境是: VMware Ubuntu 16.04 + Windows 7 + VMware 文件共享<br>尝试编译uboot时, 弹出一个错误提示</p>
<blockquote>
<p>ln: creating symbolic link XXXXXX : Operation not supported</p>
</blockquote>
<p>问题根源和解决方法:<br>出现这类问题，主要是由于在编译的时候，要用ln去建立一些软链接，而这些文件是从Windows中，通过VMWare虚拟机共享进Linux的，Windows不支持软链接，所以，编译会报错。<br>解决办法就是，在VMWare下的Linux中，建立Samba服务， 然后新创建新samba用户和文件夹，然后在windows中就可以访问到该文件夹了。</p>
<p>相比于nfs共享文件, 唯一的缺点是: 文件存放在虚拟机中, 需要始终打开虚拟机才能在windows下访问文件. 因此文件的备份和修复也稍微麻烦一点. 优点是, 不需要付费软件.</p>
<hr>
<p>下文转载自 <a href="http://blog.csdn.net/i_chips/article/details/19191957" target="_blank" rel="external">Ubuntu下配置支持Windows访问的samba共享</a></p>
<hr>
<h1 id="一、安装Ubuntu-samba服务器"><a href="#一、安装Ubuntu-samba服务器" class="headerlink" title="一、安装Ubuntu samba服务器"></a>一、安装Ubuntu samba服务器</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install samba</div><div class="line">$ sudo apt-get install smbclient <span class="comment"># Linux客户端测试用</span></div></pre></td></tr></table></figure>
<h1 id="二、创建samba配置文件"><a href="#二、创建samba配置文件" class="headerlink" title="二、创建samba配置文件"></a>二、创建samba配置文件</h1><ol>
<li><p>备份原配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo cp /etc/samba/smb.conf /etc/samba/smb.conf.bak</div></pre></td></tr></table></figure>
</li>
<li><p>创建共享目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo mkdir -p /home/share</div><div class="line"><span class="comment"># 一般来说，该目录的权限为755，将其改为777之后，Owner之外的其他用户才有权限写入。</span></div><div class="line">$ sudo chmod 777 /home/share</div></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ sudo vim /etc/samba/smb.conf</div><div class="line"></div><div class="line"><span class="comment"># ===== 文件内容, 在smb.conf最后添加： =====</span></div><div class="line">[share]</div><div class="line">    path = /home/share</div><div class="line">    browseable = yes</div><div class="line">    writable = yes</div><div class="line">    comment = smb share <span class="built_in">test</span></div><div class="line"><span class="comment"># ===== 结束修改, 保存退出vim =====</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>另外，总结一下常见的samba配置及说明：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">[share]                           # 该共享的共享名</div><div class="line">    comment = smb share test  # 该共享的备注</div><div class="line">    path = /home/share        # 共享路径</div><div class="line">    allow hosts = host(subnet) # 设置该Samba服务器允许的工作组或者域</div><div class="line">    deny hosts = host(subnet) # 设置该Samba服务器拒绝的工作组或者域</div><div class="line">    available = yes|no        # 设置该共享目录是否可用</div><div class="line">    browseable = yes|no       # 设置该共享目录是否可显示</div><div class="line">    writable = yes|no         # 指定了这个目录缺省是否可写，也可以用readonly = no来设置可写</div><div class="line">    public = yes|no           # 指明该共享资源是否能给游客帐号访问，guest ok = yes其实和public = yes是一样的</div><div class="line">    user = user, @group       # user设置所有可能使用该共享资源的用户，也可以用@group代表group这个组的所有成员，不同的项目之间用空格或者逗号隔开</div><div class="line">    valid users = user, @group # 指定能够使用该共享资源的用户和组</div><div class="line">    invalid users = user, @group # 指定不能够使用该共享资源的用户和组</div><div class="line">    read list = user, @group  # 指定只能读取该共享资源的用户和组</div><div class="line">    write list = user, @group # 指定能读取和写该共享资源的用户和组</div><div class="line">    admin list = user, @group # 指定能管理该共享资源（包括读写和权限赋予等）的用户和组</div><div class="line">    hide dot files = yes|no   # 指明是否像UNIX那样隐藏以“.”号开头的文件</div><div class="line">    create mode = 0755        # 指明新建立的文件的属性，一般是0755</div><div class="line">    directory mode = 0755     # 指明新建立的目录的属性，一般是0755</div><div class="line">    sync always = yes|no      # 指明对该共享资源进行写操作后是否进行同步操作</div><div class="line">    short preserve case = yes|no # 指明是否区分文件名大小写</div><div class="line">    preserve case = yes|no    # 指明是否保持大小写</div><div class="line">    case sensitive = yes|no   # 指明是否对大小写敏感，一般选no，不然可能引起错误</div><div class="line">    mangle case = yes|no      # 指明混合大小写</div><div class="line">    default case = upper|lower # 指明缺省的文件名是全部大写还是小写</div><div class="line">    force user = testuser     # 强制把建立文件的属主是谁。如果我有一个目录，让guest可以写，那么guest就可以删除，如果我用force user= testuser强制建立文件的属主是testuser，同时限制create mask = 0755，这样guest就不能删除了</div><div class="line">    wide links = yes|no       # 指明是否允许共享外符号连接，比如共享资源里面有个连接指向非共享资源里面的文件或者目录，如果设置wide links = no将使该连接不可用</div><div class="line">    max connections = 100     # 设定最大同时连接数</div><div class="line">    delete readonly = yes|no  # 指明能否删除共享资源里面已经被定义为只读的文件</div></pre></td></tr></table></figure>
<h1 id="三、创建samba用户"><a href="#三、创建samba用户" class="headerlink" title="三、创建samba用户"></a>三、创建samba用户</h1><p>注意，创建samba用户之前，必须先确保有一个同名的linux用户，否则samba用户会创建失败。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo smbpasswd <span class="_">-a</span> smbuser</div></pre></td></tr></table></figure></p>
<h1 id="四、重启samba服务"><a href="#四、重启samba服务" class="headerlink" title="四、重启samba服务"></a>四、重启samba服务</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo service smbd restart</div></pre></td></tr></table></figure>
<h1 id="五-客户端访问测试"><a href="#五-客户端访问测试" class="headerlink" title="五. 客户端访问测试"></a>五. 客户端访问测试</h1><ol>
<li><p>Linux客户端访问测试</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ smbclient -L //localhost/share</div></pre></td></tr></table></figure>
</li>
<li><p>Windows客户端访问测试<br> 可以访问如下地址 <code>\\Linux的IP或者主机名\share</code></p>
</li>
<li><p>我一般会把虚拟机端Linux的IP搞成静态地址, 这样远程登录也更方便</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ ifconfig                          <span class="comment"># 查看IP信息</span></div><div class="line">$ sudo vim /etc/network/interfaces</div><div class="line"></div><div class="line">    <span class="comment"># ===== 文件内容, 大致修改如下: =====</span></div><div class="line">    auto lo</div><div class="line">    iface lo inet loopback</div><div class="line">    auto eth0</div><div class="line"></div><div class="line">    iface eth0 inet static          <span class="comment"># 使用静态地址</span></div><div class="line">    address  192.168.0.100          <span class="comment"># 设置静态地址</span></div><div class="line">    netmask  255.255.255.0</div><div class="line">    gateway  192.168.0.1            <span class="comment"># 网关</span></div><div class="line">    dns-nameservers   8.8.8.8  192.168.0.1 </div><div class="line">    <span class="comment"># ===== 结束修改, 保存退出vim =====</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>如果public = no，此时需要输入samba用户密码；<br>如果public = yes，则作为nobody用户直接访问。<br>另外，在Windows客户端使用 <code>net use * /del /y</code> 这条命令可以清理访问缓存。</p>
<hr>
<p>转载自 <a href="http://blog.csdn.net/i_chips/article/details/19191957" target="_blank" rel="external">Ubuntu下配置支持Windows访问的samba共享</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[敏捷开发 Scrum 学习]]></title>
      <url>https://draapho.github.io/2017/05/31/1717-scrum/</url>
      <content type="html"><![CDATA[<h1 id="学习资源推荐"><a href="#学习资源推荐" class="headerlink" title="学习资源推荐"></a>学习资源推荐</h1><ul>
<li><a href="http://scrumtrainingseries.com/" target="_blank" rel="external">Scrum Training Series</a>, 通俗易懂的视频教程</li>
<li><a href="http://www.scrumreferencecard.com/" target="_blank" rel="external">Scrum Reference Card</a>, Scrum 参考卡</li>
<li><a href="http://scrummasterchecklist.org/" target="_blank" rel="external">The Scrum Master Checklist</a>, Scrum Master 职能清单</li>
<li><a href="http://www.scrumguides.org/download.html" target="_blank" rel="external">The Scrum Guide™</a>, Scrum 指导手册下载 (多国语言)</li>
<li>测试. 建议测试完后, 再看一下 <a href="http://scrumtrainingseries.com/" target="_blank" rel="external">Scrum Training Series</a> 视频<ul>
<li><a href="https://www.proprofs.com/quiz-school/story.php?title=mte3mjcynamkcf" target="_blank" rel="external">Scrum Assessment</a></li>
<li><a href="https://www.proprofs.com/quiz-school/story.php?title=quizscrum" target="_blank" rel="external">Scrum (Programming) Quiz</a></li>
<li><a href="https://www.proprofs.com/quiz-school/story.php?title=certified-scrum-master-test" target="_blank" rel="external">Certified Scrum Master Test</a></li>
<li><a href="https://www.proprofs.com/quiz-school/story.php?title=NjAyMjg5#" target="_blank" rel="external">Scrum Training Series, Part 1: Introduction To Scrum</a></li>
<li><a href="https://www.proprofs.com/quiz-school/story.php?title=NzA4NjI0OO75" target="_blank" rel="external">Scrum 30题</a></li>
</ul>
</li>
</ul>
<h1 id="Scrum-核心点概要"><a href="#Scrum-核心点概要" class="headerlink" title="Scrum 核心点概要"></a>Scrum 核心点概要</h1><p><img src="https://draapho.github.io/images/1717/Sprint.JPG" alt="Sprint"></p>
<h2 id="敏捷开发宣言"><a href="#敏捷开发宣言" class="headerlink" title="敏捷开发宣言"></a>敏捷开发宣言</h2><ul>
<li><strong>Individuals and interactions</strong> over processes and tools</li>
<li><strong>Working software</strong> over comprehensive documentation</li>
<li><strong>Customer collaboration</strong> over contract negotiation</li>
<li><strong>Responding to change</strong> over following a plan</li>
</ul>
<h2 id="Scrum-Team-Roles"><a href="#Scrum-Team-Roles" class="headerlink" title="Scrum Team Roles"></a>Scrum Team Roles</h2><ul>
<li><strong>Product Owner</strong>, 产品负责人<ol>
<li>核心工作是确定产品需求, 确定产品是否可接受/可发布. 并确保研发团队专注于该产品的开发(挡住干系人对研发团队可能的干扰)</li>
<li>管理和维护 <code>PBI</code>, 并设定优先级.</li>
<li>确保 <code>PBI</code> 对整个团队清晰可见, 高度透明, 并清楚的知道最高优先项.</li>
<li>需要与第三方(利益相关者/老板/客户)确定需求, 接纳或拒绝新需求.</li>
<li>第三方只能和产品负责人讨论产品进度/好坏之类的问题, 甚至发牢骚. 不得直接干预研发团队!</li>
<li>一般地, 此职位可由项目经理担任. 需要特别注意公司老板不得越过项目经理去分配任务!</li>
<li>产品负责人只需要粗颗粒的拆分一下需求, 更细粒度的拆分由研发团队一起完成.</li>
<li><strong>Focused more on the what than on how</strong>. 侧重于要产品实现什么, 而不是怎么实现的问题.</li>
<li>仅对产品负责, 并不是研发团队的管理人员! Scrum 要求研发团队自我管理.</li>
</ol>
</li>
<li><strong>Development Team</strong>, 研发团队<ol>
<li>产品的技术实现团队, 由4-9人组成较为合适. 譬如 UI设计师x1, 行业专家x1, 软件开发x2, 测试x1.</li>
<li>跨职能, 职责包括需求分析和拆解, 设计, 编码, 测试以及部署.</li>
<li>团队成员自我组织和管理, 高度协作. 相互平等, 没有领导者!</li>
<li>整个团队最好在一起工作, 可以大大提高效率.</li>
<li>在 <code>Sprint Planning Meeting</code> 上, 把 <code>PBI</code> 拆解为 <code>Sprint Tasks</code> 放在 <code>Sprint Backlog</code> 一栏.</li>
<li>以 <code>Sprint</code> 为周期, 都要尽可能的完成一个可演示/可发布的产品版本.</li>
</ol>
</li>
<li><strong>Scrum Master</strong>, Scrum大师 (被误解最多的一个职位)<ol>
<li>Scrum的起步很困难, 因此有了Scrum大师来帮助整个团队理解Scrum的理论, 实践方式, 以及内在精神. 排除实践过程中可能走得弯路.</li>
<li>Scrum大师没有任何决策权, 也不是一个管理岗位. 主要作用就是帮助团队学习使用Scrum框架, 消除误解, 排除干扰和障碍.</li>
<li>这个角色的初衷, 类似于婴儿学步阶段需要有个引导者, 这样可以学的快, 少摔跤. 但没有这个角色, 并不是说就学不会走路了.</li>
<li>实际项目中, 很少有团队会去请一个Scrum大师… 因此这个职位可以被分解为两部分: 理解Scrum, 严格执行Scrum的实践要求.</li>
<li>Scrum的理论和精神已经摆在那里, 因此可以团队成员一起学习讨论, 在实践中进行案例分析, 自学之.</li>
<li>严格执行Scrum的实践, 主要包括: 建立一个舒适的会议环境, 安排和控制会议时间, 确保会议内容仅与项目相关. 建议找一个项目之外的人来做.</li>
</ol>
</li>
</ul>
<h2 id="The-Sprint"><a href="#The-Sprint" class="headerlink" title="The Sprint"></a>The Sprint</h2><ul>
<li><code>Sprint</code> 是Scrum的核心, 时间跨度为2周到一个月.</li>
<li><code>Sprint</code> 由 <code>Sprint Planning</code>, <code>Daily Scrums</code>, 开发工作, <code>Sprint Review</code>, <code>Sprint Retrospective</code> 组成</li>
<li>一个 Sprint 周期内, 可以看成是一个完整的瀑布模式:<ul>
<li>不能改变设定的目标</li>
<li>必须有测试, 不能降低检测标准</li>
<li>目标实现的范围可以和 <code>Product Owner</code> 重新讨论和确定</li>
<li>最终实现一个可用的, 完全测试过的, 可潜在发布的软件版本.</li>
</ul>
</li>
<li>仅<code>Product Owner</code> 有权取消一个 <code>Sprint</code>. 很少出现这种情况, 写在这里只是为了明确职责.</li>
<li><code>Done</code>的定义<ul>
<li>Scrum团队的每个人都清除的知道 <code>Done</code> 意味着什么.</li>
<li><code>Done</code> 可以是大家共同理解的惯例, 标准或指南</li>
<li><code>Done</code> 也可以由 <code>Development Team</code> 在 <code>Sprint Planning Meeting</code> 上确定.</li>
</ul>
</li>
</ul>
<h2 id="Scrum-Meetings"><a href="#Scrum-Meetings" class="headerlink" title="Scrum Meetings"></a>Scrum Meetings</h2><p><img src="https://draapho.github.io/images/1717/meeting_flow.JPG" alt="meeting_flow"></p>
<p><img src="https://draapho.github.io/images/1717/meeting_schedule.JPG" alt="meeting_schedule"></p>
<ul>
<li><strong>Backlog Refinement Meeting</strong> PBI修整会议<ol>
<li>所有Scrum人员参与, 可以在每个Sprint执行过程中拿出点时间(如2小时)进行一次, 为下一次的 <code>Sprint Planning</code> 做准备</li>
<li>主要任务是将部分高优先级的粗颗粒<code>PBI</code>分解为细颗粒 <code>PBI</code>, 并确定对<code>Product Owner</code>而言何为 <code>Done</code></li>
<li>细化程度为 <a href="http://xp123.com/articles/invest-in-good-stories-and-smart-tasks/" target="_blank" rel="external"><strong>INVEST</strong>: Independent, Negotiable, Valuable, Estimable, Small, Testable 或 <strong>SMART</strong>: Specific, Measurable, Achievable, Relevant, Time-boxed</a>, 以及 <strong>3W</strong>: Who, What, Why</li>
</ol>
</li>
<li><strong>Sprint Planning Meeting</strong> 计划会议<ol>
<li>所有Scrum人员参与. 时间控制在4-8小时左右.</li>
<li><code>Sprint Planning</code> 需要确定在一个<code>Sprint</code>周期内, 做什么以及怎么做.</li>
<li><code>Product Owner</code> 维护 <code>PBI</code> 的优先级. 每次总是讨论最高优先级的 <code>PBI</code></li>
<li><code>Product Owner</code> 不应对 <code>Development Team</code> 施加进度压力. 产品开发复杂度远大于外行的想象, 直接干预容易在后期造成技术负债.</li>
<li><code>Development Team</code> 确定何为 <code>Done</code>. 需要特别注意还要考虑代码的向后兼容性, 必要时甚至重构.</li>
<li><code>Development Team</code> 进一步拆分 <code>PBI</code> 为 <code>Sprint Task</code>, 并认领这些任务.</li>
<li><code>Development Team</code> 需要相互协作和评估, 设定在一个 <code>Sprint</code> 周期内可完成的目标.<br>初期, 开发人员容易接受过多的任务, 而不是过少的任务. 这会导致一个 <code>Sprint</code> 内无法完成承诺的任务!<br>注意, 这里不单是指编码工作, 还包含了设计, 代码重构, 完整的测试, 以及潜在的发布, 是一整个瀑布开发的模式.</li>
</ol>
</li>
<li><strong>Daily Scrum Meeting</strong> 日会<ol>
<li>每天同一时间, 同一地点, <code>Development Team</code> 花费15分钟相互报告情况.</li>
<li>内容为: 昨天做了什么, 今天要做什么, 是否遇到障碍. 这样可确保任务透明, 成员自律而高效.</li>
<li>站着开会, 以保持会议简短. 如果有额外需要关注的话题, 在该会议结束后, 相关人员参与即可.</li>
<li><code>Product Owner</code> 可以选择参与. 但团队的领导或主管不要参与!</li>
<li>日会讨论时, 可能会讨论出其他不相干的话题(sidebar), 则可以日会后仅相关人员参与. 不要占用日会时间.</li>
</ol>
</li>
<li><strong>Sprint Review Meeting</strong> 评审会议<ol>
<li>一个<code>Sprint</code>周期到达后, 就需要开评审会议, 以确定成果. <code>Development Team</code> 展示一个可潜在交付的软件版本.</li>
<li>所有Scrum人员, 以及干系人都可以参加, <code>Development Team</code> 进行现场演示以获得干系人的反馈 (不是写文案做报告).</li>
<li><code>Product Owner</code> 逐条检查在 <code>Sprint Backlog</code> 里的 <code>PBI</code>, 宣布哪些<code>Done</code>, 哪些没有完成(即将完成也是没完成!). </li>
<li><code>Product Owner</code> 将没完成的 <code>PBI</code> 放回 <code>Product Backlog</code>, 重新设定优先级</li>
<li><code>Product Owner</code> 配合干系人, 将他们新的意见转换为需求, 放入 <code>Product Backlog</code>, 设定优先级</li>
</ol>
</li>
<li><strong>Sprint Retrospective Meeting</strong> 回顾会议<ol>
<li>所有Scrum人员参与, 可以放在<code>Sprint Review Meeting</code> 之后, 花费1-3小时.</li>
<li>回顾上一个 Sprint 执行过程中的经验得失 (譬如交流是否顺畅, 开发工具的使用, 学习心得) . 是否有改进余地.</li>
<li><code>Scrum Master</code> 需要引导与会人真实的表达了自己的想法, 达到解决障碍和问题, 改进流程的目的. </li>
<li>回顾会议不是为了评估谁好谁坏, 决定日后如何分配奖金. 追求的是共同进步, 一起完成项目, 追求团队的成功.</li>
<li>这一部分, 我理解的不是很好.</li>
</ol>
</li>
</ul>
<h2 id="Scrum-Artifacts"><a href="#Scrum-Artifacts" class="headerlink" title="Scrum Artifacts"></a>Scrum Artifacts</h2><ul>
<li><strong>Product Backlog</strong><ol>
<li>一个展示区, 用于展示项目所期望的功能, 可以随时增减. 说明要做什么(开发目标)</li>
<li>所有干系人可见, 所有干系人(包括团队)均可添加条目</li>
<li><code>Product Owner</code> 持续地按优先级在 <code>Product Backlog</code> 区域排列 <code>PBI</code></li>
<li>顶部为细颗粒<code>PBI</code>, 底部为粗颗粒<code>PBI</code>.</li>
</ol>
</li>
<li><strong>Product Backlog Item</strong>, 简称<code>PBI</code><ol>
<li>由 <code>Backlog Refinement Meeting</code> 分解条目, 安排优先级.</li>
<li><code>PBI</code> 通常写成 <code>User Story</code>, 工作规模控制在 2-3个人工作2-3天可完成.</li>
</ol>
</li>
<li><strong>Sprint Backlog</strong><ol>
<li>在 <code>Sprint Planning Meeting</code> 上, <code>Development Team</code> 和 <code>Product Owner</code> 协商承诺的<code>PBI</code>组成</li>
<li>整个Scrum人员可见. 在Sprint执行期间, 承诺范围和任务目标不可改变.</li>
<li>在Sprint执⾏行期间, 团队将发现兑现既定范围承诺还需要的附加任务, 则放到 <code>Sprint Backlog</code> 中.</li>
<li>放在这里的 <code>PBI</code> 需要定义好 <code>Done</code>. 注意考虑复用性和向后兼容性, 以防止潜在的技术债务.</li>
</ol>
</li>
<li><strong>Sprint Task</strong> (optional)<ol>
<li>对如何完成一条PBI的若干简单描述. 该任务必须细化到一天以内即可完成</li>
<li>在Sprint执行期间, 每个人都可主动认领任务</li>
<li>由整个团队拥有, 需要协作.</li>
<li>这是一个可选项, 而非必须项. 过度使用并不利于提高效率.</li>
</ol>
</li>
<li><strong>Increment</strong><ol>
<li><code>Increment</code> 是一个 Sprint 完成的所有产品待办列表项的总和</li>
<li>完成一个 Sprint 时, 新的 <code>Increment</code> 必须是 <code>Done</code> 的, 并可用和潜在可发布.</li>
</ol>
</li>
</ul>
<h2 id="若干种Sprint的展示板"><a href="#若干种Sprint的展示板" class="headerlink" title="若干种Sprint的展示板"></a>若干种Sprint的展示板</h2><p><img src="https://draapho.github.io/images/1717/Sprint_backlog_1.JPG" alt="Sprint_backlog_1"></p>
<p><img src="https://draapho.github.io/images/1717/Sprint_backlog_2.JPG" alt="Sprint_backlog_2"></p>
<p><img src="https://draapho.github.io/images/1717/Sprint_backlog_3.JPG" alt="Sprint_backlog_3"></p>
<p><img src="https://draapho.github.io/images/1717/Sprint_backlog_4.JPG" alt="Sprint_backlog_4"></p>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[AI和物联网的潜在应用]]></title>
      <url>https://draapho.github.io/2017/05/29/1716-AI-IoT/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>基于目前AI和物联网的发展, 在可见的未来必然有无数的领域受到严重影响.<br>就我思考的范围而言, 此文列举出技术上基本可行的几种应用, 只是需要在商业模式, 技术细节上需要进一步考虑.</p>
<h1 id="AI的发展模式"><a href="#AI的发展模式" class="headerlink" title="AI的发展模式"></a>AI的发展模式</h1><p>AlphoGo 在围棋上的完胜绝对是意义非凡. AlphoGo是真AI, 而不单单是一堆0,1+逻辑运算的机器.</p>
<p>数学上有个概念叫建模, 本质上就是一种抽象. 只是这种抽象需要用数学表达出来, 便于他人理解和使用.<br>有了这么一个模型后, 就能描述系统的因果关系和相互关系.</p>
<p>大家都知道数学建模很难, 但实际上, 不严格的建模无处不在, 人类的经验就是对某个事物/系统/过程的一种建模结果,<br>依靠这种经验, 人去判断事物/系统/过程的因果关系和相互关系. 但经验很难学习和表达!</p>
<p>AlphoGo 就是基于人类的过往经验和自我训练, 形成了自己的对围棋的一套认知, 一组经验.<br>这种经验的形成设计者可以去查看前因后果, 但恐怕很难去描述和理解.</p>
<p>关键点就是:</p>
<ul>
<li><strong>AlphoGo 对围棋进行了抽象, 有自己对围棋的经验, 或者说”理解”.</strong>, 其抽象能力高于所有的人类棋手!</li>
<li>围棋有规则, 有边界, 但无法穷举运算. 也就是需要一定程度的抽象来解决问题.</li>
<li>智力至少是和抽象能力正相关的. 智商高的一般抽象能力更强, “理解”的更快更深更透.</li>
</ul>
<h2 id="现阶段的AI"><a href="#现阶段的AI" class="headerlink" title="现阶段的AI"></a>现阶段的AI</h2><p>目前阶段的AI需要人类设定目标和范围, 需要大量的数据进行前期训练已获得对抽象能力, 或曰”经验”.<br>通过良好的训练, 这种”经验”可以远胜于人类! 而且人类很难去理解.</p>
<p>这一阶段的AI必然被广泛应用于特定目标, 譬如股市, 人像识别, 军事领域.<br>人们对这一阶段的AI也会觉得比较放心, 因为目标是人给的, 训练数据也是人给的.<br>至少这台机器只有智力, 没有创造力! 但毫无疑问, 即使在这一阶段, 也会造成大量人员的事业, 金融业已经发生了!</p>
<p>训练好的机器可以单机运行, 因此AI机器人从技术上讲, 已经可行了. 譬如蔬果采集机器人.</p>
<h2 id="第二阶段的AI"><a href="#第二阶段的AI" class="headerlink" title="第二阶段的AI"></a>第二阶段的AI</h2><p>第一阶段的AI, 最繁琐的部分就是前期训练, 让AI获取数据, 用以获取”经验”<br>自然而然, 人们会想着办法偷懒, 让机器自己去获取数据, 自我训练. 这不就是”自我学习”么.<br>这阶段依然是安全的, AI有如一个听话懂事又聪明的小孩, 给定目标, 拼命学习, 执行任务.<br>但是, 其实人们已经渐渐失去了对AI的控制, AI能自学后, 人们越来越难理解AI的”思考”方式, 追踪整个过程变得复杂而不现实.</p>
<p>这一阶段, AI飞速发展, 在各个特定领域展露手脚… (人们或许可以自娱自乐获取财富? 或是踩脚踏车?)</p>
<h2 id="第三阶段的AI"><a href="#第三阶段的AI" class="headerlink" title="第三阶段的AI"></a>第三阶段的AI</h2><p>量变是会造成质变的. 当人们越来越依赖于AI的时候, 或许不仅会让AI自学, 还会为了解决更复杂的问题, 让不同的AI相互交流和学习.<br>譬如做城市规划的AI, 必然可以读取人口预测AI, 建筑规划AI, 地质天气信息预测AI,<br>说不定为了达到目标, 这个大AI还会自动分配一个小任务: 城市人口迁徙预测AI (分配目标, 自学去)<br>这个时候, 人们已经完全无法了解城市规划AI所做决定的前因后果了… 这个AI的目的可能是明确的, 但其边界已经不由人类控制.</p>
<p>如果此时给AI若干终极问题 (目标明确, 边界由AI自行决定):</p>
<ul>
<li>帮助人类永生 (即人类一直繁衍生存下去) …</li>
<li>让所有人幸福 …</li>
<li>探索宇宙 …</li>
</ul>
<p>希望到这时候, AI还没有学会用欺骗来达到目的, 这样人们可能还有机会提前知道AI给出的解决方案, 来决定是不是要拔电源…</p>
<h1 id="物联网的基础模式"><a href="#物联网的基础模式" class="headerlink" title="物联网的基础模式"></a>物联网的基础模式</h1><p>目前物联网发展日趋成熟, 共享单车的技术方案充分展示了这种技术上的成熟度!</p>
<p><img src="https://draapho.github.io/images/1716/IoT_structure.png" alt="IoT_structure"></p>
<h2 id="节点端"><a href="#节点端" class="headerlink" title="节点端"></a>节点端</h2><p>主要功能就是信息的采集和发送.<br>主要技术难点是供电持久性, 便携性, 稳定可靠性.<br>部分涉及音视频传输的节点, 技术上就更复杂.<br>不同的应用领域有不同的需求, 是一个需要定制的设备.</p>
<h2 id="云端"><a href="#云端" class="headerlink" title="云端"></a>云端</h2><p>云端即数据库, 进行数据的收集, 存储和再分析. 需要注意安全性, 吞吐量.<br>未来, 数据即价值所在. 因为目前的AI需要前期大量的数据来训练, 训练成功后有无穷的潜力.</p>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>没啥好说的, 目前高度集中于两种展示平台:</p>
<ul>
<li>浏览器</li>
<li>苹果手机APP</li>
<li>android手机APP</li>
</ul>
<h1 id="潜在的商业应用"><a href="#潜在的商业应用" class="headerlink" title="潜在的商业应用"></a>潜在的商业应用</h1><p>天马行空, 随便聊聊. 作为一个技术人员, 可以肯定技术上已经可行或即将可行.</p>
<h2 id="一般的物联网应用"><a href="#一般的物联网应用" class="headerlink" title="一般的物联网应用"></a>一般的物联网应用</h2><p>更多在于发现潜在的商业机会, 挖掘特定行业的物联需求.<br>技术实现有一定复杂度(跨度太大, 从硬件到云端, 完全自行开发不现实).</p>
<h2 id="物联网方案公司"><a href="#物联网方案公司" class="headerlink" title="物联网方案公司"></a>物联网方案公司</h2><p>考虑到大多数初创公司没有能力进行全程研发, 建立物联网方案公司, 帮助其解决技术难题.<br>自我定位要准确: 帮助别的公司完成研发, 要考虑别的公司的核心利益.<br>因此, 采集的核心数据要开放出来, 不能私有.<br>对没有研发能力的公司可以收取服务费维持系统运行,<br>对于发展到一定程度, 希望全部自己控制的公司可以进行技术买断.</p>
<p>收费模式为: 低进入费, 稳定的服务费, 高买断费.</p>
<h2 id="共享汽车"><a href="#共享汽车" class="headerlink" title="共享汽车"></a>共享汽车</h2><p>灵感来源于共享单车和无人驾驶车.<br>若无人驾驶车量产后, 政府允许真的无人汽车自主运行. 那汽车租赁有机会在城市里蚕食掉大部分私车市场.<br>因为呼之即来, 挥之即去(就近自动找停车位). 不用担心停车, 维护问题. 每辆车的高频率使用也意味着单次出行的低成本.</p>
<h2 id="农业收割"><a href="#农业收割" class="headerlink" title="农业收割"></a>农业收割</h2><p>单机版AI+机器人, 可以完成非标准化的蔬果采摘工作.<br>提前训练好AI, 用来识别特定的水果, 以及采摘方式.<br>将此AI植入合适的机器人, 即可实现高效的自动农业收割.</p>
<p>当然, 都AI机器人了, 自然也是结合物联网上传采摘了多少果子之类的简单功能了.</p>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C语言知识巩固]]></title>
      <url>https://draapho.github.io/2017/05/17/1715-c/</url>
      <content type="html"><![CDATA[<h1 id="常数的数据类型"><a href="#常数的数据类型" class="headerlink" title="常数的数据类型"></a>常数的数据类型</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> 1234            <span class="comment">// default type, int</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> 123456l         <span class="comment">// long</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> 1234u           <span class="comment">// unsigned int</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> 123456ul        <span class="comment">// unsigned long</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> 123.4f          <span class="comment">// float</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> 1e-2f           <span class="comment">// float</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> 123.4           <span class="comment">// default type, double</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> 1e-2            <span class="comment">// default type, double</span></span></div></pre></td></tr></table></figure>
<h1 id="字符和字符串"><a href="#字符和字符串" class="headerlink" title="字符和字符串"></a>字符和字符串</h1><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#define X    'x'        // 直接使用字母, 会自动转换为ASCII编码</div><div class="line">#define CR   '\015'     // 八进制表示CR, 以\0开头</div><div class="line">#define CR   '\13'      // 十进制表示CR, 以\开头</div><div class="line">#define CR   '\x0D'     // 十六进制表示CR, 以\x开头</div><div class="line">#define CR   '\r'       // 特殊表示法</div><div class="line"></div><div class="line">// 字符串, 独立使用多个双引号, 也表示一串字符串</div><div class="line">char short_str[] = "hello," " world" "!";</div><div class="line">char long_str[] = "this is a very very long string,"</div><div class="line">                  "so you can set it in multi lines "</div><div class="line">                  "by this way"</div></pre></td></tr></table></figure>
<h1 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"># <span class="number">1.</span> == 和 != 优先级高于位操作符 &amp; | ^</div><div class="line"><span class="keyword">if</span> ((x &amp; MASK) == <span class="number">0</span>)        <span class="comment">// (x &amp; MASK) 括号不能省!</span></div><div class="line"><span class="keyword">if</span> ( x &amp; y == <span class="number">0</span>)            <span class="comment">// 含义为 x &amp; (y==0)</span></div><div class="line"></div><div class="line"># <span class="number">2.</span> 赋值运算符优先级最低 (只比逗号高一级别)</div><div class="line"><span class="keyword">if</span> ((c = getchar()) != EOF) <span class="comment">// c获得输入值, 然后判断是否是结束符</span></div><div class="line"><span class="keyword">if</span> (c = getchar() != EOF)   <span class="comment">// 含义为 c = (getchar() != EOF), 所以c的赋值为 TRUE 或者 FALSE</span></div><div class="line"></div><div class="line"># <span class="number">3.</span> &amp;&amp; 的优先级 高于 ||</div><div class="line"><span class="keyword">if</span> ((cond1 || cond2) &amp;&amp; cond3)  <span class="comment">// 先或再与</span></div><div class="line"><span class="keyword">if</span> (cond1 || cond2 &amp;&amp; cond3)    <span class="comment">// 含义为 cond1 || (cond2 &amp;&amp; cond3)</span></div><div class="line"></div><div class="line"># <span class="number">4.</span> 算数运算优先级高于位移运算</div><div class="line">(msb &lt;&lt; <span class="number">4</span>) + lsb            <span class="comment">// 先位移, 再做加法</span></div><div class="line">msb &lt;&lt; <span class="number">4</span> + lsb              <span class="comment">// 含义为 msb &lt;&lt; (4 + lsb)</span></div><div class="line"></div><div class="line"># <span class="number">5.</span> 先-&gt;/./&amp;, 然后++/--, 最后 *,</div><div class="line">++p-&gt;len                    <span class="comment">// ++(p-&gt;len), len值++</span></div><div class="line">p-&gt;len++                    <span class="comment">// (p-&gt;len)++, len值++</span></div><div class="line">(++p)-&gt;len                  <span class="comment">// 先加p的值, 然后取len值</span></div><div class="line">p++-&gt;len                    <span class="comment">// (p++)-&gt;len 先加p的值, 然后取len值</span></div><div class="line">p-&gt;++len                    <span class="comment">// p-&gt;(++len) 语法错误, 不知道len是什么!</span></div><div class="line"></div><div class="line">++*p                        <span class="comment">// ++(*p), 内容++</span></div><div class="line">(*p)++                      <span class="comment">// 内容++</span></div><div class="line">*p++                        <span class="comment">// *(p++), 地址++, 然后取内容</span></div><div class="line"></div><div class="line">++*p-&gt;str                   <span class="comment">// ++(*p-&gt;str). str指向的内容++</span></div><div class="line">(*p-&gt;str)++                 <span class="comment">// str指向的内容++</span></div><div class="line">*p-&gt;str++                   <span class="comment">// *(p-&gt;str), (p-&gt;str)++. 取出str的内容, 然后str地址++</span></div><div class="line">*p++-&gt;str                   <span class="comment">// *p-&gt;str, p++. 取出str的内容, 然后p++</span></div><div class="line">*++p-&gt;str                   <span class="comment">// *(++p-&gt;str). str地址++, 然后取str的内容</span></div><div class="line">*p-&gt;++str                   <span class="comment">// *p-&gt;(++str) 语法错误, 不知道str是什么!</span></div><div class="line"></div><div class="line">++*p.len                    <span class="comment">// ++*(p.len), 多数情况下p是指针, 因此语法错误</span></div><div class="line">++(*p).len                  <span class="comment">// ++(p-&gt;len), str值++</span></div><div class="line">(*p++).len                  <span class="comment">// p++-&gt;len, p地址++, 然后取str值</span></div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>优先级</th>
<th>运算符</th>
<th>说明</th>
<th>结合方向</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>后置 <code>++</code> <code>--</code></td>
<td>自增++ 自减–</td>
<td>左到右</td>
</tr>
<tr>
<td>　　</td>
<td><code>[]</code></td>
<td>数组下标</td>
<td></td>
</tr>
<tr>
<td></td>
<td><code>()</code></td>
<td>（表达式）/函数名(形参表)</td>
<td></td>
</tr>
<tr>
<td></td>
<td><code>.</code></td>
<td>对象.成员名</td>
<td></td>
</tr>
<tr>
<td>　</td>
<td><code>-&gt;</code></td>
<td>对象指针-&gt;成员名</td>
<td>　</td>
</tr>
<tr>
<td>2</td>
<td><code>-</code></td>
<td>负号</td>
<td>右到左</td>
</tr>
<tr>
<td></td>
<td><code>(类型)</code></td>
<td>强制类型转换</td>
<td></td>
</tr>
<tr>
<td></td>
<td><code>++</code> <code>--</code> 前置</td>
<td>++自增 –自减</td>
<td></td>
</tr>
<tr>
<td></td>
<td><code>*</code></td>
<td>*指针表达式</td>
<td></td>
</tr>
<tr>
<td></td>
<td><code>&amp;</code></td>
<td>&amp;左值表达式</td>
<td></td>
</tr>
<tr>
<td></td>
<td><code>!</code></td>
<td>!表达式</td>
<td></td>
</tr>
<tr>
<td></td>
<td><code>~</code></td>
<td>~表达式</td>
<td></td>
</tr>
<tr>
<td></td>
<td><code>sizeof</code></td>
<td>sizeof 表达式/sizeof(类型)</td>
<td></td>
</tr>
<tr>
<td>　3</td>
<td><code>*</code> <code>/</code> <code>%</code></td>
<td>乘 除 取余</td>
<td>左到右</td>
</tr>
<tr>
<td>4</td>
<td><code>+</code> <code>-</code></td>
<td>加 减</td>
<td>左到右</td>
</tr>
<tr>
<td>5</td>
<td><code>&lt;&lt;</code> <code>&gt;&gt;</code></td>
<td>左移 右移</td>
<td>左到右</td>
</tr>
<tr>
<td>6</td>
<td><code>&gt;</code> <code>&gt;=</code> <code>&lt;</code> <code>&lt;=</code></td>
<td>大于(等于) 小于(等于)</td>
<td>左到右</td>
</tr>
<tr>
<td>7</td>
<td><code>==</code> <code>!=</code></td>
<td>等于 不等于</td>
<td>左到右</td>
</tr>
<tr>
<td>8</td>
<td><code>&amp;</code></td>
<td>按位与</td>
<td>左到右</td>
</tr>
<tr>
<td>9</td>
<td><code>^</code></td>
<td>按位异或</td>
<td>左到右</td>
</tr>
<tr>
<td>10</td>
<td><code>l</code> (竖杠)</td>
<td>按位或</td>
<td>左到右</td>
</tr>
<tr>
<td>11</td>
<td><code>&amp;&amp;</code></td>
<td>逻辑与</td>
<td>左到右</td>
</tr>
<tr>
<td>12</td>
<td><code>ll</code> (竖杠)</td>
<td>逻辑或</td>
<td>左到右</td>
</tr>
<tr>
<td>13</td>
<td><code>?:</code></td>
<td>表达式1? 表达式2: 表达式3</td>
<td>右到左</td>
</tr>
<tr>
<td>14</td>
<td><code>=</code> <code>/=</code> <code>*=</code> <code>%=</code> <code>+=</code> <code>-=</code></td>
<td>赋值运算符</td>
<td>右到左</td>
</tr>
<tr>
<td></td>
<td><code>&lt;&lt;=</code> <code>&gt;&gt;=</code> <code>&amp;=</code> <code>^=</code> <code>l=</code> (竖杠)</td>
<td>位赋值运算符</td>
<td></td>
</tr>
<tr>
<td>15</td>
<td><code>,</code></td>
<td>表达式,表达式,…</td>
<td>左到右</td>
</tr>
</tbody>
</table>
<h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 以 const 为例, volitale是一样的.</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span>;          <span class="comment">// int是const</span></div><div class="line"><span class="keyword">int</span> <span class="keyword">const</span>;          <span class="comment">// int是const</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span>*;        <span class="comment">// char是const</span></div><div class="line"><span class="keyword">char</span> <span class="keyword">const</span>*;        <span class="comment">// char是const</span></div><div class="line"><span class="keyword">char</span>* <span class="keyword">const</span>;        <span class="comment">// *(指针)是const</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span>;  <span class="comment">// char和*都是const</span></div><div class="line"><span class="keyword">char</span> <span class="keyword">const</span>* <span class="keyword">const</span>;  <span class="comment">//char和*都是const</span></div></pre></td></tr></table></figure>
<ul>
<li><code>register</code>, 建议编译器把该变量直接放到寄存器中, 而不是内存中. 以提高运算速度!<ul>
<li>注意, 只是<strong>建议</strong>, 因此编译器可以忽略这个关键字</li>
<li>变量必须是能被CPU寄存器接收的数据类型, 如 <code>int</code></li>
<li>现代编译器的优化效率很高, 因此 <code>register</code> 很少使用.</li>
<li><strong>还有一点</strong>. 譬如 <code>register int val;</code> 这时 <code>&amp;val</code> 会报错! 因为取的是内存地址, 而val是在寄存器内, 所以不存在内存地址!</li>
</ul>
</li>
<li><code>auto</code>, 老版本C用于声明这是一个局部变量(与<code>static</code>相反). 新版本用于声明一个自动类型的变量.<ul>
<li>这个关键字是真没人去用. 因为函数内默认就是局部变量.</li>
<li>习惯写C的人, 基本习惯了先选好一个数据类型.</li>
</ul>
</li>
</ul>
<h1 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// #, Stringfication! 将宏变量直接转变为字符串(加上双引号)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(v)        printf(#v <span class="meta-string">"=%x\n"</span>, v)</span></div><div class="line"></div><div class="line">debug(value);           <span class="comment">// 宏展开为 printf("value" "=%x\n", value)</span></div><div class="line">                        <span class="comment">// 若value值为0xFF, 执行结果就是打印出: value=0xFF</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// ##, Concatenator! 宏变量连接符, 多用于自动生成变量名</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CAT(x,y)        x##y</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LINK(a,b,c)     a##_##b##_##c</span></div><div class="line"></div><div class="line">CAT(var, <span class="number">12</span>);           <span class="comment">// 宏展开为 var12</span></div><div class="line">LINK(name,age,sex);     <span class="comment">// 宏展开为 name_age_sex</span></div><div class="line"></div><div class="line"><span class="comment">// __VA_ARGS__, 宏定义可变参数</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DRV_DEBUG 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> DRV_DEBUG</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> DRV_PRINT(fmt, ...) printf(fmt, __VA_ARGS__)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> DRV_PRINT(fmt, ...)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">// 编译器内置的宏定义:</span></div><div class="line">__LINE__                <span class="comment">// 在源代码中插入当前源代码行号；</span></div><div class="line">__FILE__                <span class="comment">// 在源文件中插入当前源文件名；</span></div><div class="line">__DATE__                <span class="comment">// 在源文件中插入当前的编译日期</span></div><div class="line">__TIME__                <span class="comment">// 在源文件中插入当前编译时间；</span></div><div class="line">__STDC__                <span class="comment">// 当要求程序严格遵循ANSI C标准时该标识被赋值为1；</span></div><div class="line">__cplusplus             <span class="comment">// 当编写C++程序时该标识符被定义。</span></div></pre></td></tr></table></figure>
<h1 id="typedef-的用法"><a href="#typedef-的用法" class="headerlink" title="typedef 的用法"></a>typedef 的用法</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 我习惯将所有typedef定义为形如 uint8_t, 即已 "_t" 结尾</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    <span class="keyword">int</span> y;</div><div class="line">&#125; <span class="keyword">point_t</span>;                          <span class="comment">// 数据结构</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*<span class="keyword">pfun_t</span>)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;    <span class="comment">// 函数</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> <span class="keyword">array80_t</span>[<span class="number">80</span>];         <span class="comment">// 数组</span></div></pre></td></tr></table></figure>
<h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> *name[] = &#123; <span class="string">"None"</span>, <span class="string">"Jan"</span>, <span class="string">"Feb"</span>, <span class="string">"Mar"</span> &#125;;     <span class="comment">// 指针数组 name</span></div><div class="line"><span class="keyword">int</span> *daytab[<span class="number">13</span>];    <span class="comment">// 指针数组 daytab</span></div><div class="line"><span class="keyword">int</span> (*daytab)[<span class="number">13</span>];  <span class="comment">// 数组指针 daytab, 譬如 int a[3][13], 则可以 p=a; p++后就指向了 &amp;a[1][0]</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> *<span class="title">f</span><span class="params">()</span></span>;           <span class="comment">// f 函数的返回值为指针类型</span></div><div class="line"><span class="keyword">int</span> (*pf)();        <span class="comment">// 函数指针 pf</span></div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这两个是极端复杂的例子, 实际代码建议先用 typedef 定义好一层, 然后再嵌套使用, 会容易理解的多!</span></div><div class="line"><span class="keyword">char</span> (*(*x[<span class="number">3</span>])())[<span class="number">5</span>];   <span class="comment">// x: array[3] of pointer to function returning pointer to array[5] of char</span></div><div class="line">                        <span class="comment">// x,一个指针数组, 这些指针指向函数, 函数的返回值是数组指针...</span></div><div class="line"><span class="keyword">char</span> (*(*x())[])();     <span class="comment">// x: function returning pointer to array[] of pointer to function returning char</span></div><div class="line">                        <span class="comment">// x,一个函数, 返回值为一个指针. 这个指针指向一个函数指针列表. 函数指针列表指向的函数是返回 char 类型的.</span></div><div class="line"></div><div class="line"><span class="comment">// 举个例子 -----&gt;</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">char</span> <span class="title">foo</span><span class="params">()</span>    </span>&#123; <span class="keyword">return</span> <span class="string">'a'</span>; &#125;</div><div class="line"><span class="function"><span class="keyword">char</span> <span class="title">bar</span><span class="params">()</span>    </span>&#123; <span class="keyword">return</span> <span class="string">'b'</span>; &#125;</div><div class="line"><span class="function"><span class="keyword">char</span> <span class="title">blurga</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">'c'</span>; &#125;</div><div class="line"><span class="function"><span class="keyword">char</span> <span class="title">bletch</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">'d'</span>; &#125;</div><div class="line"></div><div class="line"><span class="keyword">char</span> (*gfunclist[])() = &#123;foo, bar, blurga, bletch&#125;;</div><div class="line"></div><div class="line"><span class="keyword">char</span> (*(*x())[])()</div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="title">char</span> <span class="params">(*funclist[<span class="number">4</span>])</span><span class="params">()</span> </span>= &#123;foo, bar, blurga, bletch&#125;;</div><div class="line">    <span class="keyword">return</span> &amp;funclist;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>,gfunclist[<span class="number">0</span>]());</div><div class="line"></div><div class="line">    <span class="keyword">char</span> (*(*fs)[<span class="number">4</span>])();</div><div class="line">    fs = x();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>,(*fs)[<span class="number">1</span>]());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 更容易读懂的版本 -----&gt;</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">char</span> <span class="params">(*<span class="keyword">pfun_t</span>)</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">char</span> <span class="title">foo</span><span class="params">()</span>    </span>&#123; <span class="keyword">return</span> <span class="string">'a'</span>; &#125;</div><div class="line"><span class="function"><span class="keyword">char</span> <span class="title">bar</span><span class="params">()</span>    </span>&#123; <span class="keyword">return</span> <span class="string">'b'</span>; &#125;</div><div class="line"><span class="function"><span class="keyword">char</span> <span class="title">blurga</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">'c'</span>; &#125;</div><div class="line"><span class="function"><span class="keyword">char</span> <span class="title">bletch</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">'d'</span>; &#125;</div><div class="line"></div><div class="line"><span class="keyword">pfun_t</span> gfunclist[] = &#123;foo, bar, blurga, bletch&#125;;</div><div class="line"></div><div class="line"><span class="keyword">pfun_t</span>* x()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">pfun_t</span> funclist[<span class="number">4</span>] = &#123;foo, bar, blurga, bletch&#125;;</div><div class="line">    <span class="keyword">return</span> funclist;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>,gfunclist[<span class="number">0</span>]());</div><div class="line"></div><div class="line">    <span class="keyword">pfun_t</span> *fs;</div><div class="line">    fs = x();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>,fs[<span class="number">1</span>]());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="结构体和位域"><a href="#结构体和位域" class="headerlink" title="结构体和位域"></a>结构体和位域</h1><ul>
<li><code>Bit-fields</code> 位域, 一般不建议使用. 编译器相关且机器相关, 因此可移植性很差.</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">union</span> &#123;</div><div class="line">    <span class="keyword">int</span> is;</div><div class="line">    <span class="keyword">struct</span> &#123;</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> keyword : <span class="number">1</span>;</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="keyword">extern</span> : <span class="number">1</span>;</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="keyword">static</span> : <span class="number">1</span>;</div><div class="line">    &#125; flags;</div><div class="line">&#125; bit_union;</div></pre></td></tr></table></figure>
<h1 id="printf-及-scanf"><a href="#printf-及-scanf" class="headerlink" title="printf 及 scanf"></a>printf 及 scanf</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 打印任意字符串的安全方法</span></div><div class="line"><span class="built_in">printf</span>(s);                      <span class="comment">// FAILS if s contains %</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, s);                <span class="comment">// SAFE</span></div><div class="line"></div><div class="line"><span class="comment">// 调用可变参数的方法</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">minprintf</span><span class="params">(<span class="keyword">char</span> *fmt, ...)</span></span></div><div class="line">&#123;</div><div class="line">    va_list ap; <span class="comment">/* points to each unnamed arg in turn */</span></div><div class="line">    va_start(ap, fmt); <span class="comment">/* make ap point to 1st unnamed arg */</span></div><div class="line"></div><div class="line">    <span class="comment">// do something ...</span></div><div class="line">    ival = va_arg(ap, <span class="keyword">int</span>);</div><div class="line">    <span class="comment">// do something ...</span></div><div class="line"></div><div class="line">    va_end(ap);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 宏定义 printf</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DRV_PRINT(fmt, ...) printf(fmt, __VA_ARGS__)</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// scanf 避免溢出的方法</span></div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, buf);               <span class="comment">// 可能溢出!</span></div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%20s"</span>, buf);             <span class="comment">// 最多读取20个字符串</span></div><div class="line"></div><div class="line"><span class="comment">// 自己写个scanner.</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">scanner</span><span class="params">(<span class="keyword">char</span> *buffer, <span class="keyword">size_t</span> buflen)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> format[<span class="number">32</span>];</div><div class="line">    <span class="keyword">if</span> (buflen == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="built_in">snprintf</span>(format, <span class="keyword">sizeof</span>(format), <span class="string">"%%%ds"</span>, (<span class="keyword">int</span>)(buflen<span class="number">-1</span>));</div><div class="line">    <span class="keyword">return</span> <span class="built_in">scanf</span>(format, buffer);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://net.pku.edu.cn/~course/cs101/2008/resource/The_C_Programming_Language.pdf" target="_blank" rel="external">The C programming Language</a></li>
<li>[Cheat Sheets of the C standard library][<a href="http://ws3.ntcu.edu.tw/ACS099133/cheatsheet/c-libraries-cheatsheet.pdf" target="_blank" rel="external">http://ws3.ntcu.edu.tw/ACS099133/cheatsheet/c-libraries-cheatsheet.pdf</a>]</li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[逻辑|这样表达，事半功倍]]></title>
      <url>https://draapho.github.io/2017/05/04/1714-expression/</url>
      <content type="html"><![CDATA[<p><strong><em>转载自 <a href="http://www.jianshu.com/p/a2bcce138f48" target="_blank" rel="external">逻辑|这样表达，事半功倍（附训练方法）</a></em></strong></p>
<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>﻿表达是生活工作中最重要的沟通方式。<br>正式场合的表达，我们称为“演讲”、“汇报”、“发言”等；<br>休闲场合的表达，我们称为“闲聊”、“侃大山”、“吹牛”等。<br>总而言之，表达是我们传递信息、交流感情的重要技能。<br>那怎样的表达，能事半功倍呢？</p>
<h1 id="一段对话"><a href="#一段对话" class="headerlink" title="一段对话"></a>一段对话</h1><p>我们先来看这样的对话：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">老板：“年会准备得怎么样？”</div><div class="line">小美：“酒店我们定的XX大酒店，最近搞年会的多，只有那里时间价格都合适。</div><div class="line">我们让各个部门都出了节目，彩排了一次，删掉了几个唱歌的节目，剩下都是舞蹈、魔术、小品等。</div><div class="line">主持人还在筛选中，主持稿已经编好了。</div><div class="line">优秀员工的名单还没定好，有的部门经理还没交名单，不过奖品已经准备好了。</div><div class="line">会场的宣传品也买好了，因为是十周年，所以背景墙和装饰品都是十年为主。”</div></pre></td></tr></table></figure></p>
<p>听完小美的回答，你觉得老板的感受是什么？<br>老板清楚年会准备情况了吗？老板又怎么看待小美的能力呢？<br>在现实中，老板听完小美的回答，默默的走开，向另外一个员工询问情况去了。<br>这也就意味着，小美那么长的回答、那么详细的回答，其实都是无效的！</p>
<p>日常生活中，我们经常会有这样类似的表达，所以，我们总是感觉：“我说得这么清楚，对方却还是不明白、不会做、做不好，对方还是不明白我的苦心”。</p>
<p>对方的因素，我们暂不讨论，讨论也无用，我们改变不了别人。<br>我们尝试一下从自己的角度着手，也许，改变一下自己表达的逻辑，就能让对方接收到更多的信息和更正确的感情。</p>
<h1 id="一、神马是逻辑"><a href="#一、神马是逻辑" class="headerlink" title="一、神马是逻辑"></a>一、神马是逻辑</h1><p>如何把200ML的水装进100ML的杯子里呢？（不需要局限目前科学情况能不能做到，展开想象，因为这个例子是为了说明逻辑思考过程，而不是真的让您去装水，嘿嘿）<br>首先我们来分析来题目，正常情况我们都知道，把200ML的水倒入100ML的杯子里，水肯定会流出来，想要装进而不流出来，就要先想想，水会流出来的原因是什么？<br>第一、水太多了<br>第二、杯子容量太小了</p>
<p>还有第三吗？<br>还有一个动词叫“流出来”！所以，第三：地球有引力，多出来的水会流下来。<br>所以，思考这个题目就可以从这三方面着手：水、杯子、客观环境。</p>
<p>水，我们能改变什么呢？<br>形态！把200ML的水成冰柱放进杯子里可以吗？<br>杯子，我们能改变什么呢？<br>数量、材质！两个杯子可以放200ML的水吧！固定材质的杯子确实装不了200ML的水，如果是软性材质的杯子呢？比如类似气球材质的杯子。<br>客观环境，怎样使水不流出来呢？</p>
<p>我把200ML的水倒进一个200ML的量瓶里（或者海绵），把量瓶放进杯子可以吗？﻿我在没有引力的特殊空间里倒水可以吗？</p>
<p><img src="https://draapho.github.io/images/1714/water-analysis.jpg" alt="water-analysis.jpg"></p>
<p>这个案例告诉我们，<strong>任何事物都是分三个关键因素的：主体、客体、外部环境。</strong><br>这个案例的推导过程，便是传说中的“逻辑”：运用概念、判断、推理等思维类型反映事物本质与规律的认识过程。</p>
<p>比如，我走了很远的路，你就能推理出来，我腿软腿酸加口渴。这就是逻辑。<br>所以，我们的<strong>表达需要符合逻辑，才符合人类正常的判断、分析问题的思维过程。</strong></p>
<p>那么什么样的表达才叫“有逻辑”呢？</p>
<p><img src="https://draapho.github.io/images/1714/four-principle.jpg" alt="four-principle.jpg"></p>
<h1 id="二、结论先行"><a href="#二、结论先行" class="headerlink" title="二、结论先行"></a>二、结论先行</h1><p>为什么要结论先行？<br>因为人类的大脑，只能逐句理解我们表达的思想，大脑会默认，我们的前后句表达具有某种逻辑的关系。</p>
<p><strong>如果我们不预先告诉听众这种逻辑关系是什么，听众会非常吃力的去一句一句的去理解、去推导。</strong>在这个过程中，一旦听众的理解与我们的理解不一样，就会造成信息误差，这就是为什么别人做的事总是不符合我们的要求！</p>
<p>而且，如果我们的<strong>表达句式很长，或信息量很大，对方会由于逐句理解而产生疲劳</strong>，那我们表达的后半段，对听众而言，都是无效的。</p>
<p><img src="https://draapho.github.io/images/1714/pyramid-people.jpg" alt="pyramid-people.jpg"></p>
<p><strong>解决办法只有一个：结论先行！</strong></p>
<h2 id="举个栗子："><a href="#举个栗子：" class="headerlink" title="举个栗子："></a>举个栗子：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">上个星期，我去了我舅舅家。</div><div class="line">你知道吗，我舅舅家在很偏远的乡下。</div><div class="line">就是路边还有很老的电线杆，晚上开灯，灯还会忽亮忽暗的乡下。</div><div class="line">他们主要是种田为生，要么就出门打工，当然打工的人也就过年才回老家咯。</div><div class="line">我到他家里的时候，正好他们忙完农活，我想着他们忙完了应该回家休息或者做晚饭对吧，</div><div class="line">没想到啊，他们竟然聚集在一个修了洋房的村民家买彩票，</div><div class="line">没想到啊，乡下比城里更加盛行彩票...</div></pre></td></tr></table></figure>
<p>请问以上表达，中心思想是什么？你看完后，心累吗？<br>不好意思，主人，为了案情需要，编了这么长一段废话，为了让您感受到结论先行的突出优势，哈哈哈，不要打我~</p>
<p>怎样把上面的话，变成结论先行的表达呢？ 修改如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">原来乡下比城里更加盛行彩票！</div><div class="line">上个星期，我去了我舅舅家，他家在很偏远的乡下。</div><div class="line">我到他家里的时候，正好他们忙完农活，我想着他们忙完了应该回家休息或做晚饭对吧，</div><div class="line">没想到啊，他们竟然聚集在一个修了洋房的村民家买彩票...</div></pre></td></tr></table></figure>
<p>结论先行还有个好处就是督促自己少说废话。因为话是我们自己说出来的，我们都急于维护自己的观点，所以后面的解释，一般都是为了维护…</p>
<h2 id="否定的结论，记得先赞美对方！"><a href="#否定的结论，记得先赞美对方！" class="headerlink" title="否定的结论，记得先赞美对方！"></a><strong>否定的结论，记得先赞美对方！</strong></h2><h2 id="训练方法："><a href="#训练方法：" class="headerlink" title="训练方法："></a>训练方法：</h2><p>方法一、表达从这句开始：我想表达一个观点…（强迫自己从结论说起）<br>方法二、</p>
<pre><code>1. 自己围绕一个主题说一段话并且录音
2. 重听录音，找到结论
3. 从结论开始再说一次，并录音
4. 对比两段录音的效果，找到成就感。
</code></pre><h1 id="三、以上统下"><a href="#三、以上统下" class="headerlink" title="三、以上统下"></a>三、以上统下</h1><p>以上统下的意思是：所有的论据都要支撑论点，所有的原因都要支持结论。<br>翻译为人话就是：荤类下面没有南瓜，也不能把鸡腿放到素菜下面。<br>当我们做到了结论先行，后面的表达都要能支持这个结论。像上面的案例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">他们主要是种田为生，要么就出门打工，当然打工的人也就过年才回老家咯。</div></pre></td></tr></table></figure>
<p>这句话不能支持“乡下比城里更加盛行彩票”的结论，就应该删掉！<br>想要做到以上统下，可以向自己提问，“论据支持论点吗？”</p>
<h2 id="举个栗子：-1"><a href="#举个栗子：-1" class="headerlink" title="举个栗子："></a>举个栗子：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">我喜欢男神宋仲基，因为他帅，他眼神温柔，他脱衣有肉、穿衣显瘦（咽口水），</div><div class="line">都敏俊也很帅～</div></pre></td></tr></table></figure>
<p>那句话不能支持“我喜欢宋仲基”？<br>对，就是最后一句，都敏俊！</p>
<h2 id="训练方法：-1"><a href="#训练方法：-1" class="headerlink" title="训练方法："></a>训练方法：</h2><ol>
<li>自己围绕一个主题说一段话并且录音</li>
<li>重听录音，找到结论和论点、论据，并画成如上图一样的结构图</li>
<li>问自己“论据支持论点吗”</li>
<li>修改论点或者论据</li>
<li>按照修改后的结构图，再说一次并录音</li>
<li>对比两段录音的效果，找到成就感。</li>
</ol>
<h2 id="四、归类分组"><a href="#四、归类分组" class="headerlink" title="四、归类分组"></a>四、归类分组</h2><p>你现在正准备出去散步，你爱人说“顺便买点东西回来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">葡萄、牛奶、土豆、胡萝卜、鸡蛋、橘子、咸鸭蛋、苹果、酸奶</div></pre></td></tr></table></figure></p>
<p>你买回来什么？<br>如果换成这样呢？</p>
<p><img src="https://draapho.github.io/images/1714/buy-stuff.jpg" alt="buy-stuff.jpg"></p>
<p>有没有好记一些？<br><strong>人的大脑天生就会把相似的东西串在一起记忆、理解</strong>，这就是为什么英语背单词有词根记忆这码事。<br>我们不能违背人的天性，所以，在表达中，我们要把相似的论据放在一起，不同的论据进行分组呈现。<br>归类分组要注意<strong>不要重复！</strong></p>
<p>我经常会在工作总结中看到别人的总结如下：<br>成绩：业绩达成80%<br>不足：业绩只达成80%<br>这就是典型的分组有问题，80%的业绩到底是成绩还是不足？<br>一个论据只能在一个论点里！</p>
<h2 id="训练方法：-2"><a href="#训练方法：-2" class="headerlink" title="训练方法："></a>训练方法：</h2><ol>
<li>围绕主题罗列所以的论据</li>
<li>将论据分组</li>
<li>给每组找到一个中心思想，这个中心思想是该组每个论据的共同特质</li>
<li>检查结果“有没有遗漏”、“有没有重复”</li>
</ol>
<h1 id="五、逻辑递进"><a href="#五、逻辑递进" class="headerlink" title="五、逻辑递进"></a>五、逻辑递进</h1><p>逻辑递进就是按照某种推导方向，来全面的认知事物，翻译为人话叫：顺序！<br>常用的逻辑递进方式有：<br>时间（步骤）顺序：第一、第二、第三；<br>结构（空间）顺序：东南西北中，动作表情语言；<br>程度（重要性）顺序：最重要（核心）、次重要、第三重要……<br>演绎顺序：大前提、小前提、结论；</p>
<p>而我想着重强调的是，表达中最有效的顺序，应该是： <strong>以听众的利益/需求程度来排序</strong></p>
<h2 id="举个栗子：-2"><a href="#举个栗子：-2" class="headerlink" title="举个栗子："></a>举个栗子：</h2><p>我们银行需要跟餐饮商家合作，我们的工作人员交出以下合作方案：</p>
<ol>
<li>客户持卡消费享受88折</li>
<li>客户通过我们银行的APP购买商家优惠券80抵100元（类似团购APP消费模式）</li>
<li>客户到店消费满200元送乐扣水杯（水杯归我们银行出钱购买）</li>
</ol>
<p>这样的排序方式能打动商家吗？<br>商家需要什么？商家想要打折、想少收钱吗？<br>商家想要的是，你能帮我提高客单价，让我赚实实在在的钱！你能帮我吸引很多的客户入店，让我赚实实在在的钱！</p>
<p>所以，最好的排序方式应该是：</p>
<ol>
<li>客户到店消费满200元送乐扣水杯（提高了客单价，还不用商家出钱）</li>
<li>APP购买优惠券80抵100（虽然少赚点钱，但是能吸引客户从店外入店消费）</li>
<li>客户持卡消费88折（已经到店吃完了的客户，多么不想打折）</li>
</ol>
<h2 id="训练方法：-3"><a href="#训练方法：-3" class="headerlink" title="训练方法："></a>训练方法：</h2><ol>
<li>自己围绕一个主题说一段话并且录音</li>
<li>重听录音，找到结论和论点、论据，并画成结构图</li>
<li>写下听众的需求和利益点</li>
<li>按照需求程度将论据重新排序</li>
<li>按照修改后的结构图，再说一次并录音</li>
<li>对比两段录音的效果，找到成就感。</li>
</ol>
<h1 id="六、终极栗子"><a href="#六、终极栗子" class="headerlink" title="六、终极栗子"></a>六、终极栗子</h1><p>你马上要参加技术总监岗位的竞聘，以下是你多年来的工作业绩，请问你怎么表达？<br>工作业绩总结：2010年至2016年，参与了10个项目</p>
<ul>
<li>项目1： 担任技术负责人，保证多个项目如期完成      </li>
<li>项目2： 克服人员经验不足的困难，开展岗位培训      </li>
<li>项目3： 辅助技术攻关，解决重大难点      </li>
<li>项目4： 在公司流程基础上，制定新的公司管理流程和规范      </li>
<li>项目5： 为方便员工学习及知识传承，建立领域知识库      </li>
<li>项目6： 主持项目实施研讨，制定项目实施规范      </li>
<li>项目7： 作为导师，带教3位新员工</li>
<li>项目8： 制作全套岗位课件（10个PPT），并授课</li>
<li>项目9： 负责梦里花大型项目技术担当，并作出突出贡献</li>
<li>项目10： 组织技术部人员与华为技术部人员学习沟通，提供人员综合能力</li>
</ul>
<p>试着自己画结构图，表达一下，再看答案欧～<br><img src="https://draapho.github.io/images/1714/work-performance.jpg" alt="work-performance.jpg"></p>
<h1 id="彩蛋：表达生动三大宝"><a href="#彩蛋：表达生动三大宝" class="headerlink" title="彩蛋：表达生动三大宝"></a>彩蛋：表达生动三大宝</h1><p>这部分属于彩蛋，跟逻辑没关系，跟表达有关系。<br>很多人的表达干巴巴的，没有说服力，怎么办呢？<br><strong>表达生动三大宝：数据、案例、对比</strong></p>
<h2 id="举个栗子：-3"><a href="#举个栗子：-3" class="headerlink" title="举个栗子："></a>举个栗子：</h2><p>“这块我很熟练”<br>这句话听上去是不是很没有说服力？<br>加个数据：“我有三年的工作经验”、“我处理过上百起这类业务”<br>加个案例“之前XX公司他们的那个XX项目，听说过吗，就是我做的”<br>加个对比“之前我们领导对这块很不满意，我接手一年以后，这块业务直接成了公司的重点发展项目！”<br>怎么样，是不是听上去更值得相信？</p>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>还记得文章开头的案例吗？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">老板：年会准备得怎么样？</div><div class="line">小美的同事，我，这样回答：</div><div class="line">    其他准备工作都已经完成，只差敲定主持人跟优秀员工名单了（结论先行）。</div><div class="line">    会场（论点A）定的XX大酒店，</div><div class="line">    XX大酒店时间与价格都合适（论据A1），</div><div class="line">    会场装饰道具都已经采购好，全是以十周年为主题（论据A2），</div><div class="line">    节目这块（论点B）已经彩排了一次，</div><div class="line">    择优录取了十个节目，都是舞蹈、魔术、小品等（论据B1），</div><div class="line">    主持人还在筛选中，主持稿已经编好了（论据B2），</div><div class="line">    颁奖的优秀员工的名单还没定好，因为有的部门经理还没交名单，不过奖品已经准备好了（论据B3）。</div><div class="line">    您放心，肯定能按时完成准备工作，您要是能帮忙催下部门经理就好了，我们催得他们都烦了。</div><div class="line">老板：行，优秀员工的事我去催一下！</div></pre></td></tr></table></figure></p>
<p><img src="https://draapho.github.io/images/1714/annual-meeting.jpg" alt="annual-meeting.jpg"></p>
<p><strong>表达：一定要让对方好理解、好接受为原则，一定要以对方的利益为出发点！</strong><br>注：本文逻辑结构来源于《金字塔原理》书中金字塔结构～</p>
<hr>
<p><strong><em>转载自 <a href="http://www.jianshu.com/p/a2bcce138f48" target="_blank" rel="external">逻辑|这样表达，事半功倍（附训练方法）</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[BLE基础概念]]></title>
      <url>https://draapho.github.io/2017/04/19/1713-ble/</url>
      <content type="html"><![CDATA[<h1 id="ble-架构"><a href="#ble-架构" class="headerlink" title="ble 架构"></a>ble 架构</h1><p><img src="https://draapho.github.io/images/1713/ble-architecture.jpg" alt="ble architecture"></p>
<ul>
<li>PHY, Physical Layer:<br>物理层, 控制无线电信号的收发</li>
<li>LL, Link Layer:<br>链路层, 定义数据包结构, 包括状态信息和收发控制, 以及链路层的加密</li>
<li>HCI, Host-Controller Interface:<br>通过此标准接口, Host层和Controller层进行通讯</li>
<li>L2CAP, Logical Link Control and Adaptation Protocol. 可以理解为一个协议多路复用和分配器(功能上类似于TCPIP的端口).<br><strong>一般而言, BLE应用层开发者无需了解L2CAP层的细节</strong></li>
<li>ATT, Attribute Protocol:<br>该协议将单一的数值(信息)以Attribute(属性)的形式抽象出来，并提供一些方法，供远端设备读取和修改</li>
<li>GATT, Generic Attribute Protocol:<br>基于ATT提供的数值, 将有用的数值组打包好, 已服务(service)的方式开放给上层应用. 它相当于提供一套数据打包框架/规则.</li>
<li>GAP, Generic Access Profile:<br>通用访问服务, 是对LL层的广播,监听,建立连接功能的抽象, 便于开发人员来理解和开发</li>
<li>SM, Security Manager<br>负责BLE通信中有关安全的内容.</li>
</ul>
<h1 id="Physical-Layer"><a href="#Physical-Layer" class="headerlink" title="Physical Layer"></a>Physical Layer</h1><p>物理层, 控制无线电信号的收发</p>
<p><img src="https://draapho.github.io/images/1713/ble-channel.png" alt="ble channel"><br>一图胜千言. 如图所示:</p>
<ul>
<li>BLE占用的频段为 2402Mhz-2480Mhz, 划分为40个Channel(频道), 每个频段2Mhz</li>
<li>3个广播频段被放在了干扰冲突最少的频段, 并被命名为 37,38,39 频道</li>
<li>其余的频段用作数据通讯, 并会采用调频技术来避免干扰和冲突.</li>
<li>BLE和wifi的重合频段还是比较严重的! 和 wifi 的 1,6,11 三个频道完全重合.</li>
</ul>
<h1 id="Link-Layer"><a href="#Link-Layer" class="headerlink" title="Link Layer"></a>Link Layer</h1><p>链路层, 定义数据包结构, 包括状态信息和收发控制, 以及链路层的加密</p>
<p>Link Layer 链路层有5个基本状态:</p>
<ul>
<li>Standby: 睡觉省电.</li>
<li>Advertising: 广播模式, 周期性地发送数据, 使用的是 37-39的广播频道</li>
<li>Scanning: 扫描模式, 扫描/接收广播数据；</li>
<li>Initiating: 连接发起方，扫描带有“可连接”标志的广播数据,一旦发现,则发起连接请求.</li>
<li>Connection: 建立点对点的通讯模式, 此后就开始使用 0-36频道开始通讯了!</li>
</ul>
<p>设备的几种角色</p>
<ul>
<li>Advertiser: 广播者, 处于 Advertising 模式即广播者</li>
<li>Scanner: 扫描者, 处于 Scanning 模式即扫描者</li>
<li>Initiator: 扫描者, 处于 Initiating 模式的扫描, 用于准备建立连接</li>
<li>Slave: 建立通讯后 (Connection 模式), 之前的广播者就变成了Slave从机</li>
<li>Master: 建立通讯后 (Connection 模式), 之前的扫描者/发起者就变成了Master主机</li>
<li>混合模式: 一个设备可以同时是 Advertiser &amp; Scanner 或者 Advertiser &amp; Master 等等. 但需要供应商的软件支持!</li>
</ul>
<p><strong>关于蓝牙设备的角色名称问题, 无力吐槽, 各个分层都有一套自己的术语, 看的时候注意其对应的架构层次再来理解</strong></p>
<h2 id="Advertisement"><a href="#Advertisement" class="headerlink" title="Advertisement"></a>Advertisement</h2><table>
<thead>
<tr>
<th>参数</th>
<th>数值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Advertisement interval</td>
<td>20 ms to 10240 ms</td>
<td>定义广播时间间隔</td>
</tr>
<tr>
<td>Advertisement channels</td>
<td>CH37-CH39</td>
<td>默认值, 不可修改. BLE5新增了第二广播频道</td>
</tr>
<tr>
<td>Discoverability mode</td>
<td>ADV_IND</td>
<td>可被连接的广播</td>
</tr>
<tr>
<td></td>
<td>ADV_DIRECT_IND</td>
<td>可被连接的定向广播</td>
</tr>
<tr>
<td></td>
<td>ADV_NONCONN_IND</td>
<td>不可连接的广播</td>
</tr>
<tr>
<td></td>
<td>ADV_SCAN_IND</td>
<td>可接受SCAN_REQ请求的广播数据</td>
</tr>
</tbody>
</table>
<h2 id="Scanning"><a href="#Scanning" class="headerlink" title="Scanning"></a>Scanning</h2><table>
<thead>
<tr>
<th>参数</th>
<th>数值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Scan interval</td>
<td>2.5 ms to 10240 ms</td>
<td>定义扫描时间间隔</td>
</tr>
<tr>
<td>Scan window</td>
<td>2.5 ms to 10240 ms</td>
<td>定义扫描时间窗口</td>
</tr>
<tr>
<td>Scan mode</td>
<td>Active / Passive</td>
<td>主动扫描(会发送Scan Request)</td>
</tr>
</tbody>
</table>
<p>上图:<br><img src="https://draapho.github.io/images/1713/ble-scan.PNG" alt="ble scan"></p>
<h2 id="Connections"><a href="#Connections" class="headerlink" title="Connections"></a>Connections</h2><ul>
<li>建立通讯后, 设备的角色被分为 Master 和 Slave</li>
<li>发起建立通讯的设备, 即 Initiating 状态的扫描者, 为 Master</li>
<li>之前在广播状态的设备, 即 Advertising 状态的广播者, 为 Slave</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>数值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Minimum Connection Interval</td>
<td>7.5 ms</td>
<td>允许的最小连接间隔</td>
</tr>
<tr>
<td>Maximum Connection Interval</td>
<td>4000 ms</td>
<td>允许的最大连接间隔</td>
</tr>
<tr>
<td>Connection (slave) latency</td>
<td>0 to 500</td>
<td>Slaver允许的延迟次数</td>
</tr>
<tr>
<td>Supervision timeout</td>
<td>100 ms to 32000 ms</td>
<td>设置一个失败超时时间</td>
</tr>
</tbody>
</table>
<p>对于 <code>Connection latency</code>, 就是Master会持续发送多个数据包来等待Slaver的回应.</p>
<p>BLE点对点连接的数据交换示意图, 也同时说明了频道的变化:<br><img src="https://draapho.github.io/images/1713/ble-connect.png" alt="ble connect.png"></p>
<h1 id="GAP"><a href="#GAP" class="headerlink" title="GAP"></a>GAP</h1><p>通用访问服务, 是对LL层的广播,监听,建立连接功能的抽象, 便于开发人员来理解和开发</p>
<p>GAP的主要作用:</p>
<ul>
<li>Broadcast mode and observation procedure，实现单向的、无连接的通信方式；</li>
<li>Discovery modes and procedures，实现蓝牙设备的发现操作；</li>
<li>Connection modes and procedures，实现蓝牙设备的连接操作；</li>
<li>Bonding modes and procedures，实现蓝牙设备的配对操作.</li>
</ul>
<p>GAP层的蓝牙设备角色:</p>
<ul>
<li>Broadcaster Role，设备正在发送广播；</li>
<li>Observer Role，设备正在扫描广播；</li>
<li>Peripheral Role， 对应Link Layer的slave角色, 可广播和被连接</li>
<li>Central Role，对应Link Layer的master角色, 扫描和发起连接的一方</li>
</ul>
<p><strong>关于蓝牙设备的角色名称问题, 无力吐槽, 各个分层都有一套自己的术语, 看的时候注意其对应的架构层次再来理解</strong></p>
<h1 id="ATT"><a href="#ATT" class="headerlink" title="ATT"></a>ATT</h1><p>该协议将单一的数值(信息)以Attribute(属性)的形式抽象出来，并提供一些方法，供远端设备读取和修改</p>
<p>一个Attribute由Attribute Type、Attribute Handle和Attribute Value组成</p>
<ul>
<li>Attribute Type用于标示Attribute的类型, 譬如温度/湿度等.<br>Attribute Type使用 <code>UUID</code> (Universally Unique IDentifier)区分, 有 16-bit, 32-bit, 128-bit</li>
<li>Attribute Handle是一个16-bit的数值, 简称 <code>Handle</code>. 用作唯一识别Attribute server上的所有Attribute<br>Attribute Handle可理解为Attribute的地址, 有如下意义：<ul>
<li>一个server上可能存在多个相同类型的Attribute, 显然, client有区分这些Attribute的需要</li>
<li>同一类型的多个Attribute, 可以组成一个Group, client可以通过这个Group中的起, 始handle访问所有的Attributes</li>
</ul>
</li>
<li>Attribute Value代表Attribute的值，可以是任何固定长度或者可变长度的octet array （理解为字节类型的数组即可）。</li>
<li>Attribute Permission代表Attribute的权限. 是否可读写, 是否加密等等.</li>
</ul>
<p>ATT设备角色, 采用client-server的形式.</p>
<ul>
<li>Server: 提供信息(即Attribute)的一方为服务方, 一般是传感器节点 (大多数情况是Advertiser / Slaver / Peripheral)</li>
<li>Client: 访问信息(即Attribute)的一方为客户端, 一般是手机等终端 (大多数情况是Scanner / Master / Central)</li>
</ul>
<p><strong>关于蓝牙设备的角色名称问题, 无力吐槽, 各个分层都有一套自己的术语, 看的时候注意其对应的架构层次再来理解</strong></p>
<h1 id="GATT"><a href="#GATT" class="headerlink" title="GATT"></a>GATT</h1><p>基于ATT提供的数值, 将有用的数值组打包好, 已服务(service)的方式开放给上层应用. 它相当于提供一套数据打包框架/规则.</p>
<p>看框架图:<br><img src="https://draapho.github.io/images/1713/ble-gatt1.png" alt="ble gatt.png"><br><img src="https://draapho.github.io/images/1713/ble-gatt.gif" alt="ble gatt.gif"></p>
<p>GATT profile的层次结构依次是： Profile—&gt;Service—&gt;characteristic</p>
<ul>
<li><code>Profile</code> 是基于GATT所派生出的真正的Profile， 由一个或者多个和某一应用场景有关的 <code>Service</code> 组成</li>
<li><code>Service</code> 包含一个或者多个 <code>Characteristic</code>, 也可以通过Include的方式, 包含其它 <code>Service</code></li>
<li><code>Characteristic</code> 则是GATT profile中最基本的数据单位, 由一个 <code>Properties / Declaration</code>, 一个 <code>Value</code>, 一个或者多个<code>Descriptor</code>组成</li>
<li><code>Characteristic Properties / Declaration</code> 定义了characteristic的Value如何被使用，以及characteristic的Descriptor如何被访问。</li>
<li><code>Characteristic Value</code> 是特征的实际值，例如一个温度特征，其Characteristic Value就是温度值就。</li>
<li><code>Characteristic Descriptor</code> 则保存了一些和Characteristic Value相关的信息</li>
</ul>
<p>UUID 的分配</p>
<ul>
<li><a href="https://www.bluetooth.com/specifications/gatt/services" target="_blank" rel="external">GATT Services 官方标准</a></li>
<li><a href="https://www.bluetooth.com/specifications/gatt/characteristics" target="_blank" rel="external">GATT Characteristics 官方标准</a></li>
<li><a href="http://www.itu.int/en/ITU-T/asn1/Pages/UUID/uuids.aspx" target="_blank" rel="external">UUID Generation UUID 生成器</a></li>
</ul>
<h1 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h1><p>负责BLE通信中有关安全的内容.</p>
<p>主要技术有:</p>
<ul>
<li>配对, pairing</li>
<li>认证, authentication</li>
<li>加密, encryption</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://www.silabs.com/documents/login/user-guides/ug103-14-fundamentals-ble.pdf" target="_blank" rel="external">UG103.14: Application Development Fundamentals: Bluetooth® Smart Technology</a></li>
<li><a href="http://www.wowotech.net/bluetooth/bt_overview.html" target="_blank" rel="external">蓝牙协议分析(1)_基本概念</a>,<br>简单介绍了标准蓝牙和低功耗蓝牙. 正如作者所说, 蓝牙的架构设计很不”美”, 给人一种拆拆补补, 各自为政的感觉. 但不可否认, 商业上, 蓝牙是成功的!</li>
<li><a href="http://www.wowotech.net/bluetooth/bt_protocol_arch.html" target="_blank" rel="external">蓝牙协议分析(2)_协议架构</a><br>从全局概念介绍了蓝牙架构的设计, 并对各个分层进行了简单的介绍.</li>
<li><a href="http://www.wowotech.net/bluetooth/ble_stack_overview.html" target="_blank" rel="external">蓝牙协议分析(3)_蓝牙低功耗(BLE)协议栈介绍</a><br>对快速理解低功耗蓝牙(BLE) 非常有帮助! 也是从架构说起, 逐步深入细节的叙事风格</li>
<li><a href="http://www.wowotech.net/bluetooth/ipv6_over_ble_intro.html" target="_blank" rel="external">蓝牙协议分析(4)_IPv6 Over BLE介绍</a><br>说明了加入IPv6协议的重大意义. 物联网大势所趋, 而IPv6必将成为数据传输的最终标准! (Zigbee也支持了IPv6, Thread天生就采用6LowPAN协议)</li>
<li><a href="http://www.wowotech.net/bluetooth/ble_broadcast.html" target="_blank" rel="external">蓝牙协议分析(5)_BLE广播通信相关的技术分析</a></li>
<li><a href="http://www.wowotech.net/bluetooth/ble_address_type.html" target="_blank" rel="external">蓝牙协议分析(6)_BLE地址类型</a></li>
<li><a href="http://www.wowotech.net/bluetooth/ble_connection.html" target="_blank" rel="external">蓝牙协议分析(7)_BLE连接有关的技术分析</a></li>
<li><a href="http://www.wowotech.net/bluetooth/ble_white_list.html" target="_blank" rel="external">蓝牙协议分析(8)_BLE安全机制之白名单</a></li>
<li><a href="http://www.wowotech.net/bluetooth/ble_ll_privacy.html" target="_blank" rel="external">蓝牙协议分析(9)_BLE安全机制之LL Privacy</a></li>
<li><a href="http://www.wowotech.net/bluetooth/le_encryption.html" target="_blank" rel="external">蓝牙协议分析(10)_BLE安全机制之LE Encryption</a><br>渐渐就由浅入深, 探讨技术细节了.</li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ezos简要用户手册]]></title>
      <url>https://draapho.github.io/2017/04/10/1712-ezos/</url>
      <content type="html"><![CDATA[<h1 id="ezos开发历史"><a href="#ezos开发历史" class="headerlink" title="ezos开发历史"></a>ezos开发历史</h1><p>ezos最早的思想起源于TCS德国的带有任务性质的超循环方式(前后台方式), 为使用方便, 作者将增减任务的方式直接和函数名相关, 加入延时功能.<br>并写了核心代码 ezos_schedule();  ezos_add(); ezos_delete();  ezos_delay(); 这样一个外表酷似RTOS, 内核为超循环任务的OS就诞生了, 版本V1.0.0.<br>由于使用起来非常方便, 代码为纯C语言, 简单易懂, 因此命名为 ezos, 即easy OS.</p>
<p>后续由 TCS 胡工加入了任务参数, 静态任务, 可实例化任务的概念.<br>整合这些概念后, 重写了部分代码, 将ezos的版本升级至较为实用的V1.3.1.在这个阶段, 使用ezos做了功能较为复杂的项目, 并发现一些任务通讯和同步的问题,<br>在借鉴了抢占式RTOS的一些特性后, 决心重写ezos, 将其变为真正的协作式RTOS. 同时要求代码依旧清晰简洁, 可适用于资源较少的8位单片机应用.</p>
<p>基于以上想法, 将ezos的提升到了V2开始的主版本. 将代码改为linux书写规范, 进化为协作式OS, 支持254级优先级. 使用了链表, 重写所有系统函数.<br>还有, 非常重要的是, 增加了任务间的通讯方式, 支持信号量, 互斥量, 事件, 邮箱, 消息队列.
 </p>
<h1 id="ezos-原理介绍"><a href="#ezos-原理介绍" class="headerlink" title="ezos 原理介绍"></a>ezos 原理介绍</h1><p>ezos是协作式的操作系统, 即支持优先级, 支持任务间通讯. 但任务的轮询调度不是抢占式的, 而必须由任务自己放弃CPU的控制权.<br>即当有一更高优先级的任务需要运行时, ezos并不会马上剥夺现有任务CPU的控制权, 必须等待现有任务自己放弃CPU的控制权, 更高优先级的任务才会被运行.</p>
<p>一个软件系统是否需要使用操作系统, 操作系统的好坏, 个人明确强调, 没有最好只有最合适!<br>这是嵌入式行业的原则之一, 如果有最好最合适的, 那就成了通用的PC行业软件开发, 而非嵌入式软件开发了.</p>
<p>对于软件功能非常简单的嵌入式系统, 前后台/超循环模式可能就是最好的! 资源开销小, 代码直观, 易于调试.<br>对于有一定复杂度的嵌入式系统, 就需要使用操作系统了, 否则软件会变得难以开发, 难以理解和阅读, 难以维护和升级……<br>对于一般复杂度的嵌入式软件, 使用协作式的操作系统是个不错的选择, 相对于抢占式的操作系统, 其缺点为响应时间较慢(但并非不可控制). 优点为系统代码和占用资源很小, 任务流程容易预测, 便于调试和开发.<br>抢占式操作系统的一个最大特点是: 任务随时随地都可能被优先级更高的任务剥夺运行权, 因此也就需要程序员充分考虑任务的原子性要求, 但这是需要培训和经验积累的.<br>问题的严重性更在于, 此类问题很难跟踪调试, 容易让产品是不稳定的. 因此使用协作式的操作系统, 对程序员的要求较低, 也更易于开发出稳定可靠的产品.</p>
<h2 id="ezos的任务数据"><a href="#ezos的任务数据" class="headerlink" title="ezos的任务数据"></a>ezos的任务数据</h2><p>ezos的任务数据存放在 ezos_task_t task_link[__EZOS_TASK_NUM];<br>ezos内置一个idle任务数据, 取名idle, 优先级最低, 为255. 可以简单理解为它是任务数据的表头.<br>当调用ezos_add(), ezos_delete()时, 会自行分配或释放此数据空间.</p>
<h2 id="任务链表和回收链表"><a href="#任务链表和回收链表" class="headerlink" title="任务链表和回收链表"></a>任务链表和回收链表</h2><p>ezos核心思想是两组单向链表: <code>任务链表</code> 和 <code>回收链表</code></p>
<ul>
<li><code>任务链表</code>为单向循环链表, 链表起始节点存放着系统空闲任务.<br>后面的节点按照任务优先级的先后顺序进行排序.<br>对于同优先级的任务, 任务添加或任务改变自身状态时, 会将该任务节点放到同优先级链表节点的末尾.<br>因此, 任务链表从idle往后, 一定是按照优先级顺序排列好的!</li>
</ul>
<p>举例来说, 任务列表如下: 优先级1 -&gt; 优先级3 -&gt; 优先级3 -&gt; 优先级10 -&gt; 优先级11 -&gt; idle(255)<br>则ezos 会按照顺序依次查询任务列表中任务的状态. 更根据状态确定是执行任务还是跳过任务.<br>上表中, 如果新增一个优先级为2的任务, 则此任务会被放在优先级1和优先级3之间.<br>如果新增一个优先级为3的任务, 则此任务会被放在优先级10之前.<br>另外, 如果第一个优先级3的任务运行过后, 也会被放在优先级10之前, 以便让同优先级的其它任务运行.</p>
<ul>
<li><code>回收链表</code>为单向非循环链表, 被删除的任务节点放到到回收链表中.<br>而被添加的任务节点从回收链表取出并分配到任务链表中.</li>
</ul>
<h2 id="ezos的任务状态"><a href="#ezos的任务状态" class="headerlink" title="ezos的任务状态:"></a>ezos的任务状态:</h2><p>源码见 <a href="https://github.com/draapho/ezos" target="_blank" rel="external">github-ezos</a></p>
<ol>
<li>任务删除状态(EZOS_DELETE), 即终止状态. 任务不在任务链表中, 不会运行.</li>
<li>任务阻塞状态(EZOS_SUSPEND), 任务已在任务链表中, 但被阻塞, 不会被运行. 任务延时也属于阻塞状态.</li>
<li>任务就绪状态(EZOS_READY), 任务已在任务队列中, 可以运行, 但未必正在运行.</li>
<li>任务运行状态(EZOS_RUNNING), 任务已在任务列表中, 并正在运行.</li>
</ol>
<h2 id="ezos任务调度"><a href="#ezos任务调度" class="headerlink" title="ezos任务调度"></a>ezos任务调度</h2><p>借助于ezos任务链表的良好设计, ezos任务调度非常简单, 每次都是从头开始寻找处于就绪态的任务,运行完某个任务后就从头重新开始搜寻.<br>由于任务链表是按照优先级顺序排序的,这样就实现了高优先级任务的快速响应. 而同优先级任务则是轮询处理的.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ezos_schedule</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        task = idle.next;</div><div class="line"><span class="comment">// 寻找就绪的任务</span></div><div class="line">        <span class="keyword">while</span> (task-&gt;status != EZOS_READY)  task = task-&gt;next;</div><div class="line">        run = task;</div><div class="line">        run-&gt;status = EZOS_RUNNING;</div><div class="line">        ezos_enable_int(mask);</div><div class="line"><span class="comment">// 运行任务函数</span></div><div class="line">        task-&gt;pfun(&amp;task-&gt;state, &amp;task-&gt;para);</div><div class="line">        mask = ezos_disable_int();</div><div class="line"><span class="comment">// 自动删除任务</span></div><div class="line">        <span class="keyword">if</span> (run-&gt;status == EZOS_RUNNING) ezos_delete_cur();</div><div class="line">        run = &amp;idle;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="任务的重载"><a href="#任务的重载" class="headerlink" title="任务的重载"></a>任务的重载</h1><p>由于加入了任务的命名体系, 对于可重载的函数就可以添加多个任务了. 而所有的任务操作依据就是任务的名称.<br>任务的名称是不可重复的.对于静态任务函数, 一般将其函数名命名为任务名称即可,<br>方便又好记.对于可重载函数的多个任务, 建议使用 <code>函数名+0</code>, <code>函数名+1</code> 的方式来命名任务名称.</p>
<h1 id="ezos-使用方法"><a href="#ezos-使用方法" class="headerlink" title="ezos 使用方法"></a>ezos 使用方法</h1><h2 id="ezos-基础函数"><a href="#ezos-基础函数" class="headerlink" title="ezos 基础函数"></a>ezos 基础函数</h2><p>为了让ezos工作起来, 相关的基础函数有3个.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ezos_init();        <span class="comment">// ezos初始化函数, main函数尽早调用</span></div><div class="line">ezos_scan_1ms();    <span class="comment">// 1ms定时函数, 1ms定时中断调用</span></div><div class="line">ezos_schedule();    <span class="comment">// ezos调度函数, 为死循环. main函数最后调用</span></div></pre></td></tr></table></figure>
<h2 id="ezos调试函数"><a href="#ezos调试函数" class="headerlink" title="ezos调试函数"></a>ezos调试函数</h2><p>主要有两个调试函数.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ezos_trash_num_min_get();   <span class="comment">// 获取系统最小的剩余任务空间</span></div><div class="line">ezos_idle_tick_max_get();   <span class="comment">// 获取idle任务运行间隔最大时间</span></div></pre></td></tr></table></figure></p>
<ul>
<li><p><code>ezos_trash_num_min_get</code> 获取系统最小的剩余任务空间.<br>可用来判断设置的任务数量是否合适, 太小会让任务添加失败, 太大会造成RAM的浪费(但不会造成运算效率的浪费).<br>在稳定运行系统一定的时间后, 根据观察结构, 调整 <code>__EZOS_TASK_NUM</code> 值即可, 建议根据结果, 再预留2-5个任务较为合理</p>
</li>
<li><p><code>ezos_idle_tick_max_get</code> 获取idle任务运行间隔最大时间.<br>可用来判断CPU是否任务过重, 以及任务切换最慢响应时间(最低优先级任务的最差情况).</p>
</li>
<li><p>而最高优先级任务的最差情况. 根据协作式的特点分析可知:<br>最高优先级任务的响应时间 = 某个独占CPU时间最长的ezos任务<br>因此, 在ezos任务中, 不要使用独占CPU的长延时!!! 如果任务过重, 可手动拆分成多个小任务, 完成一次小任务就主动放弃一次CPU的控制权.</p>
</li>
</ul>
<h2 id="常用的任务函数"><a href="#常用的任务函数" class="headerlink" title="常用的任务函数"></a>常用的任务函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ezos_t</span> ezos_add(<span class="keyword">void</span> *name,                 <span class="comment">// 任务名称(ID), 该任务的唯一标识</span></div><div class="line">    <span class="keyword">void</span> (*pfun)(<span class="keyword">ezos_s_t</span>*, <span class="keyword">ezos_p_t</span>*),     <span class="comment">// 任务函数</span></div><div class="line">    <span class="keyword">ezos_p_t</span> para,                          <span class="comment">// 任务初始参数</span></div><div class="line">    <span class="keyword">int32_t</span> delay_time,                     <span class="comment">// 任务延时时间</span></div><div class="line">    <span class="keyword">uint8_t</span> priority);                      <span class="comment">// 任务优先级</span></div><div class="line"></div><div class="line">quick_add();                <span class="comment">// 快速添加任务, 用的较多, 输入参数只需pfun和priority.</span></div><div class="line">force_add();                <span class="comment">// 强制添加任务, 会先删除该任务, 再重新添加</span></div><div class="line"></div><div class="line">ezos_delay(<span class="keyword">int32_t</span> time);   <span class="comment">// 任务延时函数</span></div></pre></td></tr></table></figure>
<h2 id="ezos编程范例"><a href="#ezos编程范例" class="headerlink" title="ezos编程范例"></a>ezos编程范例</h2><p>源码见 <a href="https://github.com/draapho/ezos" target="_blank" rel="external">github-ezos</a></p>
<ol>
<li>单次任务, 见范例 <code>app_lcd</code> 之 <code>task_lcd</code></li>
<li>循环任务, 见范例 <code>app_rtc</code> 之 <code>task_rtc_1s</code></li>
<li>状态机任务, 见范例 <code>app_race_led</code> 之 <code>task_race_led</code></li>
<li>复杂任务, 见范例 <code>app_bell</code> 之 <code>task_bell_1s</code></li>
<li>可重入任务, 见范例 <code>app_sem</code> 之 <code>task_led</code></li>
<li>任务的拆分, 见范例 <code>ITT100 dv_pic</code> 之 <code>SavePIPtoSPI</code></li>
</ol>
<p> </p>
<h1 id="ezos之任务通讯"><a href="#ezos之任务通讯" class="headerlink" title="ezos之任务通讯"></a>ezos之任务通讯</h1><p>ezos的任务通讯相关函数统一放在 <code>ezos_ipc.c</code> 文件下.<br>ezos会将所有的添加的ipc串成一个链表. 其数据结构如下:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> __ezos_ipc</div><div class="line">&#123;</div><div class="line">    <span class="keyword">void</span> *next;         <span class="comment">// 下个IPC指针</span></div><div class="line">    <span class="keyword">void</span> *name;         <span class="comment">// 当前IPC指针</span></div><div class="line">    <span class="keyword">ezos_t</span> type;        <span class="comment">// IPC类型</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> __ezos_ipc   <span class="keyword">ezos_ipc_t</span>;</div></pre></td></tr></table></figure>
<p>此数据结构相当于ipc的父类, 基于此父类, 下面会衍生出各个IPC子类,<br>如信号量:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">ezos_ipc_t</span> ipc; <span class="comment">// IPC父类</span></div><div class="line">    <span class="keyword">uint8_t</span> value;  <span class="comment">// 信号量值</span></div><div class="line">&#125; <span class="keyword">ezos_sem_t</span>;</div></pre></td></tr></table></figure>
<p>所有IPC的添加与删除都是对此链表的操作, 使用函数为:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ezos_t</span> ezos_ipc_add(<span class="keyword">void</span> *name, <span class="keyword">ezos_t</span> type)</div><div class="line"><span class="keyword">ezos_t</span> ezos_ipc_delete(<span class="keyword">void</span> *name)</div></pre></td></tr></table></figure>
<h2 id="IPC的使用"><a href="#IPC的使用" class="headerlink" title="IPC的使用"></a>IPC的使用</h2><p>IPC的释放/发送较简单, IPC的获取/接收使用稍有复杂, 主要是需要判断IPC的返回值, 并进行相关操作.此处已信号量(sem)为例.<br>原函数见:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ezos_t</span> ezos_sem_release(<span class="keyword">ezos_sem_t</span> *sem)</div><div class="line"><span class="keyword">ezos_t</span> ezos_sem_take(<span class="keyword">ezos_sem_t</span> *sem, <span class="keyword">int32_t</span> timeout)</div></pre></td></tr></table></figure>
<p>对于 ezos_sem_take, 返回值种类有4种! 依次为:</p>
<ol>
<li><code>EZOS_OK</code>,      获取信号量成功</li>
<li><code>EZOS_WAIT</code>,    需要等待信号量, 返回此值后, 原函数需要return</li>
<li><code>EZOS_TIMEOUT</code>, 信号量等待超时</li>
<li><code>EZOS_ERROR</code>,   指定信号量有错误, 说明代码有误</li>
</ol>
<p>使用信号量时, 基本格式为:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">EZOS_TASK(task_sem)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">ezos_t</span> val;</div><div class="line">    val = ezos_sem_take(lock, <span class="number">10</span>);</div><div class="line">    <span class="keyword">if</span> (val == EZOS_WAIT) <span class="keyword">return</span>;                       <span class="comment">// 直接返回等待</span></div><div class="line">    <span class="keyword">if</span> (val == EZOS_OK)           &#123;do_something();&#125;     <span class="comment">// 成功获取信号量</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (val == EZOS_TIMEOUT) &#123;do_something();&#125;     <span class="comment">// 信号量超时处理</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (val == EZOS_ERROR)   &#123;exception();&#125;        <span class="comment">// 异常处理</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="IPC编程范例"><a href="#IPC编程范例" class="headerlink" title="IPC编程范例"></a>IPC编程范例</h2><ol>
<li>信号量(sem), 见范例 <code>app_sem</code></li>
<li>互斥量(mutex) 及 事件(event) 与 信号量类型, 略</li>
<li>邮箱(mailbox),  见范例 <code>app_mail</code></li>
<li>消息队列(message),  见范例 <code>app_message</code></li>
</ol>
<h1 id="ezos-源码"><a href="#ezos-源码" class="headerlink" title="ezos 源码"></a>ezos 源码</h1><p>已将源码放在了 <a href="https://github.com/draapho/ezos" target="_blank" rel="external">github-ezos</a><br>该源码是一个针对stm32f1xx系列的工程模板文件.<br>分层非常清楚, 整个代码结构框架如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">         --------------- 最高层 ----------------</div><div class="line">        |                                       |</div><div class="line">层一    |        applications (应用层)          |</div><div class="line">        |                                       |</div><div class="line">         ---------------------------------------</div><div class="line">        |                                       |</div><div class="line">层二    |          components (组件层)          |</div><div class="line">        |                                       |</div><div class="line"> --------------------------------------------------------</div><div class="line">|                  API (应用程序编程接口)                |</div><div class="line"> --------------------------------------------------------</div><div class="line">        |                                       |</div><div class="line">层三    |             OS (操作系统)             |</div><div class="line">        |                                       |</div><div class="line">         ---------------------------------------</div><div class="line">        |                                       |</div><div class="line">层四    |            drivers (驱动层)           |</div><div class="line">        |                                       |</div><div class="line"> --------------------------------------------------------</div><div class="line">|                CMSIS （Cortex软件标准接口）            |</div><div class="line"> --------------------------------------------------------</div><div class="line">        |                                       |</div><div class="line">层五    |           libraries (芯片库)          |</div><div class="line">        |                                       |</div><div class="line">         --------------- 最低层 ----------------</div></pre></td></tr></table></figure>
<ol>
<li><p>applications：应用层</p>
<ul>
<li>包含了main文件, 中断处理文件, 系统配置文件</li>
<li>不建议直接调用最底层 Libraries</li>
<li>放在bsp中, 有利于使用不同的开发板开发应用</li>
</ul>
</li>
<li><p>components：组件层</p>
<ul>
<li>按大功能划分的软件组件。如音频组件、UI组件</li>
<li>不建议直接调用最底层 Libraries</li>
<li>用户可在此处添加特定工程的组件层</li>
<li>用户可在此处添加常用的组件层(完善模板)</li>
</ul>
</li>
<li><p>OS：操作系统</p>
<ul>
<li>有些操作系统需要提供标准接口函数, 比drivers层高.</li>
<li>ezos操作系统与drivers同层，相互不得调用</li>
</ul>
</li>
<li><p>drivers：PCB板级驱动</p>
<ul>
<li>如按键、EEPROM、模拟I2C等等</li>
<li>该层要能对上屏蔽掉最底层 Libraries<br>这样起到承上启下的作用,方便跨平台移植</li>
<li>用户可在此处添加特定的驱动</li>
<li>用户可在此处添加常用的驱动(完善模板)</li>
</ul>
</li>
<li><p>libraries：MCU外设库</p>
<ul>
<li>此部分由芯片厂商提供，是标准库</li>
<li>用户不得修改此层</li>
</ul>
</li>
<li><p>bsp：板级支持包</p>
<ul>
<li>applications应用层放在此包中</li>
<li>components特定工程组件层放在此包中</li>
<li>提供开发板工程模板</li>
</ul>
</li>
<li><p>documents：文档说明</p>
<ul>
<li>提供 doxygen 注释风格的模板，说明，软件</li>
<li>STM32工程模板说明</li>
<li>用户可在此处添加其它说明性文件</li>
</ul>
</li>
<li><p>API：Application Programming Interface，应用程序编程接口</p>
<ul>
<li>API旨在提供软件抽象层，加快项目的开发和移植速度</li>
<li>层一、层二的应用都应该基于API函数来使用</li>
<li>API函数由 Drivers 和 OS 提供, Libraries不得提供函数到应用接口</li>
<li>API函数必须使用标准C书写，与软件平台和硬件完全无关</li>
</ul>
</li>
<li><p>CMSIS：Cortex Microcontroller Software Interface Standard，Cortex软件标准接口</p>
<ul>
<li>CMSIS是ARM公司发布的一个标准接口，旨在提供Cortex-M处理器系列硬件抽象层</li>
<li>仅 Drivers 和 OS 可直接调用 CMSIS 的函数</li>
<li>目前仅提供了芯片核心部分的CMSIS，芯片外设标准库仍是由ST官方书写的</li>
</ul>
</li>
</ol>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用网络爬虫抓取商品价格并分析]]></title>
      <url>https://draapho.github.io/2017/04/10/1711-web-spider/</url>
      <content type="html"><![CDATA[<h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>基于 <a href="http://www.chemistwarehouse.com.au/" target="_blank" rel="external">Chemist Warehouse</a> 的商品, 抓取其每天的价格变化. 并根据历史信息, 判断其价格变化规律, 以便在打折时购买.</p>
<p>因此, 用户需求有如下几点:</p>
<ul>
<li>抓取网站价格, 需要知道其商品全名, 原价, 打折价, 打折日期, 持续时间</li>
<li>存储这些数据, 供日后分析使用</li>
<li>数据挖掘和分析, 已直观的方式多维度显示出来(譬如单品的打折规律, 打折力度, 打折持续时间. 全年的打折规律)</li>
</ul>
<p>进一步, 技术分析如下:</p>
<ul>
<li>全程使用python即可满足全部需求.</li>
<li>网络爬虫难度不高, 仅需针对特定商品, 每天抓一次, 无需多线程/进程, 无需登录, 无验证码, 无需考虑反爬虫, 无需额外加载JS程序.</li>
<li>数据存储, 使用MySQL, 数据需要去重, 仅记录关键信息. 以便减少数据存储量, 简化数据挖掘和分析的工作</li>
<li>搜索指定产品, 展示历史数据, 使用 pyqt + matplotlib.</li>
</ul>
<h1 id="网络爬虫"><a href="#网络爬虫" class="headerlink" title="网络爬虫"></a>网络爬虫</h1><p>花了二天时间, 简单过了一遍网络爬虫的关键技术. 参考资料如下:</p>
<ul>
<li><a href="http://cuiqingcai.com/1052.html" target="_blank" rel="external">Python爬虫学习系列教程-静觅</a></li>
<li><a href="https://github.com/lining0806/PythonSpiderNotes" target="_blank" rel="external">Python入门网络爬虫之精华版</a></li>
<li><a href="http://www.w3school.com.cn/xpath/xpath_syntax.asp" target="_blank" rel="external">XPath 语法</a></li>
</ul>
<p>本着项目导向, 做出结果为先的思路, 没有一步步的实验. 上来先看了几个爬虫框架.</p>
<ul>
<li><code>pyspider</code> 基于web UI, 感觉很直观, 适合于随便玩玩. 个人不喜欢, 二次开发不方便.</li>
<li>python 下另外一个很有名的框架就是 <code>scrapy</code>, 可惜我连配置安装都没有成功的做完. 适合二次开发.<br>应该是公司网络安全机制比较高, 遇到的问题基本都是SSL相关的, 解决了2-3个, 剩下的实在没有思路去解决了…<br>另外scrapy依赖的库也比较多, 因此初装也就比较麻烦. 安装推荐参考<a href="https://docs.scrapy.org/en/latest/intro/install.html#" target="_blank" rel="external">官网的 Installation guide</a></li>
<li>使用 <code>requests</code> <code>urllib</code> <code>lxml</code> 库. 简单项目直接用这个就够了.</li>
<li>最终抓数据只用了 <code>lxml</code> 一个库就完成了数据抓取, 去重的工作. 关键源码如下:</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="comment"># pip --trusted-host pypi.python.org install lxml</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> string</div><div class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> html</div><div class="line"></div><div class="line"><span class="comment"># 获取url的原始数据</span></div><div class="line">doc = html.parse(<span class="string">'http://www.chemistwarehouse.com.au/search?searchtext=blackmores%20bone&amp;searchmode=allwords'</span>)</div><div class="line"><span class="comment"># 获取指定的数据值</span></div><div class="line">names = doc.xpath(<span class="string">'//a[@class="product-container search-result"]/@title'</span>)</div><div class="line"><span class="comment"># 处理数据, 准备存入数据库即可.</span></div><div class="line">name = map(string.strip, names)</div><div class="line"><span class="keyword">print</span> name</div></pre></td></tr></table></figure>
<p>另:<br>遇到过了错误 <code>There was a problem confirming the ssl certificate: [SSL: CERTIFICATE_VERIFY_FAILED]</code><br>使用 <code>pip --trusted-host pypi.python.org install lxml</code> 即可避免. 也是安全性问题导致的.</p>
<h1 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h1><p>同样地, 该项目对数据存储的要求也很低. 直接选择使用MySQL.</p>
<p>参考资料如下:</p>
<ul>
<li><a href="http://www.runoob.com/python/python-mysql.html" target="_blank" rel="external">python操作mysql数据库</a></li>
<li><a href="http://www.crazyant.net/686.html" target="_blank" rel="external">Python操作Mysql实例代码教程（查询手册）</a></li>
<li><a href="http://www.cnblogs.com/mr-wid/archive/2013/05/09/3068229.html" target="_blank" rel="external">21分钟 MySQL 入门教程</a></li>
<li><a href="http://blog.csdn.net/heizistudio/article/details/8234185" target="_blank" rel="external">Windows下更改MySQL数据库的存储位置</a></li>
</ul>
<p>Windows 下配置使用MySQL:</p>
<ul>
<li>下载运行 <a href="https://dev.mysql.com/downloads/windows/" target="_blank" rel="external">MySQL Installer</a></li>
<li>必须安装 <code>MySQL Server</code>. 建议安装 <code>MySQL Workbench</code>, 为可视化图像, 便于管理查看.</li>
<li>可视化工具也可以使用别的软件. 如 <a href="https://www.heidisql.com/" target="_blank" rel="external">heidisql</a></li>
<li>将<code>mysql.exe</code>的路径添加<code>PATH</code>环境变量.</li>
<li><p>创建新的数据库(Workbecn下, 英文为<code>schema</code>), 命名为 <code>chemistwarehouse</code>. 或者输入指令:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p      <span class="comment"># 登录本机的MySQL数据库服务</span></div><div class="line"><span class="comment"># mysql&gt;              # 成功后, 提示符变为 mysql&gt;</span></div><div class="line">create database chemistwarehouse; <span class="comment"># 创建一个数据库</span></div></pre></td></tr></table></figure>
</li>
<li><p>安装 <a href="https://sourceforge.net/projects/mysql-python/" target="_blank" rel="external">MySQL for Python</a><br>然后, 在python下面测试一下是否可以成功连接到刚建立的 <code>chemistwarehouse</code> 数据库.<br>成功的话, 会打印版本信息.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">initDatabase</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="comment"># 连接mysql的方法：connect('ip','user','password','dbname')</span></div><div class="line">        connect_db = db.connect(</div><div class="line">            <span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'root'</span>, <span class="string">'chemistwarehouse'</span>)</div><div class="line">        <span class="comment"># 所有的查询，都在连接con的一个模块cursor上面运行的</span></div><div class="line">        cur = connect_db.cursor()</div><div class="line">        <span class="comment"># 执行一个查询</span></div><div class="line">        cur.execute(<span class="string">"SELECT VERSION()"</span>)</div><div class="line">        <span class="comment"># 取得上个查询的结果，是单个结果</span></div><div class="line">        data = cur.fetchone()</div><div class="line">        <span class="keyword">print</span> <span class="string">"Database version : %s "</span> % data</div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        logging.error(e)</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        <span class="keyword">if</span> connect_db:</div><div class="line">            <span class="comment"># 无论如何，连接记得关闭</span></div><div class="line">            connect_db.close()</div><div class="line"></div><div class="line">initDatabase()</div></pre></td></tr></table></figure>
</li>
<li><p>至此, 就可以在python下正常使用MySQL数据库了.<br>将提取出来的数据去重后, 按一定的格式保存进数据库即可.</p>
</li>
<li><p>默认安装在C盘, 而且数据存储也是在C盘. 这个没法接受! 需要把数据存储位置修改到空间更大的E盘.</p>
<ul>
<li>停止MySQL服务, 命令行 <code>net stop MySQL57</code> 或者使用 <code>MySQL Workbench</code> 停止服务</li>
<li>打开 <code>C:\ProgramData\MySQL\MySQL Server 5.7\my.ini</code></li>
<li>修改为 <code>datadir=E:/MySQLdata</code>, 即设置数据库的新目录</li>
<li>复制 <code>C:\ProgramData\MySQL\MySQL Server 5.7\Data</code> 下所有文件到 <code>E:/MySQLdata</code></li>
<li>开启MySQL服务 命令行 <code>net start MySQL57</code> 或者使用 <code>MySQL Workbench</code> 开启服务</li>
<li>检查 MySQL 服务器状态, 确定数据库目录已更新</li>
<li>删除 <code>C:\ProgramData\MySQL\MySQL Server 5.7\Data</code></li>
</ul>
</li>
</ul>
<h1 id="数据显示"><a href="#数据显示" class="headerlink" title="数据显示"></a>数据显示</h1><p>参考资料如下:</p>
<ul>
<li><a href="http://blog.topspeedsnail.com/archives/814" target="_blank" rel="external">Python 中用 matplotlib 绘制直方图</a> 这个博客有对 matplotlib 制图有一个系列的文章</li>
<li><a href="http://ningning.today/2015/04/17/python/%E7%94%A8matplotlib%E7%BB%98%E5%88%B6%E6%9F%B1%E7%8A%B6%E5%9B%BE%E5%92%8C%E9%A5%BC%E5%9B%BE/" target="_blank" rel="external">用python的matplotlib库绘制柱状图和饼图</a></li>
<li><a href="http://www.jdon.com/idea/matplotlib.html" target="_blank" rel="external">使用Python matplotlib绘制股票走势图</a></li>
<li><a href="http://blog.rcnelson.com/building-a-matplotlib-gui-with-qt-designer-part-1/" target="_blank" rel="external">Building a Matplotlib GUI with Qt Designer: Part 1</a>, 由三部分组成, 还有<a href="http://blog.rcnelson.com/building-a-matplotlib-gui-with-qt-designer-part-2/" target="_blank" rel="external">Part2</a>和<a href="http://blog.rcnelson.com/building-a-matplotlib-gui-with-qt-designer-part-3/" target="_blank" rel="external">Part3</a></li>
<li><a href="http://eli.thegreenplace.net/2009/01/20/matplotlib-with-pyqt-guis" target="_blank" rel="external">matplotlib with PyQt GUIs</a>, 有 <a href="https://github.com/eliben/code-for-blog/blob/master/2009/qt_mpl_bars.py" target="_blank" rel="external">github 范例</a></li>
<li>pyqt的使用可参考我的博客 <a href="https://draapho.github.io/2016/11/16/1617-python-terminal/">python的第一个小程序, 蓝牙及串口终端</a></li>
</ul>
<p>设计思路和注意事项</p>
<ul>
<li>使用pip安装 matplotlib: <code>pip --trusted-host pypi.python.org install matplotlib</code></li>
<li>数据显示和数据抓取是完全独立的, 因此数据抓取单独生成了一个exe文件, 数据显示也单独生成一个文件.</li>
<li>数据显示exe可以打开多个, 以便分析比较. 数据抓取仅可打开一个.</li>
</ul>
<h1 id="源码及性能"><a href="#源码及性能" class="headerlink" title="源码及性能"></a>源码及性能</h1><p>最终源码见 <a href="https://github.com/draapho/chemistwarehouse-spider" target="_blank" rel="external">github</a></p>
<p>爬虫最终性能:<br>抓取效率一般, 每1000条数据大概要2分钟. 要提高效率可以考虑使用多进程!<br>但一天抓取一次即可, 因此这个速度可以接受. 暂时保持单进程不变.</p>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jz2440 裸板程序的开发]]></title>
      <url>https://draapho.github.io/2017/04/05/1710-jz2440-led/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>s3c2440 的裸板开发和单片机无异, 此文主要目的是<strong>熟悉linux下的交叉编译环境和开发方式</strong>.</p>
<h1 id="crt0-S-文件"><a href="#crt0-S-文件" class="headerlink" title="crt0.S 文件"></a><code>crt0.S</code> 文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@******************************************************************************</div><div class="line">@ File：crt0.S</div><div class="line">@ 功能：通过它转入C程序</div><div class="line">@******************************************************************************</div><div class="line"></div><div class="line">.text</div><div class="line">.global _start</div><div class="line">_start:</div><div class="line">            ldr     r0, =0x53000000     @ WATCHDOG寄存器地址</div><div class="line">            mov     r1, #0x0</div><div class="line">            str     r1, [r0]            @ 写入0，禁止WATCHDOG，否则CPU会不断重启</div><div class="line"></div><div class="line">            ldr     sp, =1024*4         @ 设置堆栈，注意：不能大于4k, 因为现在可用的内存只有4K</div><div class="line">                                        @ nand flash中的代码在复位后会移到内部ram中，此ram只有4K</div><div class="line">            bl      main                @ 调用C程序中的main函数</div><div class="line">halt_loop:</div><div class="line">            b       halt_loop</div></pre></td></tr></table></figure>
<h1 id="led-c-文件"><a href="#led-c-文件" class="headerlink" title="led.c 文件"></a><code>led.c</code> 文件</h1><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">/************************************</div><div class="line"> * 按下按钮, 就点亮对应的LED灯.</div><div class="line"> * KEY: EINT0, EINT2, EINT11</div><div class="line"> * KEY: GPF0,  GPF2,  GPG3</div><div class="line"> * LED: D12,   D11,   D10</div><div class="line"> * LED: GPF6,  GPF5,  GPF4</div><div class="line"> ************************************</div><div class="line">*/</div><div class="line"></div><div class="line">// s3c2440 对应的寄存器地址. 需要看数据手册.</div><div class="line">#define GPFCON      (*(volatile unsigned long *)0x56000050)</div><div class="line">#define GPFDAT      (*(volatile unsigned long *)0x56000054)</div><div class="line">#define GPFUP       (*(volatile unsigned long *)0x56000058)</div><div class="line">#define GPGCON      (*(volatile unsigned long *)0x56000060)</div><div class="line">#define GPGDAT      (*(volatile unsigned long *)0x56000064)</div><div class="line">#define GPGUP       (*(volatile unsigned long *)0x56000068)</div><div class="line"></div><div class="line">#define PIN0        (1&lt;&lt;0)</div><div class="line">#define PIN1        (1&lt;&lt;1)</div><div class="line">#define PIN2        (1&lt;&lt;2)</div><div class="line">#define PIN3        (1&lt;&lt;3)</div><div class="line">#define PIN4        (1&lt;&lt;4)</div><div class="line">#define PIN5        (1&lt;&lt;5)</div><div class="line">#define PIN6        (1&lt;&lt;6)</div><div class="line">#define PIN7        (1&lt;&lt;7)</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    GPFCON = 0x1500;        // set LED pin as output</div><div class="line">    GPFDAT = 0x00;</div><div class="line">    GPGCON = 0x00;</div><div class="line"></div><div class="line">    while (1) &#123;</div><div class="line">        if (GPFDAT &amp; PIN0) &#123;</div><div class="line">            GPFDAT |= PIN6;</div><div class="line">        &#125; else &#123;</div><div class="line">            GPFDAT &amp;= ~PIN6;</div><div class="line">        &#125;</div><div class="line">        if (GPFDAT &amp; PIN2) &#123;</div><div class="line">            GPFDAT |= PIN5;</div><div class="line">        &#125; else &#123;</div><div class="line">            GPFDAT &amp;= ~PIN5;</div><div class="line">        &#125;</div><div class="line">        if (GPGDAT &amp; PIN3) &#123;</div><div class="line">            GPFDAT |= PIN4;</div><div class="line">        &#125; else &#123;</div><div class="line">            GPFDAT &amp;= ~PIN4;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Makefile-文件"><a href="#Makefile-文件" class="headerlink" title="Makefile 文件"></a><code>Makefile</code> 文件</h1><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 目标文件 : 依赖文件1 依赖文件2</span></div><div class="line">led.bin : crt0.S led.c</div><div class="line">    <span class="comment"># 汇编-&gt;目标文件</span></div><div class="line">    arm-linux-gcc -g -c -o crt0.o crt0.S</div><div class="line">    <span class="comment"># C-&gt;汇编</span></div><div class="line">    arm-linux-gcc -g -c -o led.o led.c</div><div class="line">    <span class="comment"># 目标文件链接为 led_elf, 初始地址为0</span></div><div class="line">    arm-linux-ld -Ttext 0x0000000 -g  crt0.o led.o -o led_elf</div><div class="line">    <span class="comment"># 用 led_elf文件生成 烧录文件 led.bin</span></div><div class="line">    arm-linux-objcopy -O binary -S led_elf led.bin</div><div class="line">    <span class="comment"># 反汇编</span></div><div class="line">    arm-linux-objdump -D -m arm led_elf &gt; led.dis</div><div class="line"></div><div class="line"><span class="section">clean:</span></div><div class="line">    rm -f led.dis led.bin led_elf *.o</div></pre></td></tr></table></figure>
<h1 id="编译和烧录"><a href="#编译和烧录" class="headerlink" title="编译和烧录"></a>编译和烧录</h1><ul>
<li>将上述三个文件放入同一个目录, 譬如 <code>/led_test</code><ul>
<li><code>crt0.S</code> 可理解为硬件初始化, 使用模板即可</li>
<li><code>led.c</code> 需要自己写, 软件的大部分开发工作用C语言实现</li>
<li><code>Makefile</code> 写的非常直白的makefile, 不适用于复杂的工程.</li>
</ul>
</li>
<li>使用Linux主机进行编译.<ul>
<li>即登录 Ubuntu, 即配置好交叉编译环境的Linux主机</li>
<li>shell 下进入 <code>/led_test</code> 目录</li>
<li>输入指令 <code>make</code> 即可, 就会得到 <code>led.bin</code> 文件</li>
<li>清空编译和链接文件, 输入 <code>make clean</code>, 就相当于执行了 <code>rm -f led.dis led.bin led_elf *.o</code></li>
</ul>
</li>
<li>将 <code>led.bin</code> 烧录到 Flash 中, 最后重启开发板.<ul>
<li>有多种烧录方式, 我这边使用的是 JLINK, 用JFlash烧录即可 (只支持烧录 Nor Flash)</li>
<li>s3c2440 属于 ARM9 系列. 使用Nor Flash启动时, SRAM 起始地址为 0x4000_0000</li>
<li>或者使用uboot+dnw的方式, 烧录到SDRAM中并运行</li>
</ul>
</li>
<li>然后, 如果开发的是嵌入式linux, 基本流程也是这样的 (注意区分两个Linux):<ul>
<li><ol>
<li>在电脑上开发软件 (Windows, Linux, Mac 随便的)</li>
</ol>
</li>
<li><ol>
<li>在<strong>Linux主机</strong>上进行编译(就是交叉编译), 获得一个可执行文件.</li>
</ol>
</li>
<li><ol>
<li>把可执行文件烧录/加载到<strong>嵌入式Linux(开发板)</strong>上, 运行即可.</li>
</ol>
</li>
</ul>
</li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[快速读懂 makefile]]></title>
      <url>https://draapho.github.io/2017/04/04/1709-linux-makefile/</url>
      <content type="html"><![CDATA[<p><strong><em>转载自 <a href="http://lucky521.github.io/blog/design/2015/10/01/makefile.html" target="_blank" rel="external">怎么看懂和编写makefile</a></em></strong><br><strong><em>转载自 <a href="http://lucky521.github.io/blog/design/2015/10/01/makefile.html" target="_blank" rel="external">跟我一起写Makefile</a></em></strong></p>
<hr>
<h1 id="Makefile最基本的组成"><a href="#Makefile最基本的组成" class="headerlink" title="Makefile最基本的组成"></a>Makefile最基本的组成</h1><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">target: dependencies</div><div class="line">[TAB] command</div><div class="line"></div><div class="line">目标: 依赖1 依赖2</div><div class="line">[TAB] 命令</div></pre></td></tr></table></figure>
<ul>
<li><code>target</code> 可以是object文件，也可以是可执行文件，也可以是target关键字。<br> 可以一次写多个文件作为同一批次的target。</li>
<li><code>dependencies</code> 有的是源文件，有的是链接文件，如果没有的话可以不写；<br> 想要编target必须先准备好dependencies。</li>
<li><code>clean</code> 是一个特殊的target，一般要做的是rm清理工作；</li>
<li><code>make</code>命令在执行的时候会检查目标文件是否存在, 并比较target文件和dependencies文件的修改日期，<br>如果存在更新的dependencies文件，那么对应的command就会执行，否则的话就不执行，还使用已存在target文件。</li>
<li><code>command</code> 必须要以<code>TAB</code>来对齐， 一般会是gcc/g++的编译命令；</li>
<li>细化到模块一般会有若干个分支target，形成层级的target依赖关系。</li>
</ul>
<p>举个例子:<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 编译和链接一起做了, 看不到中间的.o目标文件</span></div><div class="line">hello: hello.c a.c</div><div class="line">    gcc -o hello hello.c a.c</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 对于大型系统, 更推荐的是编译和链接分开, 如下:</span></div><div class="line">hello: hello.o a.o                  <span class="comment"># 可执行文件hello 依赖于 hello.o 和 a.o</span></div><div class="line">    gcc -o hello hello.o a.o        <span class="comment"># 执行链接</span></div><div class="line"></div><div class="line">hello.o: hello.c                    <span class="comment"># 目标文件依赖于hello.c</span></div><div class="line">    gcc -o hello.o -c hello.c       <span class="comment"># 编译出目标文件</span></div><div class="line"></div><div class="line">a.o : a.c                           <span class="comment"># 另一个目标文件</span></div><div class="line">    gcc -o a.o -c a.c               <span class="comment"># -o: object 目标文件, -c: compile 编译</span></div></pre></td></tr></table></figure></p>
<h1 id="隐形规则和变量"><a href="#隐形规则和变量" class="headerlink" title="隐形规则和变量"></a>隐形规则和变量</h1><p>为了使得makefile的内容尽量少一些废话，GNU为makefile加入了一些约定的规则。</p>
<ul>
<li>如果<code>target</code>文件的名称是<code>aa.o</code>，那么make会主动的把同名的源代码文件（如<code>aa.c</code>,<code>aa.cpp</code>）加入到依赖中去。</li>
<li><code>target</code> 和 <code>dependencies</code> 处: 用 <code>%</code> 通配任意的非空字符串</li>
<li><code>command</code> 处: <code>$@</code>目标文件, <code>$&lt;</code>依赖1, <code>$^</code>所有的依赖文件, <code>$?</code>比目标文件新的依赖. 这三个叫自动变量.</li>
<li>变量在定义或被赋值时不加$()，在使用其值时要加 <code>$()</code></li>
<li>常用<code>$(CC)</code>来代替具体的编译器，比如 <code>CC=g++</code></li>
<li>常用<code>$(CFLAGS)</code>来代替C语言编译选项，比如 <code>CFLAGS=-c -Wall</code><br>还会指定头文件include路径，比如 <code>CFLAGS+=-I/usr/include</code></li>
<li>常用<code>$(LDFLAGS)</code>来指定库文件lib路径，比如 <code>LDFLAGS+=-L/usr/lib</code></li>
<li>常用<code>$(LDLIBS)</code>来指定要链接的库名称，比如 <code>LDLIBS+=-llibname</code></li>
</ul>
<p>修改上面的例子:<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 先使用通配符 % 及自动变量</span></div><div class="line">hello: hello.o a.o</div><div class="line">    gcc -o $@ $^                    <span class="comment"># $@ 表示hello, $^ 表示两个.o文件</span></div><div class="line"></div><div class="line">%.o : %.c                           <span class="comment"># 对应了hello.o 和 a.o 两条语句!</span></div><div class="line">    gcc -o $@ -c $&lt;                 <span class="comment"># $@ 表示 .o 文件, $&lt; 表示第一个依赖, 即 .c 文件</span></div><div class="line"></div><div class="line"><span class="comment"># 然后使用更多的变量 $()</span></div><div class="line">hello: hello.o a.o</div><div class="line">    $(CC) -o $@ $^                  <span class="comment"># CC=gcc, 因此 $(CC)表示gcc</span></div><div class="line"></div><div class="line">%.o : %.c                           <span class="comment"># 使用更多的编译参数变量</span></div><div class="line">    $(CC) -o $@ -c $(CFLAGS) $(CPPFLAGS) $&lt;</div></pre></td></tr></table></figure></p>
<h1 id="伪目标"><a href="#伪目标" class="headerlink" title="伪目标"></a>伪目标</h1><p><code>.PHONY</code> 经常被用来作为伪目标。 它的使用目的是这样的：<br>因为当类似clean这样的target关键字作为target并且没有依赖文件时，<br>假如目录下有一个文件也叫clean时，make clean命令则会以为我想编clean这个目标文件，<br>恰好clean文件又不会比依赖文件更旧，所以下面的command就不会被执行。</p>
<p>现在我们用.PHONY作为target，clean作为依赖。<br>这就是告诉make，clean它是一个target，而不是一个普通的文件。</p>
<p>加入 clean 的例子:<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">hello: hello.o a.o                          <span class="comment"># 执行文件hello, 依赖于.o文件</span></div><div class="line">    $(CC) -o $@ $^                          <span class="comment"># 进行链接</span></div><div class="line"></div><div class="line">%.o : %.c                                   <span class="comment"># 目标文件.o 依赖于同名的.c文件</span></div><div class="line">    $(CC) -o $@ -c $(CFLAGS) $(CPPFLAGS) $&lt; <span class="comment"># 编译出目标文件</span></div><div class="line"></div><div class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: clean</span></div><div class="line">clean:                                      <span class="comment"># 目标指令, 可调用 make clean 来执行了!</span></div><div class="line">    rm -rf *.o                              <span class="comment"># 删除所有的.o文件</span></div></pre></td></tr></table></figure></p>
<h1 id="文件引用和条件判断"><a href="#文件引用和条件判断" class="headerlink" title="文件引用和条件判断"></a>文件引用和条件判断</h1><ul>
<li>如果makefile中引入其他makefile， 使用 <code>include</code> 即可</li>
<li>条件语句的基本结构一般由 <code>ifeq</code> <code>else</code> <code>endif</code> 三个关键字组成</li>
</ul>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">include another.mk                          <span class="comment"># 调用 another.mk</span></div><div class="line">include foo *.mk $(bar)                     <span class="comment"># 更复杂的调用</span></div><div class="line"></div><div class="line"></div><div class="line">libs_for_gcc = -lgnu                        # 变量赋值</div><div class="line">normal_libs =</div><div class="line"></div><div class="line">ifeq ($(CC),gcc)                            <span class="comment"># 条件判断 $(CC) 是否为gcc</span></div><div class="line">    libs=$(libs_for_gcc)                    <span class="comment"># 变量赋值</span></div><div class="line">else</div><div class="line">    libs=$(normal_libs)</div><div class="line">endif</div><div class="line"></div><div class="line">foo: $(objects)                             <span class="comment"># 目标: 依赖</span></div><div class="line">ifeq ($(CC),gcc)</div><div class="line">    $(CC) -o foo $(objects) $(libs_for_gcc) <span class="comment"># 执行的命令</span></div><div class="line">else</div><div class="line">    $(CC) -o foo $(objects) $(normal_libs)</div><div class="line">endif</div></pre></td></tr></table></figure>
<h1 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h1><p>函数调用，很像变量的使用，也是以“$”来标识的，有两种语法, 如下：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(&lt;function&gt; &lt;arguments&gt;)</div><div class="line">$&#123;&lt;function&gt; &lt;arguments&gt;&#125;</div></pre></td></tr></table></figure></p>
<p>还是来看一个示例：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">comma := ,</div><div class="line">empty :=</div><div class="line">space := <span class="variable">$(empty)</span> <span class="variable">$(empty)</span></div><div class="line">foo:= a b c</div><div class="line">bar:= <span class="variable">$(subst $(space)</span>,<span class="variable">$(comma)</span>,<span class="variable">$(foo)</span>)</div></pre></td></tr></table></figure></p>
<ul>
<li><code>$(bar)</code>调用了函数一个函数.<ul>
<li>函数    : <code>$(subst &lt;from&gt;,&lt;to&gt;,&lt;text&gt;)</code>, 相当于c语言的 <code>subst(from, to, text)</code></li>
<li>参数from: <code>$(comma)</code> 的值是一个逗号</li>
<li>参数to  : <code>$(space)</code> 使用了 <code>$(empty)</code> 定义了一个空格</li>
<li>参数text: <code>$(foo)</code>   的值是 “a b c”</li>
</ul>
</li>
<li>这个函数是把$(foo)中的空格替换成逗号，所以$(bar)的值是“a,b,c”。<ul>
<li>这是一个替换函数</li>
<li>第一个参数是被替换字串</li>
<li>第二个参数是替换字串</li>
<li>第三个参数是替换操作作用的字串</li>
</ul>
</li>
</ul>
<p>Makefile 支持的函数有限, 详情可参考 <a href="http://wiki.ubuntu.org.cn/%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99Makefile:%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0" target="_blank" rel="external">跟我一起写Makefile:使用函数</a></p>
<hr>
<p><strong><em>转载自 <a href="http://lucky521.github.io/blog/design/2015/10/01/makefile.html" target="_blank" rel="external">怎么看懂和编写makefile</a></em></strong><br><strong><em>转载自 <a href="http://lucky521.github.io/blog/design/2015/10/01/makefile.html" target="_blank" rel="external">跟我一起写Makefile</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker 初学笔记]]></title>
      <url>https://draapho.github.io/2017/02/23/1708-docker/</url>
      <content type="html"><![CDATA[<h1 id="Docker-总览"><a href="#Docker-总览" class="headerlink" title="Docker 总览"></a>Docker 总览</h1><h2 id="几个重要概念"><a href="#几个重要概念" class="headerlink" title="几个重要概念"></a>几个重要概念</h2><ul>
<li>Docker: 是一种容器技术, 可以提供虚拟服务. 物理上共享主机的硬件和网络资源.<br>相比于虚拟机技术, 它轻巧, 快速, 便捷, 跨平台, 易于分配发布. 又同时拥有虚拟机的优点!<br>由于以上特点, 目前docker的容器有蚕食传统软件的趋势: 提供服务时, 给的是docker镜像或容器而非传统的安装软件!<br>譬如, 我学习docker的初衷就是: <strong>一劳永逸的制作一个用于开发2440系列编译环境的pc linux系统</strong><br>可以看出, 我需求就是提供编译服务. 传统的安装软件无法简单的实现, 但docker可以! (目前用的vm, 太重太麻烦)</li>
<li>Union FS (分层存储): 本质是增量管理. 基于原有的运行系统, 执行某些命令后, 把新产生的文件作为增量新建一层文件.<br>直观感受一下, 是这样的:<br><img src="https://draapho.github.io/images/1708/docker-aufs.jpg" alt="docker-aufs"></li>
<li><strong>images (镜像)</strong>: docker 以镜像为基础. 镜像是只读的, 不包含任何动态数据, 内容不可更改!<br>基于基础镜像, 可以在加入自己需要的app和服务后, 打包成自己的具有特殊功能的镜像.</li>
<li><strong>container (容器)</strong>: 容器就是镜像运行时的实体 (类似于类和实例的关系).<br>容器必须基于镜像运行. 可以基于同一个镜像创建多个容器, 来实现不同的功能或服务.<br>容器可以被创建, 启动, 停止, 删除, 暂停等等<br>容器的本质就是进程, 运行时实现某种功能, 只是这个进程的上下文用的是虚拟化的镜像环境.</li>
<li><strong>Docker Registry (仓库)</strong>: 用于存储, 分发镜像的仓库.<br>其中 <a href="https://hub.docker.com/" target="_blank" rel="external">Docker Hub</a> 就是官方的镜像仓储服务.<br>其运行模式和 <a href="https://github.com/" target="_blank" rel="external">github</a> 一样, 公开资料免费, 私有资料收费<br>当然, 也可以建立自己的私有 Docker Registry</li>
<li><strong>Docker Volume</strong>, Docker的数据服务.<br>docker 体系要让自己表现更像应用程序, 就离不开对数据的存储和隔离.<br>而docker容器是非持久化的, 可以随时创建和删除, 无法满足数据存储的基本要求.<br>因此提供了Docker Volume. 包括 data volume 和 data volume container</li>
</ul>
<h2 id="docker的技术架构"><a href="#docker的技术架构" class="headerlink" title="docker的技术架构"></a>docker的技术架构</h2><p><img src="https://draapho.github.io/images/1708/docker-structure.jpg" alt="docker-structure"></p>
<ul>
<li>Docker Client / Docker Daemon: 用户和Docker的交互使用的是C/S模式.<br>用户作为客户端使用 http 服务和 Docker Daemon 进行交互</li>
<li>Engine 和 Job: Job本质就是进程. 基于容器, 运行任务.<br>譬如, 对 Docker Registry 的操作就是作为一个job任务实现的.</li>
<li>Docker Registry: 用于存储, 分发镜像的仓库</li>
<li>Graph: Graph对已下载Docker镜像进行保管, 并对已下载容器镜像之间关系进行记录.<br>Graph不但要存储本地具有版本信息的文件系统镜像,<br>而且还要通过GraphDB记录所有文件系统镜像彼此之间的关系</li>
<li>Driver: 驱动模块. Driver驱动主要作用是实现对Docker容器进行环境的定制</li>
<li>Docker container: Docker容器是Docker架构中服务交付的最终体现形式<br>Docker按照业务的需求, 依赖关系和配置文件打包相应的Docker容器</li>
</ul>
<h2 id="初步评估结论"><a href="#初步评估结论" class="headerlink" title="初步评估结论"></a>初步评估结论</h2><ul>
<li>感觉docker 的野心和潜力都很大. 如镜像管理, 跨平台, 容器应用化, 功能化, 服务化.</li>
<li>可以看出主要发展方向是网络和云方面的 (新的项目都是针对网络集群的).</li>
<li>基本已经可以跨平台使用(Docker machine).</li>
<li>我的初衷就是: <strong>一劳永逸的制作一个用于开发2440系列编译环境的pc linux系统</strong><br>就此而言, docker可用, 但初始配置并不轻松.<br>因此暂不急于使用docker来配置这么一个主机编译环境.  </li>
</ul>
<h1 id="Docker-的安装"><a href="#Docker-的安装" class="headerlink" title="Docker 的安装"></a>Docker 的安装</h1><p>全程参考官网<br><a href="https://docs.docker.com/engine/getstarted/" target="_blank" rel="external">Get started with Docker</a></p>
<h2 id="Windows-10-64bit-直接安装"><a href="#Windows-10-64bit-直接安装" class="headerlink" title="Windows 10 64bit 直接安装"></a>Windows 10 64bit 直接安装</h2><p>可直接下载安装 docker, 无需安装在虚拟机下面. 家中的win10是家庭版, 但也能正常安装运行docker.</p>
<p>使用默认设置就能运行, 说一下文件共享. 譬如勾选 <code>E</code> 盘共享后, shell 应该这样用:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker下, 显示E盘全部内容</span></div><div class="line">docker run -v e:/:/data alpine ls /data</div><div class="line"><span class="comment"># e:/       表示使能的windows e盘.</span></div><div class="line"><span class="comment"># :/data    docker容器下, 加载为 /data 目录</span></div><div class="line"><span class="comment"># alpine    一个小巧的linux内核, 基于此内核运行指令. 改为ubuntu效果也是一样的</span></div><div class="line"><span class="comment"># ls /data  在屏幕上列出 /data (就是e盘) 的内容</span></div><div class="line"></div><div class="line"><span class="comment"># 因此, 官网范例表示, 显示 c:/Users 下的内容</span></div><div class="line">docker run -v c:/Users:/data alpine ls /data</div></pre></td></tr></table></figure></p>
<h2 id="ToolBox-基于虚拟机的安装"><a href="#ToolBox-基于虚拟机的安装" class="headerlink" title="ToolBox 基于虚拟机的安装"></a>ToolBox 基于虚拟机的安装</h2><p>参考<a href="https://docs.docker.com/toolbox/toolbox_install_windows/" target="_blank" rel="external">Install Docker Toolbox on Windows</a></p>
<ul>
<li>机器要求: 64bit 操作系统, 支持并使能IVT虚拟技术</li>
<li>Windows Vista 及以上版本, 安装默认的 NDIS6 driver 即可.</li>
<li>Windows 7 和 Windows XP, 安装时勾选 <strong>NDIS5 driver</strong></li>
<li>里面也提到了卸载ToolBox时, 如何先删除虚拟机里的 dock-machine</li>
</ul>
<p>使用虚拟机后的文件共享很简单, 在 <code>VirtualBox</code>-&gt;<code>Settings</code>-&gt;<code>Shared Folders</code> 直接修改好就行了.</p>
<p>使用 putty 登录docker虚拟机</p>
<ul>
<li>不太喜欢 Docker Quickstart Terminal 提供的终端, 用起来不顺手(不能用鼠标, 不能复制黏贴)<br>不过只有在这个终端里, 能直接使用 <code>docker-machine</code> 相关的指令</li>
<li>自己使用ConEmu统一了终端, 里面集成好putty. 因此需要使用ssh.</li>
<li>获取 boot2docker 的IP地址.<br>运行 Docker Quickstart Terminal 成功后, 终端上可以找到这样一句话<br><code>docker is configured to use the default machine with IP 10.0.0.100</code><br>或者, 输入 <code>docker-machine ls</code>, 找到其IP地址. 譬如 <code>tcp://10.0.0.100:2376</code><br>或者, 直接登录boot2docker虚拟机, 输入指令 <code>ifconfig</code> 查看IP地址.<code>10.0.0.100</code></li>
<li>boot2docker的登录名默认就是 <code>docker</code>. 如果需要密码的话, 应该是 <code>tcuser</code></li>
<li>运行过 Docker Quickstart Terminal 后, docker自动生成了ssh密钥.<br>一般存储在 <code>C:\Users\my_name\.docker\machine\machines\default\</code> 或者 <code>%HOMEPATH%\.ssh</code>下面<br><code>id_rsa</code> 是私钥, <code>id_rsa.pub</code> 是公钥</li>
<li>打开 <code>puttygen.exe</code>-&gt;<code>Load an existing private key file</code>-&gt;<code>Load</code>-&gt;选择文件格式为 <code>All Files (*.*)</code>-&gt;选择<code>id_rsa</code>-&gt;弹出框 <code>OK</code><br>接着 <code>puttygen.exe</code> 主界面下-&gt;<code>Save private key</code>-&gt;保存为<code>id_rsa.ppk</code></li>
<li>打开 <code>putty.exe</code>-&gt;左边<code>Connection</code>-&gt;<code>SSH</code>-&gt;<code>Auth</code>-&gt;右边<code>Private key file for authentication</code>-&gt;<code>Browse...</code>-&gt;选择<code>id_rsa.ppk</code><br>接着 <code>putty.exe</code>-&gt;左边<code>Session</code>-&gt;右边<code>Connection type:</code>点选<code>SSH</code>-&gt;<code>Host Name (or IP address)</code>填如<code>docker@10.0.0.100</code>-&gt;<code>Port</code>填入<code>22</code><br>最后 <code>Saved Sessions</code> 填入期望的名称如 <code>boot2docker</code>-&gt;<code>Save</code>-&gt;<code>Open</code>-&gt;连接成功!</li>
</ul>
<h1 id="Docker-常用指令"><a href="#Docker-常用指令" class="headerlink" title="Docker 常用指令"></a>Docker 常用指令</h1><p>可参考:</p>
<ul>
<li><a href="http://www.dockerinfo.net/341.html" target="_blank" rel="external">Docker命令指令详情-持续更新</a></li>
<li><a href="https://yeasy.gitbooks.io/docker_practice/content/install/ubuntu.html" target="_blank" rel="external">Docker — 从入门到实践</a></li>
</ul>
<h2 id="镜像指令"><a href="#镜像指令" class="headerlink" title="镜像指令"></a>镜像指令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 从 Docker Hub 获取 ubuntu 16.04 的镜像</span></div><div class="line">docker pull ubuntu:16.04</div><div class="line"></div><div class="line"><span class="comment"># 列出所有镜像</span></div><div class="line">docker images</div><div class="line"></div><div class="line"><span class="comment"># 运行 ubuntu</span></div><div class="line">docker run -it --rm ubuntu:16.04 bash</div><div class="line"><span class="comment"># -it： -i, 交互式操作; -t, 显示终端</span></div><div class="line"><span class="comment"># --rm： 容器退出后随之将其删除 (不建议)</span></div><div class="line"></div><div class="line"><span class="comment"># 在容器里输入一些指令后, 查看容器的变化</span></div><div class="line">docker diff ubuntu:16.04</div><div class="line"></div><div class="line"><span class="comment"># 用commit制作的进行成为黑箱镜像, 如果开源发布, 人们会有安全性的担忧(无法知道到底做了什么)</span></div><div class="line"><span class="comment"># 将当前容器制作为镜像 (会把容器内的变动新增一层文件)</span></div><div class="line">docker commit --message <span class="string">"2440 compiler"</span> container_ID_or_name ubuntu:2440</div><div class="line"><span class="comment"># --message: 可省, 记录本次修改的内容</span></div><div class="line"><span class="comment"># contain_ID_or_name: 使用 'docker ps -a' 可查看所有容器信息</span></div><div class="line"><span class="comment"># ubuntu:2440 目标镜像:标签</span></div><div class="line"></div><div class="line"><span class="comment"># 查看镜像历史记录</span></div><div class="line">docker <span class="built_in">history</span> ubuntu:2440</div><div class="line"></div><div class="line"><span class="comment"># 保存镜像 (本地文件)</span></div><div class="line">docker save ubuntu:2440 | gzip &gt; ubuntu-2440.tar.gz</div><div class="line"></div><div class="line"><span class="comment"># 加载镜像 (本地文件)</span></div><div class="line">docker load -i ubuntu-2440.tar.gz</div><div class="line"><span class="comment"># 相比后面的 'docker import', 镜像存储文件保存完整记录, 体积要大.</span></div><div class="line"></div><div class="line"><span class="comment"># 删除镜像</span></div><div class="line">docker rmi ubuntu:2440</div><div class="line"><span class="comment"># ubuntu:2440 目标镜像:标签. 这里也可以用镜像ID代替(短ID也行)</span></div><div class="line"></div><div class="line"><span class="comment"># 删除所有在 'mongo:3.2' 之前的镜像 (windows下不可用)</span></div><div class="line">docker rmi $(docker images -q <span class="_">-f</span> before=mongo:3.2)</div></pre></td></tr></table></figure>
<h2 id="容器指令"><a href="#容器指令" class="headerlink" title="容器指令"></a>容器指令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 输出 "hello world"</span></div><div class="line">docker run ubuntu <span class="built_in">echo</span> <span class="string">'Hello world'</span></div><div class="line"></div><div class="line"><span class="comment"># 运行 ubuntu</span></div><div class="line">docker run -it ubuntu:16.04 bash</div><div class="line"><span class="comment"># -it： -i, 交互式操作; -t, 显示终端</span></div><div class="line"></div><div class="line"><span class="comment"># 后台运行</span></div><div class="line">docker run <span class="_">-d</span> ubuntu sh -c <span class="string">"while true; do echo hello world; sleep 1; done"</span></div><div class="line"><span class="comment"># 会返回container的ID号</span></div><div class="line"><span class="comment"># -d: 后台运行, 不输出结果到主机界面上</span></div><div class="line"><span class="comment"># sh -c: 作为sh文件执行</span></div><div class="line"></div><div class="line"><span class="comment"># 获取容器的输出信息</span></div><div class="line">docker logs container_ID_or_name</div><div class="line"></div><div class="line"><span class="comment"># 查看容器信息 (print server)</span></div><div class="line">docker ps <span class="_">-a</span></div><div class="line"><span class="comment"># -a 表示显示所有容器状态(包括终止状态)</span></div><div class="line"></div><div class="line"><span class="comment"># 容器的终止,启动和重启</span></div><div class="line">docker stop container_ID_or_name</div><div class="line">docker start container_ID_or_name </div><div class="line">docker restart container_ID_or_name</div><div class="line"></div><div class="line"><span class="comment"># 进入指定容器</span></div><div class="line">docker attach container_ID_or_name</div><div class="line"><span class="comment"># attach 在多窗口时很不方便. 参考资料推荐的是nsenter (windows下不可用)</span></div><div class="line"></div><div class="line"><span class="comment"># 导出容器</span></div><div class="line">docker <span class="built_in">export</span> container_ID_or_name &gt; ubuntu.tar</div><div class="line"><span class="comment"># 导入容器快照到本地镜像库</span></div><div class="line">cat ubuntu.tar | docker import - <span class="built_in">test</span>/ubuntu:v1.0</div><div class="line"><span class="comment"># 相比前面的 'docker load', 容器快照将丢弃历史记录. 另外, 可以重新指定标签.</span></div><div class="line"></div><div class="line"><span class="comment"># 删除容器</span></div><div class="line">docker rm container_ID_or_name</div><div class="line"></div><div class="line"><span class="comment"># 删除所有容器 (windows下不可用)</span></div><div class="line">docker rm $(docker ps -qa)</div><div class="line"></div><div class="line"><span class="comment"># 获取某个容器的PID信息 (windows下不可用)</span></div><div class="line">docker inspect --format <span class="string">'&#123;&#123; .State.Pid &#125;&#125;'</span> container_ID_or_name</div><div class="line"></div><div class="line"><span class="comment"># 获取某个容器的 IP 地址 (windows下不可用)</span></div><div class="line">docker inspect --format <span class="string">'&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;'</span> container_ID_or_name</div><div class="line"></div><div class="line"><span class="comment"># 目前 Docker 并没有提供直接的对容器 IP 地址的管理支持</span></div></pre></td></tr></table></figure>
<h2 id="其它指令和功能"><a href="#其它指令和功能" class="headerlink" title="其它指令和功能"></a>其它指令和功能</h2><p><a href="https://yeasy.gitbooks.io/docker_practice/content/install/ubuntu.html" target="_blank" rel="external">Docker — 从入门到实践</a></p>
<ul>
<li><a href="https://yeasy.gitbooks.io/docker_practice/content/image/build.html" target="_blank" rel="external">使用 Dockerfile 定制镜像</a></li>
<li><a href="https://yeasy.gitbooks.io/docker_practice/content/image/dockerfile/" target="_blank" rel="external">Dockerfile 指令详解</a></li>
<li><a href="https://yeasy.gitbooks.io/docker_practice/content/repository/dockerhub.html" target="_blank" rel="external">Docker Hub 基本操作及自动创建</a></li>
<li><a href="https://yeasy.gitbooks.io/docker_practice/content/repository/local_repo.html" target="_blank" rel="external">Docker Registry 构建私有仓库</a></li>
<li><a href="https://yeasy.gitbooks.io/docker_practice/content/data_management/volume.html" target="_blank" rel="external">Docker Volumn 数据卷的操作</a></li>
<li><a href="https://yeasy.gitbooks.io/docker_practice/content/data_management/container.html" target="_blank" rel="external">Docker Volumn Container 数据卷容器的操作</a></li>
<li><a href="https://yeasy.gitbooks.io/docker_practice/content/network/port_mapping.html" target="_blank" rel="external">使用网络-外部访问容器</a></li>
<li><a href="https://yeasy.gitbooks.io/docker_practice/content/network/linking.html" target="_blank" rel="external">使用网络-容器互联</a></li>
<li><a href="https://yeasy.gitbooks.io/docker_practice/content/advanced_network/" target="_blank" rel="external">高级网络配置</a></li>
<li><a href="https://yeasy.gitbooks.io/docker_practice/content/advanced_network/quick_guide.html" target="_blank" rel="external">高级网络配置-网络相关命令列表</a></li>
<li><a href="https://yeasy.gitbooks.io/docker_practice/content/appendix/faq/" target="_blank" rel="external">常见问题总结</a></li>
</ul>
<h1 id="资料和参考"><a href="#资料和参考" class="headerlink" title="资料和参考"></a>资料和参考</h1><p><a href="https://yeasy.gitbooks.io/docker_practice/content/install/ubuntu.html" target="_blank" rel="external">Docker — 从入门到实践</a><br><a href="http://www.dockerinfo.net/2117.html" target="_blank" rel="external">Docker技术架构详细分析 Docker模块分析</a><br><a href="http://wiki.jikexueyuan.com/project/docker/installation/windows.html" target="_blank" rel="external">Microsoft Windows 安装docker</a><br><a href="http://www.dockerinfo.net/341.html" target="_blank" rel="external">Docker命令指令详情-持续更新</a></p>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[嵌入式linux环境搭建-jz2440开发板]]></title>
      <url>https://draapho.github.io/2017/02/21/1707-jz2440-env/</url>
      <content type="html"><![CDATA[<h1 id="环境及结论"><a href="#环境及结论" class="headerlink" title="环境及结论"></a>环境及结论</h1><ul>
<li>大环境的搭建思路可参考<a href="https://draapho.github.io/2017/02/16/1705-linux-env/">嵌入式linux环境搭建</a><ul>
<li>gateway ip <code>10.0.0.138</code></li>
<li>PC windows: win10 64bit, ip <code>10.0.0.98</code></li>
<li>PC linux(最终版本): ubuntu server 16.04 32 bit, ip <code>10.0.0.100</code></li>
<li>Embedded Linux: jz2440v3 ip <code>10.0.0.111</code></li>
</ul>
</li>
<li>用 jLink 或 openJtag 烧录 uboot</li>
<li>基于nfs服务烧录kernal</li>
<li>使用nfs加载文件系统</li>
<li>编译一个驱动模块并运行</li>
<li>以上, 完成jz2440的环境搭建</li>
</ul>
<p><strong>PC linux 建议使用Ubuntu 32bit, 交叉编译工具必须使用 <code>arm-linux-gcc-3.4.5-glibc-2.3.6</code></strong></p>
<h1 id="嵌入式linux简介"><a href="#嵌入式linux简介" class="headerlink" title="嵌入式linux简介"></a>嵌入式linux简介</h1><h2 id="linux软件层次"><a href="#linux软件层次" class="headerlink" title="linux软件层次"></a>linux软件层次</h2><ul>
<li>引导程序: 分为两部分 硬件中的固化boot代码 和 BootLoader代码, 其中固化的boot代码可有可无, BootLoader是烧写上去的<ul>
<li>PC linux: 分为 BIOS (固件程序) 和 BootLoader(GRUB等程序)</li>
<li>执行过程: BIOS执行硬件检测 和 资源分配, 之后将BootLoader读取到内存中, 开始执行BootLoader内容</li>
<li>执行作用: 将内核读取到内存中, 跳转到内核的入口运行, 正式执行操作系统程序</li>
<li>嵌入式 linux: BootLoader与硬件的依赖性很强, S3C2440 使用的是u-boot</li>
<li>执行过程: 初始化基本硬件, 加载BootLoader, 读取uboot环境变量, 启动uboot.</li>
<li>执行作用: 和 pc linux 是一样的. 读取内核并执行.</li>
</ul>
</li>
<li>Linux内核 (kernel): 嵌入式开发板定制的内核 和 其启动参数</li>
<li>文件系统 (file system): 即Linux中的文件系统</li>
<li>应用程序: 即用户执行的应用程序</li>
</ul>
<h2 id="jz2440的分区和启动"><a href="#jz2440的分区和启动" class="headerlink" title="jz2440的分区和启动"></a>jz2440的分区和启动</h2><p>s3c2440 的线性地址分配:<br><img src="https://draapho.github.io/images/1707/address-mapping.jpg" alt="address mapping"></p>
<p>jz2440 的分区: (在uboot下, 用 <code>mtdparts</code> 查看分区情况)</p>
<table>
<thead>
<tr>
<th>jz2440 物理设备</th>
<th>大小(byte)</th>
<th>线性地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>SFR Area</td>
<td>寄存器</td>
<td>0x4800_0000 - 0x5B00_0020</td>
</tr>
<tr>
<td>SDRAM</td>
<td>64M</td>
<td>0x3000_0000 - 0x3400_0000</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Nor Flash</td>
<td>2M</td>
<td>0x0000_0000 - 0x0020_0000</td>
</tr>
<tr>
<td>- u-boot</td>
<td>-</td>
<td>0x0000_0000 开始</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Nand Flash</td>
<td>256M</td>
<td>非总线设备, 无法映射地址</td>
</tr>
<tr>
<td>- bootloader</td>
<td>256K</td>
<td>0x0000_0000 - 0x0004_0000</td>
</tr>
<tr>
<td>- params</td>
<td>128K</td>
<td>0x0004_0000 - 0x0006_0000</td>
</tr>
<tr>
<td>- kernel</td>
<td>2M</td>
<td>0x0006_0000 - 0x0026_0000</td>
</tr>
<tr>
<td>- root</td>
<td>253.6M</td>
<td>0x0026_0000 - 0x1000_0000</td>
</tr>
</tbody>
</table>
<p>自己的开发板启动方式:</p>
<ul>
<li>Nor flash: JLink 只能烧录 Nor flash. 默认使用这种方式! 使用nfs文件系统<br><img src="https://draapho.github.io/images/1707/nor-flash-boot.png" alt="Nor flash boot"></li>
<li>Nand flash: 使用本地文件系统启动. 也可用于裸跑测试. (Steppingstone 就是 BootSRAM)<br><img src="https://draapho.github.io/images/1707/nand-flash-boot.png" alt="Nand flash boot"></li>
<li><strong>以下部分初学先忽略! </strong></li>
<li><p>如果是通过uboot的内核命令行给MTD层传递MTD分区信息, 内核读取到的分区信息始终和u-boot中的保持一致(推荐的做法)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 开发板 uboot</span></div><div class="line">setenv bootargs noinitrd console=ttySAC0 root=/dev/mtdblock3 rootfstype=jffs2 mtdparts=nand_flash:128k(u-boot)ro,64k(u-boot envs),3m(kernel),30m(root.jffs2),30m(root.yaffs)</div><div class="line"></div><div class="line"><span class="comment"># ubuntu shell, 内核配置时使能</span></div><div class="line">Device Drivers -&gt; Memory Technology Device (MTD) support -&gt; Command line partition table parsing</div></pre></td></tr></table></figure>
</li>
<li><p>如果是把分区信息写在内核源代码MTD里定义好的方法, 要保证它和u-boot中的保持一致,即同步修改uboot及内核的相关部分</p>
</li>
<li><strong>参考</strong>: <a href="http://laokongzhuang.blog.51cto.com/2404494/858788" target="_blank" rel="external">嵌入式linux flash分区配置</a></li>
<li><strong>以上部分初学先忽略! </strong></li>
</ul>
<h1 id="设置静态ip"><a href="#设置静态ip" class="headerlink" title="设置静态ip"></a>设置静态ip</h1><h2 id="uboot-设置静态ip"><a href="#uboot-设置静态ip" class="headerlink" title="uboot 设置静态ip"></a>uboot 设置静态ip</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 开发板 uboot</span></div><div class="line"></div><div class="line"><span class="comment"># 设置ip地址, 在OpenJTAG&gt; 提示符下</span></div><div class="line"><span class="built_in">set</span> ipaddr 10.0.0.111           <span class="comment"># 设置开发板的ip地址</span></div><div class="line"><span class="built_in">set</span> serverip 10.0.0.138</div><div class="line">save                            <span class="comment"># 保存</span></div><div class="line">printenv                        <span class="comment"># 打印环境变量, 查看设置结果</span></div></pre></td></tr></table></figure>
<h2 id="嵌入式linux下设置静态ip"><a href="#嵌入式linux下设置静态ip" class="headerlink" title="嵌入式linux下设置静态ip"></a>嵌入式linux下设置静态ip</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 开发板 shell</span></div><div class="line"></div><div class="line"><span class="comment"># 手工修改ip地址</span></div><div class="line">ifconfig eth0 10.0.0.111 netmask 255.255.255.0</div><div class="line"></div><div class="line"><span class="comment"># 永久修改IP地址</span></div><div class="line">vi /etc/init.d/rcS              <span class="comment"># 可以在windows下直接改</span></div><div class="line">    <span class="comment"># ===== 文件内容, 添加如下内容: =====</span></div><div class="line">    ifconfig eth0 10.0.0.111</div><div class="line">    <span class="comment"># ===== 结束修改, 保存退出vi =====</span></div></pre></td></tr></table></figure>
<h1 id="uboot-的编译和烧录"><a href="#uboot-的编译和烧录" class="headerlink" title="uboot 的编译和烧录"></a>uboot 的编译和烧录</h1><h2 id="uboot-打补丁和编译"><a href="#uboot-打补丁和编译" class="headerlink" title="uboot 打补丁和编译"></a>uboot 打补丁和编译</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ubuntu shell</span></div><div class="line"></div><div class="line">tar xjvf u-boot-1.1.6.tar.bz2               <span class="comment"># 解压uboot源码</span></div><div class="line"><span class="built_in">cd</span> u-boot-1.1.6                             <span class="comment"># 进入uboot源码目录</span></div><div class="line">patch -p1 &lt; ../u-boot-1.1.6_jz2440.patch    <span class="comment"># 打补丁文件, p1表忽略patch文件内的1层目录</span></div><div class="line"><span class="comment"># tar cjvf u-boot-1.1.6-patched.tar.bz2 dir # 可选, 压缩备份一下</span></div><div class="line"></div><div class="line"><span class="comment"># pwd = u-boot-1.1.6</span></div><div class="line">make clean</div><div class="line">make 100ask24x0_config                      <span class="comment"># uboot config文件</span></div><div class="line">make                                        <span class="comment"># uboot 编译, 得到u-boot.bin文件</span></div><div class="line"><span class="comment"># 不能用sudo make, 否则就是报错</span></div></pre></td></tr></table></figure>
<h2 id="uboot-的烧录和升级"><a href="#uboot-的烧录和升级" class="headerlink" title="uboot 的烧录和升级"></a>uboot 的烧录和升级</h2><p>一般而言, 开发板出厂时已经烧录好可用的uboot.<br>只要烧录好了uboot, 就不再需要 jLink 或 openJtag 这类烧录工具了!<br>若要烧录uboot, 可用 jLink 或 openJtag 烧录到norflash中, 略过不表.</p>
<p>下面说一下基于nfs服务升级uboot:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 开发板 uboot</span></div><div class="line"><span class="comment"># 要使用nfs功能, 必须正确设置uboot的ip地址</span></div><div class="line"><span class="comment"># 将 .../u-boot-1.1.6/u-boot.bin 拷贝到 /jz2440/</span></div><div class="line"></div><div class="line"><span class="comment"># uboot烧录: 用 jLink 烧录成功到nor flash后, 就可以用nfs进行升级或再烧录到nand flash中.</span></div><div class="line"><span class="comment"># uboot升级: 在OpenJTAG&gt; 提示符下</span></div><div class="line">nfs 30000000 10.0.0.98:/jz2440/u-boot.bin   <span class="comment"># nfs 加载 uboot 固件到ram中 (0x30000000是sdram的地址)</span></div><div class="line">nand erase bootloader                       <span class="comment"># 擦除 falsh 的 bootloader 区</span></div><div class="line">nand write.jffs2 30000000 bootloader        <span class="comment"># 烧录 uboot (ram-&gt;flash)</span></div><div class="line"></div><div class="line"><span class="comment"># uboot 运行时, 已经被加载到ram中, 因此可以用uboot的nfs功能来擦除和升级flash中的uboot</span></div><div class="line"><span class="comment"># 看上去实在自己运行自己, 本质上是ram中的uboot读写flash内容.</span></div></pre></td></tr></table></figure>
<h1 id="kernel-的编译和烧录"><a href="#kernel-的编译和烧录" class="headerlink" title="kernel 的编译和烧录"></a>kernel 的编译和烧录</h1><h2 id="kernel-打补丁和编译"><a href="#kernel-打补丁和编译" class="headerlink" title="kernel 打补丁和编译"></a>kernel 打补丁和编译</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ubuntu shell</span></div><div class="line"></div><div class="line">tar xjvf linux-2.6.22.6.tar.bz2             <span class="comment"># 解压kernel源码</span></div><div class="line"><span class="built_in">cd</span> linux-2.6.22.6                           <span class="comment"># 进入kernel源码目录</span></div><div class="line">patch -p1 &lt; ../linux-2.6.22.6_jz2440.patch  <span class="comment"># 打补丁文件, p1表忽略patch文件内的1层目录</span></div><div class="line"></div><div class="line"><span class="comment"># pwd = linux-2.6.22.6</span></div><div class="line">mv ../4.3寸LCD_mach-smdk2440.c arch/arm/mach<span class="_">-s</span>3c2440/mach-smdk2440.c    <span class="comment"># 替换为4.3寸屏源码</span></div><div class="line">make clean                                  <span class="comment"># 清空 (先清空再在SI内查看)</span></div><div class="line">cp config_ok .config                        <span class="comment"># 设置config文件</span></div><div class="line">make uImage                                 <span class="comment"># 编译获得内核image</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 可能在make时, 提示如下错误信息. 原因是新版的make对老的Makefile规则不兼容</span></div><div class="line">Makefile:1449: *** mixed implicit and normal rules.  Stop.</div><div class="line"></div><div class="line">vim Makefile</div><div class="line">    <span class="comment"># 416行      config %config: scripts_basic outputmakefile FORCE</span></div><div class="line">    <span class="comment">#   改为 -&gt;  %config: scripts_basic outputmakefile FORCE </span></div><div class="line">    <span class="comment"># 1449行     / %/: prepare scripts FORCE</span></div><div class="line">    <span class="comment">#   改为 -&gt;  %/: prepare scripts FORCE</span></div><div class="line">    <span class="comment"># 保存后重新编译即可.</span></div></pre></td></tr></table></figure>
<h2 id="使用-nfs-烧录-kernel"><a href="#使用-nfs-烧录-kernel" class="headerlink" title="使用 nfs 烧录 kernel"></a>使用 nfs 烧录 kernel</h2><p>如果配置好网路, 建议使用 nfs 进行烧录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 开发板 uboot</span></div><div class="line"><span class="comment"># 要使用nfs功能, 必须正确设置uboot的ip地址</span></div><div class="line"><span class="comment"># 将 .../linux-2.6.22.6/arch/arm/boot/uImage 拷贝到 /jz2440/</span></div><div class="line"></div><div class="line"><span class="comment"># kernel: 在OpenJTAG&gt; 提示符下</span></div><div class="line">nfs 30000000 10.0.0.98:/jz2440/uImage       <span class="comment"># nfs 加载 kernel 固件到ram中 (0x30000000是sdram的地址)</span></div><div class="line">nand erase kernel                           <span class="comment"># 擦除 falsh 的 kernel 区</span></div><div class="line">nand write.jffs2 30000000 kernel            <span class="comment"># 烧录 kernel (ram-&gt;flash)</span></div></pre></td></tr></table></figure></p>
<h2 id="使用-dnw-进行烧录"><a href="#使用-dnw-进行烧录" class="headerlink" title="使用 dnw 进行烧录"></a>使用 dnw 进行烧录</h2><p>网路配置比较繁琐和复杂, windows的dnw需要安装驱动, 而且会有问题!<br>因此最便捷的方式就是基于uboot, 使用 linux 的 dnw.<br><strong>确保链接了开发板的串口和usb口, 并把usb口关联到Ubuntu上.</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 开发板 uboot</span></div><div class="line"></div><div class="line"><span class="comment"># 打开 jz2440 开发板串口终端, 启动时输入空格键, 进入如下菜单</span></div><div class="line"><span class="comment">##### 100ask Bootloader for OpenJTAG #####</span></div><div class="line">[n] Download u-boot to Nand Flash</div><div class="line">[o] Download u-boot to Nor Flash            <span class="comment"># 如果是Nand Flash启动的话，这个菜单项没有</span></div><div class="line">[k] Download Linux kernel uImage</div><div class="line">[j] Download root_jffs2 image</div><div class="line">[y] Download root_yaffs image</div><div class="line">[d] Download to SDRAM &amp; Run</div><div class="line">[z] Download zImage into RAM</div><div class="line">[g] Boot linux from RAM</div><div class="line">[f] Format the Nand Flash</div><div class="line">[s] Set the boot parameters</div><div class="line">[b] Boot the system</div><div class="line">[r] Reboot u-boot</div><div class="line">[q] Quit from menu</div><div class="line"></div><div class="line">Enter your selection: k                     <span class="comment"># 输入k, 烧录 kernel</span></div><div class="line">USB host is connected. Waiting a download.  <span class="comment"># 提示连接成功</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 切换到 Ubuntu 终端, 输入</span></div><div class="line"><span class="comment"># pwd = ./linux-2.6.22.6                    # 确保在 kernel 源码路径下</span></div><div class="line">sudo dnw ./arch/arm/boot/uImage             <span class="comment"># 输入dnw指令, 指明烧录文件</span></div><div class="line"><span class="comment"># DNW usb device found!                     # 开始烧录</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 这样就成功把 kernel 烧录到 jz2440 开发板中了.</span></div><div class="line"><span class="comment"># 要烧录其它如 uboot, filesystem, 整个流程和 dnw 指令都是一样的. 譬如:</span></div><div class="line">sudo dnw u-boot.bin                         <span class="comment"># 先输入n, 烧录uboot</span></div><div class="line">sudo dnw fs_qtopia_ts.yaffs2                <span class="comment"># 先输入y, 烧录文件系统</span></div><div class="line">sudo dnw leds_0x31000000.bin 0x31000000     <span class="comment"># 先输入d, 烧录代码到SDRAM并运行</span></div></pre></td></tr></table></figure>
<h1 id="加载-filesystem"><a href="#加载-filesystem" class="headerlink" title="加载 filesystem"></a>加载 filesystem</h1><p>提供了如下几个文件系统</p>
<ol>
<li>fs_mini.tar.bz2      是最小的根文件系统. 不推荐, 需要手工建立设备节点</li>
<li>fs_mini_mdev.tar.bz2 是最小的根文件系统. 推荐, 启动后使用mdev自动建立设备节点</li>
<li>fs_qtopia.tar.bz2    是JZ2440使用的支持触摸屏的根文件系统</li>
<li>fs_xwindow.tar.bz2   是基于X的根文件系统</li>
</ol>
<p>这里以 fs_mini_mdev.tar.bz2 为例进行开发. 无UI, shell操作.</p>
<h2 id="制作-filesystem"><a href="#制作-filesystem" class="headerlink" title="制作 filesystem"></a><del>制作 filesystem</del></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ubuntu shell</span></div><div class="line"></div><div class="line">sudo tar xjf fs_mini_mdev.tar.bz2             <span class="comment"># 解压缩, 必须加sudo</span></div><div class="line">mkyaffs2image fs_mini_mdev fs_mini_mdev.yaffs <span class="comment"># 生成文件系统 fs_mini_mdev.yaffs</span></div></pre></td></tr></table></figure>
<h2 id="使用-nfs-烧录-filesystem"><a href="#使用-nfs-烧录-filesystem" class="headerlink" title="使用 nfs 烧录 filesystem"></a><del>使用 nfs 烧录 filesystem</del></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 开发板 uboot</span></div><div class="line"><span class="comment"># 要使用nfs功能, 必须正确设置uboot的ip地址</span></div><div class="line"><span class="comment"># 将 .../fs_mini_mdev.yaffs 拷贝到 /jz2440/</span></div><div class="line"></div><div class="line"><span class="comment"># fs: 在OpenJTAG&gt; 提示符下 (实际不用, 用nfs加载fs)</span></div><div class="line">nfs 30000000 10.0.0.98:/jz2440/fs_mini_mdev.yaffs2</div><div class="line">nand erase root</div><div class="line">nand write.yaffs 30000000 260000 ‭88AC40‬       <span class="comment"># 要算文件大小, 很麻烦.</span></div><div class="line"></div><div class="line"><span class="comment"># 设置为从flash启动 file system. 在OpenJTAG&gt; 提示符下</span></div><div class="line"><span class="built_in">set</span> bootargs noinitrd root=/dev/mtdblock3 init=/linuxrc console=ttySAC0</div><div class="line">save</div><div class="line">reset</div></pre></td></tr></table></figure>
<h2 id="直接加载-nfs-文件系统"><a href="#直接加载-nfs-文件系统" class="headerlink" title="直接加载 nfs 文件系统"></a>直接加载 nfs 文件系统</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 开发板 uboot</span></div><div class="line"><span class="comment"># 要使用nfs功能, 必须正确设置uboot的ip地址</span></div><div class="line"></div><div class="line"><span class="comment"># uboot, 从NFS加载文件系统. 在OpenJTAG&gt; 提示符下</span></div><div class="line"><span class="built_in">set</span> bootargs noinitrd root=/dev/nfs nfsroot=10.0.0.98:/fs ip=10.0.0.111:10.0.0.98:10.0.0.138:255.255.255.0::eth0:off init=/linuxrc console=ttySAC0</div><div class="line"><span class="comment"># (简化ip: 'set bootargs noinitrd root=/dev/nfs nfsroot=10.0.0.98:/fs ip=10.0.0.111 init=/linuxrc console=ttySAC0' 也可以工作)</span></div><div class="line">save        <span class="comment"># 保存修改</span></div><div class="line">reset       <span class="comment"># 重启. (稍后再重启, 先修改好 filesystem 内的初始化文件)</span></div><div class="line"></div><div class="line"><span class="comment"># 参数简要说明:</span></div><div class="line"><span class="comment"># 'root=/dev/nfs' 加载nfs文件系统</span></div><div class="line"><span class="comment"># 'nfsroot=10.0.0.98:/fs' nfs文件系统的来源, 此处是由win10当nfs服务器, 共享出/fs文件夹</span></div><div class="line"><span class="comment"># 'ip=10.0.0.111:10.0.0.98:10.0.0.138:255.255.255.0::eth0:off' 分别表示:</span></div><div class="line"><span class="comment">#  ip= 开发板ip : nfs服务器ip: 网关ip : 子网掩码 :: 开发板网口 : off</span></div></pre></td></tr></table></figure>
<h2 id="加载其它nfs文件"><a href="#加载其它nfs文件" class="headerlink" title="加载其它nfs文件"></a>加载其它nfs文件</h2><p>为了方便开发调试, 可以加载其它nfs文件到开发板linux中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 开发板 shell</span></div><div class="line"></div><div class="line"><span class="comment"># 开发板手动加载nfs文件</span></div><div class="line">mkdir /mnt/jz2440</div><div class="line">mount -t nfs -o nolock,vers=2 10.0.0.98:/jz2440 /mnt/jz2440</div><div class="line"></div><div class="line">// 开机自动加载nfs文件</div><div class="line">mkdir /mnt/jz2440</div><div class="line">vi /etc/init.d/rcS                          <span class="comment"># 可以在windows下直接改</span></div><div class="line">    <span class="comment"># ===== 文件内容, 末尾加入如下语句: =====</span></div><div class="line">    <span class="comment"># mkdir /mnt/jz2440     # 建议手动创建, 需要容错的话, 可加上这句</span></div><div class="line">    mount -t nfs -o nolock,vers=2 10.0.0.98:/jz2440 /mnt/jz2440</div><div class="line">    ln <span class="_">-s</span> /mnt/jz2440 /jz2440</div><div class="line">    <span class="comment"># ===== 结束修改, 保存退出vi =====</span></div></pre></td></tr></table></figure>
<h2 id="基于-fs-mini-mdev-制作-qt"><a href="#基于-fs-mini-mdev-制作-qt" class="headerlink" title="基于 fs_mini_mdev 制作 qt"></a><del>基于 fs_mini_mdev 制作 qt</del></h2><p><strong>这部分没有自己验证过</strong>, 步骤繁琐, 不确定是否有问题.<br>因为本质上和使用最小系统是一样的, 只是加上了图形界面, 这个要到应用层开发UI才会用到!</p>
<h3 id="编译qt依赖的库文件"><a href="#编译qt依赖的库文件" class="headerlink" title="编译qt依赖的库文件"></a><del>编译qt依赖的库文件</del></h3><p>注意修改<code>--prefix=/work/tools/gcc-3.4.5-glibc-2.3.6/arm-linux</code> 为实际的gcc-3.4.5-glibc-2.3.6绝对路径.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ubuntu shell</span></div><div class="line"><span class="comment"># 编译qt依赖的库文件</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 1. 编译jpeg库</span></div><div class="line"><span class="comment"># 源码位于 '.../qtopia/deps/jpegsrc.v6b.tar.gz'</span></div><div class="line">tar xzf jpegsrc.v6b.tar.gz                  <span class="comment"># 解压得到jpeg-6b目录</span></div><div class="line"><span class="built_in">cd</span> jpeg-6b                                  <span class="comment"># 进入源码目录进行配置</span></div><div class="line">./configure --enable-shared --enable-static --prefix=/work/tools/gcc-3.4.5-glibc-2.3.6/arm-linux --build=i386 --host=arm</div><div class="line"></div><div class="line"><span class="comment"># 会生成 Makefile 文件, 修改编译工具(需要改为arm-linux-xxx, 交叉编译):</span></div><div class="line">vim Makefile                                <span class="comment"># 可以在windows下直接改</span></div><div class="line">    <span class="comment"># ===== 文件内容, 修改如下内容: =====</span></div><div class="line">    CC= arm-linux-gcc       <span class="comment"># CC= gcc</span></div><div class="line">    AR= arm-linux-ar rc     <span class="comment"># AR= ar rc</span></div><div class="line">    AR2= arm-linux-ranlib   <span class="comment"># AR2= ranlib</span></div><div class="line">    <span class="comment"># ===== 结束修改, 保存退出vim =====</span></div><div class="line">make</div><div class="line">make install-lib</div><div class="line"><span class="comment"># .../gcc-3.4.5-glibc-2.3.6/arm-linux/lib 中生成jpeg库文件</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 2. 编译uuid库</span></div><div class="line"><span class="comment"># 源码位于 '.../qtopia/deps/e2fsprogs-1.40.2.tar.gz'</span></div><div class="line">tar xzf e2fsprogs-1.40.2.tar.gz             <span class="comment"># 解压</span></div><div class="line"><span class="built_in">cd</span> e2fsprogs-1.40.2                         <span class="comment"># 进入源码目录进行配置</span></div><div class="line">mkdir build</div><div class="line"><span class="built_in">cd</span> build</div><div class="line"><span class="comment"># 指定编译工具, 配置编译环境</span></div><div class="line">../configure --with-cc=arm-linux-gcc --with-linker=arm-linux-ld --enable-elf-shlibs--host=arm-prefix=/work/tools/gcc-3.4.5-glibc-2.3.6/arm-linux</div><div class="line">make</div><div class="line">make install-lib</div><div class="line"><span class="comment"># .../gcc-3.4.5-glibc-2.3.6/arm-linux/lib 中生成 libuuid.so</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 3. 编译zlib库</span></div><div class="line"><span class="comment"># 源码位于 '.../qtopia/deps/zlib-1.2.3.tar.gz'</span></div><div class="line">tar xzf zlib-1.2.3.tar.gz                   <span class="comment"># 解压</span></div><div class="line"><span class="built_in">cd</span> zlib-1.2.3                               <span class="comment"># 进入源码目录进行配置</span></div><div class="line">./configure --shared --prefix=/work/tools/gcc-3.4.5-glibc-2.3.6/arm-linux</div><div class="line"></div><div class="line"><span class="comment"># 会生成 Makefile 文件, 修改编译工具(需要改为arm-linux-xxx, 交叉编译):</span></div><div class="line">vim Makefile                                <span class="comment"># 可以在windows下直接改</span></div><div class="line">    <span class="comment"># ===== 文件内容, 修改如下内容: =====</span></div><div class="line">    CC=arm-linux-gcc            <span class="comment"># CC=gcc</span></div><div class="line">    <span class="comment"># ......</span></div><div class="line">    <span class="comment">#LDSHARED=gcc -shared -Wl,-soname,libz.so.1</span></div><div class="line">    LDSHARED=arm-linux-gcc -shared -Wl,-soname,libz.so.1</div><div class="line">    <span class="comment"># ......</span></div><div class="line">    CPP=arm-linux-gcc -E        <span class="comment"># CPP=gcc -E</span></div><div class="line">    <span class="comment"># ......</span></div><div class="line">    AR=arm-linux-ar rc          <span class="comment"># AR=ar rc</span></div><div class="line">    <span class="comment"># ......</span></div><div class="line">    RANLIB=arm-linux-ranlib     <span class="comment"># RANLIB=ranlib</span></div><div class="line">    <span class="comment"># ===== 结束修改, 保存退出vim =====</span></div><div class="line">make</div><div class="line">make install</div><div class="line"><span class="comment"># .../gcc-3.4.5-glibc-2.3.6/arm-linux/lib 中生成zlib库文件</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 4. 编译png库</span></div><div class="line"><span class="comment"># 源码位于 '.../qtopia/deps/libpng-1.2.23.tar.bz2'</span></div><div class="line">tar xjf libpng-1.2.23.tar.bz2               <span class="comment"># 解压</span></div><div class="line"><span class="built_in">cd</span> libpng-1.2.23                            <span class="comment"># 进入源码目录进行配置</span></div><div class="line">cp scripts/makefile.linux ./Makefile        <span class="comment"># 复制makefile</span></div><div class="line"></div><div class="line"><span class="comment"># 打开 Makefile 文件, 修改编译工具(需要改为arm-linux-xxx, 交叉编译):</span></div><div class="line">vim Makefile                                <span class="comment"># 可以在windows下直接改</span></div><div class="line">    <span class="comment"># ===== 文件内容, 修改如下内容: =====</span></div><div class="line">    AR_RC=arm-linux-ar rc       <span class="comment"># AR_RC=ar rc</span></div><div class="line">    CC=arm-linux-gcc            <span class="comment"># CC=gcc</span></div><div class="line">    <span class="comment"># ......</span></div><div class="line">    RANLIB=arm-linux-ranlib     <span class="comment"># RANLIB=ranlib</span></div><div class="line">    <span class="comment"># ......</span></div><div class="line">    prefix=/work/tools/gcc-3.4.5-glibc-2.3.6/arm-linux</div><div class="line">    <span class="comment"># ===== 结束修改, 保存退出vim =====</span></div><div class="line">make</div><div class="line">make install-lib</div><div class="line"><span class="comment"># .../gcc-3.4.5-glibc-2.3.6/arm-linux/lib 中生成png库文件</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 5. 编译ts库</span></div><div class="line"><span class="comment"># 源码位于 '.../qtopia/deps/tslib-1.3.tar.bz2'</span></div><div class="line">tar xjf tslib-1.3.tar.bz2                   <span class="comment"># 解压</span></div><div class="line"><span class="built_in">cd</span> tslib-1.3                                <span class="comment"># 进入源码目录进行配置</span></div><div class="line">./autogen.sh</div><div class="line"><span class="built_in">echo</span> <span class="string">"ac_cv_func_malloc_0_nonnull=yes"</span> &gt;arm-linux.cache</div><div class="line">./configure --host=arm-linux --cache-file=arm-linux.cache --enable-inputapi=no --prefix=/work/tools/gcc-3.4.5-glibc-2.3.6/arm-linux</div><div class="line"></div><div class="line">vim ./src/ts_read_raw.c                     <span class="comment"># 修改触摸芯片型号</span></div><div class="line">    <span class="comment"># ===== 文件内容, 修改如下内容: =====</span></div><div class="line">    <span class="comment">#char *defaulttseventtype="UCB1x00";    # 此句修改为:</span></div><div class="line">    char *defaulttseventtype=<span class="string">"H3600"</span>;</div><div class="line">    <span class="comment"># ===== 结束修改, 保存退出vim =====</span></div><div class="line"></div><div class="line"><span class="comment"># 防止出现 "libtool:link: only absolute run-paths are allowed" 的错误</span></div><div class="line">vim ./plugins/Makefile                      <span class="comment"># 修改为绝对路径</span></div><div class="line">    <span class="comment"># ===== 文件内容, 修改如下内容: =====</span></div><div class="line">    <span class="comment">#LDFLAGS :=$(LDFLAGS) -rpath $(PLUGIN_DIR)</span></div><div class="line">    LDFLAGS :=$(LDFLAGS) -rpath `<span class="built_in">cd</span> $(PLUGIN_DIR) &amp;&amp; <span class="built_in">pwd</span>`</div><div class="line">    <span class="comment"># ===== 结束修改, 保存退出vim =====</span></div><div class="line"></div><div class="line">make</div><div class="line">make install</div><div class="line"><span class="comment"># .../gcc-3.4.5-glibc-2.3.6/arm-linux/lib 中生成ts库文件</span></div></pre></td></tr></table></figure>
<h3 id="制作QT文件系统"><a href="#制作QT文件系统" class="headerlink" title="制作QT文件系统"></a><del>制作QT文件系统</del></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ubuntu shell</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 1. 创建qt文件夹</span></div><div class="line"><span class="comment"># tar要加上sudo. 因为解压出来的dev目录下有一些设备节点要用到root权限</span></div><div class="line">sudo tar xjf fs_mini_mdev.tar.bz2           <span class="comment"># 解压 fs_mini_mdev 最小fs</span></div><div class="line">sudo cp -rf fs_mini_mdev fs_qtopia          <span class="comment"># 重命名为 fs_qtopia</span></div><div class="line"><span class="comment"># sudo chown -R root:root fs_qtopis         # 更改用户和组</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 2. 复制Qtopia 依赖的库文件</span></div><div class="line"><span class="built_in">cd</span> .../gcc-3.4.5-glibc-2.3.6/arm-linux/lib/</div><div class="line">cp libpng.so* .../fs_qtopia/lib/ <span class="_">-d</span></div><div class="line">cp libjpeg.so* .../fs_qtopia/lib/ <span class="_">-d</span></div><div class="line">cp libuuid.so* .../fs_qtopia/lib/ <span class="_">-d</span></div><div class="line">cp libz.so* .../fs_qtopia/lib/ <span class="_">-d</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 3. 安装触摸屏所需的文件</span></div><div class="line"><span class="built_in">cd</span> .../tslib-1.3                            <span class="comment"># 编译ts库时, 解压出来的文件目录</span></div><div class="line">make prefix=.../fs_qtopia/usr/ install      <span class="comment"># 修改为绝对路径!</span></div><div class="line"><span class="built_in">cd</span> .../fs_qtopia</div><div class="line">cp ./usr/etc/ts.conf ./etc/                 <span class="comment"># 复制 ts.conf 文件</span></div><div class="line">vim ./etc/ts.conf                           <span class="comment"># 可以在windows下直接改</span></div><div class="line">    <span class="comment"># ===== 文件内容, 修改如下内容: =====</span></div><div class="line">    <span class="comment"># module mousebuts</span></div><div class="line">    module variance xlimit=50 ylimit=50 pthreshold=3</div><div class="line">    <span class="comment"># module dejitter xdelta=1 ydelta=1 pthreshold=3    # 注释掉了这一行!</span></div><div class="line">    module linear</div><div class="line">    <span class="comment"># ===== 结束修改, 保存退出vim =====</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 4. 复制字库和opt文件夹到开发板根目录</span></div><div class="line"><span class="built_in">cd</span> .../qtopia/qtopia-free-2.2.0/</div><div class="line">cp -rf qt2/lib/fonts qtopia/image/opt/Qtopia/lib/</div><div class="line">cp -rf qtopia/image/opt/ .../fs_qtopia</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 5. 创建时区文件, 直接使用ubuntu中的时区文件</span></div><div class="line"><span class="built_in">cd</span> .../fs_qtopia</div><div class="line">mkdir -p usr/share/zoneinfo/</div><div class="line">cp -rf /usr/share/zoneinfo/America usr/share/zoneinfo/</div><div class="line">cp /usr/share/zoneinfo/zone.tab usr/share/zoneinfo/</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 6. 建立脚本, 用来校验触摸屏</span></div><div class="line"><span class="comment"># QT自带的触摸屏程序不好用. 想再次较验时, 把 /etc/pointercal 删掉后重启就可以了</span></div><div class="line"><span class="built_in">cd</span> .../fs_qtopia</div><div class="line">vim bin/ts_cal.sh                   <span class="comment"># 建立script文件</span></div><div class="line">    <span class="comment"># ===== 文件内容如下: =====</span></div><div class="line">    <span class="comment">#!/bin/sh</span></div><div class="line">    <span class="built_in">export</span> HOME=/root</div><div class="line">    <span class="built_in">export</span> QTDIR=/opt/Qtopia</div><div class="line">    <span class="built_in">export</span> QPEDIR=/opt/Qtopia</div><div class="line">    <span class="built_in">export</span> QWS_DISPLAY=LinuxFb:/dev/fb0</div><div class="line">    <span class="built_in">export</span> QWS_KEYBOARD=<span class="string">"TTY:/dev/tty1"</span></div><div class="line">    <span class="comment">#export QWS_MOUSE_PROTO="USB:/dev/mouse0"</span></div><div class="line">    <span class="built_in">export</span> QWS_MOUSE_PROTO=<span class="string">"TPanel:/dev/ts0"</span></div><div class="line">    <span class="built_in">export</span> PATH=<span class="variable">$QPEDIR</span>/bin:<span class="variable">$PATH</span></div><div class="line">    <span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$QPEDIR</span>/lib:<span class="variable">$LD_LIBRARY_PATH</span></div><div class="line">    <span class="built_in">export</span> TSLIB_TSDEVICE=/dev/ts0</div><div class="line">    <span class="built_in">export</span> TSLIB_CONSOLEDEVICE=none</div><div class="line">    <span class="built_in">export</span> TSLIB_FBDEVICE=/dev/fb0</div><div class="line">    <span class="built_in">export</span> TSLIB_CONFFILE=/etc/ts.conf</div><div class="line">    <span class="built_in">export</span> TSLIB_PLUGINDIR=/usr/share/ts/plugins</div><div class="line">    <span class="built_in">export</span> TSLIB_TSEVENTTYPE=<span class="string">"H3600"</span></div><div class="line">    /usr/bin/ts_calibrate</div><div class="line">    <span class="comment"># ===== 结束修改, 保存退出vim =====</span></div><div class="line"></div><div class="line">chmod +x bin/ts_cal.sh     <span class="comment"># 修改为可执行</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 7. 建立脚本, 用来运行qtopia</span></div><div class="line"><span class="built_in">cd</span> .../fs_qtopia</div><div class="line">mkdir -p root                       <span class="comment"># 给 export HOME=/root 使用</span></div><div class="line">vim bin/qpe.sh                      <span class="comment"># 建立script文件</span></div><div class="line">    <span class="comment"># ===== 文件内容如下: =====</span></div><div class="line">    <span class="comment">#!/bin/sh</span></div><div class="line">    <span class="built_in">export</span> HOME=/root</div><div class="line">    <span class="built_in">export</span> QTDIR=/opt/Qtopia</div><div class="line">    <span class="built_in">export</span> QPEDIR=/opt/Qtopia</div><div class="line">    <span class="built_in">export</span> QWS_DISPLAY=LinuxFb:/dev/fb0</div><div class="line">    <span class="built_in">export</span> QWS_KEYBOARD=<span class="string">"TTY:/dev/tty1"</span></div><div class="line">    <span class="comment">#export QWS_MOUSE_PROTO="USB:/dev/mouse0"</span></div><div class="line">    <span class="built_in">export</span> QWS_MOUSE_PROTO=<span class="string">"TPanel:/dev/ts0"</span></div><div class="line">    <span class="built_in">export</span> PATH=<span class="variable">$QPEDIR</span>/bin:<span class="variable">$PATH</span></div><div class="line">    <span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$QPEDIR</span>/lib:<span class="variable">$LD_LIBRARY_PATH</span></div><div class="line">    <span class="built_in">export</span> TSLIB_TSDEVICE=/dev/ts0</div><div class="line">    <span class="built_in">export</span> TSLIB_CONSOLEDEVICE=none</div><div class="line">    <span class="built_in">export</span> TSLIB_FBDEVICE=/dev/fb0</div><div class="line">    <span class="built_in">export</span> TSLIB_CONFFILE=/etc/ts.conf</div><div class="line">    <span class="built_in">export</span> TSLIB_PLUGINDIR=/usr/share/ts/plugins</div><div class="line">    <span class="built_in">export</span> TSLIB_TSEVENTTYPE=<span class="string">"H3600"</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> [ ! <span class="_">-e</span> /etc/pointercal ] <span class="keyword">then</span>                <span class="comment"># 若不存在ts校验文件</span></div><div class="line">        /bin/ts_cal.sh                              <span class="comment"># 执行校验脚本 (步骤6的文件)</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line"></div><div class="line">    <span class="variable">$QPEDIR</span>/bin/qpe &amp;</div><div class="line">    <span class="comment"># ===== 结束修改, 保存退出vim =====</span></div><div class="line"></div><div class="line">chmod +x bin/qpe.sh         <span class="comment"># 修改为可执行</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 8. 修改根文件系统的启动脚本</span></div><div class="line"><span class="comment"># 需要用到临时目录/tmp，为减少对Flash的擦写，在/tmp目录上挂接tmpfs文件系统</span></div><div class="line"><span class="built_in">cd</span> .../fs_qtopia</div><div class="line">mkdir -p tmp                        <span class="comment"># 建立/tmp目录</span></div><div class="line">vim etc/fstab                       <span class="comment"># 挂载 tmpfs</span></div><div class="line">    <span class="comment"># ===== 文件内容, 加入如下语句: =====</span></div><div class="line">    tmpfs   /tmp    tmpfs   defaults    0   0</div><div class="line">    <span class="comment"># ===== 结束修改, 保存退出vi =====</span></div><div class="line">vim etc/init.d/rcS                  <span class="comment"># 开机自动执行 qpe.sh 脚本</span></div><div class="line">    <span class="comment"># ===== 文件内容, 末尾加入如下语句: =====</span></div><div class="line">    /bin/qpe.sh &amp;</div><div class="line">    <span class="comment"># ===== 结束修改, 保存退出vi =====</span></div><div class="line"></div><div class="line"></div><div class="line">9. 至此, fs_qtopia已经是一个完整的, 可支持QT的根文件系统了.</div><div class="line">mkyaffs2image fs_qtopia fs_qtopia.yaffs2    <span class="comment"># 制作映像文件</span></div></pre></td></tr></table></figure>
<h1 id="编译驱动程序"><a href="#编译驱动程序" class="headerlink" title="编译驱动程序"></a>编译驱动程序</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ubuntu shell</span></div><div class="line"><span class="comment"># 源码位于 '.../drivers_and_test/first_drv'</span></div><div class="line"></div><div class="line"><span class="comment"># pwd = 驱动程序目录下</span></div><div class="line">vim Makefile                             <span class="comment"># 修改Makefile</span></div><div class="line">    <span class="comment"># ===== 文件内容, 找到 'KERN_DIR', 配置内核位置: =====</span></div><div class="line">    KERN_DIR = /mnt/nfs/study/jz2440/kernel/linux-2.6.22.6</div><div class="line">    <span class="comment"># ===== 结束修改, 保存退出vim =====</span></div><div class="line">make                                    <span class="comment"># 获得 first_drv.ko</span></div><div class="line">arm-linux-gcc -o firstdrvtest firstdrvtest.c      <span class="comment"># 交叉编译测试程序,</span></div><div class="line"><span class="comment"># -o 表示目标文件, 所以 'arm-linux-gcc firstdrvtest.c -o firstdrvtest' 也可以</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 切换到 开发板 shell</span></div><div class="line"></div><div class="line"><span class="comment"># 假设使用nfs加载的系统, 上述编译好后, 直接能在开发板上看到更改</span></div><div class="line"><span class="comment"># pwd = 驱动程序目录下</span></div><div class="line">insmod first_drv.ko                     <span class="comment"># 加载驱动模块</span></div><div class="line">./firstdrvtest on                       <span class="comment"># 执行测试</span></div><div class="line">./firstdrvtest off                      <span class="comment"># 执行测试</span></div></pre></td></tr></table></figure>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[嵌入式linux环境搭建3-Ubuntu16.04]]></title>
      <url>https://draapho.github.io/2017/02/20/1706-linux-ubuntu16/</url>
      <content type="html"><![CDATA[<h1 id="环境及结论"><a href="#环境及结论" class="headerlink" title="环境及结论"></a>环境及结论</h1><ul>
<li>大环境的搭建思路可参考<a href="https://draapho.github.io/2017/02/16/1705-linux-env/">嵌入式linux环境搭建</a><ul>
<li>gateway ip <code>10.0.0.138</code></li>
<li>PC windows: win10 64bit, ip <code>10.0.0.98</code></li>
<li>PC linux(最终版本): ubuntu server 16.04 32 bit, ip <code>10.0.0.100</code></li>
<li>Embedded Linux: jz2440v3 ip <code>10.0.0.111</code></li>
</ul>
</li>
<li>使用环境: Ubuntu server 16.04 32bit (安装在win10的虚拟机内)</li>
<li>在经历了两次失败后, 成功搭建了整个环境. 服务器版去掉了UI, 给虚拟机用很好.</li>
<li>补充一点, 刚开始用的是 ubuntu server 16.04 64 bit, 也遇到点问题.<br>由于是要做交叉编译的开发环境, 所以 PC linux 和 embedded linux 用一样的带宽才好.</li>
</ul>
<h1 id="apt-get使用摘要"><a href="#apt-get使用摘要" class="headerlink" title="apt-get使用摘要"></a>apt-get使用摘要</h1><ul>
<li>软件升级: <code>sudo apt-get update</code></li>
<li>普通安装: <code>apt-get install softname1 softname2 ...</code></li>
<li>修复安装： <code>apt-get -f install softname1 softname2...</code>  (-f Atemp to correct broken dependencies)</li>
<li>重新安装： <code>apt-get --reinstall install softname1 softname2...</code></li>
<li>移除式卸载(保留配置)： <code>apt-get remove softname1 softname2 ...</code></li>
<li>清除式卸载(删除配置)： <code>apt-get --purge remove softname1 softname2...</code><br>或 <code>apt-get purge sofname1 softname2...</code></li>
</ul>
<h1 id="安装必要的软件"><a href="#安装必要的软件" class="headerlink" title="安装必要的软件"></a>安装必要的软件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装 make</span></div><div class="line">sudo apt-get install make</div><div class="line">make -v                     <span class="comment"># GNU Make 4.1</span></div><div class="line"></div><div class="line"><span class="comment"># 安装gcc, 非交叉编译用</span></div><div class="line">sudo apt-get install gcc</div><div class="line">gcc -v                      <span class="comment"># gcc version 5.4.0</span></div><div class="line"></div><div class="line"><span class="comment"># 设置时区</span></div><div class="line">sudo dpkg-reconfigure tzdata</div></pre></td></tr></table></figure>
<h1 id="安装32bit兼容库"><a href="#安装32bit兼容库" class="headerlink" title="安装32bit兼容库"></a><del>安装32bit兼容库</del></h1><p>不要安装 64bit 的ubuntu作为交叉编译的linux环境. 我最后换回到了32bit</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install ia32-libs      <span class="comment"># 提示不可用, 替代方案如下</span></div><div class="line">sudo apt-get install lib32ncurses5</div></pre></td></tr></table></figure>
<h1 id="设置静态IP"><a href="#设置静态IP" class="headerlink" title="设置静态IP"></a>设置静态IP</h1><p>个人更喜欢用静态IP, 这样putty的设置更直观方便.<br>如果要使用动态IP, 可以设置 windwos 的 HaneWIN, 用<code>-range</code>来指定nfs客户端的网址段</p>
<p>刚开始怎么样都不能上外网, 突然按照下面的顺序就好了… 原因不明<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/network/interfaces</div><div class="line">    <span class="comment"># ===== 文件内容, 大致修改如下: =====</span></div><div class="line">    auto lo</div><div class="line">    iface lo inet loopback</div><div class="line"></div><div class="line">    auto eth0</div><div class="line"></div><div class="line">    iface eth0 inet static</div><div class="line">    address  10.0.0.100</div><div class="line">    netmask  255.255.255.0</div><div class="line">    gateway  10.0.0.138</div><div class="line">    dns-nameservers   8.8.8.8  10.0.0.138</div><div class="line">    <span class="comment"># ===== 结束修改, 保存退出vim =====</span></div><div class="line"></div><div class="line"><span class="comment"># 可装完ssh服务再重启. 然后验证putty是否可用.</span></div><div class="line">sudo reboot</div></pre></td></tr></table></figure></p>
<h1 id="安装ssh服务-用putty远程登录"><a href="#安装ssh服务-用putty远程登录" class="headerlink" title="安装ssh服务, 用putty远程登录"></a>安装ssh服务, 用putty远程登录</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装ssh服务</span></div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install openssh-server</div><div class="line"><span class="comment"># 如果有依赖包冲突, 执行如下指令</span></div><div class="line">sudo apt-get install openssh-client=1:6.6p1-2ubuntu1</div><div class="line"></div><div class="line"><span class="comment"># 查看是否已经运行</span></div><div class="line">sudo ps <span class="_">-e</span> | grep ssh</div><div class="line"><span class="comment"># 启动服务</span></div><div class="line">sudo service ssh start</div><div class="line"></div><div class="line"><span class="comment"># 重启后, 验证是否能用putty功能</span></div><div class="line">sudo reboot</div></pre></td></tr></table></figure>
<h1 id="nfs-客户端的安装"><a href="#nfs-客户端的安装" class="headerlink" title="nfs 客户端的安装"></a>nfs 客户端的安装</h1><p>参考: <a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-an-nfs-mount-on-ubuntu-14-04" target="_blank" rel="external">How To Set Up an NFS Mount on Ubuntu 14.04</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装 nfs 客户端软件</span></div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install nfs-common</div><div class="line"></div><div class="line"><span class="comment"># 建立空文件夹用于挂载nfs</span></div><div class="line">sudo mkdir -p /mnt/nfs/study</div><div class="line">sudo mkdir -p /mnt/nfs/work</div><div class="line"></div><div class="line"><span class="comment"># 开机自动挂载(参考文章中的客户端自动挂载方法没有起作用)</span></div><div class="line">sudo vim /etc/rc.local</div><div class="line">    <span class="comment"># ===== 文件内容, 加入如下两句 =====</span></div><div class="line">    sudo mount 10.0.0.98:/study /mnt/nfs/study</div><div class="line">    sudo mount 10.0.0.98:/work /mnt/nfs/work</div><div class="line">    <span class="comment"># ===== 结束修改, 保存退出vim =====</span></div><div class="line"></div><div class="line"><span class="comment"># 建立软连接(快捷方式), 可忽略此步骤</span></div><div class="line"><span class="built_in">cd</span> /home/user/</div><div class="line">sudo ln <span class="_">-s</span> /mnt/nfs/study study</div><div class="line">sudo ln <span class="_">-s</span> /mnt/nfs/work work</div></pre></td></tr></table></figure>
<h1 id="安装交叉编译工具gcc"><a href="#安装交叉编译工具gcc" class="headerlink" title="安装交叉编译工具gcc"></a>安装交叉编译工具gcc</h1><p>老老实实使用开发板提供的 <code>gcc-3.4.5-glibc-2.3.6</code> 编译器版本.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 直接拷贝解压 gcc-3.4.5-glibc-2.3.6.tar.bz2</span></div><div class="line">sudo tar xjf arm-linux-gcc-3.4.5-glibc-2.3.6.tar.bz2 -C /usr/<span class="built_in">local</span>/</div><div class="line"></div><div class="line"><span class="comment"># 添加路径到环境变量</span></div><div class="line">sudo vim /etc/bash.bashrc</div><div class="line">    <span class="comment"># ===== 文件内容, 末尾加入如下语句 =====</span></div><div class="line">    <span class="keyword">if</span> [ <span class="_">-d</span> /usr/<span class="built_in">local</span>/gcc-3.4.5-glibc-2.3.6 ] ; <span class="keyword">then</span></div><div class="line">        PATH=/usr/<span class="built_in">local</span>/gcc-3.4.5-glibc-2.3.6/bin:<span class="string">"<span class="variable">$&#123;PATH&#125;</span>"</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">    <span class="comment"># ===== 结束修改, 保存退出vim =====</span></div><div class="line"></div><div class="line"><span class="comment"># 测试安装结果</span></div><div class="line"><span class="built_in">source</span> /etc/bash.bashrc                             <span class="comment"># 不重启更新PATH</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span>                                          <span class="comment"># 查看PATH</span></div><div class="line">arm-linux-gcc -v                                    <span class="comment"># 测试是否安装成功</span></div></pre></td></tr></table></figure>
<h1 id="安装-u-boot-tools-工具"><a href="#安装-u-boot-tools-工具" class="headerlink" title="安装 u-boot-tools 工具"></a>安装 u-boot-tools 工具</h1><p>安装 u-boot-tools, 内核编译后生成uImage使用.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装 mkimage</span></div><div class="line">sudo apt-get install u-boot-tools</div><div class="line"><span class="comment"># 验证</span></div><div class="line">mkimage -V              <span class="comment"># mkimage version 2016.01+dfsg1-2ubuntu1</span></div></pre></td></tr></table></figure></p>
<h1 id="安装-mkyaffs2image-工具"><a href="#安装-mkyaffs2image-工具" class="headerlink" title="安装 mkyaffs2image 工具"></a>安装 mkyaffs2image 工具</h1><p>该工具用于制作文件系统镜像文件<br>文件系统烧录到开发板flash时需要使用镜像文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo cp mkyaffs2image /bin/                         <span class="comment"># 拷贝到bin</span></div><div class="line">sudo chmod +x /bin/mkyaffs2image                    <span class="comment"># 增加可执行权限</span></div><div class="line">mkyaffs2image                                       <span class="comment"># 测试是否可用</span></div></pre></td></tr></table></figure>
<h1 id="安装-dnw-工具"><a href="#安装-dnw-工具" class="headerlink" title="安装 dnw 工具"></a>安装 dnw 工具</h1><p>该工具用于配合uboot进行烧录, 无需驱动, 无需额外烧录器, 简单方便</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo cp dnw /bin/                                   <span class="comment"># 拷贝到bin</span></div><div class="line">sudo chmod +x /bin/dnw                              <span class="comment"># 增加可执行权限</span></div><div class="line">dnw                                                 <span class="comment"># 测试是否可用</span></div></pre></td></tr></table></figure>
<h1 id="安装-ncurses-基本库"><a href="#安装-ncurses-基本库" class="headerlink" title="安装 ncurses 基本库"></a>安装 ncurses 基本库</h1><p>ncurses是字符终端下屏幕控制的基本库, <code>make menuconfig</code> 需要使用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装ncurses</span></div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install libncurses5-dev libncursesw5-dev</div><div class="line"></div><div class="line"><span class="comment"># 查看是否成功</span></div><div class="line">make menuconfig</div></pre></td></tr></table></figure>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[嵌入式linux环境搭建2-CentOS7]]></title>
      <url>https://draapho.github.io/2017/02/19/1706-linux-centos7/</url>
      <content type="html"><![CDATA[<h1 id="环境及结论"><a href="#环境及结论" class="headerlink" title="环境及结论"></a>环境及结论</h1><ul>
<li>大环境的搭建思路可参考<a href="https://draapho.github.io/2017/02/16/1705-linux-env/">嵌入式linux环境搭建</a><ul>
<li>gateway ip <code>10.0.0.138</code></li>
<li>PC windows: win10 64bit, ip <code>10.0.0.98</code></li>
<li>PC linux(最终版本): ubuntu server 16.04 32 bit, ip <code>10.0.0.100</code></li>
<li>Embedded Linux: jz2440v3 ip <code>10.0.0.111</code></li>
</ul>
</li>
<li>目的是尝试不同linux系统下的环境搭建</li>
<li>使用环境: CentOS7 64bit (安装在win10的虚拟机内)</li>
<li>kernel make 失败</li>
<li>彻底死机一次</li>
<li>没法直接安装 u-boot-tools</li>
<li>彻底放弃! 转战Ubuntu</li>
<li>不知是 centos 做 2440 的交叉编译兼容性不好, 还是64bit linux的兼容性不好. 或者两者皆有!</li>
</ul>
<h1 id="安装必要的软件"><a href="#安装必要的软件" class="headerlink" title="安装必要的软件"></a>安装必要的软件</h1><p>静态ip, 安装向导时, 就设置了.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">yum install net-tools 	<span class="comment"># to use ifconfig  or use ip addr</span></div><div class="line">yum install bzip2		<span class="comment"># bz2压缩格式</span></div><div class="line">yum install patch</div><div class="line">yum install gcc</div><div class="line"></div><div class="line"><span class="comment"># 64位系统要安装了32位程序, 安装如下软件</span></div><div class="line">yum install glibc.i686</div><div class="line">yum install libstdc++.so.6</div></pre></td></tr></table></figure>
<h1 id="安装nfs客户端"><a href="#安装nfs客户端" class="headerlink" title="安装nfs客户端"></a>安装nfs客户端</h1><p>可以参考: <a href="https://www.howtoforge.com/nfs-server-and-client-on-centos-7" target="_blank" rel="external">NFS server and client installation on CentOS 7</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装nfs工具, 服务器和客户端都装这个</span></div><div class="line">yum install nfs-utils</div><div class="line"></div><div class="line"><span class="comment"># 创建用于mount的节点</span></div><div class="line">mkdir -p /mnt/nfs/study</div><div class="line">mkdir -p /mnt/nfs/work</div><div class="line"></div><div class="line"><span class="comment"># 启动服务</span></div><div class="line">systemctl <span class="built_in">enable</span> rpcbind</div><div class="line">systemctl <span class="built_in">enable</span> nfs-server</div><div class="line">systemctl <span class="built_in">enable</span> nfs-lock       <span class="comment"># No such file or directory, 但没影响</span></div><div class="line">systemctl <span class="built_in">enable</span> nfs-idmap      <span class="comment"># No such file or directory</span></div><div class="line">systemctl start rpcbind</div><div class="line">systemctl start nfs-server</div><div class="line">systemctl start nfs-lock</div><div class="line">systemctl start nfs-idmap</div><div class="line"></div><div class="line"><span class="comment"># 手动mount</span></div><div class="line">mount -t nfs 10.0.0.98:/study /mnt/nfs/study/</div><div class="line">mount -t nfs 10.0.0.98:/work /mnt/nfs/work/</div><div class="line"></div><div class="line"><span class="comment"># 确认结果</span></div><div class="line">df -kh</div><div class="line"></div><div class="line"><span class="comment"># 设置为开机自动加载</span></div><div class="line">vi /etc/fstab</div><div class="line">    <span class="comment"># ===== 文件内容, 加入如下两句 =====</span></div><div class="line">    10.0.0.98:/study   /mnt/nfs/study  nfs defaults 0 0</div><div class="line">    10.0.0.98:/work    /mnt/nfs/work   nfs defaults 0 0</div><div class="line">    <span class="comment"># ===== 结束修改, 保存退出vim =====</span></div><div class="line"></div><div class="line">// 建立软连接(快捷方式)</div><div class="line"><span class="built_in">cd</span> /home/user/</div><div class="line">sudo ln <span class="_">-s</span> /mnt/nfs/study study</div><div class="line">sudo ln <span class="_">-s</span> /mnt/nfs/work work</div></pre></td></tr></table></figure>
<h1 id="安装-mkyaffs2image"><a href="#安装-mkyaffs2image" class="headerlink" title="安装 mkyaffs2image"></a>安装 mkyaffs2image</h1><p>该工具用于制作文件系统镜像文件<br>文件系统烧录到开发板flash时需要使用镜像文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cp mkyaffs2image /bin/                         <span class="comment"># 拷贝到bin</span></div><div class="line">chmod +x /bin/mkyaffs2image                    <span class="comment"># 增加可执行权限</span></div><div class="line">mkyaffs2image                                       <span class="comment"># 测试是否可用</span></div></pre></td></tr></table></figure>
<h1 id="安装及使用交叉编译工具gcc"><a href="#安装及使用交叉编译工具gcc" class="headerlink" title="安装及使用交叉编译工具gcc"></a>安装及使用交叉编译工具gcc</h1><h2 id="安装-arm-linux-gcc-3-4-5"><a href="#安装-arm-linux-gcc-3-4-5" class="headerlink" title="安装 arm-linux-gcc-3.4.5"></a>安装 arm-linux-gcc-3.4.5</h2><p>使用指定的 <code>arm-linux-gcc-3.4.5-glibc-2.3.6</code>. 不要用新版本, 有坑.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装 gcc</span></div><div class="line">mv arm-linux-gcc-3.4.5-glibc-2.3.6.tar.bz2 /usr/<span class="built_in">local</span>/arm/</div><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/arm/</div><div class="line">tar -xjf arm-linux-gcc-3.4.5-glibc-2.3.6.tar.bz2</div><div class="line"></div><div class="line"><span class="comment"># 添加路径到环境变量</span></div><div class="line">vi /etc/bashrc</div><div class="line">    <span class="comment"># ===== 文件内容, 末尾加入如下语句 =====</span></div><div class="line">    <span class="keyword">if</span> [ <span class="_">-d</span> /usr/<span class="built_in">local</span>/arm/gcc-3.4.5-glibc-2.3.6 ] ; <span class="keyword">then</span></div><div class="line">        PATH=/usr/<span class="built_in">local</span>/arm/gcc-3.4.5-glibc-2.3.6/bin:<span class="string">"<span class="variable">$&#123;PATH&#125;</span>"</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">    <span class="comment"># ===== 结束修改, 保存退出vim =====</span></div><div class="line">    </div><div class="line"><span class="comment"># 测试安装结果</span></div><div class="line"><span class="built_in">source</span> /etc/bashrc							<span class="comment"># 不重启更新PATH</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span>									<span class="comment"># 查看PATH</span></div><div class="line">arm-linux-gcc -v							<span class="comment"># 测试是否安装成功</span></div></pre></td></tr></table></figure>
<h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><p>在centos下, 内核 make clean 会报错: Makefile‘混和的隐含和普通规则’<br>我想还是因为 2440 内核文件使用的makefile太老了. 和centos兼容性不好.<br>按下述方法改了一点后, 最后make还是失败了. 因而放弃 centos 系统.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 修改根目录下的 Makefile</span></div><div class="line">/ %/: prepare scripts FORCE</div><div class="line">    $(Q)$(MAKE) KBUILD_MODULES=$(<span class="keyword">if</span> $(CONFIG_MODULES),1) \</div><div class="line">    $(build)=$(build-dir)</div><div class="line"><span class="comment"># 改成： -----&gt;</span></div><div class="line">/: prepare scripts FORCE</div><div class="line">    $(Q)$(MAKE) KBUILD_MODULES=$(<span class="keyword">if</span> $(CONFIG_MODULES),1) \</div><div class="line">    $(build)=$(build-dir)</div><div class="line">%/: prepare scripts FORCE</div><div class="line">    $(Q)$(MAKE) KBUILD_MODULES=$(<span class="keyword">if</span> $(CONFIG_MODULES),1) \</div><div class="line">    $(build)=$(build-dir)</div><div class="line"></div><div class="line"><span class="comment"># 把：</span></div><div class="line">config %config: scripts_basic outputmakefile FORCE</div><div class="line">    $(Q)mkdir -p include/linux include/config</div><div class="line">    $(Q)$(MAKE) $(build)=scripts/kconfig <span class="variable">$@</span></div><div class="line"><span class="comment"># 改成： -----&gt;</span></div><div class="line">config: scripts_basic outputmakefile FORCE</div><div class="line">    $(Q)mkdir -p include/linux include/config</div><div class="line">    $(Q)$(MAKE) $(build)=scripts/kconfig <span class="variable">$@</span></div><div class="line">%config: scripts_basic outputmakefile FORCE</div><div class="line">    $(Q)mkdir -p include/linux include/config</div><div class="line">    $(Q)$(MAKE) $(build)=scripts/kconfig <span class="variable">$@</span></div></pre></td></tr></table></figure>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[嵌入式linux环境搭建1-Ubuntu14.04]]></title>
      <url>https://draapho.github.io/2017/02/18/1706-linux-ubuntu14/</url>
      <content type="html"><![CDATA[<h1 id="环境及结论"><a href="#环境及结论" class="headerlink" title="环境及结论"></a>环境及结论</h1><ul>
<li>大环境的搭建思路可参考<a href="https://draapho.github.io/2017/02/16/1705-linux-env/">嵌入式linux环境搭建</a><ul>
<li>gateway ip <code>10.0.0.138</code></li>
<li>PC windows: win10 64bit, ip <code>10.0.0.98</code></li>
<li>PC linux(最终版本): ubuntu server 16.04 32 bit, ip <code>10.0.0.100</code></li>
<li>Embedded Linux: jz2440v3 ip <code>10.0.0.111</code></li>
</ul>
</li>
<li>探索嵌入式linux环境搭建的各方案可行性.</li>
<li>使用环境: Ubuntu 14.04.5 LTS 32bit 桌面版 (安装在win10的虚拟机内)</li>
<li>成功验证了win10作为NFS服务器. 两个linux作为NFS客户端, 三者文件共享的方案</li>
<li>最终遇到了gcc编译器的坑, 就决定换到CentOS系统练练手.</li>
<li>在win 10 下使用虚拟机安装在win10下, 略过不表.</li>
<li>实验结论:<ul>
<li>win10(非企业版)下, 没有找到nfs客户端. 因此没法使用 <strong>ubuntu做NFS服务器</strong> 的方案</li>
<li>ubuntu下安装samba来支持windows文件共享, 失败告终. 因此没法使用 <strong>ubuntu使用samba来支持windows文件共享</strong> 的方案</li>
<li>linux不允许把NFS挂载过来的文件再使用NFS服务共享出去. 因此没法使用 <strong>交叉使用上述方案</strong></li>
<li>还好, 最终 <strong>windows做NFS服务器</strong> 成功了</li>
</ul>
</li>
</ul>
<h1 id="安装必要的软件"><a href="#安装必要的软件" class="headerlink" title="安装必要的软件"></a>安装必要的软件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看 make 和 gcc 工具 (非交叉编译用)</span></div><div class="line">make -v                     <span class="comment"># GNU Make 3.81</span></div><div class="line">gcc -v                      <span class="comment"># gcc version 4.8.4</span></div></pre></td></tr></table></figure>
<h1 id="设置静态IP"><a href="#设置静态IP" class="headerlink" title="设置静态IP"></a>设置静态IP</h1><p>个人更喜欢用静态IP, 这样putty的设置更直观方便.<br>如果要使用动态IP, 可以设置 windwos 的 HaneWIN, 用<code>-range</code>来指定nfs客户端的网址段</p>
<p>刚开始怎么样都不能上外网, 突然按照下面的顺序就好了… 原因不明<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/network/interfaces</div><div class="line">    <span class="comment"># ===== 文件内容, 大致修改如下: =====</span></div><div class="line">    auto lo</div><div class="line">    iface lo inet loopback</div><div class="line"></div><div class="line">    auto eth0</div><div class="line"></div><div class="line">    iface eth0 inet static</div><div class="line">    address  10.0.0.100</div><div class="line">    netmask  255.255.255.0</div><div class="line">    gateway  10.0.0.138</div><div class="line">    dns-nameservers   8.8.8.8  10.0.0.138</div><div class="line">    <span class="comment"># ===== 结束修改, 保存退出vim =====</span></div><div class="line"></div><div class="line">sudo reboot</div></pre></td></tr></table></figure></p>
<h1 id="安装nfs服务-服务器-客户端"><a href="#安装nfs服务-服务器-客户端" class="headerlink" title="安装nfs服务(服务器/客户端)"></a>安装nfs服务(服务器/客户端)</h1><p>最终方案里, windows下用了HaneWIN 做NFS服务器, 虚拟机ubuntu下安装客户端就可以了.<br>这里为了做实验, nfs服务器和客户端都安装了, 可以参考:<br><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-an-nfs-mount-on-ubuntu-14-04" target="_blank" rel="external">How To Set Up an NFS Mount on Ubuntu 14.04</a></p>
<h2 id="nfs-客户端的安装"><a href="#nfs-客户端的安装" class="headerlink" title="nfs 客户端的安装"></a>nfs 客户端的安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装 nfs 客户端软件</span></div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install nfs-common</div><div class="line"></div><div class="line"><span class="comment"># 建立空文件夹用于挂载nfs</span></div><div class="line">sudo mkdir -p /mnt/nfs/study</div><div class="line">sudo mkdir -p /mnt/nfs/work</div><div class="line"></div><div class="line"><span class="comment"># 开机自动挂载(参考文章中的客户端自动挂载方法没有起作用)</span></div><div class="line">sudo vim /etc/rc.local</div><div class="line">    <span class="comment"># ===== 文件内容, 加入如下两句 =====</span></div><div class="line">    sudo mount 10.0.0.98:/study /mnt/nfs/study</div><div class="line">    sudo mount 10.0.0.98:/work /mnt/nfs/work</div><div class="line">    <span class="comment"># ===== 结束修改, 保存退出vim =====</span></div><div class="line"></div><div class="line"><span class="comment"># 建立软连接(快捷方式), 可忽略此步骤</span></div><div class="line">sudo ln <span class="_">-s</span> /mnt/nfs/study /home/user/study</div><div class="line">sudo ln <span class="_">-s</span> /mnt/nfs/work /home/user/work</div></pre></td></tr></table></figure>
<h2 id="nfs-服务器的安装"><a href="#nfs-服务器的安装" class="headerlink" title="nfs 服务器的安装"></a><del>nfs 服务器的安装</del></h2><p>实际上没有用到linux的nfs服务器功能, 最终用的是windows下的HaneWIN给开发板提供的nfs服务!!!<br>因为最后测试下来, <strong>linux不允许把NFS挂载过来的文件再使用NFS服务共享出去</strong>.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 虚拟机ubuntu 安装服务器, 供开发板端使用nfs.</span></div><div class="line">apt-get install nfs-kernel-server</div><div class="line">sudo vim /etc/exports</div><div class="line">    <span class="comment"># ===== 文件内容, 末尾加入如下语句 =====</span></div><div class="line">    <span class="comment"># 加入要共享的文件夹, 一个文件夹一行即可</span></div><div class="line">    <span class="comment"># 注意! 由windows 共享过来的目录无法再由ubuntu共享出去</span></div><div class="line">    /home/draapho 10.0.0.*(rw,no_root_squash,async,no_subtree_check)</div><div class="line">    <span class="comment"># ===== 结束修改, 保存退出vim =====</span></div><div class="line"></div><div class="line"><span class="comment"># 重启服务</span></div><div class="line">sudo exportfs <span class="_">-a</span></div><div class="line">sudo /etc/init.d/nfs-kernel-server restart</div></pre></td></tr></table></figure>
<h2 id="其它实验"><a href="#其它实验" class="headerlink" title="其它实验"></a><del>其它实验</del></h2><p>win10(非企业版)下, 没有找到nfs客户端. 因此无法让linux当nfs服务器, win10做nfs客户端.<br>ubuntu下安装samba来支持windows文件共享, 失败告终</p>
<h1 id="安装ssh服务-用putty远程登录"><a href="#安装ssh服务-用putty远程登录" class="headerlink" title="安装ssh服务, 用putty远程登录"></a>安装ssh服务, 用putty远程登录</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装ssh服务</span></div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install openssh-server</div><div class="line"><span class="comment"># 如果有依赖包冲突, 执行如下指令</span></div><div class="line">sudo apt-get install openssh-client=1:6.6p1-2ubuntu1</div><div class="line"></div><div class="line"><span class="comment"># 查看是否已经运行</span></div><div class="line">sudo ps <span class="_">-e</span> | grep ssh</div><div class="line"><span class="comment"># 启动服务</span></div><div class="line">sudo service ssh start</div></pre></td></tr></table></figure>
<h1 id="安装-u-boot-tools-工具"><a href="#安装-u-boot-tools-工具" class="headerlink" title="安装 u-boot-tools 工具"></a>安装 u-boot-tools 工具</h1><p>安装 u-boot-tools, 内核编译后生成uImage使用.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装 mkimage</span></div><div class="line">sudo apt-get install u-boot-tools</div><div class="line"><span class="comment"># 验证</span></div><div class="line">mkimage -V</div></pre></td></tr></table></figure></p>
<h1 id="安装-mkyaffs2image-工具"><a href="#安装-mkyaffs2image-工具" class="headerlink" title="安装 mkyaffs2image 工具"></a>安装 mkyaffs2image 工具</h1><p>该工具用于制作文件系统镜像文件<br>文件系统烧录到开发板flash时需要使用镜像文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo cp mkyaffs2image /bin/                         <span class="comment"># 拷贝到bin</span></div><div class="line">sudo chmod +x /bin/mkyaffs2image                    <span class="comment"># 增加可执行权限</span></div><div class="line">mkyaffs2image                                       <span class="comment"># 测试是否可用</span></div></pre></td></tr></table></figure>
<h1 id="安装及使用交叉编译工具gcc"><a href="#安装及使用交叉编译工具gcc" class="headerlink" title="安装及使用交叉编译工具gcc"></a>安装及使用交叉编译工具gcc</h1><p>在 arm-linux-gcc 4.3.2 上走的比较远, 结果证明遇到坑了!<br>建议不要尝试最新版本的编译器, 老老实实使用开发板提供的 <code>gcc-3.4.5-glibc-2.3.6</code> 编译器版本.</p>
<h2 id="安装-arm-linux-gcc-4-3-2"><a href="#安装-arm-linux-gcc-4-3-2" class="headerlink" title="安装 arm-linux-gcc 4.3.2"></a><del>安装 arm-linux-gcc 4.3.2</del></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 直接拷贝解压 arm-linux-gcc-4.3.2.tar.bz2</span></div><div class="line"><span class="comment"># 事后证明, gcc-4.3.2 不能正确编译(但能成功编译)2440的linux内核和驱动</span></div><div class="line">sudo tar xjvf arm-linux-gcc-4.3.2.tar.bz2 -C /usr/<span class="built_in">local</span>/</div><div class="line"></div><div class="line"><span class="comment"># 添加路径到环境变量</span></div><div class="line">sudo vim /etc/bash.bashrc</div><div class="line">    <span class="comment"># ===== 文件内容, 末尾加入如下语句 =====</span></div><div class="line">    <span class="keyword">if</span> [ <span class="_">-d</span> /usr/<span class="built_in">local</span>/arm/4.3.2 ] ; <span class="keyword">then</span></div><div class="line">        PATH=/usr/<span class="built_in">local</span>/arm/4.3.2/bin:<span class="string">"<span class="variable">$&#123;PATH&#125;</span>"</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">    <span class="comment"># ===== 结束修改, 保存退出vim =====</span></div><div class="line"></div><div class="line"><span class="comment"># 测试安装结果</span></div><div class="line"><span class="built_in">source</span> /etc/bash.bashrc                             <span class="comment"># 不重启更新PATH</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span>                                          <span class="comment"># 查看PATH</span></div><div class="line">arm-linux-gcc -v                                    <span class="comment"># 测试是否安装成功</span></div></pre></td></tr></table></figure>
<p>如果希望sudo超级账户也能用 make 指令 (没有测试过)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo <span class="_">-s</span>                                             <span class="comment"># 登录超级账户</span></div><div class="line">vi /etc/profile                                     <span class="comment"># 打开profile</span></div><div class="line">    <span class="comment"># ===== 文件内容, 末尾加入如下语句 =====</span></div><div class="line">    <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/arm/4.3.2/bin</div><div class="line">    <span class="comment"># ===== 结束修改, 保存退出vim =====</span></div></pre></td></tr></table></figure>
<h2 id="遇到问题并解决-结果是坑"><a href="#遇到问题并解决-结果是坑" class="headerlink" title="遇到问题并解决, 结果是坑"></a><del>遇到问题并解决, 结果是坑</del></h2><p>下面列出使用 <code>arm-linux-gcc 4.3.2</code> 编译u-boot遇到问题时的解决方法<br>所谓顺利, 是因为没有报错, 生成的文件可以烧录, 启动.<br>加上引号, 是因为最后证明这些生成文件是有问题的, 会导致整个嵌入式系统某些部分无法正常工作.<br>最后在编译测试驱动用的C文件时, 编译出来的可执行文件在开发板上不可执行,<br>才想到可能是编译器问题而尝试着换回到 3.4.5 版本. 并连同内核全部重新编译了.<br>换回去后, 之前一度认为的源码有问题的fs也能成功加载了, 真是个巨坑…</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 如果用gcc 4.3.2, 则版本太新, 编译错误. 可以使用自带的arm-none-linux-gnueabi</span></div><div class="line"><span class="comment"># 解决方法如下:</span></div><div class="line"><span class="comment"># 修改Makefile文件中的PLATFORM_LIBS, 将:</span></div><div class="line">PLATFORM_LIBS += -L $(shell dirname `$(CC) $(CFLAGS) -print-libgcc-file-name`) -lgcc</div><div class="line"><span class="comment"># 修改成:</span></div><div class="line">PLATFORM_LIBS += -L $(shell dirname `$(CC) $(CFLAGS) -print-libgcc-file-name`) -lgcc -lc -L /usr/<span class="built_in">local</span>/arm/4.3.2/arm-none-linux-gnueabi/libc/armv4t/usr/lib</div><div class="line"></div><div class="line"><span class="comment"># 修改 cpu /arm920t/config.mk 文件, 将:</span></div><div class="line">PLATFORM_CPPFLAGS +=$(call cc-option,-mapcs-32,-mabi=apcs-gnu)</div><div class="line">PLATFORM_RELFLAGS +=$(call cc-option,-mshort-load-bytes,$(call cc-option,-malignment-traps,))</div><div class="line"><span class="comment"># 修改成:</span></div><div class="line">PLATFORM_CPPFLAGS +=$(call cc-option,)</div><div class="line">PLATFORM_RELFLAGS +=$(call cc-option,$(call cc-option,))</div><div class="line"></div><div class="line"><span class="comment"># 重新make, 即可生成 u-boot.bin</span></div></pre></td></tr></table></figure>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[嵌入式linux环境搭建]]></title>
      <url>https://draapho.github.io/2017/02/16/1705-linux-env/</url>
      <content type="html"><![CDATA[<h1 id="嵌入式linux开发环境搭建思路"><a href="#嵌入式linux开发环境搭建思路" class="headerlink" title="嵌入式linux开发环境搭建思路"></a>嵌入式linux开发环境搭建思路</h1><ol>
<li>PC windows 所有资料存在windows目录下, 所有操作在windows环境下. NFS设置可参考:<ul>
<li><a href="https://draapho.github.io/2016/10/03/1606-WinSoft-cloud/">Windows NFS 环境搭建</a></li>
</ul>
</li>
<li>PC linux 装在虚拟机里, 提供交叉编译环境. 其环境搭建可参考:<ul>
<li>第一次尝试, 失败告终, <del><a href="https://draapho.github.io/2017/02/18/1706-linux-ubuntu14/">嵌入式linux环境搭建1-Ubuntu14</a></del></li>
<li>第二次尝试, 失败告终, <del><a href="https://draapho.github.io/2017/02/19/1706-linux-centos7/">嵌入式linux环境搭建2-CentOS7</a></del></li>
<li>第三次尝试, 成功! <a href="https://draapho.github.io/2017/02/20/1706-linux-ubuntu16/">嵌入式linux环境搭建1-Ubuntu16</a></li>
</ul>
</li>
<li>Embedded linux 固化uboot, kernel, 使用nfs加载文件系统. 其参数设置可参考:<ul>
<li><a href="https://draapho.github.io/2017/02/21/1707-jz2440-env/">嵌入式linux环境搭建-jz2440开发板</a></li>
</ul>
</li>
<li>另一种思路:<ul>
<li>linux下使用samba实现文件共享, <a href="https://draapho.github.io/2017/07/06/1718-linux-samba/">Ubuntu下配置支持Windows访问的samba共享</a></li>
</ul>
</li>
</ol>
<p>整个环境的搭建思路基于尽可能少的文件传输, 系统切换操作, 以便提高效率. 可以选择的方案有NFS方案, windows文件共享方案.<br>细化下去有:</p>
<ul>
<li>windows做NFS服务器</li>
<li>ubuntu做NFS服务器</li>
<li>ubuntu使用samba来支持windows文件共享</li>
<li>交叉使用上述方案.</li>
</ul>
<p>一些列折腾之后, 最后顺利基于hanewin, win10作为NFS服务器. 两个linux作为NFS客户端, 三者文件共享.<br>而且使用这个方案还有一个好处, 开发文件都存放在熟悉的windows环境下, 修改/维护/备份都很方便.</p>
<h2 id="PC-windows-win10"><a href="#PC-windows-win10" class="headerlink" title="PC windows, win10"></a>PC windows, win10</h2><p>ip addr: <code>10.0.0.98</code><br>gateway: <code>10.0.0.138</code></p>
<ol>
<li>配置为静态IP. <code>10.0.0.98</code></li>
<li>当NFS服务器, 向PC linux和Embedded linux, u-boot提供NFS服务.<br>使用了hanewin, 注意使能 nfs version2 以及权限设置 (-mapall:0:0)</li>
<li>虚拟机安装 PC linux</li>
<li>烧录工具, jlink, OpenJtag, dnw, 网络传输.<br>早期需要使用. 开发到应用层就可以不用了.<br>用基于nfs的网络传输, 放弃使用dnw.</li>
<li>使用putty, 远程登录控制 PC linux.<br>文本编辑器建议用vim</li>
<li>使用串口, 可用putty 或 TeraTerm, 远程登录控制 Embedded linux,<br>文本编辑器只能用vi</li>
<li>PC windows的环境搭建可参考:<br>设置IP, 安装虚拟机属于常规内容, 按下不表.<br>NFS服务器 HaneWIN 的配置见 <strong><a href="https://draapho.github.io/2016/10/03/1606-WinSoft-cloud/">Windows 软件系列-基于NFS的家庭网</a></strong><br>其中 <code>Exports</code> 内容如下:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># for linux</span></div><div class="line">E:\My_Study\linux -name:study -mapall:0:0 10.0.0.100</div><div class="line">E:\My_Work\linux -name:work -mapall:0:0 10.0.0.100</div><div class="line"></div><div class="line"><span class="comment"># for embedded linux.</span></div><div class="line">E:\My_Study\linux\jz2440\ -name:jz2440 -mapall:0:0 -range 10.0.0.1 10.0.0.111</div><div class="line"></div><div class="line"><span class="comment"># for loading file system, should be no limit, root account</span></div><div class="line"><span class="comment"># E:\My_Study\linux\jz2440\nfs\fs_qtopia -name:fs -mapall:0:0 10.0.0.111</span></div><div class="line"><span class="comment"># E:\My_Study\linux\jz2440\nfs\fs_mini_mdev -name:fs -mapall:0:0 10.0.0.111</span></div><div class="line"><span class="comment"># E:\My_Study\linux\jz2440\nfs\fs_mini -name:fs -mapall:0:0 10.0.0.111</span></div><div class="line"><span class="comment"># please choose one:</span></div><div class="line"></div><div class="line">E:\My_Study\linux\jz2440\nfs\fs_mini_mdev -name:fs -mapall:0:0 10.0.0.111</div></pre></td></tr></table></figure>
<h2 id="PC-linux-ubuntu-serve-16-04-32bit"><a href="#PC-linux-ubuntu-serve-16-04-32bit" class="headerlink" title="PC linux ubuntu serve 16.04 32bit"></a>PC linux ubuntu serve 16.04 32bit</h2><p>ip addr: <code>10.0.0.100</code><br>gateway: <code>10.0.0.138</code></p>
<ol>
<li>配置为静态IP. (弄不好就是无法上外网. 这里折腾半天)</li>
<li>安装NFS客户端. 开机mount NFS文件</li>
<li>安装SSH服务, 以便在windows下使用putty</li>
<li>安装交叉编译工具并测试<br>arm-linux-gcc 3.4.5 (对于2440系列, 别用新版本, 不停的有坑)<br>u-boot-tools<br>mkyaffs2image</li>
<li>PC linux的环境搭建可参考:<ul>
<li>第一次尝试, 失败告终, <del><a href="https://draapho.github.io/2017/02/18/1706-linux-ubuntu14/">嵌入式linux环境搭建1-Ubuntu14</a></del></li>
<li>第二次尝试, 失败告终, <del><a href="https://draapho.github.io/2017/02/19/1706-linux-centos7/">嵌入式linux环境搭建2-CentOS7</a></del></li>
<li>第三次尝试, 成功! <a href="https://draapho.github.io/2017/02/20/1706-linux-ubuntu16/">嵌入式linux环境搭建1-Ubuntu16</a></li>
</ul>
</li>
</ol>
<h2 id="Embedded-Linux-jz2440v3"><a href="#Embedded-Linux-jz2440v3" class="headerlink" title="Embedded Linux jz2440v3"></a>Embedded Linux jz2440v3</h2><p>ip addr: <code>10.0.0.111</code><br>gateway: <code>10.0.0.138</code></p>
<ol>
<li><p>用 jlink 或 openJtag <strong>烧录u-boot</strong></p>
<ul>
<li>u-boot的编译</li>
<li>需要工具jlink或OpenJtag, 一般开发板都会事先烧录好</li>
</ul>
</li>
<li><p>基于u-boot, 用dnw或网络传输 <strong>烧录内核文件</strong></p>
<ul>
<li>最后成功使用nfs, 在u-boot下烧录内核文件. 彻底放弃dnw, 接线也更简洁.</li>
<li>注意hanewin不支持多层文件夹!!!</li>
<li><del>dnw 需要在window下安装驱动, win7/win10下支持不好. win10 有数字签名问题 (重启即失效)</del></li>
<li><del>dnw 在虚拟机下的linux没有尝试成功, 因为我用的hyper-v虚拟机, 要连接到物理usb太麻烦.</del></li>
<li><del>网络传输我这边表现很不稳定, 而且操作上也比dnw繁琐.</del></li>
<li><del>我最终使用的是 windows 下的dnw. 因为只是烧录内核的时候需要使用.</del></li>
</ul>
</li>
<li><p>基于u-boot, 更改 <strong>file system</strong> 的加载方式为nfs系统, 并自动加载</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 以jz2440的u-boot为例, 进入u-boot命令行模式, 将其设置为nfs加载file system</span></div><div class="line"><span class="built_in">set</span> bootargs noinitrd root=/dev/nfs nfsroot=10.0.0.98:/fs ip=10.0.0.111:10.0.0.98:10.0.0.138:255.255.255.0::eth0:off init=/linuxrc console=ttySAC0</div><div class="line"><span class="comment"># (简化ip: 'set bootargs noinitrd root=/dev/nfs nfsroot=10.0.0.98:/fs ip=10.0.0.111 init=/linuxrc console=ttySAC0' 也可以工作)</span></div><div class="line"><span class="comment"># (默认值: 'set bootargs noinitrd root=/dev/mtdblock3 init=/linuxrc console=ttySAC0')</span></div><div class="line">save        <span class="comment"># 保存修改</span></div><div class="line">reset       <span class="comment"># 重启.</span></div></pre></td></tr></table></figure>
</li>
<li><p>jz2440的环境搭建可参考:</p>
<ul>
<li><a href="https://draapho.github.io/2017/02/21/1707-jz2440-env/">嵌入式linux-jz2440环境搭建</a></li>
</ul>
</li>
</ol>
<h1 id="折腾记"><a href="#折腾记" class="headerlink" title="折腾记"></a>折腾记</h1><h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><ol>
<li>之前玩过NAS, 所以有现成的hanewin让windows做NFS服务器.</li>
<li>Ubuntu上安装 nfs-common, 顺利加载NFS文件. 编译了u-boot和kernel, 一切正常</li>
<li>开发板手动挂载nfs, 也成功了</li>
<li>开发板开机通过nfs挂载文件系统时, 各种permssion deny.</li>
<li>明显权限问题, 退回到ubuntu下, 尝试在ubuntu下也做个NFS服务器, 然后windows再倒过来加载.</li>
<li>发现在ubuntu下, 不能把加载过来的NFS文件再次通过NFS分享出去, 应该是出于安全考虑, 没有深入追究.</li>
<li>被第五条思路折腾了挺久, 最后是因为win10专业版下没有找到能做NFS客户端的软件而放弃.</li>
<li>折腾一圈后, 又想到windows共享文件方法, 结果Ubuntu 14.04安装Samba提示依赖错误, 搜索半天网络, 没有解决. 按下不表.</li>
<li>返璞归真, 在ubuntu下老老实实修改权限为777, 编译文件系统, 烧录测试… 结果开发板开机依旧提示错误…</li>
<li>一天后, 理了理思路, 再分析. 应该还是权限问题没跑, 要么chmod, 要么uid, gid问题. 毕竟是windows下NFS传过来的文件.</li>
<li>开始研究hanewin的权限问题, 翻到官网的说明, 确实有几个参数可以设置用户和权限.</li>
<li>一通假设加穷举后, 顺利解决用户和权限问题. 再回到开发板开机通过nfs挂载文件系统, 终于成功了, 而且还是最理想的只需要windows当NFS服务器即可.</li>
<li>期间还因为使用的arm-linux-gcc 4.3.2 版本, 编译成功, 加载部分fs可以运行, 部分fs有问题.一度以为是有些fs源码有问题, 多个问题交织在一起, 所以排错过程就显得异常痛苦迷茫了.</li>
<li>嵌入式开发的起步阶段, 基本就是想打主线游戏, 但不停的有分支任务, 分支任务的分支打断你, 让人直直的想骂这tmd是谁设计的鬼游戏, 还让不让人玩下去…</li>
<li>我想说, 只有保持着对主线好奇, 不忘要打败大boss的初心, 并在分支任务中寻求一点满足感, 才能坚持下去.</li>
</ol>
<h2 id="编译器的巨坑"><a href="#编译器的巨坑" class="headerlink" title="编译器的巨坑"></a><del>编译器的巨坑</del></h2><p>刚开始用了 arm-linux-gcc 4.3.2, 编译u-boot时遇到了第一个坑, 还给解决了.<br>于是”顺利”使用 arm-linux-gcc 4.3.2 编译了u-boot, kernel, led驱动程序.<br>所谓顺利, 是因为没有报错, 生成的文件可以烧录, 启动.<br>加上引号, 是因为最后证明这些生成文件是有问题的, 会导致整个嵌入式系统某些部分无法正常工作.<br>最后在编译测试驱动用的C文件时, 编译出来的可执行文件在开发板上不可执行,<br>才想到可能是编译器问题而尝试着换回到 3.4.5 版本. 并连同内核全部重新编译了.<br>换回去后, 之前一度认为的源码有问题的fs也能成功加载了, 真是个巨坑…</p>
<p>下面列出使用 <code>arm-linux-gcc 4.3.2</code> 编译u-boot遇到问题时的解决方法 (<strong>巨坑的开始</strong>):</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 如果用gcc 4.3.2, 则版本太新, 编译错误. 可以使用自带的arm-none-linux-gnueabi</span></div><div class="line"><span class="comment"># 解决方法如下:</span></div><div class="line"><span class="comment"># 修改Makefile文件中的PLATFORM_LIBS, 将:</span></div><div class="line">PLATFORM_LIBS += -L $(shell dirname `$(CC) $(CFLAGS) -print-libgcc-file-name`) -lgcc</div><div class="line"><span class="comment"># 修改成:</span></div><div class="line">PLATFORM_LIBS += -L $(shell dirname `$(CC) $(CFLAGS) -print-libgcc-file-name`) -lgcc -lc -L /usr/<span class="built_in">local</span>/arm/4.3.2/arm-none-linux-gnueabi/libc/armv4t/usr/lib</div><div class="line"></div><div class="line"><span class="comment"># 修改 cpu /arm920t/config.mk 文件, 将:</span></div><div class="line">PLATFORM_CPPFLAGS +=$(call cc-option,-mapcs-32,-mabi=apcs-gnu)</div><div class="line">PLATFORM_RELFLAGS +=$(call cc-option,-mshort-load-bytes,$(call cc-option,-malignment-traps,))</div><div class="line"><span class="comment"># 修改成:</span></div><div class="line">PLATFORM_CPPFLAGS +=$(call cc-option,)</div><div class="line">PLATFORM_RELFLAGS +=$(call cc-option,$(call cc-option,))</div><div class="line"></div><div class="line"><span class="comment"># 重新make, 即可生成 u-boot.bin</span></div></pre></td></tr></table></figure>
<p>最后, 对于 arm-linux-gcc 版本问题, 又研究了一下. 应该说不是新版本不能用, 而是需要设置.<br>对应编译原理之类的基本不懂, 暂时也没有时间去验证, 此处写出来提供一个思路, 感觉是可行的.<br>关键点有这么几个.</p>
<ul>
<li>要使用 arm-none-linux-gnueabi</li>
<li>要指定arm架构 -</li>
<li>指定使用的库</li>
</ul>
<p>这个在上面uboot的例子也能看出一二了. 在网上还有人提到:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 编译 hello.c 时, 需要用如下命令</span></div><div class="line">arm-none-linux-gnueabi-gcc -o hello hello.c -static <span class="comment"># 特别指明了 static不能省略!</span></div><div class="line"><span class="comment"># 配置Makefile时, 需要指明arm架构</span></div><div class="line">CC=<span class="string">"arm-none-linux-gnueabi-gcc -march=armv4t"</span></div><div class="line"><span class="comment"># 指定交叉编译工具</span></div><div class="line"><span class="built_in">export</span> CROSS_COMPILE=/usr/<span class="built_in">local</span>/arm-2008q3/bin/arm-none-linux-gnueabi-</div><div class="line"><span class="comment"># 最后, 还是没明白 arm-linux-gcc 和 arm-none-linux-gnueabi-gcc的区别.</span></div><div class="line"><span class="comment"># 因为打开 arm-linux-gcc 4.3.2 bin下的 arm-linux-gcc 可以看到如下内容:</span></div><div class="line"><span class="built_in">exec</span> arm-none-linux-gnueabi-gcc -march=armv4t $*</div></pre></td></tr></table></figure></p>
<p>找到二篇详细说明的, 放上链接<br><a href="http://www.veryarm.com/296.html" target="_blank" rel="external">arm交叉编译器gnueabi、none-eabi、arm-eabi、gnueabihf、gnueabi区别</a><br><a href="http://blog.csdn.net/u013467442/article/details/44197725" target="_blank" rel="external">arm-none-linux-gnueabi交叉工具链安装,介绍，区别总结</a></p>
<h1 id="新技术-Docker"><a href="#新技术-Docker" class="headerlink" title="新技术 Docker"></a>新技术 <a href="https://docs.docker.com/" target="_blank" rel="external">Docker</a></h1><p>Linux下的环境搭建一直让人比较痛苦, 这也直接使得 <code>Docker</code> 优势尽显.<br>简单研究了一下Docker, 这个方案是可行的!<br>可参考 <a href="https://draapho.github.io/2017/02/23/1708-docker/">Docker 初学笔记</a></p>
<p>基于Docker的ARM交叉编译环境, 已经有人在做了.</p>
<ul>
<li><a href="https://github.com/dockcross/dockcross" target="_blank" rel="external">dockcross/dockcross</a>, 但S3C2440是ARM9, 采用的ARMv4架构</li>
<li><a href="http://hackaday.com/2016/09/01/how-to-use-docker-to-cross-compile-for-raspberry-pi-and-more/" target="_blank" rel="external">HOW TO USE DOCKER TO CROSS COMPILE FOR RASPBERRY PI</a></li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux 0.11 源码阅读笔记-内存管理]]></title>
      <url>https://draapho.github.io/2017/02/15/1704-linux-source6/</url>
      <content type="html"><![CDATA[<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><ul>
<li><a href="https://draapho.github.io/2017/01/23/1704-linux-source/">Linux 0.11 源码阅读笔记-总览</a></li>
<li><a href="https://draapho.github.io/2017/01/26/1704-linux-source1/">Linux 0.11 源码阅读笔记-内存的基础概念</a></li>
<li><a href="https://draapho.github.io/2017/01/28/1704-linux-source2/">Linux 0.11 源码阅读笔记-启动程序</a></li>
<li><a href="https://draapho.github.io/2017/01/31/1704-linux-source3/">Linux 0.11 源码阅读笔记-内核代码</a></li>
<li><a href="https://draapho.github.io/2017/02/01/1704-linux-source4/">Linux 0.11 源码阅读笔记-设备驱动程序</a></li>
<li><a href="https://draapho.github.io/2017/02/13/1704-linux-source5/">Linux 0.11 源码阅读笔记-文件系统</a></li>
<li><a href="https://draapho.github.io/2017/02/15/1704-linux-source6/">Linux 0.11 源码阅读笔记-内存管理</a></li>
</ul>
<h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><p>本人手工制作的 <strong>Linux 0.11 内存管理图解</strong><br><img src="https://draapho.github.io/images/1704/6-mm-map.jpg" alt="mm"></p>
<ul>
<li>虚拟内存的实现, 使用的是页面出错异常处理. 然后调用 <code>do_no_page()</code> 来读取硬盘数据(必要时先回写), 腾出内存空间.</li>
<li>写时复制 (copy on write) 机制, 新建进程时, linux不会立刻复制进程数据.<br>只有某个进程需要进行数据写操作时, 才真正开始执行复制操作.<br>好处是, 节约内存, 加快创建进程的速度.</li>
<li>Linux 0.11版本的内存管理的主要文件 <code>/mm/memory.c</code></li>
<li>内存的一些基础概念请参考 <a href="https://draapho.github.io/2017/01/26/1704-linux-source1/">Linux 0.11 源码阅读笔记-内存的基础概念</a></li>
</ul>
<h1 id="进程的内存空间"><a href="#进程的内存空间" class="headerlink" title="进程的内存空间"></a>进程的内存空间</h1><p>进程代码和数据在其逻辑地址空间中的分布<br><img src="https://draapho.github.io/images/1704/6-mm-process.jpg" alt="mm"></p>
<ul>
<li>Linux 0.11 每个进程只能有64M byte的逻辑内存.</li>
<li>环境参数块最多128K</li>
<li>堆栈指针是在逻辑地址的高位, 向下增长</li>
<li>bss是进程未初始化的数据段, 第一页会被初始化为0</li>
<li>使用需求加载机制 (Load on demand), 因此在加载运行文件时, 只是分配64M的线性地址空间, 没有分配任何真正的物理内存.</li>
<li>此时, 内核在执行代码或加载数据时, 会触发缺页异常中断, 此时才调用 <code>do_no_page</code> 加载内容到物理内存.</li>
</ul>
<h1 id="内存的分配-malloc"><a href="#内存的分配-malloc" class="headerlink" title="内存的分配 malloc"></a>内存的分配 <code>malloc</code></h1><p>使用存储桶原理进行内存的分配管理<br><img src="https://draapho.github.io/images/1704/6-mm-malloc.jpg" alt="mm"></p>
<ul>
<li>实现很巧妙. 指针应用的出神入化</li>
<li>仅内核代码可以调用.</li>
<li>基本思想: 对申请的不同的内存块大小, 使用存储桶分别进行处理.</li>
<li>提高内存利用率, 可有效避免内存碎片化.</li>
<li>源码文件 <code>/lib/malloc.c</code></li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://oldlinux.org/download/clk011c-3.0-toc.pdf" target="_blank" rel="external">Linux 内核完全注释 内核版本0.11 - 赵炯</a></li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux 0.11 源码阅读笔记-文件系统]]></title>
      <url>https://draapho.github.io/2017/02/13/1704-linux-source5/</url>
      <content type="html"><![CDATA[<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><ul>
<li><a href="https://draapho.github.io/2017/01/23/1704-linux-source/">Linux 0.11 源码阅读笔记-总览</a></li>
<li><a href="https://draapho.github.io/2017/01/26/1704-linux-source1/">Linux 0.11 源码阅读笔记-内存的基础概念</a></li>
<li><a href="https://draapho.github.io/2017/01/28/1704-linux-source2/">Linux 0.11 源码阅读笔记-启动程序</a></li>
<li><a href="https://draapho.github.io/2017/01/31/1704-linux-source3/">Linux 0.11 源码阅读笔记-内核代码</a></li>
<li><a href="https://draapho.github.io/2017/02/01/1704-linux-source4/">Linux 0.11 源码阅读笔记-设备驱动程序</a></li>
<li><a href="https://draapho.github.io/2017/02/13/1704-linux-source5/">Linux 0.11 源码阅读笔记-文件系统</a></li>
<li><p><a href="https://draapho.github.io/2017/02/15/1704-linux-source6/">Linux 0.11 源码阅读笔记-内存管理</a></p>
</li>
<li><p>推荐阅读 <a href="https://mp.weixin.qq.com/s?__biz=MzI5ODExMDQzNw==&amp;mid=2650737282&amp;idx=1&amp;sn=07a3fc491dbd06ea61afe4c7108cf7b9&amp;chksm=f4a17608c3d6ff1e7bb2b1168efa53f39db5c77b474296ba6086c1cf6612a452a6d234766b52&amp;scene=0&amp;key=7b81aac53bd2393d2edc7d94c6241745fd19b9a63b96f3683b767fbe2d367bd483fac89816919a23882f7bb13be77dc2&amp;ascene=7&amp;uin=MTUzODYxOTg2MQ%3D%3D&amp;devicetype=android-19&amp;version=26031933&amp;nettype=live.vodafone.com&amp;pass_ticket=MhcadpuflaJvGcaLNh0HQ3y1Ae%2FL2WCKStoj0RjDWXVN6c001WFeoX4HFyF1KE51" target="_blank" rel="external">我是一块硬盘-码农翻身-刘欣</a><br>通俗易懂的介绍了硬盘及文件系统的管理方式, 也简单提了一下inode. 可以作为此部分的入门.</p>
</li>
</ul>
<h1 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h1><p>本人手工制作的 <strong>Linux 0.11 文件系统图解</strong><br><img src="https://draapho.github.io/images/1704/5-fs-map.jpg" alt="fs"></p>
<p>几个核心点:</p>
<ul>
<li>Linux下<strong>一切皆文件, 文件即i节点!</strong></li>
<li>文件名和i节点的关联, 在目录项结构中实现.<br>索引过程为: <strong>目录inode-&gt;目录名/文件名-&gt;对应inode-&gt;具体内容</strong></li>
<li>任何读写硬盘的过程都是通过内存的buffer(高速缓冲)实现的, 系统不能直接读写硬盘! 由此产生同步问题.<br>调用过程为: <strong>系统函数-&gt;buffer-&gt;硬盘</strong></li>
<li>Linux对内存条的分配和使用. <code>Buffer</code> <code>Memory</code> 的概念和用途. <code>Buffer Head</code> <code>Buffer Hash List</code>.<br><code>Buffer</code> 介于高速的CPU指令和低速的硬盘之间, 用于缓存CPU对硬盘的读写内容, 提高CPU执行效率.<br><code>Memory</code> 是系统可用的内存. 系统变量, <code>malloc</code> 都是用的这块空间.<br><code>虚拟内存</code> 把使用频率低的 <code>Memory</code> 暂时搬到硬盘, 以便存放使用频率更高的内存数据. 依赖于硬盘读写操作!</li>
</ul>
<h2 id="硬盘设备分区"><a href="#硬盘设备分区" class="headerlink" title="硬盘设备分区"></a>硬盘设备分区</h2><p>硬盘设备上的分区和文件系统<br><img src="https://draapho.github.io/images/1704/5-fs-hard-disk.jpg" alt="hard disk"></p>
<ul>
<li>主引导扇区: 存放硬盘引导程序和分区表信息.</li>
<li>分区表: 标明了每个分区的类型, 起止位置以及占用的扇区数.</li>
<li>相关文件: <code>kernel/blk_drv/hd.c</code></li>
</ul>
<p>下面, 将以MINIX1.0为例说明文件系统的基本概念.<br>Linux使用的其它的文件系统核心概念都是一样的! 只是支持的大小, 寻址速度, 文件上限有区别.</p>
<h2 id="MINIX1-0-文件系统"><a href="#MINIX1-0-文件系统" class="headerlink" title="MINIX1.0 文件系统"></a>MINIX1.0 文件系统</h2><p>MINIX1.0 文件系统布局示意图<br><img src="https://draapho.github.io/images/1704/5-fs-minix.jpg" alt="minix"></p>
<ul>
<li>引导块: 上电时, BISO自动读入的部分. 有了引导块内引导程序, BIOS才能启动系统</li>
<li>Super Block(超级块): 存放文件系统的结构信息, 说明各部分的大小. <code>super_block[8]</code>, 可加载8个文件系统</li>
<li>Inode Bitmap(i节点位图): 记录i节点的使用情况, 1bit代表一个i节点. <code>s_imap[8]</code>, 占用8个块, 可表示8191个i节点情况</li>
<li>Zone Bitmap(逻辑块位图): 记录数据区的使用情况, 1bit代表一个盘块(block). <code>s_zmap[8]</code>, 占用8个块, 最大支持64M的硬盘</li>
<li>Inode(i节点): 每个文件或目录名唯一对应一个i节点, 在i节点中, 储存 id信息, 文件长度, 时间信息, 实际数据所在位置等等</li>
<li>Zone Data(数据区): <code>8 (bit/byte)  * 1024 (byte/block) * 8(zmap blocks) * 1024 (byte/block)= 64M byte</code></li>
</ul>
<p>MINIX1.0 的超级块数据结构<br><img src="https://draapho.github.io/images/1704/5-fs-super-block.jpg" alt="super block"></p>
<h1 id="一切皆文件"><a href="#一切皆文件" class="headerlink" title="一切皆文件"></a>一切皆文件</h1><h2 id="inode-详解"><a href="#inode-详解" class="headerlink" title="inode 详解"></a>inode 详解</h2><p>MINIX1.0 的i节点数据结构<br><img src="https://draapho.github.io/images/1704/5-fs-inode.jpg" alt="inode"></p>
<ul>
<li><code>i_nlinks</code>: <strong>硬链接</strong>计数器. 因此硬连接具有相同的inode号, 硬连接不能跨文件系统!</li>
</ul>
<p>命令 <code>ls -l</code> 显示的文件信息, 多数信息读取i节点就可获得<br><img src="https://draapho.github.io/images/1704/5-fs-file-info.jpg" alt="file info"></p>
<ul>
<li>符号连接 <code>s</code>: 就是常说的<strong>软连接</strong>, 类似于windows下的快捷方式, 占用i节点, 在对应的数据块内存放路径</li>
</ul>
<p><code>i_zone[9]</code> i节点的逻辑块数组功能.<br><img src="https://draapho.github.io/images/1704/5-fs-izone.jpg" alt="izone"></p>
<ul>
<li><code>i_zone[0-6]</code> 直接块号: 存放文件开始的7个磁盘块号. 此时文件大小: <code>7*1024(byte/block)=7K byte</code></li>
<li><code>i_zone[7]</code> 一次间接块号: 地址占用2byte, 因此一个数据块可存放512个地址. 此时可寻块 <code>7+512 blocks</code></li>
<li><code>i_zone[8]</code> 二次间接块号: 此时可寻块 <code>7+512+512*512 blocks</code>, 文件的最大可达 <code>512M byte</code></li>
<li><code>/dev/</code>下设备文件的 <code>i_zone[0]</code>: 设备文件不占用硬盘, 因此i节点仅保存设备的属性和设备号.</li>
</ul>
<h2 id="文件名的存储及查找"><a href="#文件名的存储及查找" class="headerlink" title="文件名的存储及查找"></a>文件名的存储及查找</h2><p>Linux 0.11 的目录项结构<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义在 include/linux/fs.h 文件中</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NAME_LEN 14                 <span class="comment">// 名字长度值</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ROOT_INO 1                  <span class="comment">// 根i节点</span></span></div><div class="line"></div><div class="line"><span class="comment">// 文件目录项结构</span></div><div class="line"><span class="keyword">struct</span> dir_entry &#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> inode;           <span class="comment">// i节点号</span></div><div class="line">    <span class="keyword">char</span> name[NAME_LEN];            <span class="comment">// 文件名</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<ul>
<li>可见, linux下的文件名称都存在了目录项的数据里面, 并且唯一关联其i节点号.</li>
<li>每个目录项占用16字节, 因此, 一个盘块可以存放 <code>1024/16=64</code> 个目录项</li>
<li>对于空目录, 也至少会有名称未 <code>.</code> 和 <code>..</code> 两项, 指向 <code>当前目录inode</code> 和 <code>上级目录inode</code></li>
<li>因此, 空目录的硬连接计数值<code>i_nlinks</code>为2, 每多一个文件, <code>i_nlinks</code>再加1.</li>
</ul>
<p>通过文件名最终找到对应文件盘块位置的示意图<br><img src="https://draapho.github.io/images/1704/5-fs-inode-find.jpg" alt="inode find"></p>
<p>整个搜索过程是根据<code>目录项结构</code>及对应的<code>inode 号</code>, 逐步深入路径的过程.<br>以路径名 <code>/usr/bin/vi</code> 搜索对应的i节点, 然后读取文件内容为例:</p>
<ol>
<li>根目录 <code>/</code> 具有固定的 inode号 <code>1</code>.</li>
<li>读取<code>inode 1</code>的数据块, 搜索名为<code>usr</code>的目录项, 从而得到<code>/usr</code>的inode号, 假设为 <code>23</code></li>
<li>读取<code>inode 23</code>的数据块, 搜索名为<code>bin</code>的目录项, 假设<code>/usr/bin</code>的inode号为 <code>61</code></li>
<li>读取<code>inode 61</code>的数据块, 搜索名为<code>vi</code>的文件名, 假设获得<code>/usr/bin/vi</code>的inode号 <code>98</code></li>
<li>读取<code>inode 98</code>的数据块, 根据i节点信息, 如 <code>i_size</code> <code>i_zone[9]</code>, 最终读取文件内容</li>
</ol>
<h1 id="高速缓存-buffer-c"><a href="#高速缓存-buffer-c" class="headerlink" title="高速缓存 buffer.c"></a>高速缓存 <code>buffer.c</code></h1><p><code>buffer_head</code> 的数据结构<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> buffer_head &#123;</div><div class="line">    <span class="keyword">char</span> * b_data;                      <span class="comment">// 指向该缓冲块中数据区(1024字节)的指针</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> b_blocknr;            <span class="comment">// 块号</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> b_dev;               <span class="comment">// 数据源的设备号(0=free)</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> b_uptodate;           <span class="comment">// 更新标记: 表示数据是否已更新</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> b_dirt;               <span class="comment">// 修改标记: 0-未修改(clean), 1-已修改(dirty)</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> b_count;              <span class="comment">// 使用该块的用户数</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> b_lock;               <span class="comment">// 缓冲区是否被锁定. 0-ok, 1-locked</span></div><div class="line">    <span class="keyword">struct</span> task_struct * b_wait;        <span class="comment">// 指向等待该缓冲区解锁的任务</span></div><div class="line">    <span class="keyword">struct</span> buffer_head * b_prev;        <span class="comment">// hash 队列的前一块. (这四个指针用于缓冲区管理)</span></div><div class="line">    <span class="keyword">struct</span> buffer_head * b_next;        <span class="comment">// hash 队列的下一块</span></div><div class="line">    <span class="keyword">struct</span> buffer_head * b_prev_free;   <span class="comment">// 空闲表上前一块</span></div><div class="line">    <span class="keyword">struct</span> buffer_head * b_next_free;   <span class="comment">// 空闲表上下一块</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>buffer的初始化<br><img src="https://draapho.github.io/images/1704/5-fs-buffer-init.jpg" alt="inode find"></p>
<p>buffer的双向循环链表<br><img src="https://draapho.github.io/images/1704/5-fs-buffer-list.jpg" alt="inode find"></p>
<ul>
<li>该双向链表是最近最少使用LRU链表(Least Recently Used), <code>free_list</code> 指向最为空闲的缓冲块指针</li>
</ul>
<p>buffer的hash表<br><img src="https://draapho.github.io/images/1704/5-fs-buffer-hash.jpg" alt="inode find"></p>
<ul>
<li>Linux 0.11 使用的hash函数是 <code>设备号^逻辑块号 Mod 307</code>, 因此共有307项hash表</li>
<li>hash的功能类似于字典, 先预先归类, 然后可以按类查找, 加快了查找速度.</li>
</ul>
<p>缓冲区管理函数关系图<br><img src="https://draapho.github.io/images/1704/5-fs-buffer-function.jpg" alt="inode find"></p>
<p>详解 <code>getblk()</code> 函数. 用于寻找最为空闲的buffer缓冲块.<br><img src="https://draapho.github.io/images/1704/5-fs-getblk.jpg" alt="inode find"></p>
<ul>
<li>首先调用 <code>get_hash_table()</code>, 查看搜索的指定缓冲块是否已经存在于buffer中. 存在就立刻返回该buffer指针.</li>
<li>不存在时, 从空闲链表头开始扫描, 寻找最合适的空闲块(没有被使用, 没有被上锁, 没有被修改). 实现LRU</li>
<li>因为可能别的进程已经加入了所需的缓冲块, 因此再调用一遍 <code>get_hash_table()</code></li>
<li>此时, 可以将块应用计数置1, 把该缓冲块移到空闲队列末尾.</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://oldlinux.org/download/clk011c-3.0-toc.pdf" target="_blank" rel="external">Linux 内核完全注释 内核版本0.11 - 赵炯</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzI5ODExMDQzNw==&amp;mid=2650737282&amp;idx=1&amp;sn=07a3fc491dbd06ea61afe4c7108cf7b9&amp;chksm=f4a17608c3d6ff1e7bb2b1168efa53f39db5c77b474296ba6086c1cf6612a452a6d234766b52&amp;scene=0&amp;key=7b81aac53bd2393d2edc7d94c6241745fd19b9a63b96f3683b767fbe2d367bd483fac89816919a23882f7bb13be77dc2&amp;ascene=7&amp;uin=MTUzODYxOTg2MQ%3D%3D&amp;devicetype=android-19&amp;version=26031933&amp;nettype=live.vodafone.com&amp;pass_ticket=MhcadpuflaJvGcaLNh0HQ3y1Ae%2FL2WCKStoj0RjDWXVN6c001WFeoX4HFyF1KE51" target="_blank" rel="external">我是一块硬盘-码农翻身-刘欣</a></li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux 0.11 源码阅读笔记-设备驱动程序]]></title>
      <url>https://draapho.github.io/2017/02/01/1704-linux-source4/</url>
      <content type="html"><![CDATA[<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><ul>
<li><a href="https://draapho.github.io/2017/01/23/1704-linux-source/">Linux 0.11 源码阅读笔记-总览</a></li>
<li><a href="https://draapho.github.io/2017/01/26/1704-linux-source1/">Linux 0.11 源码阅读笔记-内存的基础概念</a></li>
<li><a href="https://draapho.github.io/2017/01/28/1704-linux-source2/">Linux 0.11 源码阅读笔记-启动程序</a></li>
<li><a href="https://draapho.github.io/2017/01/31/1704-linux-source3/">Linux 0.11 源码阅读笔记-内核代码</a></li>
<li><a href="https://draapho.github.io/2017/02/01/1704-linux-source4/">Linux 0.11 源码阅读笔记-设备驱动程序</a></li>
<li><a href="https://draapho.github.io/2017/02/13/1704-linux-source5/">Linux 0.11 源码阅读笔记-文件系统</a></li>
<li><a href="https://draapho.github.io/2017/02/15/1704-linux-source6/">Linux 0.11 源码阅读笔记-内存管理</a></li>
</ul>
<h1 id="0-11源码设备驱动程序"><a href="#0-11源码设备驱动程序" class="headerlink" title="0.11源码设备驱动程序"></a>0.11源码设备驱动程序</h1><h2 id="字符设备驱动程序"><a href="#字符设备驱动程序" class="headerlink" title="字符设备驱动程序"></a>字符设备驱动程序</h2><p><img src="https://draapho.github.io/images/1704/4-char-driver.jpg" alt="char-driver"></p>
<ul>
<li><code>read_q</code> tty读队列</li>
<li><code>write_q</code> tty写队列, 调用 <code>copy_to_cooked()</code> 后放入 <code>secondary</code></li>
<li><code>secondary</code> tty辅助队列(存放规范模式字符序列)</li>
</ul>
<h2 id="块设备驱动程序"><a href="#块设备驱动程序" class="headerlink" title="块设备驱动程序"></a>块设备驱动程序</h2><p><img src="https://draapho.github.io/images/1704/4-block-driver.jpg" alt="block-driver"></p>
<ul>
<li><code>ll_rw_block()</code>添加完请求项后(使用了链表, 并使用电梯算法改善硬盘访问时间), 真正的操作通过调用<code>request_fn()</code>完成</li>
<li>操作硬盘 <code>do_hd_request()</code>, 操作软盘 <code>do_fd_request()</code>, 操作虚拟盘 <code>do_re_request()</code></li>
</ul>
<h1 id="linux-设备和模块的分类"><a href="#linux-设备和模块的分类" class="headerlink" title="linux 设备和模块的分类"></a>linux 设备和模块的分类</h1><h2 id="字符设备"><a href="#字符设备" class="headerlink" title="字符设备"></a>字符设备</h2><p>一个字符( char ) 设备是一种可以当作一个字节流来存取的设备( 如同一个文件 ); 一个字符驱动负责实现这种行为.<br>这样的驱动常常至少实现 <code>open</code>, <code>close</code>, <code>read</code>, 和 <code>write</code> 系统调用.</p>
<p>文本控制台 <code>/dev/console</code> 和串口 <code>/dev/ttyS0</code> 是字符设备的例子, 因为它们很好地展现了流的抽象.<br>字符设备通过文件系统结点来存取, 例如 <code>/dev/tty1</code> 和 <code>/dev/lp0</code>.</p>
<p>在一个字符设备和一个普通文件之间唯一有关的不同就是, 你经常可以在普通文件中移来移去, 但是大部分字符设备仅仅是数据通道, 你只能顺序存取.<br>然而, 存在看起来象数据区的字符设备, 你可以在里面移来移去. 例如, frame grabber 经常这样, 应用程序可以使用 mmap 或者 lseek 存取整个要求的图像.</p>
<h2 id="块设备"><a href="#块设备" class="headerlink" title="块设备"></a>块设备</h2><p>如同字符设备, 块设备通过位于 <code>/dev</code> 目录的文件系统结点来存取. 一个块设备(例如一个磁盘)应该是可以驻有一个文件系统的.</p>
<p>Linux, 允许应用程序像一个字符设备一样读写一个块设备, 允许一次传送任意数目的字节.<br>如同一个字符设备, 每个块设备都通过一个文件系统结点被存取的, 它们之间的区别对用户是透明的.<br>因此块和字符设备的区别仅仅在内核在内部管理数据的方式上, 并且因此在内核/驱动的软件接口上不同.</p>
<p>注意, 在大部分的 Unix 系统, 一个块设备只能处理这样的 I/O 操作, 传送一个或多个长度经常是 512 字节的整块(或更大如1024字节)</p>
<h2 id="网络接口"><a href="#网络接口" class="headerlink" title="网络接口"></a>网络接口</h2><p>任何网络事务都通过一个接口来进行, 就是说, 一个能够与其他主机交换数据的设备.<br>通常, 一个接口是一个硬件设备, 但是它也可能是一个纯粹的软件设备, 比如环回接口.</p>
<p>一个网络接口负责发送和接收数据报文, 在内核网络子系统的驱动下, 不必知道单个事务是如何映射到实际的被发送的报文上的.<br>虽然很多网络连接(特别那些使用 TCP 的)是面向流的, 但网络设备却常常设计成处理报文的发送和接收.</p>
<p>网络设备驱动的实现与字符和块设备驱动完全不同. <del>不用 <code>read</code> 和 <code>write</code></del>, 需要使用和报文传递相关的函数.</p>
<h2 id="硬件和驱动的关系"><a href="#硬件和驱动的关系" class="headerlink" title="硬件和驱动的关系"></a>硬件和驱动的关系</h2><p>以 USB 设备为例, USB可以虚拟成串口(字符设备), 也可以是USB硬盘(块设备), 或者USB wifi(网络接口)<br>因此, 使用何种Linux的驱动和硬件无关, 而和与硬件的通讯方式有关.</p>
<p>一般地, 字节流使用字符设备驱动, 大量并发数据的传输使用块设备驱动. 网络接口驱动仅针对网络通讯.</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://oldlinux.org/download/clk011c-3.0-toc.pdf" target="_blank" rel="external">Linux 内核完全注释 内核版本0.11 - 赵炯</a></li>
<li><a href="http://www.deansys.com/doc/ldd3/ch01s03.html" target="_blank" rel="external">设备和模块的分类</a></li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux 0.11 源码阅读笔记-内核代码]]></title>
      <url>https://draapho.github.io/2017/01/31/1704-linux-source3/</url>
      <content type="html"><![CDATA[<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><ul>
<li><a href="https://draapho.github.io/2017/01/23/1704-linux-source/">Linux 0.11 源码阅读笔记-总览</a></li>
<li><a href="https://draapho.github.io/2017/01/26/1704-linux-source1/">Linux 0.11 源码阅读笔记-内存的基础概念</a></li>
<li><a href="https://draapho.github.io/2017/01/28/1704-linux-source2/">Linux 0.11 源码阅读笔记-启动程序</a></li>
<li><a href="https://draapho.github.io/2017/01/31/1704-linux-source3/">Linux 0.11 源码阅读笔记-内核代码</a></li>
<li><a href="https://draapho.github.io/2017/02/01/1704-linux-source4/">Linux 0.11 源码阅读笔记-设备驱动程序</a></li>
<li><a href="https://draapho.github.io/2017/02/13/1704-linux-source5/">Linux 0.11 源码阅读笔记-文件系统</a></li>
<li><a href="https://draapho.github.io/2017/02/15/1704-linux-source6/">Linux 0.11 源码阅读笔记-内存管理</a></li>
</ul>
<h1 id="内核代码"><a href="#内核代码" class="headerlink" title="内核代码"></a>内核代码</h1><p><img src="https://draapho.github.io/images/1704/3-kernel-function.jpg" alt="kernel-function"></p>
<h2 id="硬件中断程序"><a href="#硬件中断程序" class="headerlink" title="硬件中断程序"></a>硬件中断程序</h2><p>处理系统硬件中断. 多为故障处理, 直接打印出堆栈信息帮助排错.</p>
<h2 id="系统调用程序"><a href="#系统调用程序" class="headerlink" title="系统调用程序"></a>系统调用程序</h2><p>本质是调用中断 int 0x80. 由于是用户发起的, 也称之为软中断.</p>
<ul>
<li>system_call.s 会根据 <code>sys_call_table[]</code> (在sys.h内) 去调用相应的C函数. sys_xxx函数则很分散.</li>
<li>signal.c 用于处理内核的信号. (<code>signal()</code>可能丢失信号, <code>sigaction()</code>更可靠)</li>
</ul>
<p><em>信号处理程序的调用方式</em><br><img src="https://draapho.github.io/images/1704/3-signal.jpg" alt="signal"></p>
<h2 id="调度程序"><a href="#调度程序" class="headerlink" title="调度程序"></a>调度程序</h2><p>linux 0.11的调度思路结合<code>时间片</code>和<code>优先权</code>调度.</p>
<p><em>调用fork创建新进程</em><br><img src="https://draapho.github.io/images/1704/2-fork-function.jpg" alt="fork-function"></p>
<ul>
<li>调度过程: count大, 就优先调度! 计算公式为: <code>count = counter/2 + priotiry</code>.<br>对于以及运行完成的任务, count 直接为 priotiry<br>对于被阻塞的任务, 由于公式内包含有 count/2 的权重, 即使优先级再低, 也会被照顾到.</li>
<li><code>switch_to()</code> 一段汇编宏定义, 用于切换到指定任务(加载TSS).</li>
<li><code>schedule()</code> 调度函数, 每10ms判断各任务的信号位图以及比较<code>counter</code>值. 需要切换任务时, 调用 <code>switch_to(next)</code></li>
<li><code>do_timer()</code> 在 system_call.s 中 <code>_timer_interrupt</code> 被调用, 每10ms调用一次 <code>schedule()</code></li>
<li><code>sleep_on()</code> 当进程所请求的资源暂时不可用时, 等待一段时间. 等切换回来后再继续运行. 调用 <code>schedule()</code></li>
<li><code>wake_up()</code> 把正在等待可用资源的指定任务值为就绪状态, 就如字面意义, 是一个唤醒函数. 但实现比较搞脑子!</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://oldlinux.org/download/clk011c-3.0-toc.pdf" target="_blank" rel="external">Linux 内核完全注释 内核版本0.11 - 赵炯</a></li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux 0.11 源码阅读笔记-启动程序]]></title>
      <url>https://draapho.github.io/2017/01/28/1704-linux-source2/</url>
      <content type="html"><![CDATA[<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><ul>
<li><a href="https://draapho.github.io/2017/01/23/1704-linux-source/">Linux 0.11 源码阅读笔记-总览</a></li>
<li><a href="https://draapho.github.io/2017/01/26/1704-linux-source1/">Linux 0.11 源码阅读笔记-内存的基础概念</a></li>
<li><a href="https://draapho.github.io/2017/01/28/1704-linux-source2/">Linux 0.11 源码阅读笔记-启动程序</a></li>
<li><a href="https://draapho.github.io/2017/01/31/1704-linux-source3/">Linux 0.11 源码阅读笔记-内核代码</a></li>
<li><a href="https://draapho.github.io/2017/02/01/1704-linux-source4/">Linux 0.11 源码阅读笔记-设备驱动程序</a></li>
<li><a href="https://draapho.github.io/2017/02/13/1704-linux-source5/">Linux 0.11 源码阅读笔记-文件系统</a></li>
<li><a href="https://draapho.github.io/2017/02/15/1704-linux-source6/">Linux 0.11 源码阅读笔记-内存管理</a></li>
</ul>
<h1 id="启动程序-boot"><a href="#启动程序-boot" class="headerlink" title="启动程序 boot"></a>启动程序 boot</h1><p><em>启动引导时内核在内存中的位置和移动情况</em><br><img src="https://draapho.github.io/images/1704/2-bios-boot.jpg" alt="bios-boot"></p>
<ol>
<li>80x86结构的CPU开机后, 从0xFFFF0开始自动执行代码, 通常是 ROM-BIOS中的地址.<br>BIOS在内存地址0处初始化中断向量, 然后将可启动设备的第一个扇区(磁盘引导扇区, 512字节)读入内存地址0x7C00处.</li>
<li>bootsect.s 被BIOS读入到内存地址 0x7C00(31Kb) 处开始运行后, 立刻把自己移到 0x90000(576Kb) 处.</li>
<li>接着, bootsect.s 把 setup.s 读入到 0x90200 处, system模块(即内核)读入到 0x10000 处.<ul>
<li>此版本内核模块不会超过 0x80000, 即512K大小, 因此不会覆盖掉0x90000处的内容</li>
<li>setup.s 需要一些 ROM BIOS 保留下来的一些系统参数(如显卡模式, 硬盘参数等), 这些参数被BIOS放在内存起始处, 大小为1Kb.</li>
<li>因而 bootsect.s 只能先把内核放到 0x10000 处而不是直接放到 0x0000 处!</li>
</ul>
</li>
<li>bootsect.s 把执行权交给 setup.s.</li>
<li>然后, setup.s 把BIOS预留在内存起始处的参数存储到0x90000处(覆盖了bootsect.s), 再把system模块移到内存起始处 (0x0000)</li>
<li>setup.s 把执行权交给 head.s, linux系统代码加载过程完成, linux开始启动!</li>
</ol>
<p>备注:</p>
<ul>
<li>启动过程涉及到很多80x86的硬件知识, 没必要深究, 重点是理解启动过程和思路!</li>
<li>因为目录linux早已支持arm体系结构, 嵌入式也以arm为主. 涉及到硬件的部分需要时再深入了解即可.</li>
</ul>
<h2 id="bootsect-s"><a href="#bootsect-s" class="headerlink" title="bootsect.s"></a>bootsect.s</h2><ul>
<li>bootsect.s 是磁盘引导块程序, 放在磁盘的一个扇区中(引导扇区).</li>
<li>PC上电, BIOS自检后, BIOS会把引导扇区bootsect加载到内存地址0x7C00处并执行.</li>
<li>bootsect 立刻把自己挪到 0x90000 处并继续执行</li>
<li>利用BISO中断0x13获取启动引导盘参数, 准备读取1.44MB启动磁盘内的后续部分(setup.s + system模块)</li>
<li>加载 setup.s 到 0x90200 处</li>
<li>在屏幕上显示 “Loading system…”</li>
<li>把system模块加载到0x10000处</li>
<li>长跳到 setup.s, 执行 setup.s</li>
</ul>
<h2 id="setup-s"><a href="#setup-s" class="headerlink" title="setup.s"></a>setup.s</h2><ul>
<li>setup.s 是一个操作系统加载程序. 主要作用读取BIOS保留的系统参数, 移动system模块到内存0x0000处, 并执行head.s代码</li>
<li>setup.s 首先是把BIOS预留在内存0x0000处的参数保存到内存 0x90000 处, 会覆盖掉已经没有用的 bootsect.s 代码</li>
<li>主要参数有: 光标位置, 扩展内存数, 显示页面, 显示模式, 字符列数, 显示内存, 显示状态, 显卡特性, 硬盘参数, 根设备号</li>
<li>接着 setup.s 将system模块从 0x10000-0x8ffff 整体向下移动到 0x0000 处.</li>
<li>然后 setup.s 加载 idtr 和 gdtr (中断/全局描述符表寄存器), 重设中断号, 设置CPU进入32位保护模式运行</li>
<li>跳转到 system模块的 head.s 继续运行(运行在32位保护模式下)</li>
</ul>
<p><em>setup.s 结束后内中的程序示意图</em><br><img src="https://draapho.github.io/images/1704/2-setup-memory.jpg" alt="setup-memory"></p>
<h2 id="head-s"><a href="#head-s" class="headerlink" title="head.s"></a>head.s</h2><ul>
<li>head.s 位于整个linux操作系统最前面, 主要功能就是为linux的执行检测和初始化系统环境</li>
<li>设置系统堆栈</li>
<li>设置idt(中断描述符表) 和 gdt(全局表述符表)</li>
<li>检测A20地址线是否已真的开启 (就是能读取1M以上的内存地址)</li>
<li>将页目录表放在内存地址0处 (会覆盖自己idt部分的内容)</li>
<li>最后, heads利用返回指令, 弹出main.c的入口地址, 运行main()程序</li>
</ul>
<p><em>head.s 结束后, system模块在内存中的示意图</em><br><img src="https://draapho.github.io/images/1704/2-head-memory.jpg" alt="head-memory"></p>
<h2 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h2><p><em>main初始化完成后, 内存功能示意图</em><br><img src="https://draapho.github.io/images/1704/2-main-memory.jpg" alt="maim-memory"></p>
<p><em>内核初始化程序流程示意图</em><br><img src="https://draapho.github.io/images/1704/2-main-flow.jpg" alt="maim-flow"></p>
<p><em>调用fork创建新进程</em><br><img src="https://draapho.github.io/images/1704/2-fork-function.jpg" alt="fork-function"></p>
<p><em>进程(process), 进程组(process group) 和 会话期(session) 的关系图</em><br><img src="https://draapho.github.io/images/1704/2-session-process.jpg" alt="session-process"></p>
<ul>
<li>一般一个用户登录后, 其所有程序属于同一个session. 用途很多, 譬如便于发出终止信号结束所有进程.</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://oldlinux.org/download/clk011c-3.0-toc.pdf" target="_blank" rel="external">Linux 内核完全注释 内核版本0.11 - 赵炯</a></li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux 0.11 源码阅读笔记-内存的基础概念]]></title>
      <url>https://draapho.github.io/2017/01/26/1704-linux-source1/</url>
      <content type="html"><![CDATA[<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><ul>
<li><a href="https://draapho.github.io/2017/01/23/1704-linux-source/">Linux 0.11 源码阅读笔记-总览</a></li>
<li><a href="https://draapho.github.io/2017/01/26/1704-linux-source1/">Linux 0.11 源码阅读笔记-内存的基础概念</a></li>
<li><a href="https://draapho.github.io/2017/01/28/1704-linux-source2/">Linux 0.11 源码阅读笔记-启动程序</a></li>
<li><a href="https://draapho.github.io/2017/01/31/1704-linux-source3/">Linux 0.11 源码阅读笔记-内核代码</a></li>
<li><a href="https://draapho.github.io/2017/02/01/1704-linux-source4/">Linux 0.11 源码阅读笔记-设备驱动程序</a></li>
<li><a href="https://draapho.github.io/2017/02/13/1704-linux-source5/">Linux 0.11 源码阅读笔记-文件系统</a></li>
<li><a href="https://draapho.github.io/2017/02/15/1704-linux-source6/">Linux 0.11 源码阅读笔记-内存管理</a></li>
</ul>
<h1 id="Linux-内存的基础概念"><a href="#Linux-内存的基础概念" class="headerlink" title="Linux 内存的基础概念"></a>Linux 内存的基础概念</h1><h2 id="内存条的分配"><a href="#内存条的分配" class="headerlink" title="内存条的分配"></a>内存条的分配</h2><p><em>Linux0.11 对物理内存条的分配</em><br><img src="https://draapho.github.io/images/1704/1-memory.jpg" alt="memory"></p>
<ul>
<li><code>内核模块</code>, Linux Kernel的代码</li>
<li><code>高速缓冲 Buffer</code>, 缓存内核对硬盘的读写操作. 仅部分内核函数可用</li>
<li><code>主内存 Memory</code>, 应用程序可用的内存区. 虚拟内存也是针对这一块区域而言的.</li>
</ul>
<h2 id="内存的几个概念"><a href="#内存的几个概念" class="headerlink" title="内存的几个概念"></a>内存的几个概念</h2><ul>
<li>Virtual Memory<br>linux 0.11内核中, 每个程序都划分了总容量为64Mb的虚拟内存空间</li>
<li>Logical Address<br>程序在虚拟内存空间的偏移量就是逻辑地址, 范围是0x0000000-0x4000000</li>
<li>Linear Address<br>在内存分段机制中, 把相应的段基址加上逻辑地址就是线性地址. 若没有开启分页功能, 直接就是物理地址.<br>分段机制虽然保证了程序内存的相互隔离, 但是对内存的使用效率是非常低的!<br>80x86 实时模式下, 寻址采用的是段和偏移值. 无分页机制.<br>80x86 保护模式下, 会启用分页机制, 需要使用描述表(Descriptor Table)</li>
<li>Physical Address<br>真正的内存物理地址, 从逻辑地址到物理地址, 需要经过分段和分页两次转换.</li>
<li>分段机制<ul>
<li>相关概念有, GDT(全局描述符表), LDT(局部描述符表)</li>
<li>Linux基本忽略了分段机制, 通过”欺骗”, 使得逻辑地址与线性地址是一致的! (用GDT, 基地址为0)</li>
</ul>
</li>
<li>分页机制<ul>
<li>相关概念有 Page Directory(页目录), Page Table(页表)</li>
<li>新版的linux, 为了提高兼容性, 直接采用了4级分页机制:</li>
<li>页全局目录, Page Global Directory, 对应80x86的 Page Directory</li>
<li>页上级目录, Page Upper Directory,  长度设为0即可</li>
<li>页中间目录, Page Middle Directory, 长度设为0即可</li>
<li>页表, Page Table, 对应80x86的 Page Table</li>
</ul>
</li>
<li>任务状态段<ul>
<li>TSS (Task State Segment)</li>
<li>TSS包含了所有硬件切换任务时, 需要保存的寄存器信息.</li>
<li>TSS存放于GDT内</li>
</ul>
</li>
</ul>
<h2 id="内存地址的转换"><a href="#内存地址的转换" class="headerlink" title="内存地址的转换"></a>内存地址的转换</h2><p><em>从逻辑地址变换为物理地址的过程</em><br><img src="https://draapho.github.io/images/1704/1-address-convert.jpg" alt="address-convert"></p>
<p><em>从逻辑地址变化为物理地址的框图</em><br><img src="https://draapho.github.io/images/1704/1-address-convert-detail.jpg" alt="address-convert-detail"></p>
<p><em>逻辑地址转换为线性地址的过程</em><br><img src="https://draapho.github.io/images/1704/1-logical2linear.jpg" alt="logical2linear"></p>
<p><em>线性地址(页目录项, 页表项)在内存中位置</em><br><img src="https://draapho.github.io/images/1704/1-linear2physical.jpg" alt="linear2physical"></p>
<p><em>页目录(Page Directory), 页表(Page Table)和物理内存的关系图</em><br><img src="https://draapho.github.io/images/1704/1-address-pdpt.jpg" alt="address-pdpt"></p>
<p><em>进程代码和数据在其逻辑地址空间中的分布 (在物理地址中的分布是随机)</em><br><img src="https://draapho.github.io/images/1704/1-code-address.jpg" alt="code-address"></p>
<p><em>linux 使用描述符表的示意图</em><br><img src="https://draapho.github.io/images/1704/1-gdt-ldt-memory.jpg" alt="gdt-ldt-memory"></p>
<p><em>任务1在三种地址空间中的关系</em><br><img src="https://draapho.github.io/images/1704/1-address-relationship.jpg" alt="address-relationship"></p>
<h2 id="80x86-多任务"><a href="#80x86-多任务" class="headerlink" title="80x86 多任务"></a>80x86 多任务</h2><ul>
<li>Intel 80x86分为4个保护级别, Linux 0.11只使用了0和3两个保护级别.</li>
<li>0为最高优先级, 对应于Linux内核态</li>
<li>3为最低优先级, 对应于Linux用户态</li>
<li>这样划分主要是为了安全考虑进行的系统级别的隔离.</li>
<li>用户态无权直接使用硬件资源, 必须通过调用内核函数.</li>
<li>多任务间, 内存是完全隔离的, 因此任务之间不会相互影响.</li>
</ul>
<p><em>linux 的多任务及保护方式</em><br><img src="https://draapho.github.io/images/1704/1-mulit-process.jpg" alt="mulit-process"></p>
<p><em>linux 任务切换操作示意图</em><br><img src="https://draapho.github.io/images/1704/1-switch-process.jpg" alt="switch-process"></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://oldlinux.org/download/clk011c-3.0-toc.pdf" target="_blank" rel="external">Linux 内核完全注释 内核版本0.11 - 赵炯</a></li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux 0.11 源码阅读笔记-总览]]></title>
      <url>https://draapho.github.io/2017/01/23/1704-linux-source/</url>
      <content type="html"><![CDATA[<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><ul>
<li><a href="https://draapho.github.io/2017/01/23/1704-linux-source/">Linux 0.11 源码阅读笔记-总览</a></li>
<li><a href="https://draapho.github.io/2017/01/26/1704-linux-source1/">Linux 0.11 源码阅读笔记-内存的基础概念</a></li>
<li><a href="https://draapho.github.io/2017/01/28/1704-linux-source2/">Linux 0.11 源码阅读笔记-启动程序</a></li>
<li><a href="https://draapho.github.io/2017/01/31/1704-linux-source3/">Linux 0.11 源码阅读笔记-内核代码</a></li>
<li><a href="https://draapho.github.io/2017/02/01/1704-linux-source4/">Linux 0.11 源码阅读笔记-设备驱动程序</a></li>
<li><a href="https://draapho.github.io/2017/02/13/1704-linux-source5/">Linux 0.11 源码阅读笔记-文件系统</a></li>
<li><a href="https://draapho.github.io/2017/02/15/1704-linux-source6/">Linux 0.11 源码阅读笔记-内存管理</a></li>
</ul>
<h2 id="Linux-发展背景"><a href="#Linux-发展背景" class="headerlink" title="Linux 发展背景"></a>Linux 发展背景</h2><p>Linux操作系统的诞生(1991年),发展和成长过程依赖于以下五个重要支柱</p>
<ol>
<li>UNIX操作系统 (诞生于1969年, 版权和专利问题不断, 大公司不愿公开操作系统原理和源码)</li>
<li>MINIX操作系统 (诞生于1987年, 意为 Mini UNIX. 教学使用是开源免费的! linus从中学习了操作系统的工作原理)</li>
<li>GNU计划 (诞生于1984年, 意为 GNU’s Not Unix 递归缩写. 宗旨是开发一个类Unix的自由软件操作系统)<br>有名的免费软件有: emacs, bash shell, gcc 编译程序, gdb 调试程序<br>因此, 目前许多人将Linux操作系统称之为 <a href="http://www.gnu.org/gnu/gnu-linux-faq.html#why" target="_blank" rel="external">GNU/Linux 操作系统</a>.</li>
<li>POSIX标准 (V1诞生于1988年, Portable Operating System Interface for Computing Systems)<br>描述了操作系统的调用服务接口标准, 便于应用程序在不同操作系统上的移植.<br>这为linux系统对应用程序的兼容提供了一套标准. 也是linux能流行起来的基础条件之一.</li>
<li>Internet网络 (确保了linux系统由众人开发维护, 其发展和推广都离不开Internet!)</li>
</ol>
<h2 id="Linux-GNU-POSIX-的关系"><a href="#Linux-GNU-POSIX-的关系" class="headerlink" title="Linux, GNU, POSIX 的关系"></a>Linux, GNU, POSIX 的关系</h2><p><img src="https://draapho.github.io/images/1704/0-Linux_kernel_System_Call_Interface_and_glibc.png" alt="Linux_kernel_System_Call_Interface_and_glibc"></p>
<h2 id="内核代码框图"><a href="#内核代码框图" class="headerlink" title="内核代码框图"></a>内核代码框图</h2><p><img src="https://draapho.github.io/images/1704/0-kernal-struct.png" alt="kernal-struct"></p>
<h2 id="内核函数关系图"><a href="#内核函数关系图" class="headerlink" title="内核函数关系图"></a>内核函数关系图</h2><p><img src="https://draapho.github.io/images/1704/0-linux-kernal-map.png" alt="kernal-fucntion"></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://oldlinux.org/download/linux-devel.pdf" target="_blank" rel="external">Linux 诞生和发展的五个重要支柱 - 赵炯</a></li>
<li><a href="http://www.gnu.org/gnu/gnu-linux-faq.html#why" target="_blank" rel="external">GNU Operating System</a>.)</li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Unix/Linux 命令参考]]></title>
      <url>https://draapho.github.io/2017/01/19/1703-linux-command/</url>
      <content type="html"><![CDATA[<p><strong><em>转载自 <a href="https://linuxtoy.org/pages/download.html" target="_blank" rel="external">Unix/Linux 命令速查表</a></em></strong></p>
<hr>
<h1 id="搜索指令-find-grep"><a href="#搜索指令-find-grep" class="headerlink" title="搜索指令 find grep"></a>搜索指令 <code>find</code> <code>grep</code></h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">find -name april*                   <span class="comment"># 当前目录下查找以april开始的文件</span></div><div class="line">find -iname april*                  <span class="comment"># 忽略大小写</span></div><div class="line">find /home -size +512k              <span class="comment"># 查大于512k的文件</span></div><div class="line">find /home -size -512k              <span class="comment"># 查小于512k的文件</span></div><div class="line">find /home -links +2                <span class="comment"># 查硬连接数大于2的文件或目录</span></div><div class="line">find /home -perm 0700               <span class="comment"># 查权限为700的文件或目录</span></div><div class="line"></div><div class="line">find -name tom.txt -user kim        <span class="comment"># 查找名称为tom.txt且用户为kim的文件</span></div><div class="line">find -name ap* -or -name may*       <span class="comment"># 查找以ap或may开头的文件</span></div><div class="line">find -name wa* -not -type l         <span class="comment"># 查找名为wa开头且类型不为符号链接的文件</span></div><div class="line">find -name wa* ! -type l            <span class="comment"># 查找名为wa开头且类型不为符号链接的文件</span></div><div class="line"><span class="comment"># 对于 -type, 有 b=block, d=dictory, c=character, p=pipe, l=link, f=file</span></div><div class="line"></div><div class="line">find / -iname <span class="string">"MyCProgram.c"</span> -exec md5sum &#123;&#125; \; <span class="comment"># 对所有找到的文件进行MD5验证</span></div><div class="line">find / -name filename -ok rm -rf &#123;&#125; \;          <span class="comment"># 确认删除找到的文件</span></div><div class="line">find . -mtime +3 | xargs rm -rf                 <span class="comment"># 删除3天以前的文件</span></div><div class="line">find . -size +3000k -exec ls -ld &#123;&#125; \;          <span class="comment"># 查找大于3M的文件</span></div><div class="line">find . -size -3000k | xargs <span class="built_in">echo</span> <span class="string">""</span> &gt;./file.log <span class="comment"># 查找小于3M的文件并写入file.log</span></div><div class="line">find . -type f | xargs grep <span class="string">"hostname"</span>          <span class="comment"># 在普通文件中搜索hostname这个词</span></div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ls <span class="_">-l</span> | grep <span class="string">'^a'</span>                   <span class="comment"># 只显示以a开头的文件名。</span></div><div class="line">grep <span class="string">'test'</span> d*                      <span class="comment"># 显示所有以d开头的文件中包含test的行。</span></div><div class="line">grep <span class="string">'test'</span> aa bb cc                <span class="comment"># 显示在aa，bb，cc文件中匹配test的行。</span></div><div class="line">grep -i pattern files               <span class="comment"># 不区分大小写地搜索。默认情况区分大小写</span></div><div class="line">grep <span class="_">-l</span> pattern files               <span class="comment"># 只列出匹配的文件名，</span></div><div class="line">grep -L pattern files               <span class="comment"># 列出不匹配的文件名，</span></div><div class="line">grep -w pattern files               <span class="comment"># 只匹配整个单词(如匹配‘magic’，而不是‘magical’)</span></div><div class="line">grep -C number pattern files        <span class="comment"># 匹配的上下文分别显示[number]行，</span></div><div class="line">grep pattern1 | pattern2 files      <span class="comment"># 显示匹配 pattern1 或 pattern2 的行，</span></div><div class="line">grep pattern1 files | grep pattern2 <span class="comment"># 显示既匹配 pattern1 又匹配 pattern2的行</span></div></pre></td></tr></table></figure>
<h1 id="常用命令表"><a href="#常用命令表" class="headerlink" title="常用命令表"></a>常用命令表</h1><table>
<thead>
<tr>
<th>文件命令</th>
<th>指令说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ls</code></td>
<td>列出目录</td>
</tr>
<tr>
<td><code>ls -al</code></td>
<td>使用格式化列出隐藏文件</td>
</tr>
<tr>
<td><code>cd dir</code></td>
<td>更改目录到 dir</td>
</tr>
<tr>
<td><code>cd</code></td>
<td>更改到 home 目录</td>
</tr>
<tr>
<td><code>pwd</code></td>
<td>显示当前目录</td>
</tr>
<tr>
<td><code>mkdir dir</code></td>
<td>创建目录 dir</td>
</tr>
<tr>
<td><code>rm file</code></td>
<td>删除 file</td>
</tr>
<tr>
<td><code>rm -r dir</code></td>
<td>删除目录 dir</td>
</tr>
<tr>
<td><code>rm -f file</code></td>
<td>强制删除 file</td>
</tr>
<tr>
<td><code>rm -rf dir</code></td>
<td>强制删除整个目录 dir (小心使用)</td>
</tr>
<tr>
<td><code>cp file1 file2</code></td>
<td>将 file1 复制到 file2</td>
</tr>
<tr>
<td><code>cp -r dir1 dir2</code></td>
<td>将 dir1 复制到 dir2; 如果 dir2 不存在则创建它</td>
</tr>
<tr>
<td><code>mv file1 file2</code></td>
<td>将 file1 重命名或移动到 file2;</td>
</tr>
<tr>
<td><code>ln -s file link</code></td>
<td>创建 file 的符号连接 link</td>
</tr>
<tr>
<td><code>touch file</code></td>
<td>创建 file</td>
</tr>
<tr>
<td><code>cat &gt; file</code></td>
<td>将标准输入添加到 file</td>
</tr>
<tr>
<td><code>more file</code></td>
<td>查看 file 的内容</td>
</tr>
<tr>
<td><code>head file</code></td>
<td>查看 file 的前 10 行</td>
</tr>
<tr>
<td><code>tail file</code></td>
<td>查看 file 的后 10 行</td>
</tr>
<tr>
<td><code>tail -f file</code></td>
<td>从后 10 行开始查看 file 的内容</td>
</tr>
<tr>
<td><strong>进程管理</strong></td>
<td><strong>指令说明</strong></td>
</tr>
<tr>
<td><code>ps</code></td>
<td>显示当前的活动进程</td>
</tr>
<tr>
<td><code>top</code></td>
<td>显示所有正在运行的进程</td>
</tr>
<tr>
<td><code>kill pid</code></td>
<td>杀掉进程 id pid</td>
</tr>
<tr>
<td><code>killall proc</code></td>
<td>杀掉所有名为 proc 的进程 (小心使用)</td>
</tr>
<tr>
<td><code>bg</code></td>
<td>列出已停止或后台的作业</td>
</tr>
<tr>
<td><code>fg</code></td>
<td>将最近的作业带到前台</td>
</tr>
<tr>
<td><code>fg n</code></td>
<td>将作业 n 带到前台</td>
</tr>
<tr>
<td><strong>文件权限</strong></td>
<td><strong>指令说明</strong></td>
</tr>
<tr>
<td><code>chmod rwxrwxrwx file</code></td>
<td>更改 file 的权限</td>
</tr>
<tr>
<td><code>chmod 777</code></td>
<td>为所有用户添加 rwx 权限</td>
</tr>
<tr>
<td><code>chmod 755</code></td>
<td>为所有者添加 rwx 权限, 为组和其他用户添加 rx 权限</td>
</tr>
<tr>
<td><strong>SSH</strong></td>
<td><strong>指令说明</strong></td>
</tr>
<tr>
<td><code>ssh user@host</code></td>
<td>以 user 用户身份连接到 host</td>
</tr>
<tr>
<td><code>ssh -p port user@host</code></td>
<td>在端口 port 以 user 用户身份连接到 host</td>
</tr>
<tr>
<td><code>ssh-copy-id user@host</code></td>
<td>将密钥添加到 host 以实现无密码登录</td>
</tr>
<tr>
<td><strong>系统信息</strong></td>
<td><strong>指令说明</strong></td>
</tr>
<tr>
<td><code>date</code></td>
<td>显示当前日期和时间</td>
</tr>
<tr>
<td><code>cal</code></td>
<td>显示当月的日历</td>
</tr>
<tr>
<td><code>uptime</code></td>
<td>显示系统从开机到现在所运行的时间</td>
</tr>
<tr>
<td><code>w</code></td>
<td>显示登录的用户</td>
</tr>
<tr>
<td><code>whoami</code></td>
<td>查看你的当前用户名</td>
</tr>
<tr>
<td><code>finger user</code></td>
<td>显示 user 的相关信息</td>
</tr>
<tr>
<td><code>uname -a</code></td>
<td>显示内核信息</td>
</tr>
<tr>
<td><code>cat /proc/cpuinfo</code></td>
<td>查看 cpu 信息</td>
</tr>
<tr>
<td><code>cat /proc/meminfo</code></td>
<td>查看内存信息</td>
</tr>
<tr>
<td><code>man command</code></td>
<td>显示 command 的说明手册</td>
</tr>
<tr>
<td><code>df</code></td>
<td>显示磁盘占用情况</td>
</tr>
<tr>
<td><code>du</code></td>
<td>显示目录空间占用情况</td>
</tr>
<tr>
<td><code>free</code></td>
<td>显示内存及交换区占用情况</td>
</tr>
<tr>
<td><strong>压缩</strong></td>
<td><strong>指令说明</strong></td>
</tr>
<tr>
<td><code>tar cf file.tar files</code></td>
<td>创建包含 files 的 tar 文件 file.tar</td>
</tr>
<tr>
<td><code>tar xf file.tar</code></td>
<td>从 file.tar 提取文件</td>
</tr>
<tr>
<td><code>tar czf file.tar.gz files</code></td>
<td>使用 Gzip 压缩创建 tar 文件</td>
</tr>
<tr>
<td><code>tar xzf file.tar.gz</code></td>
<td>使用 Gzip 提取 tar 文件</td>
</tr>
<tr>
<td><code>tar cjf file.tar.bz2</code></td>
<td>使用 Bzip2 压缩创建 tar 文件</td>
</tr>
<tr>
<td><code>tar xjf file.tar.bz2</code></td>
<td>使用 Bzip2 提取 tar 文件</td>
</tr>
<tr>
<td><code>gzip file</code></td>
<td>压缩 file 并重命名为 file.gz</td>
</tr>
<tr>
<td><code>gzip -d file.gz</code></td>
<td>将 file.gz 解压缩为 file</td>
</tr>
<tr>
<td><strong>网络</strong></td>
<td><strong>指令说明</strong></td>
</tr>
<tr>
<td><code>ping host</code></td>
<td>ping host 并输出结果</td>
</tr>
<tr>
<td><code>whois domain</code></td>
<td>获取 domain 的 whois 信息</td>
</tr>
<tr>
<td><code>dig domain</code></td>
<td>获取 domain 的 DNS 信息</td>
</tr>
<tr>
<td><code>dig -x host</code></td>
<td>逆向查询 host</td>
</tr>
<tr>
<td><code>wget file</code></td>
<td>下载 file</td>
</tr>
<tr>
<td><code>wget -c file</code></td>
<td>断点续传</td>
</tr>
<tr>
<td><strong>安装</strong></td>
<td><strong>指令说明</strong></td>
</tr>
<tr>
<td><code>./configure</code> <code>make</code> <code>make install</code></td>
<td>从源码安装</td>
</tr>
<tr>
<td><code>dpkg -i pkg.deb</code></td>
<td>安装包 (Debian)</td>
</tr>
<tr>
<td><code>rpm -Uvh pkg.rpm</code></td>
<td>安装包 (RPM)</td>
</tr>
<tr>
<td><code>yum install package</code></td>
<td>安装包 (CentOS)</td>
</tr>
<tr>
<td><code>sudo apt-get install package</code></td>
<td>安装包 (Ubuntu)</td>
</tr>
<tr>
<td><strong>快捷键</strong></td>
<td><strong>指令说明</strong></td>
</tr>
<tr>
<td><code>Ctrl+C</code></td>
<td>停止当前命令</td>
</tr>
<tr>
<td><code>Ctrl+Z</code></td>
<td>停止当前命令，并使用 fg 恢复</td>
</tr>
<tr>
<td><code>Ctrl+D</code></td>
<td>注销当前会话，与 exit 相似</td>
</tr>
<tr>
<td><code>Ctrl+W</code></td>
<td>删除当前行中的字</td>
</tr>
<tr>
<td><code>Ctrl+U</code></td>
<td>删除整行</td>
</tr>
<tr>
<td><code>!!</code></td>
<td>重复上次的命令</td>
</tr>
<tr>
<td><code>exit</code></td>
<td>注销当前会话</td>
</tr>
</tbody>
</table>
<hr>
<p><strong><em>转载自 <a href="https://linuxtoy.org/pages/download.html" target="_blank" rel="external">Unix/Linux 命令速查表</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Embedded Linux 入门有感]]></title>
      <url>https://draapho.github.io/2017/01/18/1702-linux-hard/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Embedded Linux 是自我学习过程中, 走的最不顺的一条路.<br>而学习android和python时, 基本自学一个月左右, 就能开始独立做项目了.<br>应该说, Embedded Linux的入门确实比较困难一点.</p>
<p>自己是从底层往上走的, 系统的学过硬件, 嵌入式, 操作系统,<br>但在没有具体项目要求的情况下, 学习Embedded Linux的过程充满了痛苦和不解, 始终没有坚持下来.</p>
<p>如今, 打算再次开始系统的学习Embedded Linux, 因而在此记录一下之前的学习感受, 分析一下困难之所在, 并制定好学习规则和方式.</p>
<h1 id="为何困难"><a href="#为何困难" class="headerlink" title="为何困难"></a>为何困难</h1><h2 id="linux上手困难"><a href="#linux上手困难" class="headerlink" title="linux上手困难"></a>linux上手困难</h2><p>对新手而言, linux的学习曲线很陡峭. 相信刚上手的话, 如何安装软件, 如何使用编辑器都是问题!</p>
<p>一个, 二个问题或者一层二层问题, 还能较为容易的解决. 但面对蜂拥而至的疑问和困惑, 能坚持下去就很不容易了, 何况途中还充满了陷阱和争论.</p>
<p>随便举几个例子:</p>
<ol>
<li><p>用哪个版本的linux好? Ubuntu? Feroda? Redhat? CentOS? 服务器版? 桌面版? 然后图形界面居然还分 KDE/Gnome…<br>为了弄清上面这个问题, 看看文章, 翻翻论坛, 结果就是更迷糊了… 甚至忘了初衷是要奔着 <code>Embedded Linux</code> 去的啊!</p>
</li>
<li><p>我的硬盘分区呢? 去哪里找文件呢? 文件权限的概念等等. (linux下一切皆文件!)</p>
</li>
<li><p>用哪个文本编辑器好? 大家都会说Vim, 然后和vim斗就能斗你一个月, 结果还是自己败下阵来, 回归熟悉的文本编辑器!</p>
</li>
<li><p><code>bash shell</code> 是精华啊, 不能不学! 得, 捧着鸟哥的私房菜, 随便翻翻也得几星期才知道个大概吧…<br>(学习指令时, 需要有<code>工作路径</code>这么一个概念. 知道这个指令现在在哪里工作, 是非常重要的一个概念!)</p>
</li>
<li><p>唉呀妈呀, 好不容易装好了虚拟机, 装好了精挑细选的linux版本. 尝试装软件了! 一阵搜索, 还算顺利. 突然出了个依赖关系错误…<br>耐着性子google, 百度, 似乎略微看懂了一二, 就是在装这个软件之前, 需要另外一个软件的特定版本么.<br>尝试用安装指令装另外一个软件, 居然这个软件不存在了!!! 继续? 还是放弃?<br>我继续过, 翻墙, 找到软件源码. 还要自己编译? 编译还要装编译软件… 彻底放弃…</p>
</li>
</ol>
<h2 id="缺乏合适的入门书籍"><a href="#缺乏合适的入门书籍" class="headerlink" title="缺乏合适的入门书籍"></a>缺乏合适的入门书籍</h2><p>市面上大多数的Embedded Linux入门教程只讲应该如何做, 不说基础知识, 不讲前因后果.<br>读起来枯燥无味, 索然无趣. 学起来一头雾水, 不知其所以然.</p>
<p>譬如很多教程会详细的写出, 第一步, 第二步, 第三步… 但经常的, 只要系统环境稍微变化一点点(如linux版本不同, 软件版本不同), 上述的步骤就会失效.<br>喜欢刨根问底的我就开始纠结这些第一步, 第二步, 第三步到底再干吗? 为什么按照自己的理解在新的环境下就不工作了?<br>而遇到这些具体的困难时, 如何解决困难真的是一头雾水. 教程书籍类基本不会讲你可能遇到的问题! 基本只能到网络上去找解决办法…然后就是进一步的困惑…</p>
<p>而更专业的书籍根本不适合入门者去阅读, 那都是对特定领域进行深入分析学习的! 过早的接触自己完全不懂的东西, 只会打击学习的积极性.<br>譬如推崇度很高的鸟哥的私房菜, 实际是一本很好的运维方面的书籍, 用它来初学<code>bash shell</code>就太重了.<br>可以看一下鸟哥自己的经历, 就能明白了 <a href="http://linux.vbird.org/new_linux.php" target="_blank" rel="external">Linux 的學習曲線，一個老人家的建議！</a><br>体验最深的就是这句了: <strong>只要一出现问题, 自己完全无法解决时, 只好重新安装, 选择设定与书本教的内容完全一模一样, 不过即使如此, 很多时候仍然会遇到问题</strong></p>
<p>因此, 建议自己通过网络和书籍总结归纳一下最基本的指令和用法, 加之自己的理解, 做成笔记. 一来帮助记忆, 二来便于日后查阅.<br>但不用刻意的去背这些东西, 要用的时候知道去哪里查阅就可以了, 用多了既然就记住了.<br>在真正深入学习后, 觉得有需要自然会更有针对性的选择专业书籍来看!</p>
<p>这样, 才能避免淹死在知识的海洋里!</p>
<h2 id="缺乏硬性目标"><a href="#缺乏硬性目标" class="headerlink" title="缺乏硬性目标:"></a>缺乏硬性目标:</h2><p>之前都是跟着教程的自学, 属于漫无目的的囫囵吞枣, 学到哪忘到哪.<br>然后, <strong>缺乏硬性目标最大的问题就是: 容易放弃!</strong><br>因为遇到的困难太多了, 在没有硬性目标的情况下, 不断的打击最终导致的就是放弃!</p>
<p>如果能定一个最终目标, 譬如基于开发板做一款视频识别系统, 那在学习过程中就会有侧重点.<br>这样对问题的处理就能起到抓大放小, 不纠结于所有的细节. 在解决实际问题的过程中, 逐步深入学习linux.</p>
<h1 id="解决之道"><a href="#解决之道" class="headerlink" title="解决之道"></a>解决之道</h1><p>个人认为, 学习linux, embedded linux的终极解决之道就是定下一个<strong>硬性目标</strong>, 有这么一个压力在的话, 在学习过程中不断试错, 一知半解都不是问题!</p>
<p>正所谓有压力才有动力! 回到鸟哥的个人经历, 见<a href="http://linux.vbird.org/new_linux.php" target="_blank" rel="external">Linux 的學習曲線，一個老人家的建議！</a>.<br>正是有项目压力的情况下, 才能忍受无数次的重装系统, 才能忍无可忍痛下决心系统的学习linux(此时已经不是初学者了, 知道了很多基础, 也知道自己想解决什么问题!)<br>在此压力下, 搭建环境的过程就不会过于纠结我到底在干吗? 为什么要这么做?的困惑; 使用编辑器时, 也会直接挑个最顺手的用着再说; shell的使用也会因为时间压力只学最基本的.</p>
<p>初期, 在一定要完成这个硬性目标, 在不求甚解, 能用就好的心态下, 至少能帮助自己摸一遍linux, 知道一个大概的流程和遇到的问题.<br>这样也能很大程度上避免自己陷入到底用哪个linux版本好, 用哪个桌面系统好, 用哪种编辑好的争论中! 在不知道具体需求的情况下, 这些都是无意义之事!<br>这个时期, 坚持学下来, 用下来, 就是胜利! 工具的选择上, 顺手的, 上手快的就是好的!</p>
<p>然后, 在完成一二个项目后, 虽然心中的疑惑越积越多, 但潜移默化中, 已经对linux有了相当程度的理解, 常用指令也都会用了!<br>此时, 再根据自己的具体疑惑去查阅更专业的书籍, 更系统的学习, 其效果会远好于上来就拿着本专业书籍看!</p>
<h1 id="自我要求"><a href="#自我要求" class="headerlink" title="自我要求"></a>自我要求</h1><p>我目前的情况也不能算linux初学者, 但也确实没有在embedded linux下开发的经验.<br>自己的感觉是, 虽然对某些方面还一知半解, 但背景知识的储备已经够了, 是时候定个小目标, 完成系统的学习了!<br>毕业已10年, 我学习linux的初学期和倦怠期也着实太长了一点… 好在, 任何时候开始都不晚么.</p>
<p>陆续了解过的背景知识有: linux基础概念, ubuntu的基础使用, bash shell, 硬件原理图, 嵌入式C开发, 操作系统原理, 阅读linux0.11源码.<br>总的来说, 感觉自己就差临门一脚… 能坚持做一二个项目后, 自己就有能力做嵌入式linux开发了.</p>
<ul>
<li>定个小目标: 跟着教程, 在2440开发板上, 完成音视频对讲功能. 细分为实现摄像头功能, 搭建服务器, 实现可视对讲功能.</li>
<li>开发环境搭建: 最困难的就是环境搭建, 走了很多弯路, 不过目前已经走通了.</li>
<li>不求甚解: 学习过程中, 注意连续性, 有些专业知识先不求甚解, 有个基础概念, 简单做下笔记即可. 如makefile的书写, 编译器原理等等.</li>
<li>勤做笔记: 好记性不如烂笔头. 我相信即便linux高度使用者, 能记住的也就几条常用指令. 自己做好笔记就便于日后查阅, 做笔记的同时也加深了印象!</li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python 列表和字典的常见操作]]></title>
      <url>https://draapho.github.io/2017/01/03/1701-python-list-dict/</url>
      <content type="html"><![CDATA[<h1 id="list"><a href="#list" class="headerlink" title="list []"></a>list <code>[]</code></h1><p>list是一种有序的集合，可以随时添加和删除其中的元素。 形式和特性都像C语言的数组</p>
<h2 id="赋值修改及取值"><a href="#赋值修改及取值" class="headerlink" title="赋值修改及取值"></a>赋值修改及取值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># list 赋值</span></div><div class="line">l = range(<span class="number">1</span>,<span class="number">9</span>,<span class="number">2</span>)   <span class="comment"># l = [1,3,5,7]      9是不包含在里面的</span></div><div class="line">l = [<span class="number">1</span>,<span class="number">3</span>]*<span class="number">3</span>        <span class="comment"># l = [1,3,1,3,1,3]  *表示重复次数</span></div><div class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"></div><div class="line"><span class="comment"># 使用切片 (同字符串用法)</span></div><div class="line">l[<span class="number">0</span>]        <span class="comment"># 1                 显示第一个元素</span></div><div class="line">l[<span class="number">-1</span>]       <span class="comment"># 5                 显示最后一个元素</span></div><div class="line">l[<span class="number">0</span>:<span class="number">2</span>]      <span class="comment"># [1, 2]            显示0,1两个元素</span></div><div class="line">l[<span class="number">-2</span>:]      <span class="comment"># [4, 5]            显示最后二个元素</span></div><div class="line">l[::<span class="number">-1</span>]     <span class="comment"># [5, 4, 3, 2, 1]   步进-1, 就是倒序了</span></div><div class="line"></div><div class="line"><span class="comment"># 使用切片修改元素</span></div><div class="line">l[<span class="number">0</span>] = <span class="number">3</span>        <span class="comment"># [3, 2, 3, 4, 5]       修改l[0]的值</span></div><div class="line"><span class="comment"># l[1] = [7,8]  # [3, [7, 8], 3, 4, 5]  修改为list表, 存储其指针. 注意和 l[1:2] = [7,8] 的本质区别!</span></div><div class="line">l[<span class="number">1</span>:<span class="number">2</span>] = [<span class="number">7</span>,<span class="number">8</span>]  <span class="comment"># [3, 7, 8, 3, 4, 5]    将l[1]修改为元素[7,8]</span></div><div class="line">l[<span class="number">1</span>:<span class="number">3</span>] = []     <span class="comment"># [3, 2, 3, 4, 5]       删除1-2的元素</span></div><div class="line">l[<span class="number">1</span>:<span class="number">1</span>] = [<span class="number">7</span>,<span class="number">8</span>,<span class="number">2</span>]<span class="comment"># [3, 7, 8, 2, 3, 4, 5] 在l[1]处插入元素[7,8,2]</span></div><div class="line"></div><div class="line"><span class="comment"># 取长度</span></div><div class="line">len(l)      <span class="comment"># 7</span></div><div class="line"></div><div class="line"><span class="comment"># 排序</span></div><div class="line">l.sort()    <span class="comment"># l=[2, 3, 3, 4, 5, 7, 8]</span></div><div class="line"></div><div class="line"><span class="comment"># 获取元素出现的个数</span></div><div class="line">l.count(<span class="number">3</span>)  <span class="comment"># 2</span></div><div class="line"></div><div class="line"><span class="comment"># for循环取索引和值, 使用enumerate</span></div><div class="line"><span class="keyword">for</span> i, x <span class="keyword">in</span> enumerate(l):</div><div class="line">    <span class="keyword">print</span> <span class="string">'&#123;&#125;: &#123;&#125;'</span>.format(i, x)         <span class="comment"># i为index, x为list的值</span></div></pre></td></tr></table></figure>
<h2 id="增减元素"><a href="#增减元素" class="headerlink" title="增减元素"></a>增减元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">l = [<span class="string">'John'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</div><div class="line"></div><div class="line"><span class="comment"># 增减元素</span></div><div class="line">l.append(<span class="string">'Adam'</span>)    <span class="comment"># 追加元素到末尾,    l=['John', 'Bob', 'Tracy', 'Adam']</span></div><div class="line">l.insert(<span class="number">1</span>, <span class="string">'Jack'</span>) <span class="comment"># 在索引1处插入元素, l=['John', 'Jack', 'Bob', 'Tracy', 'Adam']</span></div><div class="line">l[<span class="number">1</span>:<span class="number">1</span>]=[<span class="string">"Jack"</span>]     <span class="comment"># 在索引1处插入元素, l=['John', 'Jack', 'Jack', 'Bob', 'Tracy', 'Adam']</span></div><div class="line"></div><div class="line"><span class="comment"># 删减元素</span></div><div class="line">l.remove(<span class="string">"Jack"</span>)    <span class="comment"># 删除第一次出现的该元素, l=['John', 'Jack', 'Bob', 'Tracy', 'Adam']</span></div><div class="line">l.pop()             <span class="comment"># 返回并删除末尾的元素,   l=['John', 'Jack', 'Bob', 'Tracy']</span></div><div class="line">l.pop(<span class="number">1</span>)            <span class="comment"># 返回并删除索引1的元素,  l=['John', 'Bob', 'Tracy']</span></div><div class="line"><span class="keyword">del</span> l[<span class="number">0</span>]            <span class="comment"># 删除索引0的元素,       l=['Bob', 'Tracy']</span></div><div class="line"><span class="keyword">del</span> l[<span class="number">0</span>:<span class="number">2</span>]          <span class="comment"># 删除多个元素,          l=[]</span></div><div class="line"></div><div class="line"><span class="comment"># 列表扩展/叠加</span></div><div class="line">l1=[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]; l2=[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line">l=list(set(l1+l2))  <span class="comment"># l=[1,2,3,4,5], 避免了重复元素, 但会丢失原有的排序!</span></div><div class="line">l=l1+l2             <span class="comment"># l=[3,2,1,3,4,5], 简单的叠加, 非常直观!</span></div></pre></td></tr></table></figure>
<h2 id="拷贝-浅拷贝-深拷贝"><a href="#拷贝-浅拷贝-深拷贝" class="headerlink" title="拷贝(浅拷贝, 深拷贝)"></a>拷贝(浅拷贝, 深拷贝)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">l = [[<span class="string">'a'</span>], [<span class="string">'b'</span>, <span class="string">'c'</span>], [<span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>]]</div><div class="line"></div><div class="line"><span class="comment"># 别名及浅拷贝</span></div><div class="line">l1 = l              <span class="comment"># l1为l的别名/指针, 指向相同的地址. (l is l1 = True)</span></div><div class="line">l1 = l[:]           <span class="comment"># 浅拷贝(只拷贝一维的数据). (l is l1 = False. l[0] is l1[0] = True)</span></div><div class="line"><span class="comment"># 在此例中, 由于是浅拷贝, 因此修改元素如 l[0][0]='z' 后, l1显示内容会和l一样.</span></div><div class="line"></div><div class="line"><span class="comment"># 深拷贝</span></div><div class="line"><span class="keyword">import</span> copy</div><div class="line">l1 = copy.deepcopy(l)   <span class="comment"># 深拷贝(遇到指针类型继续深挖). (l is l1 = False. l[0] is l1[0] = False)</span></div><div class="line"><span class="comment"># 在此例中, l1 和 l 再无任何关联</span></div></pre></td></tr></table></figure>
<h1 id="tuple"><a href="#tuple" class="headerlink" title="tuple ()"></a>tuple <code>()</code></h1><p>理解为list的常量形式即可, 赋值后就不可增减和修改</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 赋值</span></div><div class="line">t = (<span class="number">1</span>,<span class="number">2</span>)   <span class="comment"># 赋值2个元素</span></div><div class="line">t = (<span class="number">1</span>,)    <span class="comment"># 赋值1个元素时, 必须加上逗号, 避免误解</span></div><div class="line">t = (<span class="number">1</span>,<span class="number">3</span>)*<span class="number">3</span>        <span class="comment"># t = (1,3,1,3,1,3)</span></div><div class="line"></div><div class="line"><span class="comment"># 取值, 使用切片即可</span></div><div class="line">t[<span class="number">-1</span>]       <span class="comment"># 取最后一个值, 3</span></div><div class="line">t[<span class="number">0</span>::<span class="number">2</span>]     <span class="comment"># 跳着取值, (1,1,1)</span></div><div class="line"></div><div class="line"><span class="comment"># 取长度</span></div><div class="line">len(t)      <span class="comment"># 6</span></div><div class="line"></div><div class="line"><span class="comment"># 获取元素出现的个数</span></div><div class="line">t.count(<span class="number">1</span>)  <span class="comment"># 3</span></div><div class="line"></div><div class="line"><span class="comment"># list 与 tuple 互相转换</span></div><div class="line">l = list(t) <span class="comment"># 把tuple变为list</span></div><div class="line">t = tuple(l)<span class="comment"># 把list变为tuple</span></div><div class="line"></div><div class="line"><span class="comment"># 拷贝的问题同list</span></div></pre></td></tr></table></figure>
<h1 id="dict"><a href="#dict" class="headerlink" title="dict {}"></a>dict <code>{}</code></h1><p>dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。</p>
<h2 id="赋值及取值"><a href="#赋值及取值" class="headerlink" title="赋值及取值"></a>赋值及取值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># dict 赋值</span></div><div class="line">d = &#123;<span class="string">'Michael'</span>: <span class="number">95</span>, <span class="string">'Bob'</span>: <span class="number">75</span>, <span class="string">'Tracy'</span>: <span class="number">85</span>&#125;</div><div class="line"></div><div class="line"><span class="comment"># 获取值</span></div><div class="line">d[<span class="string">'Thomas'</span>]             <span class="comment"># 不存在会报错</span></div><div class="line">d.get(<span class="string">'Thomas'</span>, <span class="number">-1</span>)     <span class="comment"># 不存在返回设定的默认值</span></div><div class="line"></div><div class="line"><span class="comment"># 判断键值</span></div><div class="line"><span class="string">'Michael'</span> <span class="keyword">in</span> d          <span class="comment"># in方法即可, 返回True</span></div><div class="line"></div><div class="line"><span class="comment"># 键值个数</span></div><div class="line">len(d)                  <span class="comment"># 3</span></div><div class="line"></div><div class="line"><span class="comment"># 获取key和value</span></div><div class="line">d.keys()                <span class="comment"># 关键字列表, ['Bob', 'Michael', 'Tracy']</span></div><div class="line">d.values()              <span class="comment"># 字典值列表, [75, 95, 85]</span></div><div class="line">d.items()               <span class="comment"># 转换为列表, [('Bob', 75), ('Michael', 95), ('Tracy', 85)]</span></div><div class="line"></div><div class="line"><span class="comment"># for循环取索引和值, 使用iteritems</span></div><div class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> d.iteritems():</div><div class="line">    <span class="keyword">print</span> <span class="string">'&#123;&#125;: &#123;&#125;'</span>.format(k, v)         <span class="comment"># k为key, v为value值</span></div></pre></td></tr></table></figure>
<h2 id="增减及修改字典"><a href="#增减及修改字典" class="headerlink" title="增减及修改字典"></a>增减及修改字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">d = &#123;<span class="string">'Michael'</span>: <span class="number">95</span>, <span class="string">'Bob'</span>: <span class="number">75</span>, <span class="string">'Tracy'</span>: <span class="number">85</span>&#125;</div><div class="line"></div><div class="line"><span class="comment"># 修改值 (如果key不存在, 变成增加元素)</span></div><div class="line">d[<span class="string">'Michael'</span>] = <span class="number">88</span>       <span class="comment"># d=&#123;'Bob': 75, 'Michael': 88, 'Tracy': 85&#125;</span></div><div class="line"></div><div class="line"><span class="comment"># 增加值</span></div><div class="line">d[<span class="number">0</span>] = <span class="number">0</span>                <span class="comment"># d=&#123;0: 0, 'Bob': 75, 'Michael': 88, 'Tracy': 85&#125;</span></div><div class="line"></div><div class="line"><span class="comment"># 删除一个键值</span></div><div class="line">d.pop(<span class="number">0</span>)                <span class="comment"># 返回value并删除键值    d=&#123;'Bob': 75, 'Michael': 95, 'Tracy': 85&#125;</span></div><div class="line">d.popitem()             <span class="comment"># 返回value并删除首键值  d=&#123;'Michael': 95, 'Tracy': 85&#125;</span></div><div class="line"><span class="keyword">del</span> d[<span class="number">0</span>]                <span class="comment"># 删除键值              d=&#123;'Michael': 95, 'Tracy': 85&#125;</span></div><div class="line"><span class="keyword">if</span> <span class="number">0</span> <span class="keyword">in</span> d: <span class="keyword">del</span> d[<span class="number">0</span>]     <span class="comment"># 避免报错的写法         d=&#123;'Michael': 95, 'Tracy': 85&#125;</span></div><div class="line"></div><div class="line"><span class="comment"># 删除整个字典</span></div><div class="line">d.clear()               <span class="comment"># 清空字典, d变成空字典   d=&#123;&#125;</span></div><div class="line"><span class="keyword">del</span> d                   <span class="comment"># 删除了d这个字典</span></div><div class="line"></div><div class="line"><span class="comment"># 合并字典</span></div><div class="line">x = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;; y = &#123;<span class="string">'b'</span>: <span class="number">3</span>, <span class="string">'c'</span>: <span class="number">4</span>&#125;</div><div class="line">z = x.copy()            <span class="comment"># 字典拷贝              z = &#123;'a': 1, 'b': 2&#125;</span></div><div class="line">z.update(y)             <span class="comment"># 字典合并(新值覆盖旧值)  z = &#123;'a': 1, 'c': 4, 'b': 3&#125;</span></div><div class="line"><span class="comment"># z = &#123;**x, **y&#125;        # python 3.5以上, 可以直接使用</span></div></pre></td></tr></table></figure>
<h2 id="拷贝-浅拷贝-深拷贝-1"><a href="#拷贝-浅拷贝-深拷贝-1" class="headerlink" title="拷贝(浅拷贝, 深拷贝)"></a>拷贝(浅拷贝, 深拷贝)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">d = &#123;<span class="number">0</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="number">1</span>:&#123;<span class="string">'k1'</span>: <span class="string">'v1'</span>, <span class="string">'k2'</span>: <span class="string">'v2'</span>&#125;&#125;</div><div class="line"></div><div class="line"><span class="comment"># 注意, d.update(), d.copy() 都是浅拷贝!</span></div><div class="line"></div><div class="line"><span class="comment"># 别名及浅拷贝</span></div><div class="line">d1 = d                  <span class="comment"># l1为l的别名/指针, 指向相同的地址. (d is d1 = True)</span></div><div class="line">d1 = d.copy()           <span class="comment"># 浅拷贝(只拷贝一维的数据). (d is d1 = False. d[0] is d1[0] = True)</span></div><div class="line"><span class="comment"># 设置 d[0][0] = 3; d[1]["k2"]=2 后, 会发现d1的值也跟着变了. 因为浅拷贝值拷贝一维的数据(指针).</span></div><div class="line"></div><div class="line"><span class="comment"># 深拷贝</span></div><div class="line"><span class="keyword">import</span> copy</div><div class="line">d1 = copy.deepcopy(d)   <span class="comment"># 深拷贝(遇到指针类型继续深挖). (d is d1 = False. d[0] is d1[0] = False)</span></div><div class="line"><span class="comment"># d 和 d1 再无任何瓜葛</span></div></pre></td></tr></table></figure>
<h1 id="set-set"><a href="#set-set" class="headerlink" title="set {} set([])"></a>set <code>{}</code> <code>set([])</code></h1><p>set即集合, 是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。<br>集合不可放入可变对象, 如list(报<code>unhashable type</code>的错)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 赋值</span></div><div class="line">s = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;               <span class="comment"># s = set([1, 2, 3])</span></div><div class="line">s = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>&#125;      <span class="comment"># s = set([1, 2, 3]), 重复元素会被过滤掉</span></div><div class="line"></div><div class="line"><span class="comment"># 检查元素是否存在</span></div><div class="line"><span class="number">3</span> <span class="keyword">in</span> s                      <span class="comment"># True</span></div><div class="line"></div><div class="line"><span class="comment"># 增加元素</span></div><div class="line">s.add(<span class="number">4</span>)                    <span class="comment"># s = set([1, 2, 3, 4])</span></div><div class="line">s.add(<span class="number">4</span>)                    <span class="comment"># 重复增加不会报错</span></div><div class="line"></div><div class="line"><span class="comment"># 删除元素</span></div><div class="line">s.remove(<span class="number">4</span>)                 <span class="comment"># s = set([1, 2, 3])</span></div><div class="line"><span class="keyword">if</span> <span class="number">4</span> <span class="keyword">in</span> s: s.remove(<span class="number">4</span>)      <span class="comment"># 避免报错</span></div><div class="line"></div><div class="line"><span class="comment"># 集合的运算符号</span></div><div class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;; s2 = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</div><div class="line">s1 &amp; s2                     <span class="comment"># 交集    set([2, 3])</span></div><div class="line">s1 | s2                     <span class="comment"># 并集    set([1, 2, 3, 4])</span></div><div class="line">s1 ^ s2                     <span class="comment"># 补集    set([1, 4])</span></div><div class="line">s1 - s2                     <span class="comment"># 减法    set([1])</span></div><div class="line">s2 - s1                     <span class="comment"># 减法    set([4])</span></div></pre></td></tr></table></figure>
<h1 id="collections模块的使用"><a href="#collections模块的使用" class="headerlink" title="collections模块的使用"></a>collections模块的使用</h1><h2 id="numedtuple-给tuple命名"><a href="#numedtuple-给tuple命名" class="headerlink" title="numedtuple 给tuple命名"></a>numedtuple 给tuple命名</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> collections</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Point = collections.namedtuple(<span class="string">'Point'</span>, [<span class="string">'x'</span>, <span class="string">'y'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = Point(<span class="number">1.0</span>, <span class="number">2.0</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.x; p.y; p             <span class="comment"># 也可以使用p[0], p[1]</span></div><div class="line"><span class="number">1.0</span></div><div class="line"><span class="number">2.0</span></div><div class="line">Point(x=<span class="number">1.0</span>, y=<span class="number">2.0</span>)</div><div class="line"></div><div class="line"><span class="comment"># 修改值</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = p._replace(x = <span class="number">1.5</span>, y= <span class="number">1.1</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p[<span class="number">0</span>]; p[<span class="number">1</span>]              <span class="comment"># 等同于 p.x; p.y</span></div><div class="line"><span class="number">1.5</span></div><div class="line"><span class="number">1.1</span></div></pre></td></tr></table></figure>
<h2 id="deque-双向队列"><a href="#deque-双向队列" class="headerlink" title="deque 双向队列"></a>deque 双向队列</h2><p>英文全称 <code>Double-ended queue</code>, 特性近似于双向链表, 适用于队列和栈</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> collections</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q = collections.deque([<span class="string">'a'</span>, <span class="string">'c'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.append(<span class="number">1</span>)             <span class="comment"># q=deque(['a', 'c', 1])</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.appendleft(<span class="number">2</span>)         <span class="comment"># q=deque([2, 'a', 'c', 1])</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.extend([<span class="number">3</span>, <span class="number">4</span>])        <span class="comment"># q=deque([2, 'a', 'c', 1, 3, 4])</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.extendleft([<span class="number">5</span>, <span class="number">6</span>])    <span class="comment"># q=deque([6, 5, 2, 'a', 'c', 1, 3, 4])</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.pop()                 <span class="comment"># q=deque([6, 5, 2, 'a', 'c', 1, 3])</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.popleft()             <span class="comment"># q=deque([5, 2, 'a', 'c', 1, 3])</span></div><div class="line"><span class="number">6</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.rotate(<span class="number">1</span>)             <span class="comment"># q=deque([3, 5, 2, 'a', 'c', 1])</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.rotate(<span class="number">-2</span>)            <span class="comment"># q=deque([2, 'a', 'c', 1, 3, 5])</span></div><div class="line"></div><div class="line"><span class="comment"># 限长的双向队列</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>last_three = collections.deque([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], maxlen=<span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>last_three</div><div class="line">que([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], maxlen=<span class="number">3</span>)    <span class="comment"># 队列长度最多为3.</span></div></pre></td></tr></table></figure>
<h2 id="defaultdict-带默认键值的dict"><a href="#defaultdict-带默认键值的dict" class="headerlink" title="defaultdict 带默认键值的dict"></a>defaultdict 带默认键值的dict</h2><p>使用<code>dict</code>时，如果引用的Key不存在，就会抛出<code>KeyError</code>。如果希望key不存在时，返回一个默认值，就可以用<code>defaultdict</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 普通字典</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = dict()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m[<span class="string">'a'</span>]</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">KeyError: <span class="string">'a'</span></div><div class="line"></div><div class="line"><span class="comment"># 默认字典</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> collections</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = collections.defaultdict(int)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m[<span class="string">'a'</span>]</div><div class="line"><span class="number">0</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = collections.defaultdict(str)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m[<span class="string">'a'</span>]</div><div class="line"><span class="string">''</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = collections.defaultdict(<span class="keyword">lambda</span>: <span class="string">'N/A'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m[<span class="string">'a'</span>]</div><div class="line"><span class="string">'N/A'</span></div></pre></td></tr></table></figure>
<h2 id="OrderedDict-可排序的dict"><a href="#OrderedDict-可排序的dict" class="headerlink" title="OrderedDict 可排序的dict"></a>OrderedDict 可排序的dict</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 普通字典, key是无需的</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = dict([(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">2</span>), (<span class="string">'c'</span>, <span class="number">3</span>)])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d</div><div class="line">&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</div><div class="line"></div><div class="line"><span class="comment"># 可排序字典, 按照key插入的顺序排序</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> collections</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>od = collections.OrderedDict([(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">2</span>), (<span class="string">'c'</span>, <span class="number">3</span>)])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>od</div><div class="line">OrderedDict([(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">2</span>), (<span class="string">'c'</span>, <span class="number">3</span>)])</div></pre></td></tr></table></figure>
<p>实现一个FIFO（先进先出）的dict，当容量超出限制时，先删除最早添加的Key</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FifoDict</span><span class="params">(OrderedDict)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, capacity)</span>:</span></div><div class="line">        super(LastUpdatedOrderedDict, self).__init__()</div><div class="line">        self._capacity = capacity</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></div><div class="line">        containsKey = <span class="number">1</span> <span class="keyword">if</span> key <span class="keyword">in</span> self <span class="keyword">else</span> <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> len(self) - containsKey &gt;= self._capacity:</div><div class="line">            last = self.popitem(last=<span class="keyword">False</span>)</div><div class="line">            <span class="keyword">print</span> <span class="string">'remove:'</span>, last</div><div class="line">        <span class="keyword">if</span> containsKey:</div><div class="line">            <span class="keyword">del</span> self[key]</div><div class="line">            <span class="keyword">print</span> <span class="string">'set:'</span>, (key, value)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'add:'</span>, (key, value)</div><div class="line">        OrderedDict.__setitem__(self, key, value)</div></pre></td></tr></table></figure>
<h2 id="Counter-计数类"><a href="#Counter-计数类" class="headerlink" title="Counter 计数类"></a>Counter 计数类</h2><p><code>Counter</code>实际上是<code>dict</code>的一个子类, 是一个简单的计数器.</p>
<h3 id="应用一-多重集合-显示元素个数"><a href="#应用一-多重集合-显示元素个数" class="headerlink" title="应用一: 多重集合(显示元素个数)"></a>应用一: 多重集合(显示元素个数)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> collections</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A = collections.Counter([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>B = collections.Counter([<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A; B</div><div class="line">Counter(&#123;<span class="number">2</span>: <span class="number">2</span>, <span class="number">1</span>: <span class="number">1</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A | B</div><div class="line">Counter(&#123;<span class="number">2</span>: <span class="number">2</span>, <span class="number">1</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">1</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A &amp; B</div><div class="line">Counter(&#123;<span class="number">2</span>: <span class="number">2</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A + B</div><div class="line">Counter(&#123;<span class="number">2</span>: <span class="number">4</span>, <span class="number">1</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">1</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A - B</div><div class="line">Counter(&#123;<span class="number">1</span>: <span class="number">1</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>B - A</div><div class="line">Counter(&#123;<span class="number">3</span>: <span class="number">1</span>&#125;)</div></pre></td></tr></table></figure>
<h3 id="应用二-统计最常出现的元素"><a href="#应用二-统计最常出现的元素" class="headerlink" title="应用二: 统计最常出现的元素"></a>应用二: 统计最常出现的元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>A = collections.Counter(list(<span class="string">"hello"</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A</div><div class="line">Counter(&#123;<span class="string">'l'</span>: <span class="number">2</span>, <span class="string">'h'</span>: <span class="number">1</span>, <span class="string">'e'</span>: <span class="number">1</span>, <span class="string">'o'</span>: <span class="number">1</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A.most_common(<span class="number">1</span>)</div><div class="line">[(<span class="string">'l'</span>, <span class="number">2</span>)]</div></pre></td></tr></table></figure>
<h1 id="高阶应用"><a href="#高阶应用" class="headerlink" title="高阶应用"></a>高阶应用</h1><h2 id="list-加入索引值"><a href="#list-加入索引值" class="headerlink" title="list 加入索引值"></a>list 加入索引值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>seasons = [<span class="string">'Spring'</span>, <span class="string">'Summer'</span>, <span class="string">'Fall'</span>, <span class="string">'Winter'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(enumerate(seasons))</div><div class="line">[(<span class="number">0</span>, <span class="string">'Spring'</span>), (<span class="number">1</span>, <span class="string">'Summer'</span>), (<span class="number">2</span>, <span class="string">'Fall'</span>), (<span class="number">3</span>, <span class="string">'Winter'</span>)]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(enumerate(seasons, start=<span class="number">1</span>))</div><div class="line">[(<span class="number">1</span>, <span class="string">'Spring'</span>), (<span class="number">2</span>, <span class="string">'Summer'</span>), (<span class="number">3</span>, <span class="string">'Fall'</span>), (<span class="number">4</span>, <span class="string">'Winter'</span>)]</div></pre></td></tr></table></figure>
<h2 id="list的压缩和解压-以及转换为dict"><a href="#list的压缩和解压-以及转换为dict" class="headerlink" title="list的压缩和解压, 以及转换为dict"></a>list的压缩和解压, 以及转换为dict</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; b = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>z = zip(a, b)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>z</div><div class="line">[(<span class="number">1</span>, <span class="string">'a'</span>), (<span class="number">2</span>, <span class="string">'b'</span>), (<span class="number">3</span>, <span class="string">'c'</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dict(z)     <span class="comment"># 转换为dict</span></div><div class="line">&#123;<span class="number">1</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>, <span class="number">3</span>: <span class="string">'c'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>zip(*z)</div><div class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)]</div></pre></td></tr></table></figure>
<h2 id="list相邻元素压缩器-升维"><a href="#list相邻元素压缩器-升维" class="headerlink" title="list相邻元素压缩器, 升维"></a>list相邻元素压缩器, 升维</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Using iterators / 使用迭代器</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent = <span class="keyword">lambda</span> a, k: zip(*([iter(a)] * k))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent(a, <span class="number">3</span>)</div><div class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent(a, <span class="number">2</span>)</div><div class="line">[(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">6</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent(a, <span class="number">1</span>)</div><div class="line">[(<span class="number">1</span>,), (<span class="number">2</span>,), (<span class="number">3</span>,), (<span class="number">4</span>,), (<span class="number">5</span>,), (<span class="number">6</span>,)]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Using slices / 使用切片</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> itertools <span class="keyword">import</span> islice</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent = <span class="keyword">lambda</span> a, k: zip(*(islice(a, i, <span class="keyword">None</span>, k) <span class="keyword">for</span> i <span class="keyword">in</span> range(k)))</div><div class="line"><span class="comment"># 该lambda函数展开形式如下:</span></div><div class="line"><span class="comment"># def n_grams(a, n):</span></div><div class="line"><span class="comment">#     z = (islice(a, i, None) for i in range(n))</span></div><div class="line"><span class="comment">#     return zip(*z)</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent(a, <span class="number">3</span>)</div><div class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent(a, <span class="number">2</span>)</div><div class="line">[(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">6</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent(a, <span class="number">1</span>)</div><div class="line">[(<span class="number">1</span>,), (<span class="number">2</span>,), (<span class="number">3</span>,), (<span class="number">4</span>,), (<span class="number">5</span>,), (<span class="number">6</span>,)]</div></pre></td></tr></table></figure>
<h2 id="list展开-降维"><a href="#list展开-降维" class="headerlink" title="list展开, 降维"></a>list展开, 降维</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 推荐使用 itertools.chain.from_iterable</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> itertools</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.chain.from_iterable(a))</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line"></div><div class="line"><span class="comment"># 不推荐使用 sum</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sum(a, [])</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line"></div><div class="line"><span class="comment"># for 循环</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> l <span class="keyword">in</span> a <span class="keyword">for</span> x <span class="keyword">in</span> l]</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [[[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]], [[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]]]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> l1 <span class="keyword">in</span> a <span class="keyword">for</span> l2 <span class="keyword">in</span> l1 <span class="keyword">for</span> x <span class="keyword">in</span> l2]</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], [[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]]]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>flatten = <span class="keyword">lambda</span> x: [y <span class="keyword">for</span> l <span class="keyword">in</span> x <span class="keyword">for</span> y <span class="keyword">in</span> flatten(l)] <span class="keyword">if</span> type(x) <span class="keyword">is</span> list <span class="keyword">else</span> [x]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>flatten(a)</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</div></pre></td></tr></table></figure>
<h2 id="快速查找list的若干最值"><a href="#快速查找list的若干最值" class="headerlink" title="快速查找list的若干最值"></a>快速查找list的若干最值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> heapq, random</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [random.randint(<span class="number">0</span>, <span class="number">100</span>) <span class="keyword">for</span> __ <span class="keyword">in</span> xrange(<span class="number">100</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.nsmallest(<span class="number">5</span>, a)</div><div class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">6</span>]             <span class="comment"># a中最小的5个数</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.nlargest(<span class="number">5</span>, a)</div><div class="line">[<span class="number">100</span>, <span class="number">100</span>, <span class="number">99</span>, <span class="number">98</span>, <span class="number">95</span>]      <span class="comment"># a中最大的5个数</span></div></pre></td></tr></table></figure>
<h2 id="dict和list互换"><a href="#dict和list互换" class="headerlink" title="dict和list互换"></a>dict和list互换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># dict-&gt;list</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.keys()</div><div class="line">[<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.values()</div><div class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.items()</div><div class="line">[(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'c'</span>, <span class="number">3</span>), (<span class="string">'b'</span>, <span class="number">2</span>), (<span class="string">'d'</span>, <span class="number">4</span>)]</div><div class="line"></div><div class="line"><span class="comment"># list-&gt;dict</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l=[(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'c'</span>, <span class="number">3</span>), (<span class="string">'b'</span>, <span class="number">2</span>), (<span class="string">'d'</span>, <span class="number">4</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dict(l)</div><div class="line">&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>names = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]; scores = [<span class="number">95</span>, <span class="number">75</span>, <span class="number">85</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>zip(names, scores)</div><div class="line">[(<span class="string">'Michael'</span>, <span class="number">95</span>), (<span class="string">'Bob'</span>, <span class="number">75</span>), (<span class="string">'Tracy'</span>, <span class="number">85</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dict(zip(names, scores))</div><div class="line">&#123;<span class="string">'Bob'</span>: <span class="number">75</span>, <span class="string">'Michael'</span>: <span class="number">95</span>, <span class="string">'Tracy'</span>: <span class="number">85</span>&#125;</div></pre></td></tr></table></figure>
<h2 id="dict内key和value互换"><a href="#dict内key和value互换" class="headerlink" title="dict内key和value互换"></a>dict内key和value互换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># using zip</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>zip(m.values(), m.keys())</div><div class="line">[(<span class="number">1</span>, <span class="string">'a'</span>), (<span class="number">3</span>, <span class="string">'c'</span>), (<span class="number">2</span>, <span class="string">'b'</span>), (<span class="number">4</span>, <span class="string">'d'</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dict(zip(m.values(), m.keys()))</div><div class="line">&#123;<span class="number">1</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>, <span class="number">3</span>: <span class="string">'c'</span>, <span class="number">4</span>: <span class="string">'d'</span>&#125;</div><div class="line"></div><div class="line"><span class="comment"># using a dictionary comprehension</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.items()</div><div class="line">[(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'c'</span>, <span class="number">3</span>), (<span class="string">'b'</span>, <span class="number">2</span>), (<span class="string">'d'</span>, <span class="number">4</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;v: k <span class="keyword">for</span> k, v <span class="keyword">in</span> m.items()&#125;</div><div class="line">&#123;<span class="number">1</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>, <span class="number">3</span>: <span class="string">'c'</span>, <span class="number">4</span>: <span class="string">'d'</span>&#125;</div></pre></td></tr></table></figure>
<h2 id="快速生成规律性字典"><a href="#快速生成规律性字典" class="headerlink" title="快速生成规律性字典"></a>快速生成规律性字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;x: x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>)&#125;</div><div class="line">&#123;<span class="number">0</span>: <span class="number">0</span>, <span class="number">1</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">4</span>, <span class="number">3</span>: <span class="number">9</span>, <span class="number">4</span>: <span class="number">16</span>&#125;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;x: <span class="string">'A'</span> + str(x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)&#125;</div><div class="line">&#123;<span class="number">0</span>: <span class="string">'A0'</span>, <span class="number">1</span>: <span class="string">'A1'</span>, <span class="number">2</span>: <span class="string">'A2'</span>, <span class="number">3</span>: <span class="string">'A3'</span>, <span class="number">4</span>: <span class="string">'A4'</span>, <span class="number">5</span>: <span class="string">'A5'</span>, <span class="number">6</span>: <span class="string">'A6'</span>, <span class="number">7</span>: <span class="string">'A7'</span>, <span class="number">8</span>: <span class="string">'A8'</span>, <span class="number">9</span>: <span class="string">'A9'</span>&#125;</div></pre></td></tr></table></figure>
<h2 id="字符串与列表字典的互换"><a href="#字符串与列表字典的互换" class="headerlink" title="字符串与列表字典的互换"></a>字符串与列表字典的互换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 字符串-&gt;列表 (去掉引号)</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>eval(<span class="string">"[1,2,3]"</span>)</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="comment"># 如果输入数据不安全, 使用ast.literal_eval(), eval的替代品, 更安全</span></div><div class="line"></div><div class="line"><span class="comment"># 字符串-&gt;字典 (去掉引号)</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>eval(<span class="string">"&#123;'one':1, 'two':2&#125;"</span>)</div><div class="line">&#123;<span class="string">'two'</span>: <span class="number">2</span>, <span class="string">'one'</span>: <span class="number">1</span>&#125;</div><div class="line"><span class="comment"># 如果输入数据不安全, 使用ast.literal_eval(), eval的替代品, 更安全</span></div><div class="line"></div><div class="line"><span class="comment"># 字符串-&gt;列表</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst = list(<span class="string">"hello"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst</div><div class="line">[<span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</div><div class="line"></div><div class="line"><span class="comment"># 列表-&gt;字符串</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.join(lst)</div><div class="line"><span class="string">'hello'</span></div><div class="line"></div><div class="line"><span class="comment"># 字符串-&gt;列表 (指定分隔符, 如空格, 逗号)</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>season = <span class="string">'spring, summer, autumn, winter'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>season.split (<span class="string">','</span>)</div><div class="line">[<span class="string">'spring'</span>, <span class="string">' summer'</span>, <span class="string">' autumn'</span>, <span class="string">' winter'</span>]</div><div class="line"></div><div class="line"><span class="comment"># 列表-&gt;字符串</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="string">"spring"</span>, <span class="string">"summer"</span>, <span class="string">"autumn"</span>, <span class="string">"winter"</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">', '</span>.join(lst)</div><div class="line"><span class="string">'spring, summer, autumn, winter'</span></div><div class="line"></div><div class="line"><span class="comment"># 整数列表-&gt;字符串</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.join(str(e) <span class="keyword">for</span> e <span class="keyword">in</span> lst)</div><div class="line"><span class="string">'123'</span></div></pre></td></tr></table></figure>
<h1 id="参考和资料"><a href="#参考和资料" class="headerlink" title="参考和资料"></a>参考和资料</h1><ul>
<li><a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001411031239400f7181f65f33a4623bc42276a605debf6000" target="_blank" rel="external">廖雪峰的官方网站之python教程</a></li>
<li><a href="http://sahandsaba.com/thirty-python-language-features-and-tricks-you-may-not-know.html" target="_blank" rel="external">30 Python Language Features and Tricks You May Not Know About</a></li>
<li><a href="http://codingpy.com/article/the-idiomatic-way-to-merge-dicts-in-python/" target="_blank" rel="external">怎样合并字典最符合Python语言习惯？</a></li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式]]></title>
      <url>https://draapho.github.io/2016/12/18/1628-soft-regular/</url>
      <content type="html"><![CDATA[<h1 id="正则表达式基础内容"><a href="#正则表达式基础内容" class="headerlink" title="正则表达式基础内容"></a>正则表达式基础内容</h1><table>
<thead>
<tr>
<th>RE 字符/范例</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\</code></td>
<td>跳脱/转义字符</td>
</tr>
<tr>
<td><strong>占位符</strong></td>
<td>表示一个字符</td>
</tr>
<tr>
<td><code>^word</code></td>
<td><code>^</code>表<strong>行首</strong>, 待匹配的字符串<code>word</code>在行首！</td>
</tr>
<tr>
<td>…… <code>grep -n &#39;^#&#39; re.txt</code></td>
<td>显示行首为 <code>#</code> 的行</td>
</tr>
<tr>
<td><code>word$</code></td>
<td><code>$</code>表<strong>行尾</strong>, 待匹配的字符串<code>word</code>在行尾！</td>
</tr>
<tr>
<td>…… <code>grep -n &#39;!$&#39; re.txt</code></td>
<td>显示行尾为 <code>!</code> 的行</td>
</tr>
<tr>
<td><code>.</code></td>
<td>代表<strong>任意一个</strong>字符, 必须有一个字符</td>
</tr>
<tr>
<td>…… <code>grep -n &#39;e.e&#39; re.txt</code></td>
<td>结果为 <code>eve</code> <code>eee</code> <code>e e</code>, 但不能是 <code>ee</code></td>
</tr>
<tr>
<td><code>[]</code></td>
<td>字符集合. <strong>除<code>^</code> <code>\</code> <code>-</code>外, 其它特殊字符在中括号被认为是普通字符</strong>. 系统字符集可以包含其中如<code>[\d]</code></td>
</tr>
<tr>
<td><code>[^]</code></td>
<td>中括号内的第一个<code>^</code>表示补集, <del>而不是行尾</del>, 也可以理解为非. 非第一个则为普通字符</td>
</tr>
<tr>
<td>…… <code>grep -n &#39;[(+*)]&#39; re.txt</code></td>
<td>匹配 <code>(</code> <code>+</code> <code>*</code> <code>)</code> 中的一个字符.</td>
</tr>
<tr>
<td>…… <code>grep -n &#39;[0-9]&#39; re.txt</code></td>
<td>搜寻含有任意数字的那一行.  中括号内的<code>-</code>表连续(由编码决定),</td>
</tr>
<tr>
<td>…… <code>grep -n &#39;oo[^0-9]&#39; re.txt</code></td>
<td>排除结果 <code>oo0-oo9</code>, 可以是 <code>ooa</code> <code>oog</code>等等</td>
</tr>
<tr>
<td><strong>数量符</strong></td>
<td>跟在一个字符或组的后面, 重复该RE字符或组若干次</td>
</tr>
<tr>
<td><code>*</code></td>
<td><strong>零个或多个</strong>的前一RE字符</td>
</tr>
<tr>
<td>…… <code>grep -n &#39;ess*&#39; re.py</code></td>
<td>结果为 <code>es</code>(0次s), <code>ess</code>, <code>esss</code></td>
</tr>
<tr>
<td>…… <code>.*</code></td>
<td>表示任意字符</td>
</tr>
<tr>
<td><code>{m,n}</code></td>
<td><strong>连续m到n个</strong>的前一RE字符</td>
</tr>
<tr>
<td>…… <code>{m,}</code></td>
<td><strong>连续m个及以上</strong>的前一RE字符</td>
</tr>
<tr>
<td>…… <code>{m}</code></td>
<td><strong>连续m个</strong>的前一RE字符</td>
</tr>
<tr>
<td>…… <code>grep -n &#39;go\{2,3\}g&#39; re.txt</code></td>
<td>结果为 <code>goog</code>(2次o), <code>gooog</code>(3次o).</td>
</tr>
<tr>
<td><code>?</code></td>
<td><strong>零个或一个</strong>的前一RE字符, 等同于<code>{0,1}</code></td>
</tr>
<tr>
<td>…… <code>egrep -n &#39;go?d&#39; re.txt</code></td>
<td>只能匹配<code>gd</code>和<code>god</code></td>
</tr>
<tr>
<td><code>+</code></td>
<td>重复<strong>一个或以上</strong>的前一RE字符, 等同于<code>{1,}</code></td>
</tr>
<tr>
<td>…… <code>egrep -n &#39;go+d&#39; re.txt</code></td>
<td>匹配<code>god</code> <code>good</code>等, <del>但不能匹配<code>gd</code></del></td>
</tr>
<tr>
<td><code>*?</code> <code>+?</code> <code>??</code> <code>{m,n}?</code></td>
<td>让 <code>*</code> <code>+</code> <code>?</code> <code>{m,n}</code> 变得非贪婪, 即匹配尽可能少的字符</td>
</tr>
<tr>
<td>…… <code>&lt;.*&gt;</code>匹配<code>&#39;&lt;H1&gt;title&lt;/H1&gt;&#39;</code></td>
<td>会得到 <code>&#39;&lt;H1&gt;title&lt;/H1&gt;&#39;</code> 整个字符串, <del>而不是预想的<code>&#39;&lt;H1&gt;&#39;</code></del></td>
</tr>
<tr>
<td>…… <code>&lt;.*?&gt;</code>匹配<code>&#39;&lt;H1&gt;title&lt;/H1&gt;&#39;</code></td>
<td><code>*?</code>变得非贪婪, 会得到 <code>&#39;&lt;H1&gt;&#39;</code> 字符串</td>
</tr>
<tr>
<td><strong>逻辑分组</strong></td>
<td>对字符进行分组和判断</td>
</tr>
<tr>
<td><code>()</code></td>
<td>分组字符串</td>
</tr>
<tr>
<td>…… <code>egrep &#39;A(xyz)+C&#39;</code></td>
<td>匹配A开头, C结尾, 中间有一个以上”xyz”的字符串, 如 <code>AxyzC</code> <code>AxyzxyzxyzC</code></td>
</tr>
<tr>
<td><code>\number</code></td>
<td>反向引用, 引用编号为<code>number</code>的分组<code>()</code>匹配到字符串</td>
</tr>
<tr>
<td>…… <code>(\d)abc\1</code></td>
<td>匹配结果 <code>1abc1</code> 或 <code>5abc5</code></td>
</tr>
</tbody>
</table>
<ul>
<li><code>|</code> 理解为或即可, 用来隔开多个正则表达式.</li>
<li>譬如 <code>egrep -n &#39;gd|good&#39; re.txt</code>   只能匹配<code>gd</code>和<code>good</code></li>
<li>譬如 <code>egrep -n &#39;g(la|oo)d&#39; re.txt</code> 只能匹配<code>glad</code>和<code>good</code></li>
</ul>
<h1 id="正则表达式的兼容性问题"><a href="#正则表达式的兼容性问题" class="headerlink" title="正则表达式的兼容性问题"></a>正则表达式的兼容性问题</h1><h2 id="PCRE"><a href="#PCRE" class="headerlink" title="PCRE"></a>PCRE</h2><p>即 Perl Compatible Regular Expression<br>常见的正则表达式记法,其实都源于Perl.<br>实际上，正则表达式是从Perl衍生出一个显赫的流派, 称为PCRE<br><code>\d</code> <code>\w</code> <code>\s</code> 之类的记法，就是这个流派的特征.</p>
<p>Python 的re库就是使用的PCRE. 其系统字符集如下:</p>
<table>
<thead>
<tr>
<th>系统字符集</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\d</code></td>
<td>digital, 数字字符, <code>[0-9]</code></td>
</tr>
<tr>
<td><code>\D</code></td>
<td>非数字字符, <code>[^\d]</code></td>
</tr>
<tr>
<td><code>\s</code></td>
<td>space, 空白字符, <code>[ \t\r\n\f\v]</code></td>
</tr>
<tr>
<td><code>\S</code></td>
<td>非空白字符, <code>[^\s]</code></td>
</tr>
<tr>
<td><code>\w</code></td>
<td>word, 单词字符, <code>[A-Za-z0-9_]</code></td>
</tr>
<tr>
<td><code>\W</code></td>
<td>非单词字符, <code>[^\w]</code></td>
</tr>
<tr>
<td><code>\A</code></td>
<td>仅匹配字符串开头</td>
</tr>
<tr>
<td><code>\Z</code></td>
<td>仅匹配字符串结尾</td>
</tr>
<tr>
<td><code>\b</code></td>
<td>提取指定的<code>\w</code>串</td>
</tr>
<tr>
<td>… <code>\bfoo\b</code></td>
<td>匹配 <code>foo</code> <code>foo.</code> <code>(foo)</code> <code>b foo z</code>, <del>不匹配 <code>foobar</code></del></td>
</tr>
<tr>
<td><code>\B</code></td>
<td><code>[^\b]</code>, 指定部分内容提取<code>\w</code>串</td>
</tr>
<tr>
<td>… <code>py\B</code></td>
<td>匹配 <code>python</code> <code>py3</code>, <del>不匹配 <code>py</code> <code>py.</code> <code>py!</code></del></td>
</tr>
</tbody>
</table>
<h2 id="POSIX"><a href="#POSIX" class="headerlink" title="POSIX"></a>POSIX</h2><p>linux是遵循POSIX标准的, 因此在linux下使用正则表达式时, 系统字符集如下:</p>
<table>
<thead>
<tr>
<th>系统字符集</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>[:alnum:]</code></td>
<td>单词字符, <code>[A-Za-z0-9_]</code></td>
</tr>
<tr>
<td><code>[:alpha:]</code></td>
<td>字母字符, <code>[A-Za-z]</code></td>
</tr>
<tr>
<td><code>[:ascii:]</code></td>
<td>ASCII字符, <code>[\x00-\x7F]</code></td>
</tr>
<tr>
<td><code>[:blank:]</code></td>
<td>空格字符, <code>[ \t]</code></td>
</tr>
<tr>
<td><code>[:cntrl:]</code></td>
<td>控制键字符, <code>[\x00-\x1F\x7F]</code></td>
</tr>
<tr>
<td><code>[:digit:]</code></td>
<td>数字字符, <code>[0-9]</code></td>
</tr>
<tr>
<td><code>[:graph:]</code></td>
<td>非空字符, <code>[\x21-\x7E]</code>, <code>[:blank:]</code>的补集</td>
</tr>
<tr>
<td><code>[:lower:]</code></td>
<td>小写字母, <code>[a-z]</code></td>
</tr>
<tr>
<td><code>[:print:]</code></td>
<td>可被打印的字符, <code>[\x20-\x7E]</code></td>
</tr>
<tr>
<td><code>[:punct:]</code></td>
<td>所有标点符号, <code>[][!&quot;#$%&amp;&#39;()*+,./:;&lt;=&gt;?@\</code>^_{}~-]丨`</td>
</tr>
<tr>
<td><code>[:upper:]</code></td>
<td>大写字母 <code>[A-Z]</code></td>
</tr>
<tr>
<td><code>[:space:]</code></td>
<td>空白字符 <code>[ \t\r\n\v\f]</code></td>
</tr>
<tr>
<td><code>[:word:]</code></td>
<td>字母字符 <code>[A-Za-z_]</code></td>
</tr>
<tr>
<td><code>[:xdigit:]</code></td>
<td>16进制类型 <code>[0-9A-Fa-f]</code></td>
</tr>
</tbody>
</table>
<h2 id="BRE-基础RE"><a href="#BRE-基础RE" class="headerlink" title="BRE, 基础RE"></a>BRE, 基础RE</h2><p>即, Basic Regular Expression<br>BRE只定义了6组元字符：</p>
<ul>
<li><code>[]</code>, 用于在多个字符中选定一个字符进行匹配</li>
<li><code>.</code>,  用于匹配任意字符</li>
<li><code>^</code>,  用于匹配时表示“非”的含义，还有一个用法是匹配行首</li>
<li><code>$</code>,  用于匹配行尾</li>
<li><code>*</code>,  零个或多个的前一RE字符</li>
<li><code>\</code>,  跳脱/转义字符</li>
</ul>
<p>在Linux/Unix常用工具中, grep vi sed都属于BRE这一派,<br>为了向前兼容并使用RE的一些新特性, 导致它的语法看起来比较奇怪. <code>()</code> <code>{}</code> 需要使用 <code>\</code> 转义后才有特殊含义.<br>如果直接使用 <code>a{1,2}</code>, 只能去匹配 <code>a{1,2}</code> 字符串. 只有使用 <code>a\{1,2\}</code> 才能匹配为 <code>a</code>和<code>aa</code>.<br>另外, BRE一般不支持 <del><code>+</code> <code>?</code> <code>(...|...)</code> <code>\number</code></del></p>
<h2 id="ERE-扩展RE"><a href="#ERE-扩展RE" class="headerlink" title="ERE, 扩展RE"></a>ERE, 扩展RE</h2><p>即, Extention Regular Expression<br>ERE在BRE上增加了3组元字符的定义：</p>
<ul>
<li><code>{}</code> 用于表示重复匹配的次数. BRE中将<code>{}</code>当作普通字符对待，必须加<code>\</code>进行转义, 即<code>\{\}</code></li>
<li><code>()</code>, 用于分组。BRE中只将<code>()</code>当作普通字符对待，必须加<code>\</code>进行转义，即<code>\(\)</code></li>
<li><code>|</code>, 完全为ERE新增的多项匹配能力定义的，BRE无多项匹配能力，只将<code>|</code>作普通字符对待</li>
<li><code>\number</code>, ERE没有明确规定需要支持反向引用, 但不少工具都支持此功能</li>
</ul>
<h2 id="linux-unix下的RE表达式汇总"><a href="#linux-unix下的RE表达式汇总" class="headerlink" title="linux/unix下的RE表达式汇总"></a>linux/unix下的RE表达式汇总</h2><table>
<thead>
<tr>
<th>PCRE记法</th>
<th>vi/vim</th>
<th>grep</th>
<th>egrep</th>
<th>awk</th>
<th>sed</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>*</code></td>
<td><code>*</code></td>
<td><code>*</code></td>
<td><code>*</code></td>
<td><code>*</code></td>
<td><code>*</code></td>
</tr>
<tr>
<td><code>+</code></td>
<td><code>\+</code></td>
<td><code>\+</code></td>
<td><code>+</code></td>
<td><code>+</code></td>
<td><code>\+</code></td>
</tr>
<tr>
<td><code>?</code></td>
<td><code>\=</code></td>
<td><code>\?</code></td>
<td><code>?</code></td>
<td><code>?</code></td>
<td><code>\?</code></td>
</tr>
<tr>
<td><code>{m,n}</code></td>
<td><code>\{m,n}</code></td>
<td><code>\{m,n\}</code></td>
<td><code>{m,n}</code></td>
<td><code>{m,n}</code></td>
<td><code>\{m,n\}</code></td>
</tr>
<tr>
<td><code>\b</code></td>
<td><code>\&lt;</code> <code>\&gt;</code></td>
<td><code>\&lt;</code> <code>\&gt;</code></td>
<td><code>\&lt;</code> <code>\&gt;</code></td>
<td><code>\&lt;</code> <code>\&gt;</code></td>
<td><code>\y</code> <code>\&lt;</code> <code>\&gt;</code></td>
</tr>
<tr>
<td><code>(…)</code></td>
<td><code>\(…\)</code></td>
<td><code>\(…\)</code></td>
<td><code>(…)</code></td>
<td><code>(…)</code></td>
<td><code>(…)</code></td>
</tr>
<tr>
<td><code>\1</code> <code>\2</code></td>
<td><code>\1</code> <code>\2</code></td>
<td><code>\1</code> <code>\2</code></td>
<td><code>\1</code> <code>\2</code></td>
<td>不支持</td>
<td><code>\1</code> <code>\2</code></td>
</tr>
</tbody>
</table>
<p>注意:</p>
<ul>
<li>PCRE中常用<code>\b</code>来表示<strong>单词的起始或结束位</strong>,</li>
<li>Linux工具中, 通常用<code>\&lt;</code>来匹配<strong>单词的起始位置</strong>, 用<code>\&gt;</code>来匹配<strong>单词的结束位置</strong></li>
<li><code>sed</code>中的<code>\y</code>可以同时匹配这两个位置。</li>
</ul>
<h1 id="与bash-shell的一些容易弄混的区别"><a href="#与bash-shell的一些容易弄混的区别" class="headerlink" title="与bash shell的一些容易弄混的区别"></a>与bash shell的一些容易弄混的区别</h1><table>
<thead>
<tr>
<th>特殊字符</th>
<th>bash shell中的含义</th>
<th>RE中的含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>*</code></td>
<td>零个到多个任意字符</td>
<td>重复零个或多个前一RE字符</td>
</tr>
<tr>
<td><code>?</code></td>
<td>一个任意字符</td>
<td>重复零个或一个前一RE字符</td>
</tr>
<tr>
<td><code>.</code></td>
<td>运行代码 <code>source</code></td>
<td>一个任意字符</td>
</tr>
<tr>
<td><code>[0-9a-z]</code></td>
<td>list内的一个字符</td>
<td>list内的一个字符</td>
</tr>
<tr>
<td><code>[0-9]</code>的补集</td>
<td><code>[!0-9]</code> ()</td>
<td><code>[^range]</code> (<code>!</code>在RE里是普通字符)</td>
</tr>
<tr>
<td><code>{}</code></td>
<td><code>{123,abc}</code> 字符串匹配</td>
<td><code>{m,n}</code> 重复m到n个前一RE字符</td>
</tr>
</tbody>
</table>
<ul>
<li>匹配<code>a</code>开头的任意文件<ul>
<li>bash下 <code>ls a*</code></li>
<li>re下 <code>ls | grep &quot;^a.*&quot;</code></li>
</ul>
</li>
<li>匹配string1或string2或更多之一字符串<ul>
<li>bash下 <code>{string1,string2,string3}</code>. 如 <code>touch a{xyz,123}.txt</code>, 结果为 <code>axyz.txt</code> <code>a123.txt</code></li>
<li>re下 <code>(string1|string2|string3)</code>. 如 <code>ls | egrep &#39;g(la|oo)d&#39;</code>, 结果为 <code>glad</code> <code>good</code></li>
</ul>
</li>
<li>连续字符匹配<ul>
<li>bash下, 有两种连续字符表示法 <code>{0..9}</code> 和 <code>[0-9]</code>, 支持<code>[1-3a-z]</code>, <del>不支持<code>{1..3a..z}</code></del>, </li>
<li>bash下 <code>touch {ex{1..3},ex4}.sh</code>或<code>touch {ex{1..3},ex4}.sh</code>, 结果为 <code>ex1.sh</code> <code>ex2.sh</code> <code>ex3.sh</code> <code>ex4.sh</code> </li>
<li>re下 <code>ls | egrep &quot;(ex[1-3]|ex4).sh&quot;</code>, 结果为 <code>ex1.sh</code> <code>ex2.sh</code> <code>ex3.sh</code> <code>ex4.sh</code></li>
</ul>
</li>
<li>简单总结, RE的功能远比bash自带的匹配符功能强大. 特别容易弄混的也就是 <code>*</code> <code>?</code> <code>[^range]</code></li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://python.usyiyi.cn/documents/python_278/library/re.html" target="_blank" rel="external">python标准库 7.2 re — 正则表达式操作</a></li>
<li><a href="http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html" target="_blank" rel="external">Python正则表达式指南</a></li>
<li><a href="http://linux.vbird.org/linux_basic/0330regularex.php" target="_blank" rel="external">鸟哥的私房菜 第十一章、正規表示法與文件格式化處理</a></li>
<li><a href="http://www.infoq.com/cn/news/2011/07/regular-expressions-6-POSIX" target="_blank" rel="external">Linux/Unix工具与正则表达式的POSIX规范</a></li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Bash Shell及环境变量]]></title>
      <url>https://draapho.github.io/2016/12/17/1627-linux-cmd-bash/</url>
      <content type="html"><![CDATA[<h1 id="入门教程"><a href="#入门教程" class="headerlink" title="入门教程"></a>入门教程</h1><p>推荐 <a href="http://c.biancheng.net/cpp/shell/" target="_blank" rel="external">C语言中文网-Shell教程</a></p>
<ul>
<li><a href="http://c.biancheng.net/cpp/view/6998.html" target="_blank" rel="external">第一个shell脚本</a></li>
<li><a href="http://c.biancheng.net/cpp/view/6999.html" target="_blank" rel="external">shell变量</a></li>
<li><a href="http://c.biancheng.net/cpp/view/2739.html" target="_blank" rel="external">shell特殊变量</a></li>
<li><a href="http://c.biancheng.net/cpp/view/2737.html" target="_blank" rel="external">shell替换</a></li>
<li><a href="http://c.biancheng.net/cpp/view/2736.html" target="_blank" rel="external">shell运算符</a></li>
<li><a href="http://c.biancheng.net/cpp/view/7000.html" target="_blank" rel="external">shell注释</a></li>
<li><a href="http://c.biancheng.net/cpp/view/7001.html" target="_blank" rel="external">shell字符串</a></li>
<li><a href="http://c.biancheng.net/cpp/view/7002.html" target="_blank" rel="external">shell数组</a></li>
<li><a href="http://c.biancheng.net/cpp/view/7003.html" target="_blank" rel="external">shell echo命令</a></li>
<li><a href="http://c.biancheng.net/cpp/view/1499.html" target="_blank" rel="external">shell printf命令</a></li>
<li><a href="http://c.biancheng.net/cpp/view/7005.html" target="_blank" rel="external">shell if else语句</a></li>
<li><a href="http://c.biancheng.net/cpp/view/7006.html" target="_blank" rel="external">shell case esac语句</a></li>
<li><a href="http://c.biancheng.net/cpp/view/7007.html" target="_blank" rel="external">shell for循环</a></li>
<li><a href="http://c.biancheng.net/cpp/view/7008.html" target="_blank" rel="external">shell while循环</a></li>
<li><a href="http://c.biancheng.net/cpp/view/7009.html" target="_blank" rel="external">shell until循环</a></li>
<li><a href="http://c.biancheng.net/cpp/view/7010.html" target="_blank" rel="external">shell跳出循环</a></li>
<li><a href="http://c.biancheng.net/cpp/view/7011.html" target="_blank" rel="external">shell函数</a></li>
<li><a href="http://c.biancheng.net/cpp/view/2491.html" target="_blank" rel="external">shell函数参数</a></li>
<li><a href="http://c.biancheng.net/cpp/view/2738.html" target="_blank" rel="external">shell输入输出重定向</a></li>
<li><a href="http://c.biancheng.net/cpp/view/2740.html" target="_blank" rel="external">shell文件包含</a></li>
</ul>
<h1 id="Bash-Shell基础操作"><a href="#Bash-Shell基础操作" class="headerlink" title="Bash Shell基础操作"></a>Bash Shell基础操作</h1><table>
<thead>
<tr>
<th>指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>[Tab]</code></td>
<td>指令或文件名自动补齐</td>
</tr>
<tr>
<td><code>[Tab][Tab]</code></td>
<td>连按两下[Tab], 列出所有可补齐的指令或档案</td>
</tr>
<tr>
<td><code>[ctrl]-c</code></td>
<td>中断指令</td>
</tr>
<tr>
<td><code>[ctrl]-d</code></td>
<td>EOF,表示输入结束</td>
</tr>
<tr>
<td><code>[↑]</code> <code>[↓]</code></td>
<td>浏览历史指令</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><code>stty</code></td>
<td>查看和设置终端按键参数</td>
</tr>
<tr>
<td>…… <strong><code>stty -a</code></strong></td>
<td>查看终端所有的按键参数</td>
</tr>
<tr>
<td><code>history</code></td>
<td>查询历史指令, 建议将其设置别名<code>alias h=’history’</code></td>
</tr>
<tr>
<td><code>!</code></td>
<td>执行历史指令, 后接数字或字母</td>
</tr>
<tr>
<td>…… <strong><code>!!</code></strong></td>
<td>执行上一个指令</td>
</tr>
<tr>
<td>…… <strong><code>!al</code></strong></td>
<td>执行以al为开头的最后一个指令</td>
</tr>
<tr>
<td>…… <strong><code>!12</code></strong></td>
<td>执行第12条历史指令(先用history查看历史指令号)</td>
</tr>
<tr>
<td><code>alias cmd=’command’</code></td>
<td>设置指令别名, command为指令字符串</td>
</tr>
<tr>
<td>…… <strong><code>alias h=history</code></strong></td>
<td>设置指令history的别名为h.不用引号,单双引号皆可</td>
</tr>
<tr>
<td><code>unalias cmd</code></td>
<td>取消指令别名</td>
</tr>
<tr>
<td><code>type -a command</code></td>
<td>查询指令类型(file外部指令; alias别名指令;builtin内建指令)</td>
</tr>
<tr>
<td><code>command --help</code></td>
<td>获取command内置的帮助信息,较为简短</td>
</tr>
<tr>
<td><code>man command</code></td>
<td>获取command的帮助文件. <code>j</code> <code>k</code>上下移动, <code>q</code>退出</td>
</tr>
<tr>
<td><code>sh file</code></td>
<td>创建一个子shell, 执行file内的指令</td>
</tr>
<tr>
<td><code>source file</code></td>
<td>在当前shell内,执行file内的指令</td>
</tr>
<tr>
<td><code>. file</code></td>
<td>等同于source file</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><code>su -l user</code></td>
<td>切换用户, -l表示环境变量一起变</td>
</tr>
<tr>
<td>…… <strong><code>su</code></strong></td>
<td>切换为管理员账户</td>
</tr>
<tr>
<td><code>sudo command</code></td>
<td>赋予用户临时的管理员权限 (<code>/etc/sudoers</code>决定是否支持)</td>
</tr>
<tr>
<td><code>exit</code></td>
<td>退出当前用户的终端环境</td>
</tr>
<tr>
<td><code>shutdown -h now</code></td>
<td>立刻关机</td>
</tr>
<tr>
<td><code>sync; sync; shutdown -r now</code></td>
<td>立刻重启, 重启前需要存储一下数据</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><code>date</code></td>
<td>时间</td>
</tr>
<tr>
<td><code>cal</code></td>
<td>日期</td>
</tr>
<tr>
<td><code>bc</code></td>
<td>计算器, 输入quit退出</td>
</tr>
<tr>
<td><code>apt-get</code></td>
<td>ubuntu deb包软件管理</td>
</tr>
<tr>
<td>…… <strong><code>sudo apt-get install packagename</code></strong></td>
<td>安装指定软件包</td>
</tr>
<tr>
<td>…… <strong><code>sudo apt-get autoremovepackagename</code></strong></td>
<td>删除指定软件包 (包括配置文件)</td>
</tr>
</tbody>
</table>
<h1 id="变量与环境变量"><a href="#变量与环境变量" class="headerlink" title="变量与环境变量"></a>变量与环境变量</h1><ul>
<li>系统变量一般大写, 如MAIL</li>
<li>用户变量一般小写, 如myhome</li>
<li>普通变量(也称shell变量)作用范围: 当前的shell</li>
<li>环境变量(也称用户变量)作用范围: 当前的shell及其子shell</li>
<li>环境变量开机设置文档<ul>
<li><code>~/.bashrc</code>, <code>~/.profile</code>, <code>/etc/profile</code>, <code>/etc/bash.bashrc</code>,等等</li>
<li>首先读取 <code>/etc/profile</code>, 最后读取 <code>~/.bashrc</code></li>
<li>个人设定建议放在<code>~/.bashrc</code>内,并做如下修改:</li>
<li>修改<code>HISTSIZE=50</code>  (减少记录的历史指令,安全)</li>
<li>加入<code>alias h=&#39;history&#39;</code></li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>myhome=/home/my/</code></td>
<td>无空格字符串,注意等号左右不要有空格</td>
</tr>
<tr>
<td><code>myhome=’/home/my/’</code></td>
<td>单引号内可包含任意字符串, 无特殊含义</td>
</tr>
<tr>
<td><code>myname=”my name is”</code></td>
<td>双引号内某些字符有特殊作用, 如 $</td>
</tr>
<tr>
<td><code>read variable</code></td>
<td>键盘输入变量, 回车表示结束输入</td>
</tr>
<tr>
<td>…… <strong><code>read -p “Input name:” -t 30 myname</code></strong></td>
<td>提示输入变量给myname, 30秒输入时间</td>
</tr>
<tr>
<td><code>echo $myhome</code></td>
<td>变量名前加上$, 即可读取该变量的值</td>
</tr>
<tr>
<td><code>echo “$myhome”</code></td>
<td>“$变量名”,无歧义. 注意不能单引号</td>
</tr>
<tr>
<td><code>echo ${myhome}</code></td>
<td>${变量名},无歧义</td>
</tr>
<tr>
<td><code>unset myhome</code></td>
<td>删除变量</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><code>let val=10*10</code></td>
<td>加上let后, val值为100,而非10*10. 用的比declare多!</td>
</tr>
<tr>
<td><code>readonly VAL=’read only’</code></td>
<td>将VAL为只读变量,不可更改和unset (等同 declare -r)</td>
</tr>
<tr>
<td><code>declare -ai array</code></td>
<td>将array声明为整数数组 (不加参数a,效果一样)</td>
</tr>
<tr>
<td><code>array[1]=10*10</code></td>
<td>数组的赋值, array定义为整数,因此array[1]值为100</td>
</tr>
<tr>
<td><code>echo ${array[1]}</code></td>
<td>使用”$array[1]”没用.若无{}, 会认为是”$array”[1]</td>
</tr>
<tr>
<td><code>unset array</code></td>
<td>将array数组变量删除</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><code>PATH=/home:$PATH</code></td>
<td>新增”/home:”在PATH变量最前面</td>
</tr>
<tr>
<td><code>PATH=”$PATH””:/home”</code></td>
<td>前后都加”双引号”,无歧义. 建议这样书写</td>
</tr>
<tr>
<td><code>PATH=${PATH}’:/home’</code></td>
<td>变量名用{大括号}指明,无歧义. 新增变量也可用’单引号’</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><code>echo $?</code></td>
<td>?为特殊变量,为上一指令传回的值. 0成功, !0失败</td>
</tr>
<tr>
<td><code>echo $$</code></td>
<td>获取并显示当前shell的 PID (process ID)</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><code>#</code> <code>##</code> <code>%</code> <code>%%</code> <code>/</code> <code>//</code></td>
<td>变量的截取和替换. 以<code>myhome=/home/test/test.sh</code>为例</td>
</tr>
<tr>
<td>…… <strong><code>echo ${myhome#/*/}</code></strong></td>
<td><code>test/test.sh</code>,从头比较, 单次删除,故<del><code>/home/</code></del></td>
</tr>
<tr>
<td>…… <strong><code>echo ${myhome##/*/}</code></strong></td>
<td><code>test.sh</code>, 从头比较, 全部删除,获得文件名</td>
</tr>
<tr>
<td>…… <strong><code>echo ${myhome%/*}</code></strong></td>
<td><code>/home/test</code>,从尾比较, 单次删除,获得路径</td>
</tr>
<tr>
<td>…… <strong><code>echo ${myhome%%/*}</code></strong></td>
<td>从尾比较, 全部删除,故全部被删掉</td>
</tr>
<tr>
<td>…… <strong><code>echo ${myhome/test/TEST}</code></strong></td>
<td><code>/home/TEST/test.h</code>, 从头比较, 单次替换</td>
</tr>
<tr>
<td>…… <strong><code>echo ${myhome//test/TEST}</code></strong></td>
<td><code>/home/TEST/TEST.h</code>,从头比较, 全部替换</td>
</tr>
<tr>
<td><code>-</code> <code>:-</code> <code>+</code> <code>:+</code> <code>=</code> <code>:=</code> <code>?</code> <code>:?</code></td>
<td>变量的比较和判断. 常用于判断和确保变量有效</td>
</tr>
<tr>
<td>…… <strong><code>var=${str-expr}</code></strong></td>
<td>var为目标变量, str为已有变量, expr为变量值</td>
</tr>
<tr>
<td>…… <strong><code>myname=${myname:-root}</code></strong></td>
<td>若myname不存在或为空,则myname=root</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><code>env</code></td>
<td>enviroment, 显示当前环境变量,用的最多!</td>
</tr>
<tr>
<td><code>set</code></td>
<td>显示所有变量(环境变量,普通变量)</td>
</tr>
<tr>
<td><code>export</code></td>
<td>显示已成为当前环境变量的普通变量</td>
</tr>
<tr>
<td>…… <strong><code>export variable</code></strong></td>
<td>将variable设为环境变量, 等同 <code>declare -x variable</code></td>
</tr>
<tr>
<td><code>locale</code></td>
<td>查看当前语言的环境变量</td>
</tr>
<tr>
<td>…… <strong><code>locale -a</code></strong></td>
<td>查看系统支持的语言</td>
</tr>
</tbody>
</table>
<h1 id="Bash-Shell特殊符号"><a href="#Bash-Shell特殊符号" class="headerlink" title="Bash Shell特殊符号"></a>Bash Shell特殊符号</h1><table>
<thead>
<tr>
<th>符号</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>*</code></td>
<td>万用字符, 表示0或多个字符</td>
</tr>
<tr>
<td><code>?</code></td>
<td>万用字符, 表示一个字符</td>
</tr>
<tr>
<td><code>!</code></td>
<td>逻辑非, 通常在<code>[中括号]</code>内使用</td>
</tr>
<tr>
<td><code>\</code></td>
<td>转义字符, 需要转义的字符 <code>&quot;</code> <code>&#39;</code> <code>$</code> <code>\</code> <code>` \</code></td>
</tr>
<tr>
<td>…… <strong><code>\n</code></strong></td>
<td>换行</td>
</tr>
<tr>
<td>…… <strong><code>\r</code></strong></td>
<td>回车</td>
</tr>
<tr>
<td>…… <strong><code>\t</code></strong></td>
<td>水平制表符</td>
</tr>
<tr>
<td>…… <strong><code>\v</code></strong></td>
<td>垂直制表符</td>
</tr>
<tr>
<td>…… <strong><code>\b</code></strong></td>
<td>后退</td>
</tr>
<tr>
<td>…… <strong><code>\a</code></strong></td>
<td>蜂鸣</td>
</tr>
<tr>
<td>…… <strong><code>\077</code></strong></td>
<td>八进制字符</td>
</tr>
<tr>
<td>…… <strong><code>\xff</code></strong></td>
<td>十六进制</td>
</tr>
<tr>
<td><code>#</code></td>
<td>批注</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><code>$variable</code></td>
<td>变量名</td>
</tr>
<tr>
<td><code>${variable}</code></td>
<td>大括号. 中间为命令区块组合,限定变量名范围</td>
</tr>
<tr>
<td>…… <strong><code>echo ${array[1]}</code></strong></td>
<td>显示<code>array[1]</code> 变量值, array为数组,需用<code>{大括号}</code>包含变量名</td>
</tr>
<tr>
<td><code>[a-f], [35], [!a-z]</code></td>
<td>中括号. 中间为字符组合, <code>[仅代表一个字符]</code></td>
</tr>
<tr>
<td>…… <strong><code>ls -d ~/*[0-9]*</code></strong></td>
<td>列出用户home目录下所有包含数字的文件和目录</td>
</tr>
<tr>
<td><code>$(command)</code></td>
<td>小括号. 中间为子shell,此命令等同于`command`</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><code>&#39;$string&#39;</code></td>
<td>单引号, 特殊符号无效,变量不置换, 显示为$string</td>
</tr>
<tr>
<td><code>&quot;$variable&quot;</code></td>
<td>双引号, 特殊符号有用,变量置换</td>
</tr>
<tr>
<td>`command`</td>
<td>`(键盘1左边的字符),需要优先执行的指令</td>
</tr>
<tr>
<td>…… <strong>cd /usr/src/linux-headers-`uname -r`</strong></td>
<td>进入当前linux的内核源码目录</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>cmd1 l cmd2 和 cm1 ll cmd2</td>
<td>hexo解析问题, 无法再表格中正确显示<code>丨</code>, <strong>故放到表格的最后</strong></td>
</tr>
<tr>
<td><code>cut</code> <code>grep</code> <code>split</code></td>
<td>截取分割, 通常配合 <code>pipe</code>使用</td>
</tr>
<tr>
<td><code>sort</code> <code>wc</code> <code>uniq</code></td>
<td>排序命令, 通常配合 <code>pipe</code>使用</td>
</tr>
<tr>
<td><code>tr</code> <code>col</code> <code>join</code> <code>paste</code> <code>expand</code></td>
<td>字符转换, 通常配合 <code>pipe</code>使用</td>
</tr>
<tr>
<td><code>cmd1;cmd2; cmd3</code></td>
<td>可以一行写多个指令</td>
</tr>
<tr>
<td><code>cmd1 &amp;&amp; cmd2</code></td>
<td>cmd1执行正确($?为0),则继续执行cmd2, 否则不执行</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><code>&gt;</code> <code>2&gt;</code> <code>&gt;&gt;</code> <code>2&gt;&gt;</code></td>
<td>输出到文件 (&gt;写入, &gt;&gt;累加, 2错误信息)</td>
</tr>
<tr>
<td>…… <strong><code>ll &gt; list.txt</code></strong></td>
<td>将当前目录下的文件详细信息存储到list.txt文件中</td>
</tr>
<tr>
<td>…… <strong><code>ls / &gt;&gt; list.txt</code></strong></td>
<td>将根目录下的文件信息追加到list.txt文件中</td>
</tr>
<tr>
<td>…… <strong><code>find /home -name test &gt; ok 2&gt; error</code></strong></td>
<td>将正确信息写到ok中,错误的写到error中</td>
</tr>
<tr>
<td>…… <strong><code>find /home -name test &gt; list 2&gt;&amp;1</code></strong></td>
<td>将所有信息都写到list中 (&amp;1是数字一)</td>
</tr>
<tr>
<td>…… <strong><code>find /home -name test &gt; /dev/null 2&gt; err</code></strong></td>
<td><code>/dev/null</code>相当于黑洞.只将错误写到err中</td>
</tr>
<tr>
<td><code>&lt;</code> <code>&lt;&lt;</code></td>
<td>输入信息(&lt;从文件获取, &lt;&lt;结束的输入字符)</td>
</tr>
<tr>
<td>…… <strong><code>cat &gt; catfile</code></strong></td>
<td>从键盘获取文本并写到catfile中 (键盘按[ctrl]+d结束输入)</td>
</tr>
<tr>
<td>…… <strong><code>cat &gt; catfile &lt;&lt; end</code></strong></td>
<td>从键盘获取文本并写到catfile中(键盘输入end结束输入)</td>
</tr>
<tr>
<td>…… <strong><code>cat &gt; catfile &lt; input</code></strong></td>
<td>导入input文件信息再写到catfile中</td>
</tr>
</tbody>
</table>
<ul>
<li><code>cmd1 | cmd2</code>  <code>pipe</code>管线命令,将cmd1的处理结果传给cmd2继续处理</li>
<li>譬如 <code>ll | more</code>  将ll获得的数据传给more进一步处理</li>
<li><code>cmd1 || cmd2</code>  cmd1执行错误($?为!0),则继续执行cmd2, 否则不执行</li>
<li>譬如 <code>ls /tmp/test &amp;&amp; echo &quot;exist&quot; || echo &quot;nofile&quot;</code> 如果<code>/tmp/test</code>存在显示<code>exist</code>,否则<code>nofile</code></li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux文件与目录相关指令]]></title>
      <url>https://draapho.github.io/2016/12/16/1626-linux-cmd-file/</url>
      <content type="html"><![CDATA[<h1 id="linux-文件基础"><a href="#linux-文件基础" class="headerlink" title="linux 文件基础"></a>linux 文件基础</h1><h2 id="特殊符号代表的目录"><a href="#特殊符号代表的目录" class="headerlink" title="特殊符号代表的目录:"></a>特殊符号代表的目录:</h2><table>
<thead>
<tr>
<th>特殊符号</th>
<th>目录</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>.</code></td>
<td>代表此层目录</td>
</tr>
<tr>
<td><code>..</code></td>
<td>代表上一层目录</td>
</tr>
<tr>
<td><code>~</code></td>
<td>代表<strong>目前使用者</strong>所在的家目录</td>
</tr>
<tr>
<td><code>~account</code></td>
<td>代表<strong>account</strong>这个使用者的家目录</td>
</tr>
<tr>
<td><code>~+</code></td>
<td>当前的工作目录, 等同于<code>pwd</code></td>
</tr>
<tr>
<td><code>~-</code></td>
<td>上次的工作目录</td>
</tr>
</tbody>
</table>
<h2 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h2><table>
<thead>
<tr>
<th>bit9</th>
<th>8</th>
<th>7</th>
<th>6</th>
<th>5</th>
<th>4</th>
<th>3</th>
<th>2</th>
<th>1</th>
<th>0</th>
</tr>
</thead>
<tbody>
<tr>
<td>-</td>
<td>r</td>
<td>w</td>
<td>x</td>
<td>r</td>
<td>-</td>
<td>x</td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>bit</th>
<th>字母</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>9</td>
<td></td>
<td>文件类型</td>
</tr>
<tr>
<td></td>
<td><code>d</code></td>
<td>目录(dir)</td>
</tr>
<tr>
<td></td>
<td><code>-</code></td>
<td>文件</td>
</tr>
<tr>
<td></td>
<td><code>l</code></td>
<td>链接文件(link)</td>
</tr>
<tr>
<td></td>
<td><code>b</code></td>
<td>块设备文件(block)</td>
</tr>
<tr>
<td></td>
<td><code>c</code></td>
<td>字符设备文件(character)</td>
</tr>
<tr>
<td></td>
<td><code>s</code></td>
<td>网络接口文件(sockets)</td>
</tr>
<tr>
<td></td>
<td><code>p</code></td>
<td>管道文件(FIFO, pipe)</td>
</tr>
<tr>
<td>876</td>
<td><code>rwx</code></td>
<td>拥有人的权限, r为可读, w为可写, x为可执行</td>
</tr>
<tr>
<td>543</td>
<td><code>r-x</code></td>
<td>同群组的权限, r为可读, -为不可写, x为可执行</td>
</tr>
<tr>
<td>210</td>
<td><code>---</code></td>
<td>其它群组权限, 不可读, 不可写, 不可执行</td>
</tr>
</tbody>
</table>
<h1 id="文件与目录常用指令"><a href="#文件与目录常用指令" class="headerlink" title="文件与目录常用指令"></a>文件与目录常用指令</h1><table>
<thead>
<tr>
<th>指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>cd</code></td>
<td><strong>Change Directory</strong>, 变换目录</td>
</tr>
<tr>
<td><code>pwd</code></td>
<td><strong>Print Working Directory</strong>, 显示目前的目录</td>
</tr>
<tr>
<td>…… <strong><code>pwd -P</code></strong></td>
<td>显示真实路径, 而非link路径</td>
</tr>
<tr>
<td><code>mkdir dir</code></td>
<td>Make Directory, 建立一个新的目录</td>
</tr>
<tr>
<td>…… <strong><code>mkdir -p dir1/dir2</code></strong></td>
<td>递归建立所有目录</td>
</tr>
<tr>
<td>…… <strong><code>mkdir -m 711 dir</code></strong></td>
<td>建立目录时,设定权限</td>
</tr>
<tr>
<td><code>rmdir dir</code></td>
<td><strong>Remove Directory</strong>, 删除一个空的目录</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><code>ls</code></td>
<td><strong>List Files</strong>, 显示文件与目录</td>
</tr>
<tr>
<td>…… <strong><code>ls -h</code></strong></td>
<td>以KB,GB显示容量.</td>
</tr>
<tr>
<td>…… <strong><code>ls -R</code></strong></td>
<td>Recursive, 递归显示子目录信息</td>
</tr>
<tr>
<td>…… <strong><code>ls -t</code></strong></td>
<td>以时间排序</td>
</tr>
<tr>
<td>…… <strong><code>ls -S</code></strong></td>
<td>以容量大小排序</td>
</tr>
<tr>
<td>…… <strong><code>ll</code></strong></td>
<td><code>ls –al</code>, List All, 显示所有文件及信息</td>
</tr>
<tr>
<td><code>cp src dst</code></td>
<td>copy</td>
</tr>
<tr>
<td>…… <strong><code>cp -a src dst</code></strong></td>
<td>即<code>cp -pdr</code>, 递归复制目录.不会改变属性和权限</td>
</tr>
<tr>
<td>…… <strong><code>cp -f src dst</code></strong></td>
<td>Force, 强制复制,不询问使用者</td>
</tr>
<tr>
<td>…… <strong><code>cp -u src dst</code></strong></td>
<td>若 src比dst新,才进行复制工作,多用于备份</td>
</tr>
<tr>
<td>…… <strong><code>cp src1 src2 src3 dir</code></strong></td>
<td>将多个原文件拷贝到指定目录</td>
</tr>
<tr>
<td><code>mv src dst</code></td>
<td><strong>move</strong>, 移动目录和文件</td>
</tr>
<tr>
<td><code>rm file_dir</code></td>
<td><strong>remove</strong>, 移除文件</td>
</tr>
<tr>
<td>…… <strong><code>rm -fr dir</code></strong></td>
<td>强制递归删除dir下的所有文件和目录</td>
</tr>
<tr>
<td><code>ln -s src dst</code></td>
<td><strong>Symbolic Link</strong>, 创建一个符号链接</td>
</tr>
<tr>
<td>…… <strong><code>ln file hardLink</code></strong></td>
<td>实际链接, 仅支持同区块下的文件,不占用inode</td>
</tr>
<tr>
<td>…… <strong><code>ln -s dir symbolicLink</code></strong></td>
<td>符号链接, 同快捷方式,为一个文件,占用inode</td>
</tr>
<tr>
<td><code>basename /dir/dir/file</code></td>
<td>结果为<code>file</code>, 路径中取得文件名称</td>
</tr>
<tr>
<td><code>dirname /dir/dir/file</code></td>
<td>结果为<code>/dir/dir</code>, 路径中取得目录名称</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><code>cat file</code></td>
<td><strong>Concatenate</strong> (连续), 连续显示文件内容</td>
</tr>
<tr>
<td>…… <strong><code>cat -n file</code></strong></td>
<td>在前面加上行号</td>
</tr>
<tr>
<td>…… <strong><code>cat -A</code></strong></td>
<td>即 <code>cat -vET</code>, 可显示一些特殊符号</td>
</tr>
<tr>
<td><code>more</code> <code>less</code> <code>head</code> <code>tail</code></td>
<td>都用于显示文件内容, <code>less</code>功能最强大</td>
</tr>
<tr>
<td><code>od -t x1 file</code></td>
<td>按1byte 十六进制显示文件.若x2则为2byte.</td>
</tr>
<tr>
<td><code>touch file</code></td>
<td>建立一个空文件, 修改文件时间(mtime和atime)</td>
</tr>
<tr>
<td><code>file file</code></td>
<td>读取文件类型</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><code>umask</code></td>
<td>读取和设置当前默认权限, 数字是被取消的默认权限</td>
</tr>
<tr>
<td>…… <strong><code>umask 022</code></strong></td>
<td>新建文档权限为 777-022 = 755权限</td>
</tr>
<tr>
<td><code>chgrp -R group file_dir</code></td>
<td>递归改变file_dir文件/目录的群组(group必须存在)</td>
</tr>
<tr>
<td><code>chown owner file_dir</code></td>
<td>改变文件或目录的所有者(owner必须存在)</td>
</tr>
<tr>
<td>…… <strong><code>chown -R owner:group dir</code></strong></td>
<td>递归改变dir的所有者和组群</td>
</tr>
<tr>
<td>…… <strong><code>chmod -R 755 file_dir</code></strong></td>
<td>递归改名文件或目录的权限 (7=0b111=rwx)</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><code>which -a cmd</code></td>
<td>搜索执行文件完整路径</td>
</tr>
<tr>
<td><code>whereis file</code></td>
<td>快速搜索文件(用数据库),实测下来没啥用</td>
</tr>
<tr>
<td><code>find dir -name file</code></td>
<td>搜索文件(整个硬盘),很强大的一个指令</td>
</tr>
<tr>
<td>…… <strong><code>-name</code></strong></td>
<td>表示按文件名搜索. 类似的参数有很多.有需要在查.</td>
</tr>
<tr>
<td><code>grep pattern files</code></td>
<td>在files中寻找 pattern项,支持正则表达式</td>
</tr>
<tr>
<td>…… <strong><code>grep -r “hello” ./*</code></strong></td>
<td>在当前文件夹下的所有文件下搜索 “hello”</td>
</tr>
<tr>
<td>…… <strong><code>grep -n “Test” *</code></strong></td>
<td>在当前文件夹下搜索 “hello”, 并显示行号</td>
</tr>
<tr>
<td>…… <strong><code>grep -i “Bye” *</code></strong></td>
<td>在当前文件夹下忽略大小写搜索 ”Bye”</td>
</tr>
<tr>
<td>…… <strong><code>grep -w “Test” aa bb</code></strong></td>
<td>在aa, bb文件内,只匹配整个单词搜索 “Test”</td>
</tr>
<tr>
<td>…… <strong><code>grep -nd skip 100ask24x0 *</code></strong></td>
<td>仅在当前目录查找, 不显示子目录信息</td>
</tr>
<tr>
<td><code>find ./ -name &quot;*&quot; l(竖杠) xargs grep --color &quot;key&quot;</code></td>
<td>在当前文件夹下查找包含 “key” 内容的文件</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><code>tar -cvf file.tar /dir</code></td>
<td>将/dir打包为file.tar,没有压缩</td>
</tr>
<tr>
<td><code>tar -zcvf file.tar.gz /dir</code></td>
<td>将/dir打包为file.tar.gz,用gzip压缩</td>
</tr>
<tr>
<td><code>tar -jcvf file.tar.bz2 /dir</code></td>
<td>将/dir打包为file.tar.gz2,用bzip2压缩</td>
</tr>
<tr>
<td><code>tar -xvf file.tar</code></td>
<td>还原file.tar到当前目录</td>
</tr>
<tr>
<td><code>tar -zxvf file.tar.gz</code></td>
<td>解压file.tar.gz到当前目录</td>
</tr>
<tr>
<td><code>tar -jxvf file.tar.bz2</code></td>
<td>解压file.tar.bz2到当前目录</td>
</tr>
<tr>
<td><code>tar -N ‘2005/06/01’ -zcvffile.tar.gz /dir</code></td>
<td>将/dir下比2005/06/01新的文件备份</td>
</tr>
<tr>
<td><code>cpio</code></td>
<td>文件/设备的输入输出, 多配合find进行备份</td>
</tr>
</tbody>
</table>
<ul>
<li><strong><code>find ./ -name &quot;*&quot; | xargs grep --color &quot;key&quot;</code></strong> 在当前文件夹下查找包含 “key” 内容的文件</li>
<li><strong><code>find / -print | cpio -covB &gt; /dev/st0</code></strong> , 将系统数据全部写入磁带机</li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux 系统文件及磁盘指令]]></title>
      <url>https://draapho.github.io/2016/12/15/1625-linux-cmd-disk/</url>
      <content type="html"><![CDATA[<h1 id="linux-系统文件简要说明"><a href="#linux-系统文件简要说明" class="headerlink" title="linux 系统文件简要说明"></a>linux 系统文件简要说明</h1><p>FHS是Filesystem Hierarchy Standard的简称.FHS定义了两层规范:<br>第一层是/目录下各个主要目录应该放什么文件数据, 例如/etc应该放配置文件,/bin与/sbin则应该放置可执行文件等.<br>第二层则是针对/usr和/var这两个目录的子目录来定义,例如/var/log放置系统登录文件,/usr/share放置共享数据等.<br>单一文件或目录的最大允许文件名为255个字符,包含完整路径的文件名或目录名最大允许为4096个字符.</p>
<table>
<thead>
<tr>
<th>目录</th>
<th>说明</th>
<th>文件内容</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>/</code></td>
<td>root, 根目录</td>
<td>一般建议只有目录,不要直接放文件. <code>/etc</code> <code>/bin</code> <code>/sbin</code> <code>/dev</code> <code>/lib</code> 必须与 <code>/</code> 同一分区</td>
</tr>
<tr>
<td><code>/bin</code>, <code>/usr/bin</code>, <code>/usr/local/bin</code></td>
<td>Essential command <strong>bin</strong>aries, 普通用户可执行的二进制文件</td>
<td>如 <code>ls</code> <code>mv</code> <code>cat</code> 等指令</td>
</tr>
<tr>
<td><code>/boot</code></td>
<td>Static files of the <strong>boot</strong> loader,  启动时用到的文件</td>
<td>包括 vmlinuz (就是kernel), grub (开机管理)</td>
</tr>
<tr>
<td><code>/dev</code></td>
<td><strong>Dev</strong>ice files, 设备文件</td>
<td>任何设备与接口都是以文件的型态存放在此目录下. 分为<code>字符设备</code>和<code>块设备</code></td>
</tr>
<tr>
<td></td>
<td><code>/dev/null</code></td>
<td>空设备</td>
</tr>
<tr>
<td></td>
<td><code>/dev/tty*</code></td>
<td>串口设备</td>
</tr>
<tr>
<td></td>
<td><code>/dev/hd[a-d][1-63]</code></td>
<td>IDE 硬盘</td>
</tr>
<tr>
<td></td>
<td><code>/dev/sd[a-p][1-20]</code></td>
<td>SCSI硬盘,U盘</td>
</tr>
<tr>
<td></td>
<td><code>/dev/cdrom</code></td>
<td>CDROM</td>
</tr>
<tr>
<td></td>
<td><code>/dev/fd[0-1]</code></td>
<td>软盘</td>
</tr>
<tr>
<td></td>
<td><code>/dev/lp[0-2]</code></td>
<td>并口打印机</td>
</tr>
<tr>
<td></td>
<td><code>/dev/mouse</code></td>
<td>鼠标</td>
</tr>
<tr>
<td></td>
<td>常见<code>sda1-3</code>(主分区),<del><code>sda4</code></del>(扩展分区),<code>sda5..</code>(逻辑分区)</td>
<td>分析:硬盘支持4个主分区,1个扩展分区(占用主分区),16个逻辑分区(SCSI硬盘). 扩展分区文件名不显示.</td>
</tr>
<tr>
<td><code>/etc</code></td>
<td><strong>Etc</strong>etera, 杂项都在此处! 偏系统设置</td>
<td>系统启动(<code>/etc/init</code> <code>/etc/init.d</code>), 账号密码(<code>/etc/passwd</code> <code>/etc/shadow</code>), 开机预设值(<code>/etc/sysconfig/*</code>)</td>
</tr>
<tr>
<td><code>/home</code></td>
<td>User <strong>home</strong> directories, 用户的家目录</td>
<td>放置用户自有的数据, 如音乐图片等</td>
</tr>
<tr>
<td><code>/lib</code> <code>/usr/lib</code> <code>/usr/local/lib</code></td>
<td>Essential shared <strong>lib</strong>raries and kernel modules, 系统使用的函式库的目录</td>
<td><code>/lib/modules</code> 放着kernel的相关模块</td>
</tr>
<tr>
<td><code>/lost+found</code></td>
<td>系统异常时,会将一些遗失的片段放于此目录</td>
<td></td>
</tr>
<tr>
<td><code>/mnt</code></td>
<td><strong>Mount</strong> point for mounting a file system temporarily, 默认挂载点文件的目录</td>
<td>通常软盘挂在<code>/mnt/floppy</code>下,光盘挂在<code>/mnt/cdrom</code>下</td>
</tr>
<tr>
<td><code>/media</code></td>
<td>Contains mount points for replaceable <strong>media</strong></td>
<td><code>/media</code>目录功能与<code>/mnt</code>类似</td>
</tr>
<tr>
<td><code>/opt</code></td>
<td>Add-on application software packages, 主机自行安装软件默认放置的目录</td>
<td>以前较多情况放置在<code>/usr/local</code>目录下</td>
</tr>
<tr>
<td><code>/proc</code></td>
<td>Virtual directory for system information, 虚拟档案系统. 数据都在内存当中,不占用硬盘空间.</td>
<td>主要包括系统核心,接口设备状态,网络状态. 比较重要的档案例: <code>/proc/cpuinfo</code> <code>/proc/dma</code> <code>/proc/interrupts</code> <code>/proc/ioports</code> <code>/proc/net/*</code> 等</td>
</tr>
<tr>
<td><code>/root</code></td>
<td>Home directory for the <strong>root</strong> user 系统管理员的家目录。</td>
<td>一般与根目录<code>/</code>在同一分区下</td>
</tr>
<tr>
<td><code>/sbin</code>, <code>/usr/sbin</code>, <code>/usr/local/sbin</code></td>
<td>Essential system binaries,<strong>S</strong>uper user <strong>bin</strong>aries, 放置系统管理员才会动用到的执行指令</td>
<td>如： <code>fdisk</code> <code>mke2fs</code> <code>fsck</code> <code>mkswap</code> <code>mount</code> 等</td>
</tr>
<tr>
<td><code>/sys</code></td>
<td>Virtual directory for system information (2.6 kernels)</td>
<td></td>
</tr>
<tr>
<td><code>/srv</code></td>
<td>Data for <strong>services</strong> provided by the system, 一些服务启动之后，这些服务所需要取用的数据目录</td>
<td>如WWW 服务器需要的网页就可放在<code>/srv/www</code>内</td>
</tr>
<tr>
<td><code>/tmp</code></td>
<td><strong>Temp</strong>orary files, 这是让一般用户或是正在执行的程序暂时放置文件的目录</td>
<td>这个目录任何人都能够存取的，所以需要定期清理</td>
</tr>
<tr>
<td><code>/usr</code></td>
<td><strong>U</strong>nix <strong>S</strong>hared <strong>R</strong>esources</td>
<td>此目录下包含系统的主要程序,图形界面文件,额外的函式库、本机自行安装的软件，以及共享的目录与文件等</td>
</tr>
<tr>
<td></td>
<td><code>/usr/bin,/usr/sbin</code></td>
<td>可执行的档案放置目录</td>
</tr>
<tr>
<td></td>
<td><code>/usr/include</code></td>
<td>c/c++等程序语言的头文件放置目录</td>
</tr>
<tr>
<td></td>
<td><code>/usr/lib</code></td>
<td>各应用软件的函数库档案放置目录</td>
</tr>
<tr>
<td></td>
<td><code>/usr/local</code></td>
<td>本机自行安装及升级软件默认放置的目录</td>
</tr>
<tr>
<td></td>
<td><code>/usr/local/bin</code></td>
<td>自行安装及升级软件后的可执行文件目录</td>
</tr>
<tr>
<td></td>
<td><code>/usr/share</code></td>
<td>共享文件放置的目录, 如帮助文档(doc,man)</td>
</tr>
<tr>
<td></td>
<td><code>/usr/src</code></td>
<td>Linux系统相关的程序代码放置目录</td>
</tr>
<tr>
<td></td>
<td><code>/usr/src/linux</code></td>
<td>为Linux Kernel的源码</td>
</tr>
<tr>
<td></td>
<td><code>/usr/X11R6</code></td>
<td>X Window System 所需的执行文件放置目录</td>
</tr>
<tr>
<td><code>/var</code></td>
<td><strong>Var</strong>iable data</td>
<td>主要放置系统执行过程中经常变化的文件</td>
</tr>
<tr>
<td></td>
<td><code>/var/cache</code></td>
<td>程序文件在运作过程中的一些缓存数据</td>
</tr>
<tr>
<td></td>
<td><code>/var/lib</code></td>
<td>程序执行中，使用到的数据库文件放置的目录</td>
</tr>
<tr>
<td></td>
<td><code>/var/log</code></td>
<td>登录文件放置的目录(如/var/log/messages)</td>
</tr>
<tr>
<td></td>
<td><code>/var/run</code></td>
<td>某些程序或是服务启动后,会放置PID在此处</td>
</tr>
<tr>
<td></td>
<td><code>/var/spool</code></td>
<td>是一些数据队列存放的目录,作用为缓冲</td>
</tr>
</tbody>
</table>
<p><img src="https://draapho.github.io/images/1625/LinuxFileSystem.jpg" alt="LinuxFileSystem"></p>
<h1 id="linux系统分区建议"><a href="#linux系统分区建议" class="headerlink" title="linux系统分区建议"></a>linux系统分区建议</h1><table>
<thead>
<tr>
<th>挂载目录</th>
<th>说明</th>
<th>类型</th>
<th>台式机</th>
<th>嵌入式</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>/boot</code></td>
<td>启动程序等</td>
<td>ext4</td>
<td>100MB</td>
<td>50MB</td>
</tr>
<tr>
<td><code>/</code></td>
<td>根目录</td>
<td>ext4</td>
<td>1GB-5GB</td>
<td>150-250MB</td>
</tr>
<tr>
<td><code>swap</code></td>
<td>虚拟内存</td>
<td>swap</td>
<td>0/2*ram</td>
<td>看情况</td>
</tr>
<tr>
<td><code>/usr</code></td>
<td>放置系统应用程序</td>
<td>ext4</td>
<td>5GB-20GB</td>
<td>1-5GB</td>
</tr>
<tr>
<td><code>/opt</code></td>
<td>放置大型或测试软件, <strong>建议用户软件都放此处</strong></td>
<td>ext4</td>
<td>10-50GB</td>
<td>使用<code>/usr/local</code></td>
</tr>
<tr>
<td><code>/tmp</code></td>
<td>临时文件</td>
<td>ext4</td>
<td>500M</td>
<td>50-100M</td>
</tr>
<tr>
<td><code>/var</code></td>
<td>放置经常变化的文件</td>
<td>ext4</td>
<td>1GB</td>
<td>300-500M</td>
</tr>
<tr>
<td><code>/home</code></td>
<td>用户家目录</td>
<td>ext4</td>
<td>100G/自定义</td>
<td>看情况</td>
</tr>
</tbody>
</table>
<h1 id="linux磁盘常用指令"><a href="#linux磁盘常用指令" class="headerlink" title="linux磁盘常用指令"></a>linux磁盘常用指令</h1><table>
<thead>
<tr>
<th>指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>df</code></td>
<td><strong>disk free</strong>, 查看磁盘相关信息</td>
</tr>
<tr>
<td>…… <strong><code>df -Th</code></strong></td>
<td>查看磁盘容量信息</td>
</tr>
<tr>
<td>…… <strong><code>df -iTh</code></strong></td>
<td>查看磁盘inode信息</td>
</tr>
<tr>
<td><code>du</code></td>
<td><strong>disk usage</strong>, 查看磁盘文件使用情况</td>
</tr>
<tr>
<td>…… <strong><code>du -h</code></strong></td>
<td>列出当前文件夹下所有文件的容量</td>
</tr>
<tr>
<td>…… <strong><code>du -sh file_dir</code></strong></td>
<td>列出指定文件的容量</td>
</tr>
<tr>
<td><code>fdisk</code></td>
<td><strong>format disk</strong>, 磁盘查看及分区</td>
</tr>
<tr>
<td>…… <strong><code>fdisk -l</code></strong></td>
<td>查看整个系统的分区情况</td>
</tr>
<tr>
<td>…… <strong><code>fdisk /dev/sda6</code></strong></td>
<td>对指定磁盘进行配置(进入fdisk命令行模式)</td>
</tr>
<tr>
<td><code>mkfs</code></td>
<td><strong>make filesystem</strong>, 分区格式化</td>
</tr>
<tr>
<td>…… <strong><code>mkfs -t ext4 /dev/sda6</code></strong></td>
<td>格式化sda6分区格式为ext4</td>
</tr>
<tr>
<td><code>fsck</code></td>
<td><strong>filesystem check</strong>, 分区检验和修复</td>
</tr>
<tr>
<td>…… <strong><code>unmount /dev/sda6</code></strong></td>
<td>要检查的分区必须先umount</td>
</tr>
<tr>
<td>…… <strong><code>fsck -y -t ext4 /dev/sda6</code></strong></td>
<td>对sda6分区进行检验和修复</td>
</tr>
<tr>
<td><code>mount</code></td>
<td><strong>mount</strong> 查看和挂载分区</td>
</tr>
<tr>
<td>…… <strong><code>mkdir /mnt/sda_data</code></strong></td>
<td>必须先创建挂载点文件夹</td>
</tr>
<tr>
<td>…… <strong><code>mount -t ext4 /dev/sda6 /mnt/sda_data</code></strong></td>
<td>挂载指定设备sda6到文件夹</td>
</tr>
<tr>
<td><code>umount</code></td>
<td><strong>umount</strong>, 取消挂载点</td>
</tr>
<tr>
<td>…… <strong><code>umount /dev/sda6</code> </strong></td>
<td>两种写法都可以</td>
</tr>
<tr>
<td>…… <strong><code>umount /mnt/sda_data</code></strong></td>
<td>两种写法都可以</td>
</tr>
<tr>
<td><code>quato</code></td>
<td><strong>quato</strong>, 管理普通用户的分区配额,多用于服务器.</td>
</tr>
</tbody>
</table>
<h1 id="mount常见用法及开机自动挂载"><a href="#mount常见用法及开机自动挂载" class="headerlink" title="mount常见用法及开机自动挂载"></a>mount常见用法及开机自动挂载</h1><h2 id="挂载U盘"><a href="#挂载U盘" class="headerlink" title="挂载U盘"></a>挂载U盘</h2><ul>
<li>插入U盘, 用 <code>fdisk -l</code> 或 <code>ll /dev/</code> 下查看U盘的硬件名称, 如 <code>sda11</code></li>
<li>在mnt下建立usb目录 <code>mkdir /mnt/usb</code></li>
<li>挂载U盘  <code>mount -t vfat /dev/sda11 /mnt/usb</code></li>
<li>卸载U盘  <code>umount /mnt/usb</code></li>
<li>拔出U盘</li>
<li>删除mnt目录  <code>rm -fr /mnt/usb</code></li>
</ul>
<h2 id="挂载fat32分区"><a href="#挂载fat32分区" class="headerlink" title="挂载fat32分区"></a>挂载fat32分区</h2><p><code>mount -t vfat -o iocharset=cp936 /dev/sda6 /mnt/fat32</code></p>
<h2 id="挂载ntfs分区"><a href="#挂载ntfs分区" class="headerlink" title="挂载ntfs分区"></a>挂载ntfs分区</h2><p><code>mount -t ntfs -o iocharset=uft8 /dev/sda6 /mnt/ntfs</code></p>
<h2 id="挂载光驱"><a href="#挂载光驱" class="headerlink" title="挂载光驱"></a>挂载光驱</h2><p><code>mount -t iso9660 /dev/hdc /mnt/cdrom</code></p>
<h2 id="重载分区为可读写"><a href="#重载分区为可读写" class="headerlink" title="重载分区为可读写"></a>重载分区为可读写</h2><p>将根目录改为可读写,系统维护时使用<br><code>mount -n -o remount,rw /</code></p>
<h2 id="自动挂载分区"><a href="#自动挂载分区" class="headerlink" title="自动挂载分区"></a>自动挂载分区</h2><p>通过修改 <code>/etc/fstab</code> 实现. 根据规则自行添加行即可.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># &lt;file system&gt;   &lt;mount point&gt; &lt;type&gt; &lt;options&gt; &lt;dump&gt; &lt;pass&gt;</div><div class="line"># &lt;分区&gt;           &lt;挂载点&gt;      &lt;类型&gt;  &lt;配置&gt;     &lt;备份&gt;  &lt;检查&gt;</div><div class="line"></div><div class="line"># 以下是通过分区唯一的uuid进行挂载,优点是可绑定指定分区</div><div class="line"># 获取uuid指令: `ll /dev/disk/by-uuid/`</div><div class="line">  UUID=xxxx-xxxx  /             ext4   errors=..  0     1</div><div class="line">  UUID=xxxx-xxxx  /boot         ext4   defaults   0     2</div><div class="line">  UUID=xxxx-xxxx  /home         ext4   defaults   0     2</div><div class="line"></div><div class="line"># 以下是通过设备文件名进行挂载,优点是直观</div><div class="line"># 查看设备文件名指令: `sudo fdisk -l`  (sudo,获取管理员权限)</div><div class="line">  /dev/sda5       /mnt/data     ext4   defaults   0     2</div></pre></td></tr></table></figure></p>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android中Activity、Service和线程之间的通信]]></title>
      <url>https://draapho.github.io/2016/12/14/1624-android-ipc/</url>
      <content type="html"><![CDATA[<p><strong><em>转载自<a href="http://blog.sina.com.cn/s/blog_3fe961ae0100xkyt.html" target="_blank" rel="external">Android中Activity、Service和线程之间的通信</a></em></strong></p>
<hr>
<h1 id="我的说明"><a href="#我的说明" class="headerlink" title="我的说明"></a>我的说明</h1><p>很全面的总结了几种通讯方式. 是Android深入学习的必经阶段.<br>其实 Activity 和 Activity 间也就下面一些通讯方式,<br>只是从软件结构上讲, 较为复杂的通讯机制是分层的, 一般采用 Activity 纯显示UI, Service后台处理及开线程, Broadcast辅助通讯.</p>
<p>先转载此文作为备忘, 有时间自己在总结一下范例.</p>
<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>Activity、Service和线程应该是Android编程中最常见的几种类了，几乎大多数应用程序都会涉及到这几个类的编程，<br>自然而然的，也就会涉及到三者之间的相互通信，本文就试图简单地介绍一下这三者通信的方式。</p>
<p>想写这篇文章的起因是，笔者跟几个同学在做一个Android上的应用，起初代码写得很凌乱，因为我在Activity中直接创建了线程，去执行某些任务。<br>但是我们知道线程可能需要运行的时间比较长，而Android在内存不足的时候，会将一些Activity销毁，<br>这样线程就会失去了管理的对象，从而使程序发生意想不到的结果。<br>此外，在Activity中创建线程，线程跟Activity的通信也比较麻烦，一般借助Handler类来进行通信</p>
<p>与Activity相比，Service一般“默默”地运行在后台，生命周期比较长，所以它更合适去为主程序提供某些服务，创建线程并管理线程。<br>因此，笔者将原程序改成三层架构，从高到低分别为：Activity层–Service层–Thread层。<br>Activity将需要的服务“告诉”Service层，Service层创建Thread去完成服务。<br>Thread将任务的进度、状态、错误信息反馈给Service，Service将这些消息反馈给相关的Activity，<br>并且还可以利用Notification更新通知栏消息。大体的结构就是这样。</p>
<h1 id="Activity和Service之间的通信"><a href="#Activity和Service之间的通信" class="headerlink" title="Activity和Service之间的通信"></a>Activity和Service之间的通信</h1><h2 id="利用Handler通信"><a href="#利用Handler通信" class="headerlink" title="利用Handler通信"></a>利用Handler通信</h2><p>参考 <a href="http://blog.sina.com.cn/s/blog_3fe961ae0100mvc5.html" target="_blank" rel="external">Android在子线程中更新Activity中UI的方法</a></p>
<h2 id="Activity调用startService"><a href="#Activity调用startService" class="headerlink" title="Activity调用startService"></a>Activity调用startService</h2><p>Activity调用startService (Intent service)方法，将消息添加到Intent对象中，<br>这样Service对象可以在调用onStartCommand (Intent intent, int flags, int startId)的时候可以得到这些消息。<br>这种方法很简单，但如果有大量的信息要传递的话，就很麻烦了。因为Service端还要判断一下消息是什么，才能作进一步的动作。</p>
<h2 id="Activity调用bindService"><a href="#Activity调用bindService" class="headerlink" title="Activity调用bindService"></a>Activity调用bindService</h2><p>Activity调用bindService (Intent service, ServiceConnection conn, int flags)方法，<br>得到Service对象的一个引用，这样Activity可以直接调用到Service中的方法。<br>参考 <a href="http://blog.csdn.net/liuhe688/article/details/6623924" target="_blank" rel="external">Notification使用详解之三：通过服务更新进度通知&amp;在Activity中监听服务进度</a></p>
<h2 id="Service发送广播通知Activity"><a href="#Service发送广播通知Activity" class="headerlink" title="Service发送广播通知Activity"></a>Service发送广播通知Activity</h2><p>Service向Activity发送消息，除了可以利用Handler外，还可以使用广播，当然Activity要注册相应的接收器<br>比如Service要向多个Activity发送同样的消息的话，用这种方法就更好。具体方法可以看一下这篇文章：<br>参考 <a href="http://blog.csdn.net/liuhe688/article/details/6641806" target="_blank" rel="external">Notification使用详解之四：由后台服务向Activity发送进度信息</a></p>
<h1 id="Service跟Thread之间的通信"><a href="#Service跟Thread之间的通信" class="headerlink" title="Service跟Thread之间的通信"></a>Service跟Thread之间的通信</h1><p>Service创建Thread后，如果要对线程进行控制（启动，暂停，停止等），那么Service中应该保留线程的引用，这不用多说。<br>那么有了这个引用，Service就可以直接调用Thread的其它方法了。运行的线程要向Service发送消息的话，通常使用Handler就可以了：<br>参考 <a href="http://blog.sina.com.cn/s/blog_3fe961ae0100mvc5.html" target="_blank" rel="external">Android在子线程中更新Activity中UI的方法</a></p>
<h1 id="Activity和Thread之间的通信"><a href="#Activity和Thread之间的通信" class="headerlink" title="Activity和Thread之间的通信"></a>Activity和Thread之间的通信</h1><p>不用多想了，直接使用Handler吧。不推荐Activity直接去创建线程，因为不好管理线程。</p>
<hr>
<p><strong><em>转载自<a href="http://blog.sina.com.cn/s/blog_3fe961ae0100xkyt.html" target="_blank" rel="external">Android中Activity、Service和线程之间的通信</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python 调试及测试]]></title>
      <url>https://draapho.github.io/2016/12/13/1623-python-debug/</url>
      <content type="html"><![CDATA[<h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><p>常用的方法有:</p>
<ul>
<li>print, 仅作临时测试, 而且还要删除.</li>
<li>assert, 同print, 无明显优势.</li>
<li>logging, 推荐使用. 可选级别, 可选输出方式, 适用于各种情况的调试.</li>
<li>pdb 以及 基于pdb的图形化工具.</li>
<li>python的IDE, 如PyCharm(推荐), eclipse+PyDev</li>
</ul>
<h2 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h2><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="string">'''默认日志输出为终端, 设置日志等级, DEBUG=LEVEL10, 优先级最低'''</span></div><div class="line">    logging.basicConfig(level=logging.DEBUG)</div><div class="line">    <span class="string">'''更多设置'''</span></div><div class="line">    <span class="comment"># logging.basicConfig(level=logging.DEBUG,</span></div><div class="line">    <span class="comment">#                     format='%(asctime)s %(filename)-s[%(lineno)d] %(levelname)-8s: %(message)s')</span></div><div class="line"></div><div class="line">    logging.debug(<span class="string">'DEBUG message'</span>)</div><div class="line">    logging.info(<span class="string">'INFO message'</span>)</div><div class="line">    logging.warn(<span class="string">'WARN message'</span>)</div><div class="line">    logging.error(<span class="string">'ERROR message'</span>)</div><div class="line">    logging.critical(<span class="string">'CRITICAL message'</span>)</div></pre></td></tr></table></figure>
<h3 id="自定义显示格式"><a href="#自定义显示格式" class="headerlink" title="自定义显示格式"></a>自定义显示格式</h3><p>日志输出到 <code>logger.log</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="string">'''设置显示格式, 日志输出到文件'''</span></div><div class="line">    logging.basicConfig(level=logging.DEBUG,</div><div class="line">                        format=<span class="string">'%(asctime)s %(filename)-s[%(lineno)d] %(levelname)-8s: %(message)s'</span>,</div><div class="line">                        filename=<span class="string">'logger.log'</span>,</div><div class="line">                        filemode=<span class="string">'w'</span>) <span class="comment"># default is 'a'=append, 'w'=overwrite</span></div><div class="line"></div><div class="line">    logging.debug(<span class="string">'This is debug message'</span>)</div><div class="line">    logging.info(<span class="string">'This is info message'</span>)</div><div class="line">    logging.warning(<span class="string">'This is warning message'</span>)</div></pre></td></tr></table></figure></p>
<p>日志输出到 <code>logger.log</code> 以及终端<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    logging.basicConfig(level=logging.DEBUG,</div><div class="line">                        format=<span class="string">'%(asctime)s %(filename)s[%(lineno)d] %(levelname)-8s: %(message)s'</span>,</div><div class="line">                        filename=<span class="string">'logger.log'</span>,</div><div class="line">                        filemode=<span class="string">'w'</span>) <span class="comment"># default is 'a'=append, 'w'=overwrite</span></div><div class="line"></div><div class="line">    <span class="string">'''</span></div><div class="line">    定义一个StreamHandler，将INFO级别或更高的日志信息打印到标准错误，并将其添加到当前的日志处理对象</div><div class="line">    '''</div><div class="line">    console = logging.StreamHandler()</div><div class="line">    console.setLevel(logging.INFO)</div><div class="line">    formatter = logging.Formatter(<span class="string">'%(levelname)-8s: %(message)s'</span>)</div><div class="line">    console.setFormatter(formatter)</div><div class="line">    logging.getLogger(<span class="string">''</span>).addHandler(console)</div><div class="line"></div><div class="line">    logging.debug(<span class="string">'This is debug message'</span>)</div><div class="line">    logging.info(<span class="string">'This is info message'</span>)</div><div class="line">    logging.warning(<span class="string">'This is warning message'</span>)</div></pre></td></tr></table></figure></p>
<h3 id="使用文件配置"><a href="#使用文件配置" class="headerlink" title="使用文件配置"></a>使用文件配置</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">#logging.conf</div><div class="line"></div><div class="line">###############################################</div><div class="line">[loggers]</div><div class="line">keys=root</div><div class="line"></div><div class="line">[logger_root]</div><div class="line">level=DEBUG</div><div class="line">handlers=hand01,hand02</div><div class="line"></div><div class="line">###############################################</div><div class="line">[handlers]</div><div class="line">keys=hand01,hand02,hand03</div><div class="line"></div><div class="line"># 写入终端</div><div class="line">[handler_hand01]</div><div class="line">class=StreamHandler</div><div class="line">level=DEBUG</div><div class="line">formatter=form01</div><div class="line">args=(sys.stderr,)</div><div class="line"></div><div class="line"># 写入文件, 'w'覆写, 'a'追加</div><div class="line">[handler_hand02]</div><div class="line">class=FileHandler</div><div class="line">level=INFO</div><div class="line">formatter=form01</div><div class="line">args=('logging.log', 'w')</div><div class="line"></div><div class="line"># 最多备份5个日志文件，每个日志文件最大10M</div><div class="line">[handler_hand03]</div><div class="line">class=handlers.RotatingFileHandler</div><div class="line">level=INFO</div><div class="line">formatter=form01</div><div class="line">args=('logging.log', 'a', 10*1024*1024, 5)</div><div class="line"></div><div class="line">###############################################</div><div class="line">[formatters]</div><div class="line">keys=form01</div><div class="line"></div><div class="line">[formatter_form01]</div><div class="line">format=%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)-8s: %(message)s</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="keyword">from</span> logging.config <span class="keyword">import</span> fileConfig</div><div class="line">    fileConfig(<span class="string">"logging.conf"</span>)</div><div class="line"></div><div class="line">    logging.debug(<span class="string">'This is debug message'</span>)</div><div class="line">    logging.info(<span class="string">'This is info message'</span>)</div><div class="line">    logging.warning(<span class="string">'This is warning message'</span>)</div></pre></td></tr></table></figure>
<h3 id="更多应用参考手册"><a href="#更多应用参考手册" class="headerlink" title="更多应用参考手册"></a>更多应用参考手册</h3><ul>
<li><a href="https://docs.python.org/3.1/library/logging.html" target="_blank" rel="external">15.6. logging — Logging facility for Python</a><ul>
<li>15.6.11. Sending and receiving logging events across a network</li>
<li>15.6.20.2. Configuration file format</li>
<li>15.6.20.3. Configuration server example</li>
<li>15.6.21. More examples</li>
</ul>
</li>
</ul>
<h2 id="pdb"><a href="#pdb" class="headerlink" title="pdb"></a>pdb</h2><p>进入调试模式 <code>python -m pdb example.py</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python -m pdb example.py</div><div class="line">(Pdb)</div></pre></td></tr></table></figure></p>
<p>pdb 常用命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"># 断点</div><div class="line">(Pdb) b 10          # 断点设置在当前文件的第10行</div><div class="line">(Pdb) tbreak 10     # temp  break, 临时断点, 执行后会自动删除</div><div class="line">(Pdb) b my.py:20    # 断点设置到 my.py第20行</div><div class="line">(Pdb) b             # break, 查看断点编号</div><div class="line">(Pdb) cl 2          # clear, 删除第2个断点</div><div class="line">(Pdb) disable 2     # 禁用第2个断点</div><div class="line">(Pdb) enable 2      # 使能第2个断点</div><div class="line">(Pdb) ignore 2 10   # 略过第2个断点10次, 循环调试特别有用!</div><div class="line">(Pdb) condition 2 (i&gt;10)    # 条件为真时,使能断点</div><div class="line"></div><div class="line"># 运行</div><div class="line">(Pdb) n             # next, 单步运行</div><div class="line">(Pdb) s             # step, 进入方法</div><div class="line">(Pdb) r             # return, 返回上级方法</div><div class="line">(Pdb) c             # continue, 跳到下个断点</div><div class="line"></div><div class="line"># 查看</div><div class="line">(Pdb) p param       # print, 查看当前 变量值</div><div class="line">(Pdb) l             # list, 查看运行到某处代码</div><div class="line">(Pdb) a             # args, 查看全部栈内变量</div><div class="line">(Pdb) w             # where, 堆栈信息</div><div class="line"></div><div class="line"># 其它</div><div class="line">(Pdb) h             # help, 帮助</div><div class="line">(Pdb) q             # quit, 退出调试</div></pre></td></tr></table></figure></p>
<p>使用alias设置别名, 可大大提高调试速度!<br><strong>将下述文件存储为 <code>.pdbrc</code>, 然后放在系统目录 <code>~</code> 或 项目目录下, pdb会自动加载.</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># name it as ".pdbrc", then put into ~ or project folder</span></div><div class="line"></div><div class="line"><span class="comment"># Print a dictionary, sorted. %1 is the dict, %2 is the prefix for the names.</span></div><div class="line">alias p_ <span class="keyword">for</span> k <span class="keyword">in</span> sorted(%<span class="number">1.</span>keys()): <span class="keyword">print</span> <span class="string">"%s%-15s= %-80.80s"</span> % (<span class="string">"%2"</span>,k,repr(%<span class="number">1</span>[k]))</div><div class="line"></div><div class="line"><span class="comment"># Print the instance variables of a thing.</span></div><div class="line">alias pi p_ %<span class="number">1.</span>__dict__ %<span class="number">1.</span></div><div class="line"></div><div class="line"><span class="comment"># Print the instance variables of self.</span></div><div class="line">alias ps pi self</div><div class="line"></div><div class="line"><span class="comment"># Print the locals.</span></div><div class="line">alias pl p_ locals() local:</div><div class="line"></div><div class="line"><span class="comment"># Next and list, and step and list.</span></div><div class="line">alias nl n;;l</div><div class="line">alias sl s;;l</div><div class="line"></div><div class="line"><span class="comment"># go to line</span></div><div class="line">alias gl tbreak %*;;c %*;;l</div><div class="line"></div><div class="line"><span class="comment"># go to next</span></div><div class="line">alias g1 n;;l</div><div class="line">alias g2 n;;n;;l</div><div class="line">alias g3 n;;n;;n;;l</div><div class="line">alias g4 n;;n;;n;;n;;l</div><div class="line">alias g5 n;;n;;n;;n;;n;;l</div><div class="line">alias g6 n;;n;;n;;n;;n;;n;;nl</div><div class="line">alias g7 n;;n;;n;;n;;n;;n;;n;;l</div><div class="line">alias g8 n;;n;;n;;n;;n;;n;;n;;n;;l</div><div class="line">alias g9 n;;n;;n;;n;;n;;n;;n;;n;;n;;l</div><div class="line"></div><div class="line"><span class="comment"># Short cuts for walking up and down the stack</span></div><div class="line">alias uu u;;u</div><div class="line">alias uuu u;;u;;u</div><div class="line">alias uuuu u;;u;;u;;u</div><div class="line">alias uuuuu u;;u;;u;;u;;u</div><div class="line">alias dd d;;d</div><div class="line">alias ddd d;;d;;d</div><div class="line">alias dddd d;;d;;d;;d</div><div class="line">alias ddddd d;;d;;d;;d;;d</div></pre></td></tr></table></figure></p>
<h2 id="查看函数调用"><a href="#查看函数调用" class="headerlink" title="查看函数调用"></a>查看函数调用</h2><p>使用如下的装饰器, 即可观察该函数被调用的情况<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">findcaller</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">import</span> sys</div><div class="line">        f = sys._getframe()</div><div class="line">        filename = f.f_back.f_code.co_filename</div><div class="line">        lineno = f.f_back.f_lineno</div><div class="line">        <span class="keyword">print</span> <span class="string">'######################################'</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'&#123;&#125;, args: &#123;&#125;, &#123;&#125;'</span>.format(func, args, kwargs)</div><div class="line">        <span class="keyword">print</span> <span class="string">'called by &#123;&#125;, line &#123;&#125;'</span>.format(filename, lineno)</div><div class="line">        <span class="keyword">print</span> <span class="string">'######################################'</span></div><div class="line">        func(*args, **kwargs)</div><div class="line">    <span class="keyword">return</span> wrapper</div></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># example</span></div><div class="line"></div><div class="line"><span class="meta">@findcaller</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name=<span class="string">'world'</span>)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"hello"</span>, name</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    hello(<span class="string">'DRA&amp;PHO'</span>)</div></pre></td></tr></table></figure>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="doctest"><a href="#doctest" class="headerlink" title="doctest"></a>doctest</h2><p>简单的函数测试个人比较喜欢使用doctest, 因为一举两得, 即可以做测试案例, 又是极好的代码注释和范例<br>输出和预期一致时, 没有任何提醒. 输出和预期不一致时, 就会弹出错误.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name=<span class="string">'world'</span>)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    &gt;&gt;&gt; hello()</div><div class="line">    hello world</div><div class="line">    &gt;&gt;&gt; hello('DRA&amp;PHO')</div><div class="line">    hello, DRA&amp;PHO</div><div class="line">    """</div><div class="line">    <span class="keyword">print</span> <span class="string">"hello"</span>, name</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">import</span> doctest</div><div class="line">    doctest.testmod()</div></pre></td></tr></table></figure>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ul>
<li><a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/00140137128705556022982cfd844b38d050add8565dcb9000" target="_blank" rel="external">unittest</a>, 更专业的一种测试方法, 可批量执行</li>
<li><a href="http://pythonguidecn.readthedocs.io/zh/latest/writing/tests.html" target="_blank" rel="external">Python指南-测试你的代码</a><ul>
<li>单元测试(unittest)</li>
<li>文档测试(doctest)</li>
<li>测试工具: py.test, nose, tox, Unittest2, mock</li>
</ul>
</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://blog.csdn.net/yatere/article/details/6655445" target="_blank" rel="external">python 的日志logging模块学习</a></li>
<li><a href="http://www.jianshu.com/p/feb86c06c4f4" target="_blank" rel="external">python logging模块使用教程</a></li>
<li><a href="https://docs.python.org/3.1/library/logging.html" target="_blank" rel="external">15.6. logging — Logging facility for Python</a></li>
<li><a href="https://pythonconquerstheuniverse.wordpress.com/category/python-debugger/" target="_blank" rel="external">Debugging in Python</a></li>
<li><p><a href="http://www.onlamp.com/pub/a/python/2005/09/01/debugger.html" target="_blank" rel="external">Interactive Debugging in Python</a></p>
</li>
<li><p><a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/00140137128705556022982cfd844b38d050add8565dcb9000" target="_blank" rel="external">廖雪峰的官方网站-单元测试</a></p>
</li>
<li><p><a href="http://pythonguidecn.readthedocs.io/zh/latest/writing/tests.html" target="_blank" rel="external">Python 指南-测试你的代码</a></p>
</li>
<li><p><a href="http://www.jianshu.com/p/ae5bc6093337" target="_blank" rel="external">python笔记_查看函数调用栈的一个小技巧</a></p>
</li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python 延时及超时]]></title>
      <url>https://draapho.github.io/2016/11/28/1622-python-time/</url>
      <content type="html"><![CDATA[<h1 id="实用的例子"><a href="#实用的例子" class="headerlink" title="实用的例子"></a>实用的例子</h1><h2 id="time-sleep-单线程阻塞延时"><a href="#time-sleep-单线程阻塞延时" class="headerlink" title="time.sleep 单线程阻塞延时"></a><code>time.sleep</code> 单线程阻塞延时</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">time_sleep</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">        <span class="keyword">print</span> i</div><div class="line">        time.sleep(<span class="number">1</span>)       <span class="comment"># delay 1s, not that accurate</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    start = time.time()</div><div class="line">    time_sleep()</div><div class="line">    end = time.time()</div><div class="line">    <span class="keyword">print</span> <span class="string">"run time: &#123;&#125;"</span>.format(end - start)</div></pre></td></tr></table></figure>
<h2 id="time-time-单线程非阻塞延时-超时"><a href="#time-time-单线程非阻塞延时-超时" class="headerlink" title="time.time 单线程非阻塞延时/超时"></a><code>time.time</code> 单线程非阻塞延时/超时</h2><p>通过比较时间戳实现, 多用于循环中的延时/超时判断</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">time_compare</span><span class="params">()</span>:</span></div><div class="line">    timeout = time.time() + <span class="number">10</span>  <span class="comment"># 10s delay</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</div><div class="line">        <span class="keyword">print</span> i</div><div class="line">        time.sleep(<span class="number">1</span>)</div><div class="line">        <span class="keyword">if</span> timeout &lt; time.time(): <span class="comment"># compare the timestamps</span></div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"time out !"</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    start = time.time()</div><div class="line">    time_compare()</div><div class="line">    end = time.time()</div><div class="line">    <span class="keyword">print</span> <span class="string">"run time: &#123;&#125;"</span>.format(end - start)</div></pre></td></tr></table></figure>
<h2 id="threading-Timer-多线程非阻塞延时"><a href="#threading-Timer-多线程非阻塞延时" class="headerlink" title="threading.Timer 多线程非阻塞延时"></a><code>threading.Timer</code> 多线程非阻塞延时</h2><p>这个例子中, 会先执行完 <code>threading_main</code>. 5s后, 才会执行 <code>threading_sub</code><br>子线程函数可以带参 <code>threading.Timer(interval, function, args=[], kwargs={})</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">threading_main</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"main thread: start"</span></div><div class="line">    thrd = threading.Timer(<span class="number">5.0</span>, threading_sub, args = [<span class="string">"sub thread"</span>])</div><div class="line">    thrd.start()</div><div class="line">    <span class="keyword">print</span> <span class="string">"main thread: end"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">threading_sub</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">print</span> name + <span class="string">": hello"</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    start = time.time()</div><div class="line">    threading_main()</div><div class="line">    end = time.time()</div><div class="line">    <span class="keyword">print</span> <span class="string">"run time: &#123;&#125;"</span>.format(end - start)</div></pre></td></tr></table></figure>
<h2 id="threading-Timer-threading-join-多线程阻塞延时"><a href="#threading-Timer-threading-join-多线程阻塞延时" class="headerlink" title="threading.Timer + threading.join 多线程阻塞延时"></a><code>threading.Timer</code> + <code>threading.join</code> 多线程阻塞延时</h2><p>使用 <code>join</code> 语句, 让主线程等待子线程完成后才继续执行<br>子线程函数可以带参 <code>threading.Timer(interval, function, args=[], kwargs={})</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">threading_main</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"main thread: start"</span></div><div class="line">    thrd = threading.Timer(<span class="number">5.0</span>, threading_sub, args = [<span class="string">"sub thread"</span>])</div><div class="line">    thrd.start()</div><div class="line">    <span class="keyword">print</span> <span class="string">"main thread: wait"</span></div><div class="line">    thrd.join()     <span class="comment"># add this line</span></div><div class="line">    <span class="comment"># thrd.join(timeout=2)  # just wait 2s then continue</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"main thread: end"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">threading_sub</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">print</span> name + <span class="string">": hello"</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    start = time.time()</div><div class="line">    threading_main()</div><div class="line">    end = time.time()</div><div class="line">    <span class="keyword">print</span> <span class="string">"run time: &#123;&#125;"</span>.format(end - start)</div></pre></td></tr></table></figure>
<h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><h2 id="装饰器-使用KThread-localtrace结束线程-通用性最好-性能较低"><a href="#装饰器-使用KThread-localtrace结束线程-通用性最好-性能较低" class="headerlink" title="装饰器, 使用KThread,.localtrace结束线程. (通用性最好, 性能较低)"></a>装饰器, 使用<code>KThread,.localtrace</code>结束线程. (通用性最好, 性能较低)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timeout</span><span class="params">(Exception)</span>:</span></div><div class="line">    <span class="string">"""function run timeout"""</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">KThread</span><span class="params">(threading.Thread)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></div><div class="line">        threading.Thread.__init__(self, *args, **kwargs)</div><div class="line">        self.killed = <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""Start the thread."""</span></div><div class="line">        self.__run_backup = self.run</div><div class="line">        <span class="comment"># Force the Thread to install our trace.</span></div><div class="line">        self.run = self.__run</div><div class="line">        threading.Thread.start(self)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""Hacked run function, which installs the trace."""</span></div><div class="line">        sys.settrace(self.globaltrace)</div><div class="line">        self.__run_backup()</div><div class="line">        self.run = self.__run_backup</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">globaltrace</span><span class="params">(self, frame, why, arg)</span>:</span></div><div class="line">        <span class="keyword">if</span> why == <span class="string">'call'</span>:</div><div class="line">            <span class="keyword">return</span> self.localtrace</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">localtrace</span><span class="params">(self, frame, why, arg)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.killed:</div><div class="line">            <span class="keyword">if</span> why == <span class="string">'line'</span>:</div><div class="line">                <span class="keyword">raise</span> SystemExit()</div><div class="line">        <span class="keyword">return</span> self.localtrace</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kill</span><span class="params">(self)</span>:</span></div><div class="line">        self.killed = <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeout</span><span class="params">(timeout, default=None, try_except=False)</span>:</span></div><div class="line">    <span class="string">"""Timeout decorator, parameter in timeout."""</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">timeout_decorator</span><span class="params">(func)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">new_func</span><span class="params">(oldfunc, result, oldfunc_args, oldfunc_kwargs)</span>:</span></div><div class="line">            result.append(oldfunc(*oldfunc_args, **oldfunc_kwargs))</div><div class="line"></div><div class="line">        <span class="string">"""Wrap the original function."""</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">func_wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            result = []</div><div class="line">            <span class="comment"># create new args for _new_func, because we want to get the func</span></div><div class="line">            <span class="comment"># return val to result list</span></div><div class="line">            new_kwargs = &#123;</div><div class="line">                <span class="string">'oldfunc'</span>: func,</div><div class="line">                <span class="string">'result'</span>: result,</div><div class="line">                <span class="string">'oldfunc_args'</span>: args,</div><div class="line">                <span class="string">'oldfunc_kwargs'</span>: kwargs</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            thd = KThread(target=new_func, args=(), kwargs=new_kwargs)</div><div class="line">            thd.start()</div><div class="line">            thd.join(timeout)</div><div class="line">            <span class="comment"># timeout or finished?</span></div><div class="line">            isAlive = thd.isAlive()</div><div class="line">            thd.kill()</div><div class="line"></div><div class="line">            <span class="keyword">if</span> isAlive:</div><div class="line">                <span class="keyword">if</span> try_except <span class="keyword">is</span> <span class="keyword">True</span>:</div><div class="line">                    <span class="keyword">raise</span> Timeout(<span class="string">"&#123;&#125; Timeout: &#123;&#125; seconds."</span>.format(func, timeout))</div><div class="line">                <span class="keyword">return</span> default</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">return</span> result[<span class="number">0</span>]</div><div class="line"></div><div class="line">        func_wrapper.__name__ = func.__name__</div><div class="line">        func_wrapper.__doc__ = func.__doc__</div><div class="line">        <span class="keyword">return</span> func_wrapper</div><div class="line"></div><div class="line">    <span class="keyword">return</span> timeout_decorator</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="meta">    @timeout(5)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(name)</span>:</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">            print(<span class="string">"&#123;&#125;: &#123;&#125;"</span>.format(name, i))</div><div class="line">            time.sleep(<span class="number">1</span>)</div><div class="line">        <span class="keyword">return</span> <span class="string">"finished"</span></div><div class="line"></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">print</span> count(<span class="string">"thread1"</span>)</div><div class="line">        <span class="keyword">print</span> count(<span class="string">"thread2"</span>)</div><div class="line">    <span class="keyword">except</span> Timeout <span class="keyword">as</span> e:</div><div class="line">        <span class="keyword">print</span> e</div></pre></td></tr></table></figure>
<p>将上面的例子, 改为函数调用模式, 这样timeout参数可灵活设置!</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timeout</span><span class="params">(Exception)</span>:</span></div><div class="line">    <span class="string">"""function run timeout"""</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">KThread</span><span class="params">(threading.Thread)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></div><div class="line">        threading.Thread.__init__(self, *args, **kwargs)</div><div class="line">        self.killed = <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""Start the thread."""</span></div><div class="line">        self.__run_backup = self.run</div><div class="line">        <span class="comment"># Force the Thread to install our trace.</span></div><div class="line">        self.run = self.__run</div><div class="line">        threading.Thread.start(self)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""Hacked run function, which installs the trace."""</span></div><div class="line">        sys.settrace(self.globaltrace)</div><div class="line">        self.__run_backup()</div><div class="line">        self.run = self.__run_backup</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">globaltrace</span><span class="params">(self, frame, why, arg)</span>:</span></div><div class="line">        <span class="keyword">if</span> why == <span class="string">'call'</span>:</div><div class="line">            <span class="keyword">return</span> self.localtrace</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">localtrace</span><span class="params">(self, frame, why, arg)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.killed:</div><div class="line">            <span class="keyword">if</span> why == <span class="string">'line'</span>:</div><div class="line">                <span class="keyword">raise</span> SystemExit()</div><div class="line">        <span class="keyword">return</span> self.localtrace</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kill</span><span class="params">(self)</span>:</span></div><div class="line">        self.killed = <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeout_call</span><span class="params">(timeout, func, args=<span class="params">()</span>, kwargs=None, default=None, try_except=False)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">new_func</span><span class="params">(oldfunc, result, oldfunc_args, oldfunc_kwargs)</span>:</span></div><div class="line">            result.append(oldfunc(*oldfunc_args, **oldfunc_kwargs))</div><div class="line"></div><div class="line">    result = []</div><div class="line">    kwargs = &#123;&#125; <span class="keyword">if</span> kwargs <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">else</span> kwargs</div><div class="line">    <span class="comment"># create new args for _new_func, because we want to get the func</span></div><div class="line">    <span class="comment"># return val to result list</span></div><div class="line">    new_kwargs = &#123;</div><div class="line">        <span class="string">'oldfunc'</span>: func,</div><div class="line">        <span class="string">'result'</span>: result,</div><div class="line">        <span class="string">'oldfunc_args'</span>: args,</div><div class="line">        <span class="string">'oldfunc_kwargs'</span>: kwargs</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    thd = KThread(target=new_func, args=(), kwargs=new_kwargs)</div><div class="line">    thd.start()</div><div class="line">    thd.join(timeout)</div><div class="line">    <span class="comment"># timeout or finished?</span></div><div class="line">    isAlive = thd.isAlive()</div><div class="line">    thd.kill()</div><div class="line"></div><div class="line">    <span class="keyword">if</span> isAlive:</div><div class="line">        <span class="keyword">if</span> try_except <span class="keyword">is</span> <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">raise</span> Timeout(<span class="string">"&#123;&#125; Timeout: &#123;&#125; seconds."</span>.format(func, timeout))</div><div class="line">        <span class="keyword">return</span> default</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> result[<span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="keyword">import</span> time</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(name)</span>:</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">            print(<span class="string">"&#123;&#125;: &#123;&#125;"</span>.format(name, i))</div><div class="line">            time.sleep(<span class="number">1</span>)</div><div class="line">        <span class="keyword">return</span> <span class="string">"finished"</span></div><div class="line"></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">print</span> timeout_call(<span class="number">5</span>, count, [<span class="string">"thread1"</span>])</div><div class="line">        <span class="keyword">print</span> timeout_call(<span class="number">5</span>, count, [<span class="string">"thread2"</span>])</div><div class="line">    <span class="keyword">except</span> Timeout <span class="keyword">as</span> e:</div><div class="line">        <span class="keyword">print</span> e</div></pre></td></tr></table></figure>
<h2 id="装饰器-使用thread-interrupt-main-结束线程-仅可用于主线程"><a href="#装饰器-使用thread-interrupt-main-结束线程-仅可用于主线程" class="headerlink" title="装饰器, 使用thread.interrupt_main()结束线程. (仅可用于主线程)"></a>装饰器, 使用<code>thread.interrupt_main()</code>结束线程. (仅可用于主线程)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> thread</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeout_quit</span><span class="params">(fn_name)</span>:</span></div><div class="line">    thread.interrupt_main()     <span class="comment"># raises KeyboardInterrupt</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeout</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    use as decorator to exit process if</div><div class="line">    function takes longer than s seconds</div><div class="line">    '''</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(fn)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            timer = threading.Timer(s, timeout_quit, args=[fn.__name__])</div><div class="line">            timer.start()</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                result = fn(*args, **kwargs)</div><div class="line">            <span class="keyword">finally</span>:</div><div class="line">                timer.cancel()</div><div class="line">            <span class="keyword">return</span> result</div><div class="line">        <span class="keyword">return</span> inner</div><div class="line">    <span class="keyword">return</span> outer</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="meta">    @timeout(5)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">processNum</span><span class="params">(num)</span>:</span></div><div class="line">        time.sleep(<span class="number">2</span>)</div><div class="line">        <span class="keyword">return</span> num</div><div class="line"></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">print</span> processNum(<span class="number">1</span>)</div><div class="line">    <span class="keyword">except</span> KeyboardInterrupt:</div><div class="line">        <span class="keyword">print</span> <span class="string">"timeout"</span></div></pre></td></tr></table></figure>
<h1 id="学习过程中的例子"><a href="#学习过程中的例子" class="headerlink" title="学习过程中的例子"></a>学习过程中的例子</h1><h2 id="threading-Timer-threading-join-多线程阻塞延时-1"><a href="#threading-Timer-threading-join-多线程阻塞延时-1" class="headerlink" title="threading.Timer + threading.join 多线程阻塞延时"></a><code>threading.Timer</code> + <code>threading.join</code> 多线程阻塞延时</h2><p>使用 <code>join</code> 语句, 让主线程等待子线程完成后才继续执行<br>子线程函数可以带参 <code>threading.Timer(interval, function, args=[], kwargs={})</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">threading_main</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"main thread: start"</span></div><div class="line">    thrd = threading.Timer(<span class="number">5.0</span>, threading_sub, args = [<span class="string">"sub thread"</span>])</div><div class="line">    thrd.start()</div><div class="line">    <span class="keyword">print</span> <span class="string">"main thread: wait"</span></div><div class="line">    thrd.join()     <span class="comment"># add this line</span></div><div class="line">    <span class="comment"># thrd.join(timeout=2)  # just wait 2s then continue</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"main thread: end"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">threading_sub</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">print</span> name + <span class="string">": hello"</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    start = time.time()</div><div class="line">    threading_main()</div><div class="line">    end = time.time()</div><div class="line">    <span class="keyword">print</span> <span class="string">"run time: &#123;&#125;"</span>.format(end - start)</div></pre></td></tr></table></figure>
<h2 id="join-timeout-10-多进程超时判断"><a href="#join-timeout-10-多进程超时判断" class="headerlink" title="join(timeout=10) 多进程超时判断"></a><code>join(timeout=10)</code> 多进程超时判断</h2><p><code>multiprocessing</code>的本质是进程, 但是提供了类似于<code>threading</code>的一系列方法.<br>使用 <code>multiprocessing.terminate</code> 语句, 让主线程可以杀死子线程<br>子进程函数可以带参 multiprocessing.Process(group=None, target=None, name=None, args=(), kwargs={})<br>multiprocessing 没有 <code>Timer()</code> 方法的, 无法方便的延时执行.</p>
<p>注意, 这里没有办法使用 threading 类来实现. 因为没有 <code>terminate()</code> 方法,<br>而如果用<code>signal</code>方法来结束线程, 有两个限制. 1, windows不支持. 2, 子线程不支持</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> multiprocessing</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">processing_main</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"main process: start"</span></div><div class="line">    prcs = multiprocessing.Process(</div><div class="line">        target=processing_sub, args=[<span class="string">"sub process"</span>])</div><div class="line">    prcs.start()</div><div class="line">    <span class="keyword">print</span> <span class="string">"main process: wait"</span></div><div class="line">    prcs.join(timeout=<span class="number">10</span>)</div><div class="line"></div><div class="line">    <span class="comment"># If thread is still active</span></div><div class="line">    <span class="keyword">if</span> prcs.is_alive():</div><div class="line">        <span class="keyword">print</span> <span class="string">"main process: kill"</span></div><div class="line">        prcs.terminate()</div><div class="line">        prcs.join()</div><div class="line">    <span class="keyword">print</span> <span class="string">"main process: end"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">processing_sub</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</div><div class="line">        <span class="comment"># if use print, can not show immediately in the console.</span></div><div class="line">        logging.error(<span class="string">"&#123;&#125;: &#123;&#125;"</span>.format(name, i))</div><div class="line">        time.sleep(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    start = time.time()</div><div class="line">    processing_main()</div><div class="line">    end = time.time()</div><div class="line">    <span class="keyword">print</span> <span class="string">"run time: &#123;&#125;"</span>.format(end - start)</div></pre></td></tr></table></figure>
<h2 id="multiprocessing-pool-实现超时判断"><a href="#multiprocessing-pool-实现超时判断" class="headerlink" title="multiprocessing.pool 实现超时判断"></a><code>multiprocessing.pool</code> 实现超时判断</h2><p>说说python下的 thread 和 process.<br>thread, 提供了signal结束方式, 但是windows不支持, 仅主线程可用! 换句话说, 终止线程很繁琐<br>process, 提供了terminate结束方式, 但是参数传递限制条件很多, (必须可以是pickle的…)</p>
<p><strong>下面的代码是有问题的!!!</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> multiprocessing.pool</div><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeout</span><span class="params">(timeout, default=None, try_except=False)</span>:</span></div><div class="line">    <span class="string">"""Timeout decorator, parameter in seconds."""</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">timeout_decorator</span><span class="params">(item)</span>:</span></div><div class="line">        <span class="string">"""Wrap the original function."""</span></div><div class="line"><span class="meta">        @functools.wraps(item)</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">func_wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            <span class="string">"""Closure for function."""</span></div><div class="line">            pool = multiprocessing.pool.ThreadPool(processes=<span class="number">1</span>)</div><div class="line">            <span class="comment"># pool = multiprocessing.pool.Pool(processes=1) ## raise error about pickle problem!!!</span></div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                async_result = pool.apply_async(item, args, kwargs)</div><div class="line">                val = async_result.get(timeout)</div><div class="line">            <span class="keyword">except</span> multiprocessing.TimeoutError:</div><div class="line">                pool.terminate() <span class="comment">## not work here, because it is acutally thread, not process!!!</span></div><div class="line">                val = default</div><div class="line">                <span class="keyword">if</span> try_except <span class="keyword">is</span> <span class="keyword">True</span>:</div><div class="line">                    <span class="keyword">raise</span> multiprocessing.TimeoutError</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                pool.close()</div><div class="line">                pool.join()</div><div class="line">            <span class="keyword">return</span> val</div><div class="line">        <span class="keyword">return</span> func_wrapper</div><div class="line">    <span class="keyword">return</span> timeout_decorator</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="meta">    @timeout(5)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(name)</span>:</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">            print(<span class="string">"&#123;&#125;: &#123;&#125;"</span>.format(name, i))</div><div class="line">            time.sleep(<span class="number">1</span>)</div><div class="line">        <span class="keyword">return</span> <span class="string">"finished"</span></div><div class="line"></div><div class="line">    start = time.time()</div><div class="line">    <span class="keyword">print</span> count(<span class="string">"thread1"</span>)</div><div class="line">    <span class="keyword">print</span> count(<span class="string">"thread2"</span>)  <span class="comment">## you can find problem here, thread1 is still running...</span></div><div class="line">    end = time.time()</div><div class="line">    <span class="keyword">print</span> <span class="string">"run time: &#123;&#125;"</span>.format(end - start)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> multiprocessing</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeout_call</span><span class="params">(timeout, func, args=<span class="params">()</span>, kwargs=None, default=None, try_except=False)</span>:</span></div><div class="line">    kwargs = &#123;&#125; <span class="keyword">if</span> kwargs <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">else</span> kwargs</div><div class="line">    pool = multiprocessing.Pool(processes=<span class="number">1</span>)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        async_result = pool.apply_async(func, args, kwargs)</div><div class="line">        val = async_result.get(timeout)</div><div class="line">    <span class="keyword">except</span> multiprocessing.TimeoutError:</div><div class="line">        pool.terminate()</div><div class="line">        val = default</div><div class="line">        <span class="keyword">if</span> try_except <span class="keyword">is</span> <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">raise</span> multiprocessing.TimeoutError</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        pool.close()</div><div class="line">        pool.join()</div><div class="line">    <span class="keyword">return</span> val</div><div class="line"></div><div class="line"><span class="comment">################### example ##########</span></div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">        logging.error(<span class="string">"&#123;&#125;: &#123;&#125;"</span>.format(name, i))</div><div class="line">        time.sleep(<span class="number">1</span>)</div><div class="line">    <span class="keyword">return</span> <span class="string">"finished"</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="comment">## if count function is here, will raise error!!!</span></div><div class="line"></div><div class="line">    start = time.time()</div><div class="line">    <span class="keyword">print</span> timeout_call(<span class="number">5</span>, count, [<span class="string">"process1"</span>])</div><div class="line">    <span class="keyword">print</span> timeout_call(<span class="number">5</span>, count, [<span class="string">"process2"</span>])</div><div class="line">    end = time.time()</div><div class="line">    <span class="keyword">print</span> <span class="string">"run time: &#123;&#125;"</span>.format(end - start)</div></pre></td></tr></table></figure>
<h2 id="第三方方案"><a href="#第三方方案" class="headerlink" title="第三方方案"></a>第三方方案</h2><ul>
<li><a href="https://pypi.python.org/pypi/timeoutcontext/1.1.1" target="_blank" rel="external">timeoutcontext 1.1.1</a><ul>
<li>基于signal实现, 不支持windows系统, 不支持子线程</li>
</ul>
</li>
<li><a href="https://pypi.python.org/pypi/timeout-decorator/0.3.2" target="_blank" rel="external">timeout-decorator 0.3.2</a><ul>
<li>signal或Multithreading可选</li>
<li>使用signal时, 不支持windows, 不支持子线程</li>
<li>使用Multithreading时, 无法返回不能pickle的数据(因为需要通过pickle来跨进程交换数据)</li>
</ul>
</li>
<li><a href="https://pypi.python.org/pypi/stopit#stopit-threading-timeoutable" target="_blank" rel="external">stopit 1.1.1</a><ul>
<li>threading或signal可选</li>
<li>计时误差太大, 不可接受(翻倍的误差)</li>
</ul>
</li>
</ul>
<h2 id="使用gevent协程"><a href="#使用gevent协程" class="headerlink" title="使用gevent协程"></a>使用gevent协程</h2><p>参考 <a href="http://xlambda.com/gevent-tutorial/#_6" target="_blank" rel="external">gevent程序员指南之超时</a><br>参考 <a href="https://my.oschina.net/1123581321/blog/208671" target="_blank" rel="external">gevent 延时、定时、超时、io等待、动态添加任务</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> gevent</div><div class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> Timeout</div><div class="line"></div><div class="line">time_to_wait = <span class="number">5</span> <span class="comment"># seconds</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TooLong</span><span class="params">(Exception)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">with</span> Timeout(time_to_wait, TooLong):</div><div class="line">    gevent.sleep(<span class="number">10</span>)</div></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://stackoverflow.com/questions/492519/timeout-on-a-function-call" target="_blank" rel="external">Timeout on a function call</a>, 关于此问题的讨论(signal / multiprocessing)</li>
<li><a href="https://my.oschina.net/leejun2005/blog/607741" target="_blank" rel="external">论 Python 装饰器控制函数 Timeout 的正确姿势</a>, 装饰器方式, 性能较低</li>
<li><a href="http://xlambda.com/gevent-tutorial/" target="_blank" rel="external">gevent程序员指南</a></li>
<li><a href="https://my.oschina.net/1123581321/blog/208671" target="_blank" rel="external">gevent 延时、定时、超时、io等待、动态添加任务</a></li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python 字符串处理]]></title>
      <url>https://draapho.github.io/2016/11/24/1621-python-string/</url>
      <content type="html"><![CDATA[<h1 id="进制转换-编码转换"><a href="#进制转换-编码转换" class="headerlink" title="进制转换 / 编码转换"></a>进制转换 / 编码转换</h1><ul>
<li><a href="https://docs.python.org/2/library/functions.html#hex" target="_blank" rel="external">hex</a>, 十进制-&gt;十六进制字符串</li>
<li><a href="https://docs.python.org/2/library/functions.html#oct" target="_blank" rel="external">oct</a>, 十进制-&gt;八进制字符串</li>
<li><a href="https://docs.python.org/2/library/functions.html#oct" target="_blank" rel="external">oct</a>, 十进制-&gt;八进制字符串</li>
<li><a href="https://docs.python.org/2/library/functions.html#chr" target="_blank" rel="external">chr</a>, 十进制-&gt;ASCII码字符</li>
<li><a href="https://docs.python.org/2/library/functions.html#unichr" target="_blank" rel="external">unichr</a>,  十进制-&gt;unicode编码</li>
<li><a href="https://docs.python.org/2/library/functions.html#ord" target="_blank" rel="external">ord</a>,  ascii码/unicode编码-&gt;十进制</li>
<li><a href="https://docs.python.org/2/library/binascii.html" target="_blank" rel="external">binascii</a>, 字符串&lt;-&gt;字节流</li>
<li><a href="https://docs.python.org/2/library/struct.html" target="_blank" rel="external">struct</a>, 字符串&lt;-&gt;字节流<ul>
<li>struct中的 <a href="https://docs.python.org/2/library/struct.html#format-characters" target="_blank" rel="external">fmt</a> 详解</li>
</ul>
</li>
</ul>
<ul>
<li><a href="https://docs.python.org/2/library/stdtypes.html#string-methods" target="_blank" rel="external">str.decode / str.encode</a>, 基于unicode的编码转换</li>
<li><a href="https://docs.python.org/2/library/codecs.html#standard-encodings" target="_blank" rel="external">Standard Encodings</a>, python支持的编码表<ul>
<li>常用的有 <code>hex</code>, <code>utf-8</code>, <code>unicode_escape</code></li>
</ul>
</li>
<li><a href="http://blog.csdn.net/pipisorry/article/details/44136297" target="_blank" rel="external">python字符串编码及乱码解决方案</a><ul>
<li>解释了unicode与str在python2.7 和 python3下的区别. <code>str.decode</code>和<code>str.encode</code>的含义</li>
<li>python2.7, 默认str编码为ascii, 需要使用<code>s=u&quot;人生苦短&quot;</code>来表示unicode编码字符串(便于跨平台统一)</li>
<li><strong>终极原则： decode early, unicode everywhere, encode late</strong></li>
</ul>
</li>
</ul>
<ul>
<li><a href="https://docs.python.org/2/library/functions.html" target="_blank" rel="external">更多的python内置函数</a>如下<ul>
<li>int(x [,base ]), 将x转换为一个整数</li>
<li>long(x [,base ]), 将x转换为一个长整数</li>
<li>float(x), 将x转换到一个浮点数</li>
<li>complex(real [,imag ]), 创建一个复数</li>
<li>str(x) , 将对象 x 转换为字符串</li>
<li>repr(x), 将对象 x 转换为表达式字符串</li>
<li>eval(str), 用来计算在字符串中的有效Python表达式,并返回一个对象</li>
<li>tuple(s), 将序列 s 转换为一个元组</li>
<li>list(s), 将序列 s 转换为一个列表</li>
</ul>
</li>
</ul>
<h2 id="十进制-lt-gt-十六进制字符串"><a href="#十进制-lt-gt-十六进制字符串" class="headerlink" title="十进制&lt;-&gt;十六进制字符串"></a>十进制&lt;-&gt;十六进制字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>hex(<span class="number">255</span>)</div><div class="line"><span class="string">'0xff'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>float.hex(<span class="number">1.0</span>)</div><div class="line"><span class="string">'0x1.0000000000000p+0'</span></div><div class="line"></div><div class="line"><span class="comment"># 可以有前缀 0b/0B(二进制), 0o/0O/0(八进制), or 0x/0X(十六进制),</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'0xff'</span>, <span class="number">16</span>)</div><div class="line"><span class="number">255</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'ff'</span>, <span class="number">16</span>)</div><div class="line"><span class="number">255</span></div></pre></td></tr></table></figure>
<h2 id="二进制字符串-lt-gt-十六进制字符串"><a href="#二进制字符串-lt-gt-十六进制字符串" class="headerlink" title="二进制字符串&lt;-&gt;十六进制字符串"></a>二进制字符串&lt;-&gt;十六进制字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>bin(int(<span class="string">'0xff'</span>, <span class="number">16</span>))</div><div class="line"><span class="string">'0b11111111'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>hex(int(<span class="string">'0b1010'</span>,<span class="number">2</span>))</div><div class="line"><span class="string">'0xa'</span></div></pre></td></tr></table></figure>
<h2 id="十进制-lt-gt-unicode字符串-lt-gt-utf8编码"><a href="#十进制-lt-gt-unicode字符串-lt-gt-utf8编码" class="headerlink" title="十进制&lt;-&gt;unicode字符串&lt;-&gt;utf8编码"></a>十进制&lt;-&gt;unicode字符串&lt;-&gt;utf8编码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="string">u'ñ'</span>            <span class="comment"># u表示使用unicode编码存储.</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c                   <span class="comment"># 显示c在电脑中的值</span></div><div class="line"><span class="string">u'\xf1'</span>                 <span class="comment"># 即 u'\u00f1', \u需要2byte!</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ord(c)</div><div class="line"><span class="number">241</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>unichr(<span class="number">241</span>)</div><div class="line"><span class="string">u'\xf1'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u'\u00f1'</span>.encode(<span class="string">'utf-8'</span>)       <span class="comment"># unicode-&gt;utf-8</span></div><div class="line"><span class="string">'\xc3\xb1'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'\xc3\xb1'</span>.decode(<span class="string">'utf-8'</span>)      <span class="comment"># utf-8-&gt;unicode</span></div><div class="line"><span class="string">u'\xf1'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">u'\u00f1'</span>                 <span class="comment"># 打印显示</span></div><div class="line">ñ</div></pre></td></tr></table></figure>
<h2 id="字节流-lt-gt-整数"><a href="#字节流-lt-gt-整数" class="headerlink" title="字节流&lt;-&gt;整数"></a>字节流&lt;-&gt;整数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使用 struct</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> struct</div><div class="line"></div><div class="line"><span class="comment"># 字节流-&gt;整数</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>struct.unpack(<span class="string">'&lt;hh'</span>, bytes(<span class="string">b'\x01\x00\x00\x00'</span>))    <span class="comment"># 转义为short型整数</span></div><div class="line">(<span class="number">1</span>, <span class="number">0</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>struct.unpack(<span class="string">'&lt;L'</span>, bytes(<span class="string">b'\x01\x00\x00\x00'</span>))     <span class="comment"># 转义为long型整数</span></div><div class="line">(<span class="number">1</span>,)</div><div class="line"></div><div class="line"><span class="comment"># 整数-&gt;字节流</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>struct.pack(<span class="string">'&lt;HH'</span>, <span class="number">1</span>,<span class="number">2</span>)</div><div class="line"><span class="string">'\x01\x00\x02\x00'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>struct.pack(<span class="string">'&lt;LL'</span>, <span class="number">1</span>,<span class="number">2</span>)</div><div class="line"><span class="string">'\x01\x00\x00\x00\x02\x00\x00\x00'</span></div></pre></td></tr></table></figure>
<h2 id="几个实用的例子"><a href="#几个实用的例子" class="headerlink" title="几个实用的例子"></a>几个实用的例子</h2><ul>
<li>去掉字符串中的跳脱符, 生成标准的unicode字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u'\\u4f60\\u4f60'</span>.decode(<span class="string">'unicode_escape'</span>)</div><div class="line"><span class="string">u'\u4f60\u4f60'</span></div></pre></td></tr></table></figure>
<ul>
<li>解码16进制字符串：也可以直接 print 出来</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>b=<span class="string">'\xd1\xee\xba\xea\xc1\xc1\n'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> unicode(b, <span class="string">'gbk'</span>).encode(<span class="string">'utf8'</span>) <span class="comment"># 等同于 print b.decode('gbk').encode('utf8')</span></div></pre></td></tr></table></figure>
<ul>
<li>bin &lt;-&gt; ascii</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 字符串-&gt;ASCII编码串</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'1234'</span>.encode(<span class="string">"hex"</span>)</div><div class="line"><span class="string">'31323334'</span></div><div class="line"><span class="comment"># ASCII编码串-&gt;字符串</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'3031'</span>.decode(<span class="string">"hex"</span>)</div><div class="line"><span class="string">'01'</span></div><div class="line"></div><div class="line"><span class="comment"># 使用 binascii</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> binascii</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>binascii.hexlify(<span class="string">"1234"</span>)    <span class="comment"># 或者 binascii.b2a_hex("1234")</span></div><div class="line"><span class="string">'31323334'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>binascii.unhexlify(<span class="string">"3031"</span>)  <span class="comment"># 或者 binascii.a2b_hex("3031")</span></div><div class="line"><span class="string">'01'</span></div></pre></td></tr></table></figure>
<h1 id="字符串-lt-gt-数值-列表-字典"><a href="#字符串-lt-gt-数值-列表-字典" class="headerlink" title="字符串&lt;-&gt;数值/列表/字典"></a>字符串&lt;-&gt;数值/列表/字典</h1><h2 id="字符串-lt-gt-数值"><a href="#字符串-lt-gt-数值" class="headerlink" title="字符串&lt;-&gt;数值"></a>字符串&lt;-&gt;数值</h2><ul>
<li>int(x [,base ]), 将x转换为一个整数</li>
<li>long(x [,base ]), 将x转换为一个长整数</li>
<li>float(x), 将x转换到一个浮点数</li>
<li><strong>使用re正则表达式, 实用范例</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">"test: 12a345 to 325.-123.34"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># this can get the number from str like "good456sdg78", return ['456', '78']</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> re.findall(<span class="string">r'\d+'</span>, str)</div><div class="line">[<span class="string">'12'</span>, <span class="string">'345'</span>, <span class="string">'325'</span>, <span class="string">'123'</span>, <span class="string">'34'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># this can get the number seperate in str like "good12sd 45 78 ", return ['45', '78']</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> re.findall(<span class="string">r'\b\d+\b'</span>, str)</div><div class="line">[<span class="string">'325'</span>, <span class="string">'123'</span>, <span class="string">'34'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># more complicated, can recognize and return [30, -10, 34.12, -12.34, 67.56E+3, -14.23e-2]</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> re.findall(<span class="string">"[-+]?\d+[\.]?\d+[eE]?[-+]?\d*"</span>, str)</div><div class="line">[<span class="string">'12'</span>, <span class="string">'345'</span>, <span class="string">'325'</span>, <span class="string">'-123.34'</span>]</div></pre></td></tr></table></figure>
<h2 id="字符串-gt-列表-字典-去掉引号"><a href="#字符串-gt-列表-字典-去掉引号" class="headerlink" title="字符串-&gt;列表/字典 (去掉引号)"></a>字符串-&gt;列表/字典 (去掉引号)</h2><ul>
<li>eval(), 将str当成有效的表达式来求值并返回计算结果. 在确保str源安全的情况下可用.<ul>
<li><a href="http://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html" target="_blank" rel="external">Eval really is dangerous</a></li>
<li><a href="http://blog.csdn.net/zhanh1218/article/details/37562167" target="_blank" rel="external">Python:eval的妙用和滥用</a></li>
</ul>
</li>
<li><a href="https://docs.python.org/2/library/ast.html#ast-helpers" target="_blank" rel="external">ast.literal_eval()</a>, eval的替代品, 更安全</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 字符串-&gt;列表</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>eval(<span class="string">"[1,2,3]"</span>)</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"></div><div class="line"><span class="comment"># 字符串-&gt;字典</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>eval(<span class="string">"&#123;'one':1, 'two':2&#125;"</span>)</div><div class="line">&#123;<span class="string">'two'</span>: <span class="number">2</span>, <span class="string">'one'</span>: <span class="number">1</span>&#125;</div></pre></td></tr></table></figure>
<h2 id="字符串-lt-gt-列表"><a href="#字符串-lt-gt-列表" class="headerlink" title="字符串&lt;-&gt;列表"></a>字符串&lt;-&gt;列表</h2><ul>
<li>str.join(), 列表-&gt;字符串</li>
<li>str.split(), 字符串-&gt;列表</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 字符串-&gt;列表</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst = list(<span class="string">"hello"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst</div><div class="line">[<span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</div><div class="line"></div><div class="line"><span class="comment"># 列表-&gt;字符串</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.join(lst)</div><div class="line"><span class="string">'hello'</span></div><div class="line"></div><div class="line"><span class="comment"># 字符串-&gt;列表 (指定分隔符, 如空格, 逗号)</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>season = <span class="string">'spring, summer, autumn, winter'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>season.split (<span class="string">','</span>)</div><div class="line">[<span class="string">'spring'</span>, <span class="string">' summer'</span>, <span class="string">' autumn'</span>, <span class="string">' winter'</span>]</div><div class="line"></div><div class="line"><span class="comment"># 列表-&gt;字符串</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="string">"spring"</span>, <span class="string">"summer"</span>, <span class="string">"autumn"</span>, <span class="string">"winter"</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">', '</span>.join(lst)</div><div class="line"><span class="string">'spring, summer, autumn, winter'</span></div><div class="line"></div><div class="line"><span class="comment"># 整数列表-&gt;字符串</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.join(str(e) <span class="keyword">for</span> e <span class="keyword">in</span> lst)</div><div class="line"><span class="string">'123'</span></div><div class="line"></div><div class="line"><span class="comment"># 字符串-&gt;hex格式列表-&gt;hex格式字符串</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>map(ord, <span class="string">"1234"</span>) <span class="comment"># [0x31, 0x32, 0x33 0x34]</span></div><div class="line">[<span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.join([<span class="string">"%02x"</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> map(ord, <span class="string">"1234"</span>)])</div><div class="line"><span class="string">'31323334'</span></div></pre></td></tr></table></figure>
<h1 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h1><h2 id="操作基础"><a href="#操作基础" class="headerlink" title="操作基础"></a>操作基础</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 去前后空格及特殊符号</span></div><div class="line">s.strip().lstrip().rstrip(<span class="string">','</span>)</div><div class="line"></div><div class="line"><span class="comment"># 查找字符</span></div><div class="line">sStr1.index(sStr2)  <span class="comment"># 返回所在位置, 不存在则报错</span></div><div class="line">sStr2 <span class="keyword">in</span> sStr1      <span class="comment"># 返回 True or False</span></div><div class="line"></div><div class="line"><span class="comment"># 比较字符串</span></div><div class="line">cmp(sStr1,sStr)</div><div class="line"></div><div class="line"><span class="comment"># 字符串长度</span></div><div class="line">len(sStr1)</div><div class="line"></div><div class="line"><span class="comment"># 将字符串中的大小写转换</span></div><div class="line">sStr1.upper().lower()</div><div class="line"></div><div class="line"><span class="comment"># 扩充到指定长度</span></div><div class="line">str(<span class="number">01</span>).zfill(<span class="number">5</span>) <span class="comment"># “00001”</span></div><div class="line"></div><div class="line"><span class="comment"># 翻转字符串</span></div><div class="line">sStr1[::<span class="number">-1</span>]</div><div class="line"></div><div class="line"><span class="comment"># 分割字符串</span></div><div class="line">s.split(<span class="string">','</span>)</div><div class="line"></div><div class="line"><span class="comment"># 字符串切片</span></div><div class="line">str = ’<span class="number">0123456789</span>′</div><div class="line"><span class="keyword">print</span> str[<span class="number">0</span>:<span class="number">3</span>]      <span class="comment"># 截取第一位到第三位的字符</span></div><div class="line"><span class="keyword">print</span> str[:]        <span class="comment"># 截取字符串的全部字符</span></div><div class="line"><span class="keyword">print</span> str[<span class="number">6</span>:]       <span class="comment"># 截取第七个字符到结尾</span></div><div class="line"><span class="keyword">print</span> str[:<span class="number">-3</span>]      <span class="comment"># 截取从头开始到倒数第三个字符之前</span></div><div class="line"><span class="keyword">print</span> str[<span class="number">2</span>]        <span class="comment"># 截取第三个字符</span></div><div class="line"><span class="keyword">print</span> str[<span class="number">-1</span>]       <span class="comment"># 截取倒数第一个字符</span></div><div class="line"><span class="keyword">print</span> str[::<span class="number">-1</span>]     <span class="comment"># 创造一个与原字符串顺序相反的字符串</span></div><div class="line"><span class="keyword">print</span> str[<span class="number">-3</span>:<span class="number">-1</span>]    <span class="comment"># 截取倒数第三位与倒数第一位之前的字符</span></div><div class="line"><span class="keyword">print</span> str[<span class="number">-3</span>:]      <span class="comment"># 截取倒数第三位到结尾</span></div></pre></td></tr></table></figure>
<h2 id="查看手册及高阶使用"><a href="#查看手册及高阶使用" class="headerlink" title="查看手册及高阶使用"></a>查看手册及高阶使用</h2><ul>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/chapters/p02_strings_and_text.html" target="_blank" rel="external">cookbook-第二章：字符串和文本</a>, 实用范例<ul>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p01_split_string_on_multiple_delimiters.html" target="_blank" rel="external">2.1 使用多个界定符分割字符串</a>, split(), re.split()</li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p02_match_text_at_start_end.html" target="_blank" rel="external">2.2 字符串开头或结尾匹配</a>, startswith(), endswith()</li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p03_match_strings_with_shell_wildcard.html" target="_blank" rel="external">2.3 用Shell通配符匹配字符串</a>, fnmatch(), fnmatchcase()</li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p04_match_and_search_text.html" target="_blank" rel="external">2.4 字符串匹配和搜索</a>, find(), findall(), match(), re.match()</li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p05_search_and_replace_text.html" target="_blank" rel="external">2.5 字符串搜索和替换</a>, replace(), re.sub()</li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p06_search_replace_case_insensitive.html" target="_blank" rel="external">2.6 字符串忽略大小写的搜索替换</a>, re.IGNORECASE</li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p07_specify_regexp_for_shortest_match.html" target="_blank" rel="external">2.7 最短匹配模式</a>, 解决成对符号的问题, 避免贪婪算法</li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p08_regexp_for_multiline_partterns.html" target="_blank" rel="external">2.8 多行匹配模式</a>, 解决回车换行的问题</li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p09_normalize_unicode_text_to_regexp.html" target="_blank" rel="external">2.9 将Unicode文本标准化</a></li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p10_work_with_unicode_in_regexp.html" target="_blank" rel="external">2.10 在正则式中使用Unicode</a></li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p11_strip_unwanted_characters.html" target="_blank" rel="external">2.11 删除字符串中不需要的字符</a>, strip(), replace(), re.sub()</li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p12_sanitizing_clean_up_text.html" target="_blank" rel="external">2.12 审查清理文本字符串</a></li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p13_aligning_text_strings.html" target="_blank" rel="external">2.13 字符串对齐</a>, ljust(), rjust(), center(), format()</li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p14_combine_and_concatenate_strings.html" target="_blank" rel="external">2.14 合并拼接字符串</a>, join()</li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p15_interpolating_variables_in_strings.html" target="_blank" rel="external">2.15 字符串中插入变量</a>, format()的高阶使用</li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p16_reformat_text_to_fixed_number_columns.html" target="_blank" rel="external">2.16 以指定列宽格式化字符串</a>, textwrap</li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p17_handle_html_xml_in_text.html" target="_blank" rel="external">2.17 在字符串中处理html和xml</a></li>
<li><del><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p18_tokenizing_text.html" target="_blank" rel="external">2.18 字符串令牌解析</a>, 语法的解析</del></li>
<li><del><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p19_writing_recursive_descent_parser.html" target="_blank" rel="external">2.19 实现一个简单的递归下降分析器</a>, 语法的解析</del></li>
<li><del><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p20_perform_text_operations_on_byte_string.html" target="_blank" rel="external">2.20 字节字符串上的字符串操作</a>, bytearray</del></li>
</ul>
</li>
</ul>
<ul>
<li><a href="https://docs.python.org/2/library/stdtypes.html#string-methods" target="_blank" rel="external">String Methods</a>, string提供的方法/函数<ul>
<li><a href="https://docs.python.org/2/library/stdtypes.html#string-formatting-operations" target="_blank" rel="external">String Formatting Operations</a>, 格式化显示, 建议使用format替代</li>
</ul>
</li>
</ul>
<ul>
<li><a href="https://docs.python.org/2/library/string.html" target="_blank" rel="external">string — Common string operations</a>, python官方手册之字符串操作<ul>
<li><a href="https://docs.python.org/2/library/string.html#string-constants" target="_blank" rel="external">String constants</a>, 字符串常量, 如字母, 数字</li>
<li><a href="https://docs.python.org/2/library/string.html#format-examples" target="_blank" rel="external">Format examples</a>, 格式化显示</li>
<li><del><a href="https://docs.python.org/2/library/string.html#template-strings" target="_blank" rel="external">Template strings</a>, 模板显示</del>, 建议使用format代替.</li>
</ul>
</li>
</ul>
<h2 id="使用正则表达式的一些例子"><a href="#使用正则表达式的一些例子" class="headerlink" title="使用正则表达式的一些例子"></a>使用正则表达式的一些例子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 去掉所有的空格和tab</span></div><div class="line">re.sub(<span class="string">'[\s+]'</span>, <span class="string">''</span>, str)</div><div class="line"></div><div class="line"><span class="comment"># 转换小写下划线格式变化为驼峰格式</span></div><div class="line">re.sub(<span class="string">'^\w|_\w'</span>, <span class="keyword">lambda</span> x:x.group()[<span class="number">-1</span>].upper(), <span class="string">'blog_view'</span>) <span class="comment"># 输出 'BlogView'。</span></div></pre></td></tr></table></figure>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构资料收集]]></title>
      <url>https://draapho.github.io/2016/11/23/1620-software-data-struct/</url>
      <content type="html"><![CDATA[<h1 id="python各数据结构性能列表-TimeComplexity"><a href="#python各数据结构性能列表-TimeComplexity" class="headerlink" title="python各数据结构性能列表, TimeComplexity"></a>python各数据结构性能列表, <a href="https://wiki.python.org/moin/TimeComplexity" target="_blank" rel="external">TimeComplexity</a></h1><ul>
<li>list</li>
</ul>
<table>
<thead>
<tr>
<th>Operation</th>
<th>Average Case</th>
<th>Amortized Worst Case</th>
</tr>
</thead>
<tbody>
<tr>
<td>Copy</td>
<td>O(n)</td>
<td>O(n)                </td>
</tr>
<tr>
<td>Append[1]</td>
<td>O(1)</td>
<td>O(1)                </td>
</tr>
<tr>
<td>Insert</td>
<td>O(n)</td>
<td>O(n)                </td>
</tr>
<tr>
<td>Get Item</td>
<td>O(1)</td>
<td>O(1)                </td>
</tr>
<tr>
<td>Set Item</td>
<td>O(1)</td>
<td>O(1)                </td>
</tr>
<tr>
<td>Delete Item</td>
<td>O(n)</td>
<td>O(n)                </td>
</tr>
<tr>
<td>Iteration</td>
<td>O(n)</td>
<td>O(n)                </td>
</tr>
<tr>
<td>Get Slice</td>
<td>O(k)</td>
<td>O(k)                </td>
</tr>
<tr>
<td>Del Slice</td>
<td>O(n)</td>
<td>O(n)                </td>
</tr>
<tr>
<td>Set Slice</td>
<td>O(k+n)</td>
<td>O(k+n)              </td>
</tr>
<tr>
<td>Extend[1]</td>
<td>O(k)</td>
<td>O(k)                </td>
</tr>
<tr>
<td>Sort</td>
<td>O(n log n)</td>
<td>O(n log n)          </td>
</tr>
<tr>
<td>Multiply</td>
<td>O(nk)</td>
<td>O(nk)               </td>
</tr>
<tr>
<td>x in s</td>
<td>O(n)</td>
<td>-                   </td>
</tr>
<tr>
<td>min(s), max(s)</td>
<td>O(n)</td>
<td>-                   </td>
</tr>
<tr>
<td>Get Length</td>
<td>O(1)</td>
<td>O(1)                </td>
</tr>
</tbody>
</table>
<ul>
<li>collections.deque</li>
</ul>
<table>
<thead>
<tr>
<th>Operation</th>
<th>Average Case</th>
<th>Amortized Worst Case</th>
</tr>
</thead>
<tbody>
<tr>
<td>Copy</td>
<td>O(n)</td>
<td>O(n)                </td>
</tr>
<tr>
<td>append</td>
<td>O(1)</td>
<td>O(1)                </td>
</tr>
<tr>
<td>appendleft</td>
<td>O(1)</td>
<td>O(1)                </td>
</tr>
<tr>
<td>pop</td>
<td>O(1)</td>
<td>O(1)                </td>
</tr>
<tr>
<td>popleft</td>
<td>O(1)</td>
<td>O(1)                </td>
</tr>
<tr>
<td>extend</td>
<td>O(k)</td>
<td>O(k)                </td>
</tr>
<tr>
<td>extendleft</td>
<td>O(k)</td>
<td>O(k)                </td>
</tr>
<tr>
<td>rotate</td>
<td>O(k)</td>
<td>O(k)                </td>
</tr>
<tr>
<td>remove</td>
<td>O(n)</td>
<td>O(n)                </td>
</tr>
</tbody>
</table>
<ul>
<li>dict</li>
</ul>
<table>
<thead>
<tr>
<th>Operation</th>
<th>Average Case</th>
<th>Amortized Worst Case</th>
</tr>
</thead>
<tbody>
<tr>
<td>Copy[2]</td>
<td>O(n)</td>
<td>O(n)                </td>
</tr>
<tr>
<td>Get Item</td>
<td>O(1)</td>
<td>O(n)                </td>
</tr>
<tr>
<td>Set Item[1]</td>
<td>O(1)</td>
<td>O(n)                </td>
</tr>
<tr>
<td>Delete Item</td>
<td>O(1)</td>
<td>O(n)                </td>
</tr>
<tr>
<td>Iteration[2]</td>
<td>O(n)</td>
<td>O(n)                </td>
</tr>
</tbody>
</table>
<h1 id="教科书风格的数据结构"><a href="#教科书风格的数据结构" class="headerlink" title="教科书风格的数据结构"></a><a href="http://sjjp.tjuci.edu.cn/sjjg/datastructure/ds/web/gailun/gailun1.1.1b.htm" target="_blank" rel="external">教科书风格的数据结构</a></h1><ul>
<li>讲述了 <code>线性链表</code>, <code>字符串</code>, <code>栈和队列</code>, <code>多维数组</code>, <code>广义表</code>, <code>树</code>, <code>图</code>, <code>排序</code>, <code>查找</code>, <code>文件</code></li>
<li><strong>有较为详细的性能分析</strong>, 偏重理论细节, 还有习题可以做!<ul>
<li>平方阶(O(n^2))排序: 一般称为简单排序，例如直接插入、直接选择和冒泡排序</li>
<li>线性对数阶(O(nlgn))排序: 如快速、堆和归并排序</li>
<li>O(n^(1+￡))阶排序(0&lt;￡&lt;1): 如希尔排序</li>
<li>线性阶(O(n))排序: 如桶、箱和基数排序</li>
</ul>
</li>
<li>排序方法的选择<ul>
<li>简单排序中直接插入最好，快速排序最快，当文件为正序时，直接插入和冒泡均最佳。</li>
<li>若n较小(如n≤50)，可采用直接插入或直接选择排序。</li>
<li>若文件初始状态基本有序(指正序)，则应选用直接插人、冒泡或随机的快速排序为宜；</li>
<li>若n较大，则应采用时间复杂度为O(nlgn)的排序方法：快速排序、堆排序或归并排序。<ul>
<li>快速排序是目前基于比较的内部排序中被认为是最好的方法，当待排序的关键字是随机分布时，快速排序的平均时间最短；</li>
<li>堆排序所需的辅助空间少于快速排序，并且不会出现快速排序可能出现的最坏情况。这两种排序都是不稳定的。</li>
<li>若要求排序稳定，则可选用归并排序。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="纸上谈兵-算法与数据结构"><a href="#纸上谈兵-算法与数据结构" class="headerlink" title="纸上谈兵: 算法与数据结构"></a><a href="http://www.cnblogs.com/vamei/archive/2013/03/22/2974052.html" target="_blank" rel="external">纸上谈兵: 算法与数据结构</a></h1><ul>
<li>理论与实践相结合的讲述数据结构, <strong>配图很有意思, 并提供了C代码</strong>. 但没有对性能和特性做详细介绍.</li>
<li><a href="http://www.cnblogs.com/vamei/archive/2013/03/30/2989930.html" target="_blank" rel="external">纸上谈兵: 数学归纳法, 递归, 栈</a></li>
<li><a href="http://www.cnblogs.com/vamei/archive/2013/03/12/2948847.html" target="_blank" rel="external">纸上谈兵: 排序算法简介及其C实现</a></li>
<li><a href="http://www.cnblogs.com/vamei/archive/2013/03/14/2958940.html" target="_blank" rel="external">纸上谈兵: 表 (list)</a></li>
<li><a href="http://www.cnblogs.com/vamei/archive/2013/03/14/2960201.html" target="_blank" rel="external">纸上谈兵: 栈 (stack)</a></li>
<li><a href="http://www.cnblogs.com/vamei/archive/2013/03/15/2961729.html" target="_blank" rel="external">纸上谈兵: 队列 (queue)</a></li>
<li><a href="http://www.cnblogs.com/vamei/archive/2013/03/17/2962290.html" target="_blank" rel="external">纸上谈兵: 树, 二叉树, 二叉搜索树</a><ul>
<li><a href="http://www.cnblogs.com/vamei/archive/2013/03/21/2964092.html" target="_blank" rel="external">纸上谈兵: AVL树</a></li>
<li><a href="http://www.cnblogs.com/vamei/archive/2013/03/24/2976545.html" target="_blank" rel="external">纸上谈兵: 伸展树 (splay tree)</a></li>
</ul>
</li>
<li><a href="http://www.cnblogs.com/vamei/archive/2013/03/20/2966612.html" target="_blank" rel="external">纸上谈兵: 堆 (heap)</a><ul>
<li><a href="http://www.cnblogs.com/vamei/archive/2013/04/19/2978555.html" target="_blank" rel="external">纸上谈兵: 左倾堆 (leftist heap)</a></li>
</ul>
</li>
<li><a href="http://www.cnblogs.com/vamei/archive/2013/03/24/2970339.html" target="_blank" rel="external">纸上谈兵: 哈希表 (hash table)</a></li>
<li><a href="http://www.cnblogs.com/vamei/p/3113912.html" target="_blank" rel="external">纸上谈兵: 图 (graph)</a><ul>
<li><a href="http://www.cnblogs.com/vamei/p/3232432.html" target="_blank" rel="external">纸上谈兵: 拓扑排序</a></li>
<li><a href="http://www.cnblogs.com/vamei/p/3604629.html" target="_blank" rel="external">纸上谈兵: 最短路径与贪婪</a></li>
</ul>
</li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[30 个有关 Python 的小技巧]]></title>
      <url>https://draapho.github.io/2016/11/22/1619-python-tips/</url>
      <content type="html"><![CDATA[<p><strong><em>转载自 <a href="http://sahandsaba.com/thirty-python-language-features-and-tricks-you-may-not-know.html" target="_blank" rel="external">30 Python Language Features and Tricks You May Not Know About</a></em></strong><br><strong><em>中文版 <a href="http://blog.jobbole.com/63320/" target="_blank" rel="external">30个有关Python的小技巧</a></em></strong></p>
<hr>
<h1 id="批量赋值"><a href="#批量赋值" class="headerlink" title="批量赋值"></a>批量赋值</h1><h2 id="Unpacking"><a href="#Unpacking" class="headerlink" title="Unpacking"></a>Unpacking</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c</div><div class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c</div><div class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c = (<span class="number">2</span> * i + <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c</div><div class="line">(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a, (b, c), d = [<span class="number">1</span>, (<span class="number">2</span>, <span class="number">3</span>), <span class="number">4</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line"><span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c</div><div class="line"><span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d</div><div class="line"><span class="number">4</span></div></pre></td></tr></table></figure>
<h2 id="Unpacking-for-swapping-variables"><a href="#Unpacking-for-swapping-variables" class="headerlink" title="Unpacking for swapping variables"></a>Unpacking for swapping variables</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a, b = <span class="number">1</span>, <span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a, b = b, a</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a, b</div><div class="line">(<span class="number">2</span>, <span class="number">1</span>)</div></pre></td></tr></table></figure>
<h2 id="Extended-unpacking-Python-3-only"><a href="#Extended-unpacking-Python-3-only" class="headerlink" title="Extended unpacking (Python 3 only)"></a>Extended unpacking (Python 3 only)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a, *b, c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c</div><div class="line"><span class="number">5</span></div></pre></td></tr></table></figure>
<h1 id="list-amp-dictionary-列表和字典"><a href="#list-amp-dictionary-列表和字典" class="headerlink" title="list &amp; dictionary / 列表和字典"></a>list &amp; dictionary / 列表和字典</h1><h2 id="Negative-indexing"><a href="#Negative-indexing" class="headerlink" title="Negative indexing"></a>Negative indexing</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">-1</span>]</div><div class="line"><span class="number">10</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">-3</span>]</div><div class="line"><span class="number">8</span></div></pre></td></tr></table></figure>
<h2 id="List-slices-a-start-end"><a href="#List-slices-a-start-end" class="headerlink" title="List slices (a[start:end])"></a>List slices (a[start:end])</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:<span class="number">8</span>]</div><div class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</div></pre></td></tr></table></figure>
<h2 id="List-slices-with-negative-indexing"><a href="#List-slices-with-negative-indexing" class="headerlink" title="List slices with negative indexing"></a>List slices with negative indexing</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">-4</span>:<span class="number">-2</span>]</div><div class="line">[<span class="number">7</span>, <span class="number">8</span>]</div></pre></td></tr></table></figure>
<h2 id="List-slices-with-step-a-start-end-step"><a href="#List-slices-with-step-a-start-end-step" class="headerlink" title="List slices with step (a[start:end:step])"></a>List slices with step (a[start:end:step])</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[::<span class="number">2</span>]</div><div class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[::<span class="number">3</span>]</div><div class="line">[<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:<span class="number">8</span>:<span class="number">2</span>]</div><div class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</div></pre></td></tr></table></figure>
<h2 id="List-slices-with-negative-step"><a href="#List-slices-with-negative-step" class="headerlink" title="List slices with negative step"></a>List slices with negative step</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[::<span class="number">-1</span>]</div><div class="line">[<span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[::<span class="number">-2</span>]</div><div class="line">[<span class="number">10</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>]</div></pre></td></tr></table></figure>
<h2 id="List-slice-assignment-切割并赋值"><a href="#List-slice-assignment-切割并赋值" class="headerlink" title="List slice assignment / 切割并赋值"></a>List slice assignment / 切割并赋值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:<span class="number">3</span>] = [<span class="number">0</span>, <span class="number">0</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>:<span class="number">1</span>] = [<span class="number">8</span>, <span class="number">9</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">1</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>:<span class="number">-1</span>] = []</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">1</span>, <span class="number">5</span>]</div></pre></td></tr></table></figure>
<h2 id="for循环取list的索引和值-enumerate"><a href="#for循环取list的索引和值-enumerate" class="headerlink" title="for循环取list的索引和值 (enumerate)"></a>for循环取list的索引和值 (enumerate)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">'Hello'</span>, <span class="string">'world'</span>, <span class="string">'!'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i, x <span class="keyword">in</span> enumerate(a):</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">'&#123;&#125;: &#123;&#125;'</span>.format(i, x)</div><div class="line">...</div><div class="line"><span class="number">0</span>: Hello</div><div class="line"><span class="number">1</span>: world</div><div class="line"><span class="number">2</span>: !</div></pre></td></tr></table></figure>
<h2 id="list加入索引值-enumerate"><a href="#list加入索引值-enumerate" class="headerlink" title="list加入索引值 (enumerate)"></a>list加入索引值 (enumerate)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>seasons = [<span class="string">'Spring'</span>, <span class="string">'Summer'</span>, <span class="string">'Fall'</span>, <span class="string">'Winter'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(enumerate(seasons))</div><div class="line">[(<span class="number">0</span>, <span class="string">'Spring'</span>), (<span class="number">1</span>, <span class="string">'Summer'</span>), (<span class="number">2</span>, <span class="string">'Fall'</span>), (<span class="number">3</span>, <span class="string">'Winter'</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(enumerate(seasons, start=<span class="number">1</span>))</div><div class="line">[(<span class="number">1</span>, <span class="string">'Spring'</span>), (<span class="number">2</span>, <span class="string">'Summer'</span>), (<span class="number">3</span>, <span class="string">'Fall'</span>), (<span class="number">4</span>, <span class="string">'Winter'</span>)]</div></pre></td></tr></table></figure>
<h2 id="Naming-slices-slice-start-end-step-给切割操作命名"><a href="#Naming-slices-slice-start-end-step-给切割操作命名" class="headerlink" title="Naming slices (slice(start, end, step)) / 给切割操作命名"></a>Naming slices (slice(start, end, step)) / 给切割操作命名</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>LASTTHREE = slice(<span class="number">-3</span>, <span class="keyword">None</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>LASTTHREE</div><div class="line">slice(<span class="number">-3</span>, <span class="keyword">None</span>, <span class="keyword">None</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[LASTTHREE]</div><div class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div></pre></td></tr></table></figure>
<h2 id="Zipping-and-unzipping-lists-and-iterables-列表以及迭代器的压缩和解压缩"><a href="#Zipping-and-unzipping-lists-and-iterables-列表以及迭代器的压缩和解压缩" class="headerlink" title="Zipping and unzipping lists and iterables / 列表以及迭代器的压缩和解压缩"></a>Zipping and unzipping lists and iterables / 列表以及迭代器的压缩和解压缩</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>z = zip(a, b)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>z</div><div class="line">[(<span class="number">1</span>, <span class="string">'a'</span>), (<span class="number">2</span>, <span class="string">'b'</span>), (<span class="number">3</span>, <span class="string">'c'</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>zip(*z)</div><div class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)]</div></pre></td></tr></table></figure>
<h2 id="Grouping-adjacent-list-items-using-zip-列表相邻元素压缩器"><a href="#Grouping-adjacent-list-items-using-zip-列表相邻元素压缩器" class="headerlink" title="Grouping adjacent list items using zip / 列表相邻元素压缩器"></a>Grouping adjacent list items using zip / 列表相邻元素压缩器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Using iterators / 使用迭代器</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent = <span class="keyword">lambda</span> a, k: zip(*([iter(a)] * k))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent(a, <span class="number">3</span>)</div><div class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent(a, <span class="number">2</span>)</div><div class="line">[(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">6</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent(a, <span class="number">1</span>)</div><div class="line">[(<span class="number">1</span>,), (<span class="number">2</span>,), (<span class="number">3</span>,), (<span class="number">4</span>,), (<span class="number">5</span>,), (<span class="number">6</span>,)]</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Using slices / 使用切片</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> itertools <span class="keyword">import</span> islice</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent = <span class="keyword">lambda</span> a, k: zip(*(islice(a, i, <span class="keyword">None</span>, k) <span class="keyword">for</span> i <span class="keyword">in</span> range(k)))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent(a, <span class="number">3</span>)</div><div class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent(a, <span class="number">2</span>)</div><div class="line">[(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">6</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent(a, <span class="number">1</span>)</div><div class="line">[(<span class="number">1</span>,), (<span class="number">2</span>,), (<span class="number">3</span>,), (<span class="number">4</span>,), (<span class="number">5</span>,), (<span class="number">6</span>,)]</div></pre></td></tr></table></figure>
<h2 id="Sliding-windows-n-grams-using-zip-and-iterators-列表元素压缩器-同上方法二"><a href="#Sliding-windows-n-grams-using-zip-and-iterators-列表元素压缩器-同上方法二" class="headerlink" title="Sliding windows (n-grams) using zip and iterators / 列表元素压缩器(同上方法二)"></a>Sliding windows (n-grams) using zip and iterators / 列表元素压缩器(同上方法二)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> itertools <span class="keyword">import</span> islice</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">n_grams</span><span class="params">(a, n)</span>:</span></div><div class="line"><span class="meta">... </span>    z = (islice(a, i, <span class="keyword">None</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(n))</div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> zip(*z)</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>n_grams(a, <span class="number">3</span>)</div><div class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>n_grams(a, <span class="number">2</span>)</div><div class="line">[(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">5</span>), (<span class="number">5</span>, <span class="number">6</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>n_grams(a, <span class="number">4</span>)</div><div class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)]</div></pre></td></tr></table></figure>
<h2 id="Flattening-lists-列表展开"><a href="#Flattening-lists-列表展开" class="headerlink" title="Flattening lists: / 列表展开"></a>Flattening lists: / 列表展开</h2><p>Note: according to Python’s documentation on sum, itertools.chain.from_iterable is the preferred method for this.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 推荐使用 itertools.chain.from_iterable</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.chain.from_iterable(a))</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line"></div><div class="line"><span class="comment"># 不推荐使用 sum</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sum(a, [])</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> l <span class="keyword">in</span> a <span class="keyword">for</span> x <span class="keyword">in</span> l]</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [[[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]], [[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]]]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> l1 <span class="keyword">in</span> a <span class="keyword">for</span> l2 <span class="keyword">in</span> l1 <span class="keyword">for</span> x <span class="keyword">in</span> l2]</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], [[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]]]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>flatten = <span class="keyword">lambda</span> x: [y <span class="keyword">for</span> l <span class="keyword">in</span> x <span class="keyword">for</span> y <span class="keyword">in</span> flatten(l)] <span class="keyword">if</span> type(x) <span class="keyword">is</span> list <span class="keyword">else</span> [x]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>flatten(a)</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</div></pre></td></tr></table></figure></p>
<h2 id="for循环取dict的关键字和值-iteritems"><a href="#for循环取dict的关键字和值-iteritems" class="headerlink" title="for循环取dict的关键字和值 (iteritems)"></a>for循环取dict的关键字和值 (iteritems)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k, v <span class="keyword">in</span> m.iteritems():</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">'&#123;&#125;: &#123;&#125;'</span>.format(k, v)</div><div class="line">...</div><div class="line">a: <span class="number">1</span></div><div class="line">c: <span class="number">3</span></div><div class="line">b: <span class="number">2</span></div><div class="line">d: <span class="number">4</span></div><div class="line">Note: use dict.items <span class="keyword">in</span> Python <span class="number">3.</span></div></pre></td></tr></table></figure>
<h2 id="Inverting-a-dictionary-字典与表的转换-以及翻转"><a href="#Inverting-a-dictionary-字典与表的转换-以及翻转" class="headerlink" title="Inverting a dictionary / 字典与表的转换, 以及翻转"></a>Inverting a dictionary / 字典与表的转换, 以及翻转</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># using zip</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.items()</div><div class="line">[(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'c'</span>, <span class="number">3</span>), (<span class="string">'b'</span>, <span class="number">2</span>), (<span class="string">'d'</span>, <span class="number">4</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>zip(m.values(), m.keys())</div><div class="line">[(<span class="number">1</span>, <span class="string">'a'</span>), (<span class="number">3</span>, <span class="string">'c'</span>), (<span class="number">2</span>, <span class="string">'b'</span>), (<span class="number">4</span>, <span class="string">'d'</span>)]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mi = dict(zip(m.values(), m.keys()))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mi</div><div class="line">&#123;<span class="number">1</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>, <span class="number">3</span>: <span class="string">'c'</span>, <span class="number">4</span>: <span class="string">'d'</span>&#125;</div><div class="line"></div><div class="line"><span class="comment"># using a dictionary comprehension</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m</div><div class="line">&#123;<span class="string">'d'</span>: <span class="number">4</span>, <span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;v: k <span class="keyword">for</span> k, v <span class="keyword">in</span> m.items()&#125;</div><div class="line">&#123;<span class="number">1</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>, <span class="number">3</span>: <span class="string">'c'</span>, <span class="number">4</span>: <span class="string">'d'</span>&#125;</div></pre></td></tr></table></figure>
<h2 id="Dictionary-comprehensions-快速生成规律性字典"><a href="#Dictionary-comprehensions-快速生成规律性字典" class="headerlink" title="Dictionary comprehensions / 快速生成规律性字典"></a>Dictionary comprehensions / 快速生成规律性字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = &#123;x: x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>)&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m</div><div class="line">&#123;<span class="number">0</span>: <span class="number">0</span>, <span class="number">1</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">4</span>, <span class="number">3</span>: <span class="number">9</span>, <span class="number">4</span>: <span class="number">16</span>&#125;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = &#123;x: <span class="string">'A'</span> + str(x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m</div><div class="line">&#123;<span class="number">0</span>: <span class="string">'A0'</span>, <span class="number">1</span>: <span class="string">'A1'</span>, <span class="number">2</span>: <span class="string">'A2'</span>, <span class="number">3</span>: <span class="string">'A3'</span>, <span class="number">4</span>: <span class="string">'A4'</span>, <span class="number">5</span>: <span class="string">'A5'</span>, <span class="number">6</span>: <span class="string">'A6'</span>, <span class="number">7</span>: <span class="string">'A7'</span>, <span class="number">8</span>: <span class="string">'A8'</span>, <span class="number">9</span>: <span class="string">'A9'</span>&#125;</div></pre></td></tr></table></figure>
<h1 id="语法上的一些技巧"><a href="#语法上的一些技巧" class="headerlink" title="语法上的一些技巧"></a>语法上的一些技巧</h1><h2 id="双重for循环"><a href="#双重for循环" class="headerlink" title="双重for循环"></a>双重for循环</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="string">'la'</span>,<span class="string">'luo'</span>,<span class="string">'lao'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b =(<span class="string">'hua'</span>,<span class="string">'huo'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> [(x,y) <span class="keyword">for</span> x <span class="keyword">in</span> a <span class="keyword">for</span> y <span class="keyword">in</span> b]</div><div class="line">[(<span class="string">'la'</span>, <span class="string">'hua'</span>), (<span class="string">'la'</span>, <span class="string">'huo'</span>), (<span class="string">'luo'</span>, <span class="string">'hua'</span>), (<span class="string">'luo'</span>, <span class="string">'huo'</span>), (<span class="string">'lao'</span>, <span class="string">'hua'</span>), (<span class="string">'lao'</span>, <span class="string">'huo'</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> zip(a,b)</div><div class="line">[(<span class="string">'la'</span>, <span class="string">'hua'</span>), (<span class="string">'luo'</span>, <span class="string">'huo'</span>)]</div></pre></td></tr></table></figure>
<h2 id="python-中-switch-的替代方案"><a href="#python-中-switch-的替代方案" class="headerlink" title="python 中 switch 的替代方案"></a>python 中 switch 的替代方案</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 字典映射</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">numbers_to_strings</span><span class="params">(argument)</span>:</span></div><div class="line">    switcher = &#123;                                <span class="comment"># switch(argument) &#123;</span></div><div class="line">        <span class="number">0</span>: <span class="string">"zero"</span>,                              <span class="comment"># case 0: return "zero";</span></div><div class="line">        <span class="number">1</span>: <span class="string">"one"</span>,                               <span class="comment"># case 1: return "one";</span></div><div class="line">        <span class="number">2</span>: <span class="string">"two"</span>,                               <span class="comment"># case 2: return "two";</span></div><div class="line">    &#125;                                           <span class="comment"># &#125;</span></div><div class="line">    <span class="keyword">return</span> switcher.get(argument, <span class="string">"nothing"</span>)    <span class="comment"># default: return "nothing";</span></div><div class="line"></div><div class="line"><span class="comment"># 函数的字典映射</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">zero</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">"zero"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">one</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">"one"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">numbers_to_functions_to_strings</span><span class="params">(argument)</span>:</span></div><div class="line">    switcher = &#123;</div><div class="line">        <span class="number">0</span>: zero,</div><div class="line">        <span class="number">1</span>: one,</div><div class="line">        <span class="number">2</span>: <span class="keyword">lambda</span>: <span class="string">"two"</span>,</div><div class="line">    &#125;</div><div class="line">    <span class="comment"># Get the function from switcher dictionary</span></div><div class="line">    func = switcher.get(argument, <span class="keyword">lambda</span>: <span class="string">"nothing"</span>)</div><div class="line">    <span class="comment"># Execute the function</span></div><div class="line">    <span class="keyword">return</span> func()</div><div class="line"></div><div class="line"><span class="comment"># 类的调度方法</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Switcher</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numbers_to_methods_to_strings</span><span class="params">(self, argument)</span>:</span></div><div class="line">        <span class="string">"""Dispatch method"""</span></div><div class="line">        <span class="comment"># prefix the method_name with 'number_' because method names</span></div><div class="line">        <span class="comment"># cannot begin with an integer.</span></div><div class="line">        method_name = <span class="string">'number_'</span> + str(argument)</div><div class="line">        <span class="comment"># Get the method from 'self'. Default to a lambda.</span></div><div class="line">        method = getattr(self, method_name, <span class="keyword">lambda</span>: <span class="string">"nothing"</span>)</div><div class="line">        <span class="comment"># Call the method as we return it</span></div><div class="line">        <span class="keyword">return</span> method()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">number_0</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"zero"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">number_1</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"one"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">number_2</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"two"</span></div></pre></td></tr></table></figure>
<h2 id="python-仅允许单实例"><a href="#python-仅允许单实例" class="headerlink" title="python 仅允许单实例"></a>python 仅允许单实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls)</span>:</span></div><div class="line">        <span class="comment"># 关键在于这，每一次实例化的时候，我们都只会返回这同一个instance对象</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">'instance'</span>):</div><div class="line">            cls.instance = super(Singleton, cls).__new__(cls)</div><div class="line">        <span class="keyword">return</span> cls.instance</div><div class="line"></div><div class="line"><span class="comment"># 测试</span></div><div class="line">obj1 = Singleton()</div><div class="line">obj2 = Singleton()</div><div class="line">obj1.attr1 = <span class="string">'value1'</span></div><div class="line"><span class="keyword">print</span> obj1.attr1, obj2.attr1</div><div class="line"><span class="keyword">print</span> obj1 <span class="keyword">is</span> obj2</div></pre></td></tr></table></figure>
<h2 id="Generator-expressions-生成器表达式"><a href="#Generator-expressions-生成器表达式" class="headerlink" title="Generator expressions / 生成器表达式"></a>Generator expressions / 生成器表达式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>g = (x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">10</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</div><div class="line"><span class="number">0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</div><div class="line"><span class="number">4</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</div><div class="line"><span class="number">9</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sum(x ** <span class="number">3</span> <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">10</span>))</div><div class="line"><span class="number">2025</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sum(x ** <span class="number">3</span> <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">3</span> == <span class="number">1</span>)</div><div class="line"><span class="number">408</span></div></pre></td></tr></table></figure>
<h2 id="Learn-the-Zen-of-Python-打印Python之道"><a href="#Learn-the-Zen-of-Python-打印Python之道" class="headerlink" title="Learn the Zen of Python / 打印Python之道"></a>Learn the Zen of Python / 打印Python之道</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import this</div><div class="line">The Zen of Python, by Tim Peters</div><div class="line"></div><div class="line">Beautiful is better than ugly.</div><div class="line">Explicit is better than implicit.</div><div class="line">Simple is better than complex.</div><div class="line">Complex is better than complicated.</div><div class="line">Flat is better than nested.</div><div class="line">Sparse is better than dense.</div><div class="line">Readability counts.</div><div class="line">Special cases aren't special enough to break the rules.</div><div class="line">Although practicality beats purity.</div><div class="line">Errors should never pass silently.</div><div class="line">Unless explicitly silenced.</div><div class="line">In the face of ambiguity, refuse the temptation to guess.</div><div class="line">There should be one-- and preferably only one --obvious way to do it.</div><div class="line">Although that way may not be obvious at first unless you're Dutch.</div><div class="line">Now is better than never.</div><div class="line">Although never is often better than *right* now.</div><div class="line">If the implementation is hard to explain, it's a bad idea.</div><div class="line">If the implementation is easy to explain, it may be a good idea.</div><div class="line">Namespaces are one honking great idea -- let's do more of those!</div></pre></td></tr></table></figure>
<h2 id="使用C语言括号替代缩进"><a href="#使用C语言括号替代缩进" class="headerlink" title="使用C语言括号替代缩进"></a>使用C语言括号替代缩进</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> __future__ <span class="keyword">import</span> braces</div></pre></td></tr></table></figure>
<h1 id="collections-的一些数据类型"><a href="#collections-的一些数据类型" class="headerlink" title="collections 的一些数据类型"></a>collections 的一些数据类型</h1><h2 id="Named-tuples-collections-namedtuple-类似于-C-的struct结构"><a href="#Named-tuples-collections-namedtuple-类似于-C-的struct结构" class="headerlink" title="Named tuples (collections.namedtuple) / 类似于 C 的struct结构"></a>Named tuples (collections.namedtuple) / 类似于 C 的struct结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> collections</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Point = collections.namedtuple(<span class="string">'Point'</span>, [<span class="string">'x'</span>, <span class="string">'y'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = Point(x=<span class="number">1.0</span>, y=<span class="number">2.0</span>) <span class="comment"># 这样赋值复杂了, 可以直接 p = Point(1.0, 2.0)</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p</div><div class="line">Point(x=<span class="number">1.0</span>, y=<span class="number">2.0</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.x</div><div class="line"><span class="number">1.0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.y</div><div class="line"><span class="number">2.0</span></div><div class="line"></div><div class="line">coordinate = collections.namedtuple(<span class="string">'Coordinate'</span>, [<span class="string">'x'</span>, <span class="string">'y'</span>])</div><div class="line">co = coordinate(<span class="number">10</span>,<span class="number">20</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>co[<span class="number">0</span>], co[<span class="number">1</span>]</div><div class="line">(<span class="number">10</span>, <span class="number">20</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>co = coordinate._make([<span class="number">100</span>,<span class="number">200</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>co[<span class="number">0</span>], co[<span class="number">1</span>]</div><div class="line">(<span class="number">100</span>, <span class="number">200</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>co = co._replace(x = <span class="number">30</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>co[<span class="number">0</span>], co[<span class="number">1</span>]</div><div class="line">(<span class="number">30</span>, <span class="number">200</span>)</div></pre></td></tr></table></figure>
<h2 id="Inheriting-from-named-tuples-自定义-namedtuple-的运算"><a href="#Inheriting-from-named-tuples-自定义-namedtuple-的运算" class="headerlink" title="Inheriting from named tuples: / 自定义 namedtuple 的运算"></a>Inheriting from named tuples: / 自定义 namedtuple 的运算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Point</span><span class="params">(collections.namedtuple<span class="params">(<span class="string">'PointBase'</span>, [<span class="string">'x'</span>, <span class="string">'y'</span>])</span>)</span>:</span></div><div class="line"><span class="meta">... </span>    __slots__ = ()</div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></div><div class="line"><span class="meta">... </span>            <span class="keyword">return</span> Point(x=self.x + other.x, y=self.y + other.y)</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = Point(x=<span class="number">1.0</span>, y=<span class="number">2.0</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q = Point(x=<span class="number">2.0</span>, y=<span class="number">3.0</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p + q</div><div class="line">Point(x=<span class="number">3.0</span>, y=<span class="number">5.0</span>)   <span class="comment"># 重定义了 + 运算符.</span></div><div class="line"><span class="comment"># 默认结果应该是: Point(1.0, 2.0, 2.0, 3.0)</span></div></pre></td></tr></table></figure>
<h2 id="Sets-and-set-operations-集合及其操作"><a href="#Sets-and-set-operations-集合及其操作" class="headerlink" title="Sets and set operations / 集合及其操作"></a>Sets and set operations / 集合及其操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>A = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A</div><div class="line">set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>B = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>B</div><div class="line">set([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A | B</div><div class="line">set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A &amp; B</div><div class="line">set([<span class="number">3</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A - B</div><div class="line">set([<span class="number">1</span>, <span class="number">2</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>B - A</div><div class="line">set([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A ^ B   <span class="comment"># 集合异或</span></div><div class="line">set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>(A ^ B) == ((A - B) | (B - A))</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
<h2 id="统计列表中元素出现的次数"><a href="#统计列表中元素出现的次数" class="headerlink" title="统计列表中元素出现的次数"></a>统计列表中元素出现的次数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>mylist = [<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>myset = set(mylist)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> item <span class="keyword">in</span> myset:</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> mylist.count(item), <span class="string">" of "</span>, item, <span class="string">" in list"</span></div><div class="line">...</div><div class="line"><span class="number">6</span>  of  <span class="number">2</span>  <span class="keyword">in</span> list</div><div class="line"><span class="number">4</span>  of  <span class="number">3</span>  <span class="keyword">in</span> list</div></pre></td></tr></table></figure>
<h2 id="Multisets-and-multiset-operations-collections-Counter-多重集合-显示元素个数"><a href="#Multisets-and-multiset-operations-collections-Counter-多重集合-显示元素个数" class="headerlink" title="Multisets and multiset operations (collections.Counter) / 多重集合(显示元素个数)"></a>Multisets and multiset operations (collections.Counter) / 多重集合(显示元素个数)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>A = collections.Counter([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>B = collections.Counter([<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A</div><div class="line">Counter(&#123;<span class="number">2</span>: <span class="number">2</span>, <span class="number">1</span>: <span class="number">1</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>B</div><div class="line">Counter(&#123;<span class="number">2</span>: <span class="number">2</span>, <span class="number">3</span>: <span class="number">1</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A | B</div><div class="line">Counter(&#123;<span class="number">2</span>: <span class="number">2</span>, <span class="number">1</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">1</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A &amp; B</div><div class="line">Counter(&#123;<span class="number">2</span>: <span class="number">2</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A + B</div><div class="line">Counter(&#123;<span class="number">2</span>: <span class="number">4</span>, <span class="number">1</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">1</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A - B</div><div class="line">Counter(&#123;<span class="number">1</span>: <span class="number">1</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>B - A</div><div class="line">Counter(&#123;<span class="number">3</span>: <span class="number">1</span>&#125;)</div></pre></td></tr></table></figure>
<h2 id="Most-common-elements-in-an-iterable-collections-Counter-统计在可迭代器中最常出现的元素"><a href="#Most-common-elements-in-an-iterable-collections-Counter-统计在可迭代器中最常出现的元素" class="headerlink" title="Most common elements in an iterable (collections.Counter) / 统计在可迭代器中最常出现的元素"></a>Most common elements in an iterable (collections.Counter) / 统计在可迭代器中最常出现的元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>A = collections.Counter([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A</div><div class="line">Counter(&#123;<span class="number">3</span>: <span class="number">4</span>, <span class="number">1</span>: <span class="number">2</span>, <span class="number">2</span>: <span class="number">2</span>, <span class="number">4</span>: <span class="number">1</span>, <span class="number">5</span>: <span class="number">1</span>, <span class="number">6</span>: <span class="number">1</span>, <span class="number">7</span>: <span class="number">1</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A.most_common(<span class="number">1</span>)</div><div class="line">[(<span class="number">3</span>, <span class="number">4</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A.most_common(<span class="number">3</span>)</div><div class="line">[(<span class="number">3</span>, <span class="number">4</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">2</span>)]</div></pre></td></tr></table></figure>
<h2 id="Double-ended-queue-collections-deque-双向队列-近似于双向链表"><a href="#Double-ended-queue-collections-deque-双向队列-近似于双向链表" class="headerlink" title="Double-ended queue (collections.deque) / 双向队列, 近似于双向链表"></a>Double-ended queue (collections.deque) / 双向队列, 近似于双向链表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>Q = collections.deque()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Q.append(<span class="number">1</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Q.appendleft(<span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Q.extend([<span class="number">3</span>, <span class="number">4</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Q.extendleft([<span class="number">5</span>, <span class="number">6</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Q</div><div class="line">deque([<span class="number">6</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Q.pop()</div><div class="line"><span class="number">4</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Q.popleft()</div><div class="line"><span class="number">6</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Q</div><div class="line">deque([<span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Q.rotate(<span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Q</div><div class="line">deque([<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Q.rotate(<span class="number">-3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Q</div><div class="line">deque([<span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>])</div></pre></td></tr></table></figure>
<h2 id="Double-ended-queue-with-maximum-length-collections-deque-限长的双向队列"><a href="#Double-ended-queue-with-maximum-length-collections-deque-限长的双向队列" class="headerlink" title="Double-ended queue with maximum length (collections.deque) / 限长的双向队列"></a>Double-ended queue with maximum length (collections.deque) / 限长的双向队列</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>last_three = collections.deque(maxlen=<span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">10</span>):</div><div class="line"><span class="meta">... </span>    last_three.append(i)</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">', '</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> last_three)</div><div class="line">...</div><div class="line"><span class="number">0</span></div><div class="line"><span class="number">0</span>, <span class="number">1</span></div><div class="line"><span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span></div><div class="line"><span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></div><div class="line"><span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span></div><div class="line"><span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span></div><div class="line"><span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span></div><div class="line"><span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span></div><div class="line"><span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span></div><div class="line"><span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span></div></pre></td></tr></table></figure>
<h2 id="Ordered-dictionaries-collections-OrderedDict-可排序字典"><a href="#Ordered-dictionaries-collections-OrderedDict-可排序字典" class="headerlink" title="Ordered dictionaries (collections.OrderedDict) / 可排序字典"></a>Ordered dictionaries (collections.OrderedDict) / 可排序字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 普通字典</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = dict((str(x), x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">', '</span>.join(m.keys())</div><div class="line"><span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">8</span></div><div class="line"></div><div class="line"><span class="comment"># 可排序字典</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = collections.OrderedDict((str(x), x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">', '</span>.join(m.keys())</div><div class="line"><span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = collections.OrderedDict((str(x), x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>, <span class="number">0</span>, <span class="number">-1</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">', '</span>.join(m.keys())</div><div class="line"><span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="Default-dictionaries-collections-defaultdict-默认字典"><a href="#Default-dictionaries-collections-defaultdict-默认字典" class="headerlink" title="Default dictionaries (collections.defaultdict) / 默认字典"></a>Default dictionaries (collections.defaultdict) / 默认字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 普通字典</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = dict()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m[<span class="string">'a'</span>]</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">KeyError: <span class="string">'a'</span></div><div class="line"></div><div class="line"><span class="comment"># 默认字典</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = collections.defaultdict(int)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m[<span class="string">'a'</span>]</div><div class="line"><span class="number">0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m[<span class="string">'b'</span>]</div><div class="line"><span class="number">0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = collections.defaultdict(str)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m[<span class="string">'a'</span>]</div><div class="line"><span class="string">''</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m[<span class="string">'b'</span>] += <span class="string">'a'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m[<span class="string">'b'</span>]</div><div class="line"><span class="string">'a'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = collections.defaultdict(<span class="keyword">lambda</span>: <span class="string">'[default value]'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m[<span class="string">'a'</span>]</div><div class="line"><span class="string">'[default value]'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m[<span class="string">'b'</span>]</div><div class="line"><span class="string">'[default value]'</span></div></pre></td></tr></table></figure>
<h2 id="Using-default-dictionaries-to-represent-simple-trees-默认字典实现树-快速生成xml文件"><a href="#Using-default-dictionaries-to-represent-simple-trees-默认字典实现树-快速生成xml文件" class="headerlink" title="Using default dictionaries to represent simple trees / 默认字典实现树, 快速生成xml文件"></a>Using default dictionaries to represent simple trees / 默认字典实现树, 快速生成xml文件</h2><p>See <a href="https://gist.github.com/hrldcpr/2012250" target="_blank" rel="external">One-line Tree in Python</a> for more on this.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tree = <span class="keyword">lambda</span>: collections.defaultdict(tree)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>root = tree()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>root[<span class="string">'menu'</span>][<span class="string">'id'</span>] = <span class="string">'file'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>root[<span class="string">'menu'</span>][<span class="string">'value'</span>] = <span class="string">'File'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>root[<span class="string">'menu'</span>][<span class="string">'menuitems'</span>][<span class="string">'new'</span>][<span class="string">'value'</span>] = <span class="string">'New'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>root[<span class="string">'menu'</span>][<span class="string">'menuitems'</span>][<span class="string">'new'</span>][<span class="string">'onclick'</span>] = <span class="string">'new();'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>root[<span class="string">'menu'</span>][<span class="string">'menuitems'</span>][<span class="string">'open'</span>][<span class="string">'value'</span>] = <span class="string">'Open'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>root[<span class="string">'menu'</span>][<span class="string">'menuitems'</span>][<span class="string">'open'</span>][<span class="string">'onclick'</span>] = <span class="string">'open();'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>root[<span class="string">'menu'</span>][<span class="string">'menuitems'</span>][<span class="string">'close'</span>][<span class="string">'value'</span>] = <span class="string">'Close'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>root[<span class="string">'menu'</span>][<span class="string">'menuitems'</span>][<span class="string">'close'</span>][<span class="string">'onclick'</span>] = <span class="string">'close();'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> json.dumps(root, sort_keys=<span class="keyword">True</span>, indent=<span class="number">4</span>, separators=(<span class="string">','</span>, <span class="string">': '</span>))</div><div class="line">&#123;</div><div class="line">    <span class="string">"menu"</span>: &#123;</div><div class="line">        <span class="string">"id"</span>: <span class="string">"file"</span>,</div><div class="line">        <span class="string">"menuitems"</span>: &#123;</div><div class="line">            <span class="string">"close"</span>: &#123;</div><div class="line">                <span class="string">"onclick"</span>: <span class="string">"close();"</span>,</div><div class="line">                <span class="string">"value"</span>: <span class="string">"Close"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="string">"new"</span>: &#123;</div><div class="line">                <span class="string">"onclick"</span>: <span class="string">"new();"</span>,</div><div class="line">                <span class="string">"value"</span>: <span class="string">"New"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="string">"open"</span>: &#123;</div><div class="line">                <span class="string">"onclick"</span>: <span class="string">"open();"</span>,</div><div class="line">                <span class="string">"value"</span>: <span class="string">"Open"</span></div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="string">"value"</span>: <span class="string">"File"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Mapping-objects-to-unique-counting-numbers-collections-defaultdict-生成对象的唯一索引值"><a href="#Mapping-objects-to-unique-counting-numbers-collections-defaultdict-生成对象的唯一索引值" class="headerlink" title="Mapping objects to unique counting numbers (collections.defaultdict) / 生成对象的唯一索引值"></a>Mapping objects to unique counting numbers (collections.defaultdict) / 生成对象的唯一索引值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> itertools, collections</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>value_to_numeric_map = collections.defaultdict(itertools.count().next)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>value_to_numeric_map[<span class="string">'a'</span>]</div><div class="line"><span class="number">0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>value_to_numeric_map[<span class="string">'b'</span>]</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>value_to_numeric_map[<span class="string">'c'</span>]</div><div class="line"><span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>value_to_numeric_map[<span class="string">'a'</span>]</div><div class="line"><span class="number">0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>value_to_numeric_map[<span class="string">'b'</span>]</div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="Largest-and-smallest-elements-heapq-nlargest-and-heapq-nsmallest-最大和最小的几个列表元素"><a href="#Largest-and-smallest-elements-heapq-nlargest-and-heapq-nsmallest-最大和最小的几个列表元素" class="headerlink" title="Largest and smallest elements (heapq.nlargest and heapq.nsmallest) / 最大和最小的几个列表元素"></a>Largest and smallest elements (heapq.nlargest and heapq.nsmallest) / 最大和最小的几个列表元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [random.randint(<span class="number">0</span>, <span class="number">100</span>) <span class="keyword">for</span> __ <span class="keyword">in</span> xrange(<span class="number">100</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.nsmallest(<span class="number">5</span>, a)</div><div class="line">[<span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.nlargest(<span class="number">5</span>, a)</div><div class="line">[<span class="number">100</span>, <span class="number">100</span>, <span class="number">99</span>, <span class="number">98</span>, <span class="number">98</span>]</div></pre></td></tr></table></figure>
<h1 id="itertools-迭代器的一些应用"><a href="#itertools-迭代器的一些应用" class="headerlink" title="itertools 迭代器的一些应用"></a>itertools 迭代器的一些应用</h1><h2 id="Cartesian-products-itertools-product-两个列表的笛卡尔积"><a href="#Cartesian-products-itertools-product-两个列表的笛卡尔积" class="headerlink" title="Cartesian products (itertools.product) / 两个列表的笛卡尔积"></a>Cartesian products (itertools.product) / 两个列表的笛卡尔积</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> p <span class="keyword">in</span> itertools.product([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]):</div><div class="line">(<span class="number">1</span>, <span class="number">4</span>)</div><div class="line">(<span class="number">1</span>, <span class="number">5</span>)</div><div class="line">(<span class="number">2</span>, <span class="number">4</span>)</div><div class="line">(<span class="number">2</span>, <span class="number">5</span>)</div><div class="line">(<span class="number">3</span>, <span class="number">4</span>)</div><div class="line">(<span class="number">3</span>, <span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> p <span class="keyword">in</span> itertools.product([<span class="number">0</span>, <span class="number">1</span>], repeat=<span class="number">4</span>):</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">''</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> p)</div><div class="line">...</div><div class="line"><span class="number">0000</span></div><div class="line"><span class="number">0001</span></div><div class="line"><span class="number">0010</span></div><div class="line"><span class="number">0011</span></div><div class="line"><span class="number">0100</span></div><div class="line"><span class="number">0101</span></div><div class="line"><span class="number">0110</span></div><div class="line"><span class="number">0111</span></div><div class="line"><span class="number">1000</span></div><div class="line"><span class="number">1001</span></div><div class="line"><span class="number">1010</span></div><div class="line"><span class="number">1011</span></div><div class="line"><span class="number">1100</span></div><div class="line"><span class="number">1101</span></div><div class="line"><span class="number">1110</span></div><div class="line"><span class="number">1111</span></div></pre></td></tr></table></figure>
<h2 id="Combinations-and-combinations-with-replacement-itertools-combinations-and-itertools-combinations-with-replacement-列表组合和列表元素替代组合"><a href="#Combinations-and-combinations-with-replacement-itertools-combinations-and-itertools-combinations-with-replacement-列表组合和列表元素替代组合" class="headerlink" title="Combinations and combinations with replacement (itertools.combinations and itertools.combinations_with_replacement) / 列表组合和列表元素替代组合"></a>Combinations and combinations with replacement (itertools.combinations and itertools.combinations_with_replacement) / 列表组合和列表元素替代组合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> c <span class="keyword">in</span> itertools.combinations([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="number">3</span>):</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">''</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> c)</div><div class="line">...</div><div class="line"><span class="number">123</span></div><div class="line"><span class="number">124</span></div><div class="line"><span class="number">125</span></div><div class="line"><span class="number">134</span></div><div class="line"><span class="number">135</span></div><div class="line"><span class="number">145</span></div><div class="line"><span class="number">234</span></div><div class="line"><span class="number">235</span></div><div class="line"><span class="number">245</span></div><div class="line"><span class="number">345</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> c <span class="keyword">in</span> itertools.combinations_with_replacement([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>):</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">''</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> c)</div><div class="line">...</div><div class="line"><span class="number">11</span></div><div class="line"><span class="number">12</span></div><div class="line"><span class="number">13</span></div><div class="line"><span class="number">22</span></div><div class="line"><span class="number">23</span></div><div class="line"><span class="number">33</span></div></pre></td></tr></table></figure>
<h2 id="Permutations-itertools-permutations-列表元素排列组合"><a href="#Permutations-itertools-permutations-列表元素排列组合" class="headerlink" title="Permutations (itertools.permutations) / 列表元素排列组合"></a>Permutations (itertools.permutations) / 列表元素排列组合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> p <span class="keyword">in</span> itertools.permutations([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]):</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">''</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> p)</div><div class="line">...</div><div class="line"><span class="number">1234</span></div><div class="line"><span class="number">1243</span></div><div class="line"><span class="number">1324</span></div><div class="line"><span class="number">1342</span></div><div class="line"><span class="number">1423</span></div><div class="line"><span class="number">1432</span></div><div class="line"><span class="number">2134</span></div><div class="line"><span class="number">2143</span></div><div class="line"><span class="number">2314</span></div><div class="line"><span class="number">2341</span></div><div class="line"><span class="number">2413</span></div><div class="line"><span class="number">2431</span></div><div class="line"><span class="number">3124</span></div><div class="line"><span class="number">3142</span></div><div class="line"><span class="number">3214</span></div><div class="line"><span class="number">3241</span></div><div class="line"><span class="number">3412</span></div><div class="line"><span class="number">3421</span></div><div class="line"><span class="number">4123</span></div><div class="line"><span class="number">4132</span></div><div class="line"><span class="number">4213</span></div><div class="line"><span class="number">4231</span></div><div class="line"><span class="number">4312</span></div><div class="line"><span class="number">4321</span></div></pre></td></tr></table></figure>
<h2 id="Chaining-iterables-itertools-chain-可链接迭代器"><a href="#Chaining-iterables-itertools-chain-可链接迭代器" class="headerlink" title="Chaining iterables (itertools.chain) / 可链接迭代器"></a>Chaining iterables (itertools.chain) / 可链接迭代器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> p <span class="keyword">in</span> itertools.chain(itertools.combinations(a, <span class="number">2</span>), itertools.combinations(a, <span class="number">3</span>)):</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> p</div><div class="line">...</div><div class="line">(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line">(<span class="number">1</span>, <span class="number">3</span>)</div><div class="line">(<span class="number">1</span>, <span class="number">4</span>)</div><div class="line">(<span class="number">2</span>, <span class="number">3</span>)</div><div class="line">(<span class="number">2</span>, <span class="number">4</span>)</div><div class="line">(<span class="number">3</span>, <span class="number">4</span>)</div><div class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>)</div><div class="line">(<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line">(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> subset <span class="keyword">in</span> itertools.chain.from_iterable(itertools.combinations(a, n) <span class="keyword">for</span> n <span class="keyword">in</span> range(len(a) + <span class="number">1</span>))</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> subset</div><div class="line">...</div><div class="line">()</div><div class="line">(<span class="number">1</span>,)</div><div class="line">(<span class="number">2</span>,)</div><div class="line">(<span class="number">3</span>,)</div><div class="line">(<span class="number">4</span>,)</div><div class="line">(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line">(<span class="number">1</span>, <span class="number">3</span>)</div><div class="line">(<span class="number">1</span>, <span class="number">4</span>)</div><div class="line">(<span class="number">2</span>, <span class="number">3</span>)</div><div class="line">(<span class="number">2</span>, <span class="number">4</span>)</div><div class="line">(<span class="number">3</span>, <span class="number">4</span>)</div><div class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>)</div><div class="line">(<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line">(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div></pre></td></tr></table></figure>
<h2 id="Grouping-rows-by-a-given-key-itertools-groupby-根据文件指定列类聚"><a href="#Grouping-rows-by-a-given-key-itertools-groupby-根据文件指定列类聚" class="headerlink" title="Grouping rows by a given key (itertools.groupby) / 根据文件指定列类聚"></a>Grouping rows by a given key (itertools.groupby) / 根据文件指定列类聚</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> itertools</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'contactlenses.csv'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> infile:</div><div class="line"><span class="meta">... </span>    data = [line.strip().split(<span class="string">','</span>) <span class="keyword">for</span> line <span class="keyword">in</span> infile]</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>data = data[<span class="number">1</span>:]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">print_data</span><span class="params">(rows)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">'\n'</span>.join(<span class="string">'\t'</span>.join(<span class="string">'&#123;: &lt;16&#125;'</span>.format(s) <span class="keyword">for</span> s <span class="keyword">in</span> row) <span class="keyword">for</span> row <span class="keyword">in</span> rows)</div><div class="line">...</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print_data(data)</div><div class="line">young               myope                   no                      reduced                 none</div><div class="line">young               myope                   no                      normal                  soft</div><div class="line">young               myope                   yes                     reduced                 none</div><div class="line">young               myope                   yes                     normal                  hard</div><div class="line">young               hypermetrope            no                      reduced                 none</div><div class="line">young               hypermetrope            no                      normal                  soft</div><div class="line">young               hypermetrope            yes                     reduced                 none</div><div class="line">young               hypermetrope            yes                     normal                  hard</div><div class="line">pre-presbyopic      myope                   no                      reduced                 none</div><div class="line">pre-presbyopic      myope                   no                      normal                  soft</div><div class="line">pre-presbyopic      myope                   yes                     reduced                 none</div><div class="line">pre-presbyopic      myope                   yes                     normal                  hard</div><div class="line">pre-presbyopic      hypermetrope            no                      reduced                 none</div><div class="line">pre-presbyopic      hypermetrope            no                      normal                  soft</div><div class="line">pre-presbyopic      hypermetrope            yes                     reduced                 none</div><div class="line">pre-presbyopic      hypermetrope            yes                     normal                  none</div><div class="line">presbyopic          myope                   no                      reduced                 none</div><div class="line">presbyopic          myope                   no                      normal                  none</div><div class="line">presbyopic          myope                   yes                     reduced                 none</div><div class="line">presbyopic          myope                   yes                     normal                  hard</div><div class="line">presbyopic          hypermetrope            no                      reduced                 none</div><div class="line">presbyopic          hypermetrope            no                      normal                  soft</div><div class="line">presbyopic          hypermetrope            yes                     reduced                 none</div><div class="line">presbyopic          hypermetrope            yes                     normal                  none</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>data.sort(key=itemgetter(<span class="number">-1</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> value, group <span class="keyword">in</span> itertools.groupby(data, <span class="keyword">lambda</span> r: r[<span class="number">-1</span>]):</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">'-----------'</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">'Group: '</span> + value</div><div class="line"><span class="meta">... </span>    print_data(group)</div><div class="line">...</div><div class="line">-----------</div><div class="line">Group: hard</div><div class="line">young               myope                   yes                     normal                  hard</div><div class="line">young               hypermetrope            yes                     normal                  hard</div><div class="line">pre-presbyopic      myope                   yes                     normal                  hard</div><div class="line">presbyopic          myope                   yes                     normal                  hard</div><div class="line">-----------</div><div class="line">Group: none</div><div class="line">young               myope                   no                      reduced                 none</div><div class="line">young               myope                   yes                     reduced                 none</div><div class="line">young               hypermetrope            no                      reduced                 none</div><div class="line">young               hypermetrope            yes                     reduced                 none</div><div class="line">pre-presbyopic      myope                   no                      reduced                 none</div><div class="line">pre-presbyopic      myope                   yes                     reduced                 none</div><div class="line">pre-presbyopic      hypermetrope            no                      reduced                 none</div><div class="line">pre-presbyopic      hypermetrope            yes                     reduced                 none</div><div class="line">pre-presbyopic      hypermetrope            yes                     normal                  none</div><div class="line">presbyopic          myope                   no                      reduced                 none</div><div class="line">presbyopic          myope                   no                      normal                  none</div><div class="line">presbyopic          myope                   yes                     reduced                 none</div><div class="line">presbyopic          hypermetrope            no                      reduced                 none</div><div class="line">presbyopic          hypermetrope            yes                     reduced                 none</div><div class="line">presbyopic          hypermetrope            yes                     normal                  none</div><div class="line">-----------</div><div class="line">Group: soft</div><div class="line">young               myope                   no                      normal                  soft</div><div class="line">young               hypermetrope            no                      normal                  soft</div><div class="line">pre-presbyopic      myope                   no                      normal                  soft</div><div class="line">pre-presbyopic      hypermetrope            no                      normal                  soft</div><div class="line">presbyopic          hypermetrope            no                      normal                  soft</div></pre></td></tr></table></figure>
<hr>
<p><strong><em>转载自 <a href="http://sahandsaba.com/thirty-python-language-features-and-tricks-you-may-not-know.html" target="_blank" rel="external">30 Python Language Features and Tricks You May Not Know About</a></em></strong><br><strong><em>中文版 <a href="http://blog.jobbole.com/63320/" target="_blank" rel="external">30个有关Python的小技巧</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python基础： 深入理解 python 中的赋值、引用、拷贝、作用域]]></title>
      <url>https://draapho.github.io/2016/11/21/1618-python-variable/</url>
      <content type="html"><![CDATA[<p><strong><em>转载自 <a href="https://my.oschina.net/leejun2005/blog/145911" target="_blank" rel="external">python基础（5）：深入理解 python 中的赋值、引用、拷贝、作用域</a></em></strong></p>
<hr>
<h1 id="python的赋值"><a href="#python的赋值" class="headerlink" title="python的赋值"></a>python的赋值</h1><p>在 python 中赋值语句总是建立对象的引用值，而不是复制对象。因此，python 变量更像是指针，而不是数据存储区域，<br><img src="https://draapho.github.io/images/1618/python_point_1.jpg" alt="python_point"><br>这点和大多数 OO 语言类似吧，比如 C++、java 等 ~</p>
<h1 id="先来看个问题吧："><a href="#先来看个问题吧：" class="headerlink" title="先来看个问题吧："></a>先来看个问题吧：</h1><h2 id="一个赋值问题"><a href="#一个赋值问题" class="headerlink" title="一个赋值问题"></a>一个赋值问题</h2><p>在Python中，令<code>values=[0,1,2];values[1]=values</code>,为何结果是<code>[0,[...],2]</code>? <a href="http://www.zhihu.com/question/21000872" target="_blank" rel="external">链接</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>values = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>values[<span class="number">1</span>] = values</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>values</div><div class="line">[<span class="number">0</span>, [...], <span class="number">2</span>]       <span class="comment"># 实际结果, 为何要赋值无限次?</span></div><div class="line">[<span class="number">0</span>, [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], <span class="number">2</span>]   <span class="comment"># 预想结果</span></div></pre></td></tr></table></figure>
<p>可以说 Python 没有赋值，只有引用。你这样相当于创建了一个引用自身的结构，所以导致了无限循环。为了理解这个问题，有个基本概念需要搞清楚。</p>
<p>Python 没有「变量」，我们平时所说的变量其实只是「标签」，是引用。</p>
<p>执行 <code>values = [0, 1, 2]</code> 的时候，Python 做的事情是首先创建一个列表对象 [0, 1, 2]，然后给它贴上名为 values 的标签。</p>
<p>如果随后又执行 <code>values = [3, 4, 5]</code> 的话，Python 做的事情是创建另一个列表对象 [3, 4, 5]，然后把刚才那张名为 values 的标签从前面的 [0, 1, 2] 对象上撕下来，重新贴到 [3, 4, 5] 这个对象上。</p>
<p>至始至终，并没有一个叫做 values 的列表对象容器存在，Python 也没有把任何对象的值复制进 values 去。过程如图所示：</p>
<p><img src="https://draapho.github.io/images/1618/python_point_2.jpg" alt="python_point"></p>
<p>执行 <code>values[1] = values</code> 的时候，Python 做的事情则是把 values 这个标签所引用的列表对象的第二个元素指向 values 所引用的列表对象本身。执行完毕后，values 标签还是指向原来那个对象，只不过那个对象的结构发生了变化，从之前的列表 [0, 1, 2] 变成了 [0, ?, 2]，而这个 ? 则是指向那个对象本身的一个引用。如图所示：</p>
<p><img src="https://draapho.github.io/images/1618/python_point_3.jpg" alt="python_point"></p>
<h2 id="浅复制及其风险"><a href="#浅复制及其风险" class="headerlink" title="浅复制及其风险"></a>浅复制及其风险</h2><p>要达到你所需要的效果，即得到 [0, [0, 1, 2], 2] 这个对象，你不能直接将 values[1] 指向 values 引用的对象本身，而是需要吧 [0, 1, 2] 这个对象「复制」一遍，得到一个新对象，再将 values[1] 指向这个复制后的对象。Python 里面复制对象的操作因对象类型而异，复制列表 values 的操作是</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">values[:] <span class="comment">#生成对象的拷贝或者是复制序列，不再是引用和共享变量，但此法只能顶层复制</span></div></pre></td></tr></table></figure>
<p>所以你需要执行 <code>values[1] = values[:]</code> </p>
<p>Python 做的事情是，先 dereference 得到 values 所指向的对象 [0, 1, 2]，然后执行 [0, 1, 2][:] 复制操作得到一个新的对象，内容也是 [0, 1, 2]，然后将 values 所指向的列表对象的第二个元素指向这个复制二来的列表对象，最终 values 指向的对象是 [0, [0, 1, 2], 2]。过程如图所示：</p>
<p><img src="https://draapho.github.io/images/1618/python_point_4.jpg" alt="python_point"></p>
<p>往更深处说，values[:] 复制操作是所谓的「浅复制」(shallow copy)，当列表对象有嵌套的时候也会产生出乎意料的错误，比如为何要赋值无限次</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = [<span class="number">0</span>, [<span class="number">1</span>, <span class="number">2</span>], <span class="number">3</span>]</div><div class="line">b = a[:]</div><div class="line">a[<span class="number">0</span>] = <span class="number">8</span></div><div class="line">a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">9</span></div></pre></td></tr></table></figure>
<p>问：此时 a 和 b 分别是多少？</p>
<p>正确答案是 a 为 [8, [1, 9], 3]，b 为 [0, [1, 9], 3]。发现没？b 的第二个元素也被改变了。想想是为什么？不明白的话看下图</p>
<p><img src="https://draapho.github.io/images/1618/python_point_5.jpg" alt="python_point"></p>
<h2 id="深复制"><a href="#深复制" class="headerlink" title="深复制"></a>深复制</h2><p>正确的复制嵌套元素的方法是进行「深复制」(deep copy)，方法是</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> copy</div><div class="line"></div><div class="line">a = [<span class="number">0</span>, [<span class="number">1</span>, <span class="number">2</span>], <span class="number">3</span>]</div><div class="line">b = copy.deepcopy(a)</div><div class="line">a[<span class="number">0</span>] = <span class="number">8</span></div><div class="line">a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">9</span></div></pre></td></tr></table></figure>
<p><img src="https://draapho.github.io/images/1618/python_point_6.jpg" alt="python_point"></p>
<h1 id="引用-VS-拷贝："><a href="#引用-VS-拷贝：" class="headerlink" title="引用 VS 拷贝："></a>引用 VS 拷贝：</h1><ul>
<li>没有限制条件的分片表达式（L[:]）能够复制序列，但此法只能浅层复制。</li>
<li>字典 copy 方法，D.copy() 能够复制字典，但此法只能浅层复制</li>
<li>有些内置函数，例如 list，能够生成拷贝 list(L)</li>
<li>copy 标准库模块能够生成完整拷贝：deepcopy 本质上是递归 copy</li>
<li>对于不可变对象和可变对象来说，浅复制都是复制的引用，只是因为复制不变对象和复制不变对象的引用是等效的（因为对象不可变，当改变时会新建对象重新赋值）。所以看起来浅复制只复制不可变对象（整数，实数，字符串等），对于可变对象，浅复制其实是创建了一个对于该对象的引用，也就是说只是给同一个对象贴上了另一个标签而已。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">L = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">D = &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>&#125;</div><div class="line">A = L[:]</div><div class="line">B = D.copy()</div><div class="line"><span class="keyword">print</span> <span class="string">"L, D"</span></div><div class="line"><span class="keyword">print</span>  L, D</div><div class="line"><span class="keyword">print</span> <span class="string">"A, B"</span></div><div class="line"><span class="keyword">print</span> A, B</div><div class="line"><span class="keyword">print</span> <span class="string">"--------------------"</span></div><div class="line">A[<span class="number">1</span>] = <span class="string">'NI'</span></div><div class="line">B[<span class="string">'c'</span>] = <span class="string">'spam'</span></div><div class="line"><span class="keyword">print</span> <span class="string">"L, D"</span></div><div class="line"><span class="keyword">print</span>  L, D</div><div class="line"><span class="keyword">print</span> <span class="string">"A, B"</span></div><div class="line"><span class="keyword">print</span> A, B</div><div class="line"></div><div class="line"></div><div class="line">L, D</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</div><div class="line">A, B</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</div><div class="line">--------------------</div><div class="line">L, D</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</div><div class="line">A, B</div><div class="line">[<span class="number">1</span>, <span class="string">'NI'</span>, <span class="number">3</span>] &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'c'</span>: <span class="string">'spam'</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</div></pre></td></tr></table></figure>
<h1 id="增强赋值以及共享引用："><a href="#增强赋值以及共享引用：" class="headerlink" title="增强赋值以及共享引用："></a>增强赋值以及共享引用：</h1><p>x = x + y，x 出现两次，必须执行两次，性能不好，合并必须新建对象 x，然后复制两个列表合并</p>
<p>属于复制/拷贝</p>
<p>x += y，x 只出现一次，也只会计算一次，性能好，不生成新对象，只在内存块末尾增加元素。</p>
<p>当 x、y 为list时， += 会自动调用 extend 方法进行合并运算，in-place change。</p>
<p>属于共享引用</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">L = [<span class="number">1</span>, <span class="number">2</span>]</div><div class="line">M = L</div><div class="line">L = L + [<span class="number">3</span>, <span class="number">4</span>]</div><div class="line"><span class="keyword">print</span> L, M</div><div class="line"><span class="keyword">print</span> <span class="string">"-------------------"</span></div><div class="line">L = [<span class="number">1</span>, <span class="number">2</span>]</div><div class="line">M = L</div><div class="line">L += [<span class="number">3</span>, <span class="number">4</span>]</div><div class="line"><span class="keyword">print</span> L, M</div><div class="line"></div><div class="line"></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>] [<span class="number">1</span>, <span class="number">2</span>]</div><div class="line">-------------------</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>] [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div></pre></td></tr></table></figure>
<h1 id="python-从-2k-到-3k，语句变函数引发的变量作用域问题"><a href="#python-从-2k-到-3k，语句变函数引发的变量作用域问题" class="headerlink" title="python 从 2k 到 3k，语句变函数引发的变量作用域问题"></a>python 从 2k 到 3k，语句变函数引发的变量作用域问题</h1><p>先看段代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    a = <span class="keyword">False</span></div><div class="line">    <span class="keyword">exec</span> (<span class="string">"a = True"</span>)</div><div class="line">    <span class="keyword">print</span> (<span class="string">"a = "</span>, a)</div><div class="line">test()</div><div class="line"></div><div class="line">b = <span class="keyword">False</span></div><div class="line"><span class="keyword">exec</span> (<span class="string">"b = True"</span>)</div><div class="line"><span class="keyword">print</span> (<span class="string">"b = "</span>, b)</div></pre></td></tr></table></figure>
<p>在 python 2k 和 3k 下 你会发现他们的结果不一样：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">2</span>K：</div><div class="line">a =  <span class="keyword">True</span></div><div class="line">b =  <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="number">3</span>K：</div><div class="line">a =  <span class="keyword">False</span></div><div class="line">b =  <span class="keyword">True</span></div></pre></td></tr></table></figure>
<p>这是为什么呢？</p>
<p>因为 3k 中 exec 由语句变成函数了，而在函数中变量默认都是局部的，也就是说<br>你所见到的两个 a，是两个不同的变量，分别处于不同的命名空间中，而不会冲突。</p>
<p>具体参考 《learning python》P331-P332</p>
<p>知道原因了，我们可以这么改改：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    a = <span class="keyword">False</span></div><div class="line">    ldict = locals()</div><div class="line">    exec(<span class="string">"a=True"</span>,globals(),ldict)</div><div class="line">    a = ldict[<span class="string">'a'</span>]</div><div class="line">    print(a)</div><div class="line"></div><div class="line">test()</div><div class="line"></div><div class="line">b = <span class="keyword">False</span></div><div class="line">exec(<span class="string">"b = True"</span>, globals())</div><div class="line">print(<span class="string">"b = "</span>, b)</div></pre></td></tr></table></figure>
<p>这是一个典型的 python 2k 移植到 3k 不兼容的案例，类似的还有很多，也算是移植的坑吧~</p>
<p>具体的 2k 与 3k 有哪些差异可以看这里： <a href="http://woodpecker.org.cn/diveintopython3/porting-code-to-python-3-with-2to3.html" target="_blank" rel="external"><strong>使用 2to3 将代码移植到 Python 3</strong></a></p>
<h1 id="深入理解-python-变量作用域及其陷阱"><a href="#深入理解-python-变量作用域及其陷阱" class="headerlink" title="深入理解 python 变量作用域及其陷阱"></a>深入理解 python 变量作用域及其陷阱</h1><h2 id="可变对象-amp-不可变对象"><a href="#可变对象-amp-不可变对象" class="headerlink" title="可变对象 &amp; 不可变对象"></a>可变对象 &amp; 不可变对象</h2><ul>
<li>在Python中，对象分为两种：可变对象和不可变对象，</li>
<li>不可变对象包括int，float，long，str，tuple等，可变对象包括list，set，dict等。</li>
<li>需要注意的是：这里说的不可变指的是值的不可变。对于不可变类型的变量，如果要更改变量，则会创建一个新值，把变量绑定到新值上，而旧值如果没有被引用就等待垃圾回收。另外，不可变的类型可以计算hash值，作为字典的key。</li>
<li>可变类型数据对对象操作的时候，不需要再在其他地方申请内存，只需要在此对象后面连续申请(+/-)即可，也就是它的内存地址会保持不变，但区域会变长或者变短。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">'xianglong.me'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</div><div class="line"><span class="number">140443303134352</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">'1saying.com'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</div><div class="line"><span class="number">140443303131776</span></div><div class="line"><span class="comment"># 重新赋值之后，变量a的内存地址已经变了</span></div><div class="line"><span class="comment"># 'xianglong.me'是str类型，不可变，所以赋值操作知识重新创建了str '1saying.com'对象，然后将变量a指向了它</span></div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(a_list)</div><div class="line"><span class="number">140443302951680</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a_list.append(<span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(a_list)</div><div class="line"><span class="number">140443302951680</span></div><div class="line"><span class="comment"># list重新赋值之后，变量a_list的内存地址并未改变</span></div><div class="line"><span class="comment"># [1, 2, 3]是可变的，append操作只是改变了其value，变量a_list指向没有变</span></div></pre></td></tr></table></figure>
<h2 id="函数值传递"><a href="#函数值传递" class="headerlink" title="函数值传递"></a>函数值传递</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_int</span><span class="params">(a)</span>:</span></div><div class="line">    a += <span class="number">4</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_list</span><span class="params">(a_list)</span>:</span></div><div class="line">    a_list[<span class="number">0</span>] = <span class="number">4</span></div><div class="line"> </div><div class="line">t = <span class="number">0</span></div><div class="line">func_int(t)</div><div class="line"><span class="keyword">print</span> t</div><div class="line"><span class="comment"># output: 0</span></div><div class="line"> </div><div class="line">t_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">func_list(t_list)</div><div class="line"><span class="keyword">print</span> t_list</div><div class="line"><span class="comment"># output: [4, 2, 3]</span></div></pre></td></tr></table></figure>
<p>对于上面的输出，不少Python初学者都比较疑惑：第一个例子看起来像是传值，而第二个例子确实传引用。其实，解释这个问题也非常容易，主要是因为可变对象和不可变对象的原因：对于可变对象，对象的操作不会重建对象，而对于不可变对象，每一次操作就重建新的对象。</p>
<p>在函数参数传递的时候，Python其实就是把参数里传入的变量对应的对象的引用依次赋值给对应的函数内部变量。参照上面的例子来说明更容易理解，func_int中的局部变量”a”其实是全部变量”t”所指向对象的另一个引用，由于整数对象是不可变的，所以当func_int对变量”a”进行修改的时候，实际上是将局部变量”a”指向到了整数对象”1”。所以很明显，func_list修改的是一个可变的对象，局部变量”a”和全局变量”t_list”指向的还是同一个对象。</p>
<h2 id="为什么修改全局的dict变量不用global关键字"><a href="#为什么修改全局的dict变量不用global关键字" class="headerlink" title="为什么修改全局的dict变量不用global关键字"></a>为什么修改全局的dict变量不用global关键字</h2><p>为什么修改字典d的值不用global关键字先声明呢？</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'foo'</span></div><div class="line">d = &#123;<span class="string">'a'</span>:<span class="number">1</span>&#125;</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></div><div class="line">    s = <span class="string">'bar'</span></div><div class="line">    d[<span class="string">'b'</span>] = <span class="number">2</span></div><div class="line">f()</div><div class="line"><span class="keyword">print</span> s  <span class="comment"># foo</span></div><div class="line"><span class="keyword">print</span> d  <span class="comment"># &#123;'a': 1, 'b': 2&#125;</span></div></pre></td></tr></table></figure>
<p>这是因为，在s = ‘bar’这句中，它是“有歧义的“，因为它既可以是表示引用全局变量s，也可以是创建一个新的局部变量，所以在python中，默认它的行为是创建局部变量，除非显式声明global，global定义的本地变量会变成其对应全局变量的一个别名，即是同一个变量。</p>
<p>在d[‘b’]=2这句中，它是“明确的”，因为如果把d当作是局部变量的话，它会报KeyError，所以它只能是引用全局的d,故不需要多此一举显式声明global。</p>
<p>上面这两句赋值语句其实是不同的行为，一个是<strong>rebinding（不可变对象）</strong>, 一个是<strong>mutation（可变对象）</strong>.</p>
<p>但是如果是下面这样：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">d = &#123;<span class="string">'a'</span>:<span class="number">1</span>&#125;</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></div><div class="line">    d = &#123;&#125;</div><div class="line">    d[<span class="string">'b'</span>] = <span class="number">2</span></div><div class="line">f()</div><div class="line"><span class="keyword">print</span> d  <span class="comment"># &#123;'a': 1&#125;</span></div></pre></td></tr></table></figure>
<p>在d = {}这句，它是”有歧义的“了，所以它是创建了局部变量d，而不是引用全局变量d，所以d[‘b’]=2也是操作的局部变量。</p>
<p>推而远之，这一切现象的本质就是”它是否是明确的“。</p>
<p>仔细想想，就会发现不止dict不需要global，所有”明确的“东西都不需要global。因为int类型str类型之类的不可变对象，每一次操作就重建新的对象，他们只有一种修改方法，即x = y， 恰好这种修改方法同时也是创建变量的方法，所以产生了歧义，不知道是要修改还是创建。而dict/list/对象等可变对象，操作不会重建对象，可以通过dict[‘x’]=y或list.append()之类的来修改，跟创建变量不冲突，不产生歧义，所以都不用显式global。</p>
<h2 id="可变对象-list-的-和-append-extend-差别在哪？"><a href="#可变对象-list-的-和-append-extend-差别在哪？" class="headerlink" title="可变对象 list 的 = 和 append/extend 差别在哪？"></a>可变对象 list 的 = 和 append/extend 差别在哪？</h2><p>接上面 5.3 的理论，下面咱们再看一例常见的错误：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="comment"># 测试utf-8编码</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line">list_a = []</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span>:</span></div><div class="line">    list_a = [<span class="number">1</span>]      <span class="comment">## 语句1</span></div><div class="line">a()</div><div class="line"><span class="keyword">print</span> list_a    <span class="comment"># []</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"======================"</span></div><div class="line"></div><div class="line">list_b = []</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">()</span>:</span></div><div class="line">    list_b.append(<span class="number">1</span>)    <span class="comment">## 语句2</span></div><div class="line">b()</div><div class="line"><span class="keyword">print</span> list_b    <span class="comment"># [1]</span></div></pre></td></tr></table></figure>
<p>大家可以看到为什么 语句1 不能改变 list_a 的值，而 语句2 却可以？他们的差别在哪呢？</p>
<p><strong>因为 = 创建了局部变量，而 .append() 或者 .extend() 重用了全局变量。</strong></p>
<h2 id="陷阱：使用可变的默认参数"><a href="#陷阱：使用可变的默认参数" class="headerlink" title="陷阱：使用可变的默认参数"></a>陷阱：使用可变的默认参数</h2><p>我多次见到过如下的代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b, c=[])</span>:</span></div><div class="line"><span class="comment"># append to c</span></div><div class="line"><span class="comment"># do some more stuff</span></div></pre></td></tr></table></figure>
<p>永远不要使用可变的默认参数，可以使用如下的代码代替：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b, c=None)</span>:</span></div><div class="line">    <span class="keyword">if</span> c <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        c = []</div><div class="line">    <span class="comment"># append to c</span></div><div class="line">    <span class="comment"># do some more stuff</span></div></pre></td></tr></table></figure>
<p>‍‍与其解释这个问题是什么，不如展示下使用可变默认参数的影响：‍‍</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">In[<span class="number">2</span>]: <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b, c=[])</span>:</span></div><div class="line"><span class="meta">... </span>       c.append(a)</div><div class="line"><span class="meta">... </span>       c.append(b)</div><div class="line"><span class="meta">... </span>       print(c)</div><div class="line">...</div><div class="line">In[<span class="number">3</span>]: foo(<span class="number">1</span>, <span class="number">1</span>)</div><div class="line">[<span class="number">1</span>, <span class="number">1</span>]</div><div class="line">In[<span class="number">4</span>]: foo(<span class="number">1</span>, <span class="number">1</span>)</div><div class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</div><div class="line">In[<span class="number">5</span>]: foo(<span class="number">1</span>, <span class="number">1</span>)</div><div class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</div></pre></td></tr></table></figure>
<p>同一个变量c在函数调用的每一次都被反复引用。这可能有一些意想不到的后果。</p>
<h1 id="REF："><a href="#REF：" class="headerlink" title="REF："></a>REF：</h1><ul>
<li><a href="http://www.zhihu.com/question/21000872/answer/16856382" target="_blank" rel="external">《learning python》：P130、P134、P202、P204 、P245</a></li>
<li><a href="http://blog.segmentfault.com/sunisdown/1190000000640834" target="_blank" rel="external">理解 Python 的 LEGB</a></li>
<li><a href="http://cenalulu.github.io/python/default-mutable-arguments/" target="_blank" rel="external">Python函数参数默认值的陷阱和原理深究</a></li>
<li><a href="http://python.jobbole.com/81564/" target="_blank" rel="external">潜在的Python陷阱</a></li>
<li><a href="http://segmentfault.com/a/1190000000743526" target="_blank" rel="external">陷阱！python参数默认值</a></li>
<li><a href="http://xianglong.me/article/python-variable-quote-copy-and-scope/" target="_blank" rel="external">Python中的变量、引用、拷贝和作用域</a></li>
<li><a href="http://www.cnblogs.com/wanxsb/archive/2013/05/07/3064783.html" target="_blank" rel="external">Python入门基础知识(1) :locals() 和globals()</a></li>
<li><a href="http://bit.ly/29vnLvz" target="_blank" rel="external">Python程序员写代码时应该避免的16个“坑”</a></li>
</ul>
<hr>
<p><strong><em>转载自 <a href="https://my.oschina.net/leejun2005/blog/145911" target="_blank" rel="external">python基础（5）：深入理解 python 中的赋值、引用、拷贝、作用域</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python的第一个小程序, 蓝牙及串口终端]]></title>
      <url>https://draapho.github.io/2016/11/16/1617-python-terminal/</url>
      <content type="html"><![CDATA[<h1 id="环境与资源"><a href="#环境与资源" class="headerlink" title="环境与资源"></a>环境与资源</h1><ul>
<li>windows 开发环境</li>
<li>python 2.7</li>
<li>pywin32, windows support</li>
<li>pyserial, serial port, com</li>
<li>pygatt, ble</li>
<li>pyinstaller, generate exe file</li>
<li>qt 4.8 (pyqt 4.11), GUI</li>
<li>Bluegiga 的 <a href="http://www.silabs.com/products/wireless/bluetooth/bluetooth-smart-modules/Pages/bled112-bluetooth-smart-dongle.aspx" target="_blank" rel="external">BLED112 Bluetooth Smart Dongle</a></li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul>
<li>略过 python 的安装++</li>
<li>实际做项目的话, 建议使用2.7版本, 32位(这样生成的exe文件是32位的, 能兼容所有机器)</li>
<li>安装 pywin32: <code>pip install pypiwin32</code></li>
<li>安装 pyserial: <code>pip install pyserial</code></li>
<li>安装 pygatt: <code>pip install pygatt</code>, 事实上, pygatt依赖于pyserial. 因此直接装pygatt也可以</li>
<li>安装 pyinstaller: <code>pip install pyinstaller</code></li>
<li>下载并安装 <a href="https://riverbankcomputing.com/software/pyqt/download" target="_blank" rel="external">PyQt4-4.11.4-gpl-Py2.7-Qt4.8.7.exe</a><ul>
<li>注意匹配python版本和32位/64位window</li>
<li>pyqt5 仅支持 python3 以上版本. 我用 python2.7 是因为需要使用其它的库, 如 <a href="https://labjack.com/" target="_blank" rel="external">LabJack</a></li>
<li><code>Qt Designer</code> 用于设计UI, 文件格式为<code>.ui</code>. 它一般位于 <code>C:\Python27\Lib\site-packages\PyQt4\designer.exe</code>. 最终取决于Python安装路径</li>
<li><code>pyuic4.bat</code> 用于将 <code>.ui</code> 文件转换为 <code>.py</code> 文件. 它一般位于 <code>C:\Python27\Lib\site-packages\PyQt4\</code></li>
<li>把 <code>pyuic4.bat</code> 的路径放入系统环境变量, 这样后续就能方便使用这个指令了</li>
</ul>
</li>
<li>windows平台需要借助 <a href="http://www.silabs.com/products/wireless/bluetooth/bluetooth-smart-modules/Pages/bled112-bluetooth-smart-dongle.aspx" target="_blank" rel="external">BLED112 Bluetooth Smart Dongle</a> 这么一个设备才能实现BLE通讯</li>
</ul>
<h1 id="UI设计"><a href="#UI设计" class="headerlink" title="UI设计"></a>UI设计</h1><ul>
<li>可以参考我的另一篇文章 <a href="https://draapho.github.io/2016/10/20/1612-python-pyqtui/">PyQt 的交互操作</a></li>
</ul>
<h2 id="PyQt-入门"><a href="#PyQt-入门" class="headerlink" title="PyQt 入门"></a>PyQt 入门</h2><ul>
<li>为什么选择PyQt? (注意, 如果商用, PyQt是需要授权使用的)</li>
<li><a href="http://ojs.pythonpapers.org/index.php/tpp/article/view/61/57" target="_blank" rel="external">PyGTK, PyQT, Tkinter and wxPython comparison</a></li>
<li>PyQt使用入门:</li>
<li><a href="https://www.tutorialspoint.com/pyqt/index.htm" target="_blank" rel="external">PyQt Tutorial</a>, 新手上路, 建议看到 <code>Using Qt Designer</code> 即可</li>
<li><a href="http://www.training.prace-ri.eu/uploads/tx_pracetmo/QtGuiIntro.pdf" target="_blank" rel="external">Introduction to GUI development using Qt</a>, 整体理解Qt设计思路</li>
<li><a href="http://www.qaulau.com/books/PyQt4_Tutorial/" target="_blank" rel="external">PyQt4教程</a>, 中文版, 分类很细, 便于查阅范例</li>
</ul>
<h2 id="使用-Qt-Designer-设计GUI并生成-gui-py"><a href="#使用-Qt-Designer-设计GUI并生成-gui-py" class="headerlink" title="使用 Qt Designer 设计GUI并生成 gui.py"></a>使用 Qt Designer 设计GUI并生成 gui.py</h2><ul>
<li>使用 <code>Qt Designer</code> 设计 GUI 框架, 并保存<code>gui.ui</code>到项目路径, 如 <code>D:\ble terminal</code></li>
<li>打开cmd终端, 并切换到 <code>D:\ble terminal</code></li>
<li><code>pyuic4.bat -x -o gui.py gui.ui</code> 生成<code>gui.py</code>文件,<ul>
<li><code>-x</code> 表示可执行, 即包含<code>if __name__ == &quot;__main__&quot;</code>这部分代码</li>
<li><code>-o</code> 表示目标文件名</li>
<li>也可以使用命令行 <code>pyuic4.bat demo.ui &gt; demo.py</code>, 效果等同于 <code>pyuic4.bat -o gui.py gui.ui</code></li>
</ul>
</li>
<li>创建 <code>gui_action.py</code> 文件, 用于书写交互操作部分的代码, 基本格式如下<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> gui</div><div class="line"><span class="keyword">from</span> PyQt4.QtGui <span class="keyword">import</span> QApplication, QMainWindow</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GuiAction</span><span class="params">(QMainWindow, gui.Ui_MainWindow)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(self.__class__, self).__init__()</div><div class="line">        self.ui.setupUi(self)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    gui_action = GuiAction()</div><div class="line">    gui_action.show()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="UI线程通讯"><a href="#UI线程通讯" class="headerlink" title="UI线程通讯"></a>UI线程通讯</h1><ul>
<li>可以参考我的另一篇文章 <a href="https://draapho.github.io/2016/10/20/1612-python-pyqtui/">PyQt 的交互操作</a></li>
<li>PyQt的信号和槽, 是一种通讯机制, 可以用于QObject之间的信息交互. 可以参考:<ul>
<li><a href="http://www.training.prace-ri.eu/uploads/tx_pracetmo/QtGuiIntro.pdf" target="_blank" rel="external">Introduction to GUI development using Qt</a></li>
<li><a href="https://www.linuxzen.com/pyqt4-xin-hao-he-cao-xiang-jie.html" target="_blank" rel="external">PyQt4 信号和槽详解</a></li>
</ul>
</li>
<li>参考 <a href="https://nikolak.com/pyqt-threading-tutorial/" target="_blank" rel="external">PyQt: Threading Basics Tutorial</a></li>
<li>关于 QThread 高阶应用和注意事项, 可参考 <a href="http://blog.csdn.net/u011012932/article/details/52186626" target="_blank" rel="external">Qt之QThread（深入理解）</a></li>
<li>本程序使用的线程通讯框架如下:</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GuiAction</span><span class="params">(QMainWindow, gui.Ui_MainWindow)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        ...</div><div class="line">        <span class="comment"># queue_ble 用于传递数据给ble线程 (这样用不好, 可能有风险)</span></div><div class="line">        self.queue_ble = Queue.Queue()</div><div class="line">        <span class="comment"># thread_ble 为 ble 处理线程</span></div><div class="line">        self.thread_ble = ThreadBleServer(self.queue_ble)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cmd_send</span><span class="params">(self)</span>:</span></div><div class="line">        cmd = self.lineEdit.text()</div><div class="line">        <span class="comment"># 通过 queue_ble 传递数据给ble线程</span></div><div class="line">        self.queue_ble.put(cmd)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ble_start</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># 简单理解, 就是将 self.ble_handle 设置为 thread_ble 信号触发后的处理函数</span></div><div class="line">        <span class="comment"># 使用 PyQt_PyObject 作为参数类型具有更好的通用性, 可以传递任何数据.</span></div><div class="line">        self.connect(self.thread_ble, SIGNAL(</div><div class="line">            <span class="string">"ble_handle(PyQt_PyObject, PyQt_PyObject)"</span>), self.ble_handle)</div><div class="line">        <span class="comment"># 启动 ble 处理线程</span></div><div class="line">        self.thread_ble.start()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ble_stop</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># 用于终止 thread_ble 线程</span></div><div class="line">        self.thread_ble.stop_ble()</div><div class="line">        self.disconnect(self.thread_ble, SIGNAL(</div><div class="line">            <span class="string">"ble_handle(PyQt_PyObject, PyQt_PyObject)"</span>), self.ble_handle)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadBleServer</span><span class="params">(QThread)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, queue)</span>:</span></div><div class="line">        QThread.__init__(self)</div><div class="line">        self.stop = <span class="keyword">False</span></div><div class="line">        self.queue = queue</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop_ble</span><span class="params">(self)</span>:</span></div><div class="line">        self.stop = <span class="keyword">True</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.stop:</div><div class="line">            <span class="comment"># 这是一个循环任务, 每100ms执行一次</span></div><div class="line">            time.sleep(<span class="number">0.1</span>)</div><div class="line">            ...</div><div class="line">            <span class="comment"># 非阻塞查询queue队列</span></div><div class="line">            command = str(self.queue.get(<span class="keyword">False</span>))</div><div class="line">            do something after get command ...</div><div class="line">            ...</div><div class="line">            <span class="comment"># 发送信号给主线程</span></div><div class="line">            self.emit(SIGNAL(<span class="string">"ble_handle(PyQt_PyObject, PyQt_PyObject)"</span>), <span class="string">"ble_rx_timeout"</span>, <span class="string">""</span>)</div><div class="line">            ...</div></pre></td></tr></table></figure>
<ul>
<li>上述代码有一个未知风险, 在 QThread 中用了属于 python threading 的 Queque. 更稳妥的方法应该使用 PyQt 的信号和槽解决这个问题, 即<br><code>self.connect(self.cmd_send, SIGNAL(&quot;send_cmd(PyQt_PyObject)&quot;), self.thread_ble)</code></li>
<li>关于 QThread 和 Threading, 简单而言, 如果需要和PyQt打交道, 那就用 QThread, 否则就用 python 自带的 Threading</li>
<li><a href="https://github.com/draapho/ble-terminal" target="_blank" rel="external">全部源码</a> 在 github, 注意, 作为一个练习用程序, 上述错误我没有修改! 目前为止, 没看到不良影响.</li>
</ul>
<h1 id="生成exe文件"><a href="#生成exe文件" class="headerlink" title="生成exe文件"></a>生成exe文件</h1><ul>
<li>可以创建一个 <code>ble-terminal.bat</code> 文件, 点击即可运行. 但终究是显的不够专业, 没法给老板和客户交代. 内容如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@echo off</div><div class="line"></div><div class="line">start pythonw gui_action.py</div><div class="line">exit</div></pre></td></tr></table></figure>
<ul>
<li>windows下, 使用起来最简单的就是 <code>PyInstaller</code> 了. 基本一条指令, 然后需要的关联库全自动解决</li>
<li>其它方案有 <code>Py2Exe</code>, 需要自己配置dll之类的. <code>Py2App</code> 给Mac电脑用的. <code>cx_Freeze</code> 优点是跨平台, 看了下需要先做配置文件.</li>
<li>用一条指令即可生成 <code>.exe</code> 文件<br><code>pyinstaller.exe --windowed gui_action.py</code></li>
<li>另外还可以指定图标, 设置版本信息(需要写好<code>version.txt</code>), 将所有内容绑到单文件. 指令为:<br><code>pyinstaller.exe --onefile --windowed --icon=app.ico --version-file=version.txt gui_action.py</code></li>
<li>详情可参考 <a href="https://mborgerson.com/creating-an-executable-from-a-python-script" target="_blank" rel="external">Creating an Executable from a Python Script</a></li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用python实现BLE通讯]]></title>
      <url>https://draapho.github.io/2016/11/15/1616-python-ble/</url>
      <content type="html"><![CDATA[<h1 id="环境与资源"><a href="#环境与资源" class="headerlink" title="环境与资源"></a>环境与资源</h1><ul>
<li>windows 开发环境</li>
<li>python 2.7</li>
<li><a href="https://github.com/peplin/pygatt" target="_blank" rel="external">pygatt</a></li>
<li>Bluegiga 的 <a href="http://www.silabs.com/products/wireless/bluetooth/bluetooth-smart-modules/Pages/bled112-bluetooth-smart-dongle.aspx" target="_blank" rel="external">BLED112 Bluetooth Smart Dongle</a></li>
</ul>
<h1 id="闲扯"><a href="#闲扯" class="headerlink" title="闲扯"></a>闲扯</h1><ul>
<li>背景, 需要在windows上做一款基于BLE通讯的软件. 第一反应, 痛苦.</li>
<li>使用的是 Bluegiga 的BLE方案, 协议栈芯片内置, 串口通讯即可, 并寻得 <a href="https://github.com/jrowberg/bglib" target="_blank" rel="external">bglib</a> 这么一个python库, 还有范例!</li>
<li>不幸的是, 自己功力不够, 基于此函数库开发出的BLE通讯, 非常不稳定… 没有痛下决心自己写, 于是继续尝试寻找资源.</li>
<li>觅得 <a href="https://github.com/peplin/pygatt" target="_blank" rel="external">pygatt</a> 方案, 三平台全支持! windows 和 mac 下正是基于bglib实现的!</li>
<li><a href="https://github.com/peplin/pygatt" target="_blank" rel="external">pygatt</a> 是python的第三方库, 说明文档比较少, 测试了一下非常好用!</li>
</ul>
<h1 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h1><ul>
<li>DEVICE_ADDRESS, 默认的需要connect的BLE地址</li>
<li>基于 Bluegiga 的 <code>cable_replacement</code> 范例, 其 characteristic uuid 为 <code>e7add780-b042-4876-aae1-112855353cc1</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pygatt</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> binascii</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Many devices, e.g. Fitbit, use random addressing - this is required to connect.</span></div><div class="line">ADDRESS_TYPE = pygatt.BLEAddressType.random</div><div class="line">DEVICE_ADDRESS = <span class="string">"00:07:80:BF:6A:73"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">indication_callback</span><span class="params">(handle, value)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"indication, handle %d: %s "</span> % (handle, value)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pytest</span><span class="params">(address=DEVICE_ADDRESS, type=pygatt.BLEAddressType.public)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        adapter = pygatt.BGAPIBackend()</div><div class="line">        adapter.start()</div><div class="line"></div><div class="line">        <span class="keyword">print</span> <span class="string">"===== adapter.scan() ====="</span></div><div class="line">        devices = adapter.scan()</div><div class="line">        <span class="keyword">for</span> dev <span class="keyword">in</span> devices:</div><div class="line">            <span class="comment"># print dev</span></div><div class="line">            <span class="keyword">print</span> <span class="string">"address: %s, name: %s "</span> % (dev[<span class="string">'address'</span>], dev[<span class="string">'name'</span>])</div><div class="line"></div><div class="line">        <span class="keyword">print</span> <span class="string">"===== adapter.connect() ====="</span></div><div class="line">        device = adapter.connect(address, address_type=type)</div><div class="line">        <span class="keyword">print</span> <span class="string">"address: "</span> + str(device._address)</div><div class="line">        <span class="keyword">print</span> <span class="string">"handle : "</span> + str(device._handle)</div><div class="line">        <span class="keyword">print</span> <span class="string">"rssi   : "</span> + str(device.get_rssi())</div><div class="line"></div><div class="line">        <span class="keyword">print</span> <span class="string">"====== device.discover_characteristics() ====="</span></div><div class="line">        <span class="keyword">for</span> uuid <span class="keyword">in</span> device.discover_characteristics().keys():</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                print(<span class="string">"Read UUID %s (handle %d): %s"</span> %</div><div class="line">                      (uuid, device.get_handle(uuid), binascii.hexlify(device.char_read(uuid))))</div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                print(<span class="string">"Read UUID %s (handle %d): %s"</span> %</div><div class="line">                      (uuid, device.get_handle(uuid), <span class="string">"!deny!"</span>))</div><div class="line"></div><div class="line">        <span class="keyword">print</span> <span class="string">"====== device.char_read() / device.char_read_handle() ====="</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"2a00: "</span> + device.char_read(<span class="string">"00002a00-0000-1000-8000-00805f9b34fb"</span>)</div><div class="line">        <span class="keyword">print</span> <span class="string">"2a00: "</span> + device.char_read_handle(<span class="number">3</span>)</div><div class="line"></div><div class="line">        <span class="keyword">print</span> <span class="string">"====== device.subscribe() ====="</span></div><div class="line">        device.subscribe(<span class="string">"e7add780-b042-4876-aae1-112855353cc1"</span>,</div><div class="line">                         callback=indication_callback, indication=<span class="keyword">True</span>)</div><div class="line">        <span class="comment"># device.receive_notification(8, "test")</span></div><div class="line"></div><div class="line">        <span class="keyword">print</span> <span class="string">"====== device.char_write_handle() ====="</span></div><div class="line">        in_buf = map(ord, <span class="string">"hello world, hello BLE!!!"</span>)</div><div class="line">        <span class="comment"># send via uuid &amp; handle, maximum is 20 bytes</span></div><div class="line">        device.char_write(<span class="string">"e7add780-b042-4876-aae1-112855353cc1"</span>, in_buf[:<span class="number">20</span>])</div><div class="line">        device.char_write_handle(<span class="number">0x08</span>, in_buf[<span class="number">20</span>:])</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (<span class="keyword">True</span>):</div><div class="line">            time.sleep(<span class="number">0.1</span>)</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        adapter.stop()</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="comment"># logging.basicConfig()</span></div><div class="line">    <span class="comment"># logging.getLogger('pygatt').setLevel(logging.DEBUG)</span></div><div class="line">    pytest()</div></pre></td></tr></table></figure>
<h1 id="BleDevice-类"><a href="#BleDevice-类" class="headerlink" title="BleDevice 类"></a>BleDevice 类</h1><ul>
<li>为了方便使用, 自己基于 pygatt 再打包一层</li>
<li>遗憾的是没有disconnect的通知. 可以参考 <a href="https://github.com/peplin/pygatt/issues/72" target="_blank" rel="external">Disconnect event not shown</a></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pygatt</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BleDevice</span><span class="params">(pygatt.BGAPIBackend)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.device = <span class="keyword">None</span></div><div class="line">        self.adapter = pygatt.BGAPIBackend()</div><div class="line">        self.adapter.start()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></div><div class="line">        self.adapter.stop()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">scan</span><span class="params">(self, timeout=<span class="number">5</span>)</span>:</span></div><div class="line">        self.devices = self.adapter.scan(timeout)</div><div class="line">        <span class="keyword">return</span> self.devices</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect_name</span><span class="params">(self, name, devices=None)</span>:</span></div><div class="line">        <span class="keyword">if</span> devices <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            devices = self.devices</div><div class="line">        <span class="keyword">for</span> dev <span class="keyword">in</span> self.devices:</div><div class="line">            <span class="keyword">if</span> name == dev[<span class="string">'name'</span>]:</div><div class="line">                <span class="keyword">return</span> self.connect(dev[<span class="string">'address'</span>])</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self, address)</span>:</span></div><div class="line">        self.device = self.adapter.connect(address)</div><div class="line">        <span class="keyword">return</span> self.device</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">discover_characteristics</span><span class="params">(self, device=None)</span>:</span></div><div class="line">        <span class="keyword">if</span> device <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            device = self.device</div><div class="line">        characteristics = []</div><div class="line">        <span class="keyword">for</span> uuid <span class="keyword">in</span> device.discover_characteristics().keys():</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                device.char_read(uuid)</div><div class="line">                characteristics.append(</div><div class="line">                    &#123;<span class="string">'uuid'</span>: uuid, <span class="string">'handle'</span>: device.get_handle(uuid), <span class="string">'readable'</span>: <span class="keyword">True</span>&#125;)</div><div class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">                <span class="keyword">if</span> <span class="string">"unable to read"</span> <span class="keyword">in</span> str(e).lower():</div><div class="line">                    characteristics.append(</div><div class="line">                        &#123;<span class="string">'uuid'</span>: uuid, <span class="string">'handle'</span>: device.get_handle(uuid), <span class="string">'readable'</span>: <span class="keyword">False</span>&#125;)</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    <span class="keyword">raise</span> e</div><div class="line">        <span class="keyword">return</span> characteristics</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_indication</span><span class="params">(self, uuid, device=None, callback=None, indication=True)</span>:</span></div><div class="line">        <span class="keyword">if</span> device <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            device = self.device</div><div class="line">        device.subscribe(uuid, callback, indication)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_characteristics</span><span class="params">(self, uuid, device=None)</span>:</span></div><div class="line">        <span class="keyword">if</span> device <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            device = self.device</div><div class="line">        <span class="keyword">return</span> device.char_read(uuid)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_characteristics_handle</span><span class="params">(self, handle, device=None)</span>:</span></div><div class="line">        <span class="keyword">if</span> device <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            device = self.device</div><div class="line">        <span class="keyword">return</span> device.char_read_handle(handle)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_characteristics</span><span class="params">(self, str, uuid, device=None)</span>:</span></div><div class="line">        <span class="keyword">if</span> device <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            device = self.device</div><div class="line">        data = map(ord, str)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(data), <span class="number">20</span>):</div><div class="line">            device.char_write(uuid, data[i:i + <span class="number">20</span>])</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_characteristics_handle</span><span class="params">(self, str, handle, device=None)</span>:</span></div><div class="line">        <span class="keyword">if</span> device <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            device = self.device</div><div class="line">        data = map(ord, str)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(data), <span class="number">20</span>):</div><div class="line">            device.char_write_handle(handle, data[i:i + <span class="number">20</span>])</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="comment"># logging.basicConfig()</span></div><div class="line">    <span class="comment"># logging.getLogger('pygatt').setLevel(logging.DEBUG)</span></div><div class="line">    ble = BleDevice()</div><div class="line">    <span class="keyword">print</span> ble.scan()</div><div class="line">    device = ble.connect_name(<span class="string">"Bluegiga CR Demo"</span>)</div><div class="line">    <span class="keyword">print</span> device._address</div><div class="line">    chars = ble.discover_characteristics(device)</div><div class="line">    <span class="keyword">print</span> chars</div><div class="line">    <span class="comment"># print chars[0]['uuid']</span></div><div class="line">    <span class="keyword">print</span> ble.read_characteristics(chars[<span class="number">1</span>][<span class="string">'uuid'</span>])</div><div class="line">    ble.write_characteristics(<span class="string">"hello world"</span>, chars[<span class="number">0</span>][<span class="string">'uuid'</span>])</div></pre></td></tr></table></figure>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[协程/进程/线程资料收集]]></title>
      <url>https://draapho.github.io/2016/11/14/1615-software-thread/</url>
      <content type="html"><![CDATA[<p>协程(Coroutine), 多线程(Thread), 多进程(Multiprocessing)资料繁多, 学无止境, 就集中在这一篇收集贴中. 便于查阅学习</p>
<h1 id="自己的理解"><a href="#自己的理解" class="headerlink" title="自己的理解"></a>自己的理解</h1><ul>
<li>协程, 任务之间不是竞争关系, 而是协作关系, 需要每个任务都需要有一颗舍己为公的心!<ul>
<li>大家排队喝水, 喝到差不多就自己让给下一个人, 自己再去排队! 可按照优先级来插队的.</li>
<li>遇到不讲道理的人, 那这个机制就失效了. 因为没有抢占, 大家都只会默默等待…</li>
<li>优点, 任务切换的代价非常小. 由于没有抢占, 也就没有复杂的临界区问题. 锁的问题也变得简单.</li>
<li>缺点, 这个世界上总有不讲理的人, 所以, 大型任务和系统不敢这么用…</li>
<li>单片机开发是非常适合使用协程的! (资源有限, 需要减小任务切换的开销. 任务可控, 意味着易于协作)</li>
<li>python 下可用 gevent. </li>
</ul>
</li>
</ul>
<ul>
<li>多线程, 任务之间是竞争关系, 高优先级优先执行, 同时又有时间片限制, 避免高优先级任务霸占CPU<ul>
<li>谁强谁喝水, 不过旁边有个管理员, 哪个家伙喝水时间太久了, 就会把他给跩一边去, 大家重新来抢.</li>
<li>线程是共享内存的, 理解为这些水来自于同一个自来水厂(这个水厂有毒的话, 谁了逃不了),</li>
<li>多核就是多个水龙头, 同一时刻可以有多个人在喝水.</li>
<li>优点, 任务的开销比进程小(因为共享内存), 通讯方式多样. 加个水龙头和造个水厂的区别!!!</li>
<li>缺点, 一大帮自私又不讲理的人在一起总是很难管理的… 需要各种锁机制来维持和谐共处…</li>
<li>python的多线程, 由于GIL机制的存在, 是无法利用多核的. (意味着不适用于CPU密集型任务)</li>
<li>python有一个类进程版本的线程池 <code>multiprocessing.pool.ThreadPool</code>, 可以获取返回值<br>由于本质是线程, Windows下terminate方法是没有用的.</li>
</ul>
</li>
</ul>
<ul>
<li>多进程, 任务之间是竞争关系, 任务之间的数据全部隔离, 没有共享.<ul>
<li>进程是资源分配的基本单位. 进程包含线程, 线程共用进程的资源.</li>
<li>进程比线程安全性更高, 因为拥有独立的内存块(独立水厂供水)</li>
<li>进程的建立和调度比线程更费时间和资源</li>
<li>进程间的数据共享和交换很麻烦. (python例子中, 进程内 print 不会打印, 参数传递需要可以pickle)</li>
<li>python 下推荐使用 <code>multiprocessing.pool.Pool</code>. 可以获取返回值.</li>
</ul>
</li>
</ul>
<ul>
<li>进程和线程以及多核<ul>
<li>操作系统必须有一个进程, 创建进程时, 会分配好供这个进程使用的内存和上下文环境.</li>
<li>线程依赖于进程, 多线程运行于同一个进程下面, 会共享同一个进程的内存.</li>
<li>事实上, 线程是最难写好的一种多任务方式(因为共享内存).</li>
<li>以android为例,<ul>
<li>android的每一个应用就是一个linux进程, 所以写的再烂的应用也不会导致整个android系统崩溃.</li>
<li>应用内支持多线程, 也事实上都对应到linux的线程, 这些线程运行在分配好的linux进程中.</li>
</ul>
</li>
<li>进程和线程的概念和单核还是多核一点关系都没有! 先理解好单核再说, 真正涉及到CPU密集型任务时, 再考虑多核优化…</li>
</ul>
</li>
</ul>
<h1 id="优缺点比较"><a href="#优缺点比较" class="headerlink" title="优缺点比较"></a>优缺点比较</h1><ul>
<li>协程具有进程和线程各自的优点. 但其缺点是需要任务间自己来协作调度(很容易写成阻塞等待), 这一点直接导致了通用性很差.</li>
<li><a href="http://blog.csdn.net/lishenglong666/article/details/8557215" target="_blank" rel="external">多线程还是多进程的选择及区别</a>, 比较全面的一篇文章!<ul>
<li>本文也有一个转字, 应该是综合了多种搜素结果写出来的一篇博文. 有结论, 有实验代码和过程</li>
<li>鱼还是熊掌：浅谈多进程多线程的选择</li>
<li>1.进程与线程</li>
<li>一、重复周丽论文实验步骤</li>
<li>二、增加并发数量的实验</li>
<li>三、增加每进程/线程的工作强度的实验</li>
<li>四、多进程和多线程在创建和销毁上的效率比较</li>
<li>五、双核系统重复周丽论文实验步骤</li>
<li>六、并发服务的不可测性</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>对比维度</th>
<th>多进程</th>
<th>多线程</th>
<th>总结</th>
</tr>
</thead>
<tbody>
<tr>
<td>数据共享、同步</td>
<td>数据共享复杂，需要用IPC；数据是分开的，<strong>同步简单</strong></td>
<td>因为共享进程数据，<strong>数据共享简单</strong>，但也是因为这个原因导致同步复杂</td>
<td>各有优势</td>
</tr>
<tr>
<td>内存、CPU</td>
<td>占用内存多，切换复杂，CPU利用率低</td>
<td><strong>占用内存少，切换简单，CPU利用率高</strong></td>
<td>线程占优</td>
</tr>
<tr>
<td>创建销毁、切换</td>
<td>创建销毁、切换复杂，速度慢</td>
<td><strong>创建销毁、切换简单，速度很快</strong></td>
<td>线程占优</td>
</tr>
<tr>
<td>编程、调试</td>
<td><strong>编程简单，调试简单</strong></td>
<td>编程复杂，调试复杂</td>
<td>进程占优</td>
</tr>
<tr>
<td>可靠性</td>
<td><strong>进程间不会互相影响</strong></td>
<td>一个线程挂掉将导致整个进程挂掉</td>
<td>进程占优</td>
</tr>
<tr>
<td>分布式</td>
<td><strong>适应于多核、多机分布式</strong>；如果一台机器不够，扩展到多台机器比较简单</td>
<td>适应于多核分布式</td>
<td>进程占优</td>
</tr>
</tbody>
</table>
<h1 id="资料集"><a href="#资料集" class="headerlink" title="资料集"></a>资料集</h1><ul>
<li><p><a href="https://www.tutorialspoint.com/python/python_multithreading.htm" target="_blank" rel="external">Python Multithreaded Programming</a></p>
<ul>
<li>Python多线程入门教程, 有详细的说明, 源代码及运行结果.</li>
<li>主要有3个示例, 多线程, 多线程同步, 使用Queue来通讯</li>
</ul>
</li>
<li><p><a href="http://www.jianshu.com/p/0e4ff7c856d3" target="_blank" rel="external">Python 多线程</a></p>
<ul>
<li>介绍了Python多线程的状态, 类型</li>
<li>线程的创建, 合并(join), 同步, 锁(Lock, 死锁, RLock), 其它IPC</li>
<li>将子线程设置<strong>后台线程</strong>(setDaemon), 让子线程随主线程一起结束.</li>
<li>提了一下Python的GIL, 参考资料中的一篇对此做了很好的说明: <a href="http://zhuoqiang.me/python-thread-gil-and-ctypes.html" target="_blank" rel="external">python 线程，GIL 和 ctypes</a></li>
</ul>
</li>
<li><p><a href="https://draapho.github.io/2016/11/03/1615-python-ipc/">Python线程同步机制: Locks, RLocks, Semaphores, Conditions, Events和Queues</a></p>
<ul>
<li>线程（Threading）</li>
<li>锁（Lock）</li>
<li>可重入锁（RLock）</li>
<li>条件（Condition）</li>
<li>信号量（Semaphore）</li>
<li>事件（Event）</li>
<li>队列（Queue）, 重点推荐</li>
</ul>
</li>
<li><p><a href="https://my.oschina.net/leejun2005/blog/179265" target="_blank" rel="external">理解 Python 中的多线程</a></p>
<ul>
<li>示例1, 请求五个不同的url. 比较了单线程和多线程性能上的差别</li>
<li>示例2, 全局变量的线程安全问题（race condition）. BUG版和修改版</li>
<li>示例3, 多线程环境下的原子操作. BUG版和修改版</li>
<li>示例4, Python多线程简易版：线程池 threadpool</li>
<li>附上了很多参考和推荐阅读的资料!</li>
</ul>
</li>
<li><p>线程池 threadpool (需安装)</p>
<ul>
<li><a href="http://www.zhidaow.com/post/python-threadpool" target="_blank" rel="external">Python多线程简易版 - 线程池threadpool</a>, 新手上路版</li>
<li><a href="http://chriskiehl.com/article/parallelism-in-one-line/" target="_blank" rel="external">Parallelism in one line</a>, 比较了传统方案和线程池方案, 并给出了范例</li>
<li>这是<code>Parallelism in one line</code>的中文翻译版本, 并有遇到小坑和补充说明. <a href="https://my.oschina.net/leejun2005/blog/194270" target="_blank" rel="external">Python 并行任务技巧</a></li>
<li><strong>注意： threadpool 是非线程安全的</strong>。<ul>
<li>关于线程安全, 可参考<a href="http://blog.csdn.net/xiao__gui/article/details/8934832" target="_blank" rel="external">Java线程安全和非线程安全</a></li>
<li>个人理解, 对于python的非线程安全, 编程时需要特别注意 <code>可变对象</code> 和 <code>不可变对象</code>, 弄清楚Python到底是在<code>赋值</code>还是<code>引用</code>(相当于指针)</li>
<li>可以参考此文 <a href="https://my.oschina.net/leejun2005/blog/145911" target="_blank" rel="external">python基础（5）：深入理解 python 中的赋值、引用、拷贝、作用域</a></li>
</ul>
</li>
<li>初步结论, 还是比较推崇线程池的: 比起经典的方式来说简单很多，效率高，易懂，而且没什么死锁的陷阱。</li>
</ul>
</li>
<li><p><a href="https://my.oschina.net/leejun2005/blog/398826" target="_blank" rel="external">Python 多线程教程：并发与并行</a></p>
<ul>
<li>讲了多线程, 多进程, 以及分布式任务.</li>
<li>原作者已下载网络图片来说明问题, 转发者为了便于测试和理解, 简化了代码.</li>
<li>1, 单线程执行. 花了19.4秒去下载91张图片</li>
<li>2, 多线程. 下载时间变成了4.1秒. 并说明了为何有GIL的情况下, 多线程仍然是有效的(因为是IO密集型的任务)</li>
<li>3, 多进程. 优点, 避免了GIL, 适用于CPU密集型任务. 缺点, 耗内存!</li>
<li>4, 分布式任务. 提了一下<code>RQ</code>和<code>Celery</code></li>
<li>5, 总结: IO密集型，多线程或多进程. CPU密集型, 多进程. 网络应用, 分布式任务</li>
<li>6, 并发、并行区别与联系. 并发, 一个人按优先级处理多件事情(任一时刻只能做一件事情). 并行, 有多个人各自做事(多核多任务).</li>
</ul>
</li>
<li><p><strong>进程池 multiprocessing.Pool 以及 multiprocessing.pool.ThreadPool</strong></p>
<ul>
<li><a href="https://segmentfault.com/a/1190000003044986" target="_blank" rel="external">Python 多进程实践</a><ul>
<li>Python多进程的实现入门级文章</li>
<li>创建子进程的方法: fork, multiprocessing, Pool 进程池</li>
<li>IPC(进程间通讯): Queue, Pipe</li>
</ul>
</li>
<li><a href="http://blog.csdn.net/seetheworld518/article/details/49639651" target="_blank" rel="external">Python 多进程 multiprocessing.Pool类详解</a></li>
<li><a href="http://lucasb.eyer.be/snips/python-thread-pool.html" target="_blank" rel="external">Python’s undocumented ThreadPool</a>, 提了一下 ThreadPool</li>
<li><a href="https://draapho.github.io/2016/11/28/1622-python-time/">python 延时及超时</a>, “学习过程中的例子” 中有尝试使用进程池</li>
<li><a href="http://www.eenot.com/thread-103459-1-1.html" target="_blank" rel="external">Python 中 Ctrl+C 不能终止 Multiprocessing Pool 的解决方</a>, ThreadPool有同样的问题. 可以搜索关键字: Keyboard Interrupts multiprocessing Pool.</li>
<li><a href="http://bugs.python.org/issue17140" target="_blank" rel="external">使用 multiprocessing.pool.ThreadPool 可能的潜在风险</a>, 本质是线程, 而且没有文档说明</li>
</ul>
</li>
<li><p><a href="https://my.oschina.net/leejun2005/blog/203148" target="_blank" rel="external">浅谈 python multiprocessing（多进程）下如何共享变量</a></p>
<ul>
<li>1, 抛出了一个多进程的问题.</li>
<li>2, python 多进程共享变量的几种方式</li>
<li>3, 多进程的问题远不止这么多：数据的同步. (需要Lock)</li>
<li>4, 总结为: 多进程最好还是用IPC(message之类的). 如果一定要用共享变量, 那也是可以的…</li>
</ul>
</li>
<li><p><a href="https://liangxiansen.github.io/2016/08/08/python%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%8D%8F%E7%A8%8B/" target="_blank" rel="external">Python之路：(十五）进程、线程和协程</a></p>
<ul>
<li>Python线程, 线程锁(Lock, Rlock), 其它IPC, 线程池</li>
<li>Python进程, 进程数据共享, 进程IPC. (Python Windows下是可以用进程的, 只是不支持fork)</li>
<li>Python协程, greenlet(主动切换), gevent(遇到IO操作, 自动切换).</li>
</ul>
</li>
<li><p><strong><a href="http://xlambda.com/gevent-tutorial/" target="_blank" rel="external">gevent程序员指南</a></strong></p>
<ul>
<li>核心部分, 较为详细的介绍了 gevent 的原理和使用方式.</li>
<li>数据结构, 介绍了协程之间的通讯工具</li>
<li>真实世界的应用, 几个实际应用的例子</li>
</ul>
</li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python线程同步机制(Locks, RLocks, Semaphores, Conditions, Events和Queues)]]></title>
      <url>https://draapho.github.io/2016/11/03/1615-python-ipc/</url>
      <content type="html"><![CDATA[<p><strong><em>转载自 <a href="http://yoyzhou.github.io/blog/2013/02/28/python-threads-synchronization-locks/" target="_blank" rel="external">Zhou’s Blog, Python线程同步机制: Locks, RLocks, Semaphores, Conditions, Events和Queues</a></em></strong><br><strong><em>翻译自 <a href="http://www.laurentluce.com/posts/python-threads-synchronization-locks-rlocks-semaphores-conditions-events-and-queues/" target="_blank" rel="external">Laurent Luce, Python threads synchronization: Locks, RLocks, Semaphores, Conditions, Events and Queues</a></em></strong></p>
<hr>
<p>本文详细地阐述了Python线程同步机制。你将学习到以下有关Python线程同步机制：Lock，RLock，Semaphore，Condition，Event和Queue，还有Python的内部是如何实现这些机制的。 本文给出的程序的源代码可以在github上找到。</p>
<p>首先让我们来看一个没有使用线程同步的简单程序。</p>
<h1 id="线程（Threading）"><a href="#线程（Threading）" class="headerlink" title="线程（Threading）"></a>线程（Threading）</h1><p>我们希望编程一个从一些URL中获得内容并且将内容写入文件的程序，完成这个程序可以不使用线程，为了加快获取的速度，我们使用2个线程，每个线程处理一半的URL。</p>
<p>注：完成这个程序的最好方式是使用一个URL队列，但是以下面的例子开始我的讲解更加合适。<br>类FetchUrls是threading.Thread的子类，他拥有一个URL列表和一个写URL内容的文件对象。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FetchUrls</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">  <span class="string">"""</span></div><div class="line">  下载URL内容的线程</div><div class="line">  """</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, urls, output)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    构造器</div><div class="line"></div><div class="line">    @param urls 需要下载的URL列表</div><div class="line">    @param output 写URL内容的输出文件</div><div class="line">    """</div><div class="line">    threading.Thread.__init__(self)</div><div class="line">    self.urls = urls</div><div class="line">    self.output = output</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    实现父类Thread的run方法，打开URL，并且一个一个的下载URL的内容</div><div class="line">    """</div><div class="line">    <span class="keyword">while</span> self.urls:</div><div class="line">      url = self.urls.pop()</div><div class="line">      req = urllib2.Request(url)</div><div class="line">      <span class="keyword">try</span>:</div><div class="line">        d = urllib2.urlopen(req)</div><div class="line">      <span class="keyword">except</span> urllib2.URLError, e:</div><div class="line">        <span class="keyword">print</span> <span class="string">'URL %s failed: %s'</span> % (url, e.reason)</div><div class="line">      self.output.write(d.read())</div><div class="line">      <span class="keyword">print</span> <span class="string">'write done by %s'</span> % self.name</div><div class="line">      <span class="keyword">print</span> <span class="string">'URL %s fetched by %s'</span> % (url, self.name)</div></pre></td></tr></table></figure>
<p>main函数启动了两个线程，之后让他们下载URL内容。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">  <span class="comment"># URL列表1</span></div><div class="line">  urls1 = [<span class="string">'http://www.google.com'</span>, <span class="string">'http://www.facebook.com'</span>]</div><div class="line">  <span class="comment"># URL列表2</span></div><div class="line">  urls2 = [<span class="string">'http://www.yahoo.com'</span>, <span class="string">'http://www.youtube.com'</span>]</div><div class="line">  f = open(<span class="string">'output.txt'</span>, <span class="string">'w+'</span>)</div><div class="line">  t1 = FetchUrls(urls1, f)</div><div class="line">  t2 = FetchUrls(urls2, f)</div><div class="line">  t1.start()</div><div class="line">  t2.start()</div><div class="line">  t1.join()</div><div class="line">  t2.join()</div><div class="line">  f.close()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">  main()</div></pre></td></tr></table></figure>
<p>上面的程序将出现两个线程同时写一个文件的情况，导致文件一团乱码。我们需要找到一种在给定的时间里只有一个线程写文件的方法。实现的方法就是使用像锁（Locks）这样的线程同步机制。</p>
<h1 id="锁（Lock）"><a href="#锁（Lock）" class="headerlink" title="锁（Lock）"></a>锁（Lock）</h1><p>锁有两种状态：被锁（locked）和没有被锁（unlocked）。拥有acquire()和release()两种方法，并且遵循一下的规则：</p>
<ul>
<li>如果一个锁的状态是unlocked，调用acquire()方法改变它的状态为locked；</li>
<li>如果一个锁的状态是locked，acquire()方法将会阻塞，直到另一个线程调用release()方法释放了锁；</li>
<li>如果一个锁的状态是unlocked调用release()会抛出RuntimeError异常；</li>
<li>如果一个锁的状态是locked，调用release()方法改变它的状态为unlocked。</li>
</ul>
<p>解决上面两个线程同时写一个文件的问题的方法就是：我们给类FetchUrls的构造器中传入一个锁（lock），使用这个锁来保护文件操作，实现在给定的时间只有一个线程写文件。下面的代码只显示了关于lock部分的修改。完整的源码可以在threads/lock.py中找到。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FetchUrls</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">  ...</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, urls, output, lock)</span>:</span></div><div class="line">    ...</div><div class="line">    self.lock = lock    <span class="comment">#传入的lock对象</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">    ...</div><div class="line">    <span class="keyword">while</span> self.urls:</div><div class="line">      ...</div><div class="line">      self.lock.acquire()   <span class="comment">#获得lock对象，lock状态变为locked，并且阻塞其他线程获取lock对象（写文件的权利）</span></div><div class="line">      <span class="keyword">print</span> <span class="string">'lock acquired by %s'</span> % self.name</div><div class="line">      self.output.write(d.read())</div><div class="line">      <span class="keyword">print</span> <span class="string">'write done by %s'</span> % self.name</div><div class="line">      <span class="keyword">print</span> <span class="string">'lock released by %s'</span> % self.name</div><div class="line">      self.lock.release()   <span class="comment">#释放lock对象，lock状态变为unlocked，其他的线程可以重新获取lock对象</span></div><div class="line">      ...</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">  ...</div><div class="line">  lock = threading.Lock()</div><div class="line">  ...</div><div class="line">  t1 = FetchUrls(urls1, f, lock)</div><div class="line">  t2 = FetchUrls(urls2, f, lock)</div><div class="line">  ...</div></pre></td></tr></table></figure>
<p><img src="https://draapho.github.io/images/1615/lock.png" alt="lock"></p>
<p>以下是程序的输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$ python locks.py</div><div class="line">lock acquired by Thread-2</div><div class="line">write done by Thread-2</div><div class="line">lock released by Thread-2</div><div class="line">URL http://www.youtube.com fetched by Thread-2</div><div class="line">lock acquired by Thread-1</div><div class="line">write done by Thread-1</div><div class="line">lock released by Thread-1</div><div class="line">URL http://www.facebook.com fetched by Thread-1</div><div class="line">lock acquired by Thread-2</div><div class="line">write done by Thread-2</div><div class="line">lock released by Thread-2</div><div class="line">URL http://www.yahoo.com fetched by Thread-2</div><div class="line">lock acquired by Thread-1</div><div class="line">write done by Thread-1</div><div class="line">lock released by Thread-1</div><div class="line">URL http://www.google.com fetched by Thread-1</div></pre></td></tr></table></figure>
<p>从上面的输出我们可以看出，写文件的操作被锁保护，没有出现两个线程同时写一个文件的现象。</p>
<p>下面我们看一下Python内部是如何实现锁（Lock）的。我正在使用的Python版本是Linux操作系统上的Python 2.6.6。</p>
<p>threading模块的Lock()方法就是thread.allocate_lock，代码可以在Lib/threading.py中找到。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Lock = _allocate_lock</div><div class="line">_allocate_lock = thread.allocate_lock</div></pre></td></tr></table></figure>
<p>C的实现在Python/thread_pthread.h中。程序假定你的系统支持POSIX信号量（semaphores）。sem_init()初始化锁（Lock）所在地址的信号量。初始的信号量值是1，意味着锁没有被锁（unlocked）。信号量将在处理器的不同线程之间共享。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function">PyThread_type_lock</span></div><div class="line"><span class="title">PyThread_allocate_lock</span><span class="params">(<span class="keyword">void</span>)</span></div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">    lock = (<span class="keyword">sem_t</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">sem_t</span>));</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (lock) &#123;</div><div class="line">        status = sem_init(lock,<span class="number">0</span>,<span class="number">1</span>);</div><div class="line">        CHECK_STATUS(<span class="string">"sem_init"</span>);</div><div class="line">        ....</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当acquire()方法被调用时，下面的C代码将被执行。默认的waitflag值是1，表示调用将被被阻塞直到锁被释放。sem_wait()方法减少信号量的值或者被阻塞直到信号量大于零。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span></span></div><div class="line"><span class="title">PyThread_acquire_lock</span><span class="params">(PyThread_type_lock lock, <span class="keyword">int</span> waitflag)</span></div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        <span class="keyword">if</span> (waitflag)</div><div class="line">            status = fix_status(sem_wait(thelock));</div><div class="line">        <span class="keyword">else</span></div><div class="line">            status = fix_status(sem_trywait(thelock));</div><div class="line">    &#125; <span class="keyword">while</span> (status == EINTR); <span class="comment">/* Retry if interrupted by a signal */</span></div><div class="line">    ....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当release()方法被调用时，下面的C代码将被执行。sem_post()方法增加信号量。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">PyThread_release_lock</span><span class="params">(PyThread_type_lock lock)</span></div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">    status = sem_post(thelock);</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以将锁（Lock）与“with”语句一起使用，锁可以作为上下文管理器（context manager）。使用“with”语句的好处是：当程序执行到“with”语句时，acquire()方法将被调用，当程序执行完“with”语句时，release()方法会被调用（译注：这样我们就不用显示地调用acquire()和release()方法，而是由“with”语句根据上下文来管理锁的获取和释放。）下面我们用“with”语句重写FetchUrls类。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FetchUrls</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">  ...</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">    ...</div><div class="line">    <span class="keyword">while</span> self.urls:</div><div class="line">      ...</div><div class="line">      <span class="keyword">with</span> self.lock:   <span class="comment">#使用“with”语句管理锁的获取和释放</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'lock acquired by %s'</span> % self.name</div><div class="line">        self.output.write(d.read())</div><div class="line">        <span class="keyword">print</span> <span class="string">'write done by %s'</span> % self.name</div><div class="line">        <span class="keyword">print</span> <span class="string">'lock released by %s'</span> % self.name</div><div class="line">      ...</div></pre></td></tr></table></figure>
<h1 id="可重入锁（RLock）"><a href="#可重入锁（RLock）" class="headerlink" title="可重入锁（RLock）"></a>可重入锁（RLock）</h1><p>RLock是可重入锁（reentrant lock），acquire()能够不被阻塞的被同一个线程调用多次。要注意的是release()需要调用与acquire()相同的次数才能释放锁。</p>
<p>使用Lock，下面的代码第二次调用acquire()时将被阻塞：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">lock = threading.Lock()</div><div class="line">lock.acquire()</div><div class="line">lock.acquire()</div></pre></td></tr></table></figure>
<p>如果你使用的是RLock，下面的代码第二次调用acquire()不会被阻塞:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rlock = threading.RLock()</div><div class="line">rlock.acquire()</div><div class="line">rlock.acquire()</div></pre></td></tr></table></figure>
<p>RLock使用的同样是thread.allocate_lock()，不同的是他跟踪宿主线程（the owner thread）来实现可重入的特性。下面是RLock的acquire()实现。如果调用acquire()的线程是资源的所有者，记录调用acquire()次数的计数器就会加1。如果不是，就将试图去获取锁。线程第一次获得锁时，锁的拥有者将会被保存，同时计数器初始化为1。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">acquire</span><span class="params">(self, blocking=<span class="number">1</span>)</span>:</span></div><div class="line">    me = _get_ident()</div><div class="line">    <span class="keyword">if</span> self.__owner == me:</div><div class="line">        self.__count = self.__count + <span class="number">1</span></div><div class="line">        ...</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    rc = self.__block.acquire(blocking)</div><div class="line">    <span class="keyword">if</span> rc:</div><div class="line">        self.__owner = me</div><div class="line">        self.__count = <span class="number">1</span></div><div class="line">        ...</div><div class="line">    ...</div><div class="line">    <span class="keyword">return</span> rc</div></pre></td></tr></table></figure>
<p>下面我们看一下可重入锁（RLock）的release()方法。首先它会去确认调用者是否是锁的拥有者。如果是的话，计数器减1；如果计数器为0，那么锁将会被释放，这时其他线程就可以去获取锁了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">release</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">if</span> self.__owner != _get_ident():</div><div class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">"cannot release un-acquired lock"</span>)</div><div class="line">    self.__count = count = self.__count - <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> count:</div><div class="line">        self.__owner = <span class="keyword">None</span></div><div class="line">        self.__block.release()</div><div class="line">        ...</div><div class="line">    ...</div></pre></td></tr></table></figure>
<h1 id="条件（Condition）"><a href="#条件（Condition）" class="headerlink" title="条件（Condition）"></a>条件（Condition）</h1><p>条件同步机制是指：一个线程等待特定条件，而另一个线程发出特定条件满足的信号。 解释条件同步机制的一个很好的例子就是生产者/消费者（producer/consumer）模型。生产者随机的往列表中“生产”一个随机整数，而消费者从列表中“消费”整数。完整的源码可以在threads/condition.py中找到</p>
<p>在producer类中，producer获得锁，生产一个随机整数，通知消费者有了可用的“商品”，并且释放锁。producer无限地向列表中添加整数，同时在两个添加操作中间随机的停顿一会儿。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">  <span class="string">"""</span></div><div class="line">  向列表中生产随机整数</div><div class="line">  """</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, integers, condition)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    构造器</div><div class="line"></div><div class="line">    @param integers 整数列表</div><div class="line">    @param condition 条件同步对象</div><div class="line">    """</div><div class="line">    threading.Thread.__init__(self)</div><div class="line">    self.integers = integers</div><div class="line">    self.condition = condition</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    实现Thread的run方法。在随机时间向列表中添加一个随机整数</div><div class="line">    """</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">      integer = random.randint(<span class="number">0</span>, <span class="number">256</span>)</div><div class="line">      self.condition.acquire()  <span class="comment">#获取条件锁</span></div><div class="line">      <span class="keyword">print</span> <span class="string">'condition acquired by %s'</span> % self.name</div><div class="line">      self.integers.append(integer)</div><div class="line">      <span class="keyword">print</span> <span class="string">'%d appended to list by %s'</span> % (integer, self.name)</div><div class="line">      <span class="keyword">print</span> <span class="string">'condition notified by %s'</span> % self.name</div><div class="line">      self.condition.notify()   <span class="comment">#唤醒消费者线程</span></div><div class="line">      <span class="keyword">print</span> <span class="string">'condition released by %s'</span> % self.name</div><div class="line">      self.condition.release()  <span class="comment">#释放条件锁</span></div><div class="line">      time.sleep(<span class="number">1</span>)     <span class="comment">#暂停1秒钟</span></div></pre></td></tr></table></figure>
<p>下面是消费者（consumer）类。它获取锁，检查列表中是否有整数，如果没有，等待生产者的通知。当消费者获取整数之后，释放锁。<br>注意在wait()方法中会释放锁，这样生产者就能获得资源并且生产“商品”。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">  <span class="string">"""</span></div><div class="line">  从列表中消费整数</div><div class="line">  """</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, integers, condition)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    构造器</div><div class="line"></div><div class="line">    @param integers 整数列表</div><div class="line">    @param condition 条件同步对象</div><div class="line">    """</div><div class="line">    threading.Thread.__init__(self)</div><div class="line">    self.integers = integers</div><div class="line">    self.condition = condition</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    实现Thread的run()方法，从列表中消费整数</div><div class="line">    """</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">      self.condition.acquire()  <span class="comment">#获取条件锁</span></div><div class="line">      <span class="keyword">print</span> <span class="string">'condition acquired by %s'</span> % self.name</div><div class="line">      <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">if</span> self.integers:   <span class="comment">#判断是否有整数</span></div><div class="line">          integer = self.integers.pop()</div><div class="line">          <span class="keyword">print</span> <span class="string">'%d popped from list by %s'</span> % (integer, self.name)</div><div class="line">          <span class="keyword">break</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'condition wait by %s'</span> % self.name</div><div class="line">        self.condition.wait()   <span class="comment">#等待商品，并且释放资源</span></div><div class="line">      <span class="keyword">print</span> <span class="string">'condition released by %s'</span> % self.name</div><div class="line">      self.condition.release()  <span class="comment">#最后释放条件锁</span></div></pre></td></tr></table></figure>
<p><img src="https://draapho.github.io/images/1615/condition.png" alt="condition"></p>
<p>下面我们编写main方法，创建两个线程：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">  integers = []</div><div class="line">  condition = threading.Condition()</div><div class="line">  t1 = Producer(integers, condition)</div><div class="line">  t2 = Consumer(integers, condition)</div><div class="line">  t1.start()</div><div class="line">  t2.start()</div><div class="line">  t1.join()</div><div class="line">  t2.join()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">  main()</div></pre></td></tr></table></figure>
<p>下面是程序的输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ python condition.py</div><div class="line">condition acquired by Thread-1</div><div class="line">159 appended to list by Thread-1</div><div class="line">condition notified by Thread-1</div><div class="line">condition released by Thread-1</div><div class="line">condition acquired by Thread-2</div><div class="line">159 popped from list by Thread-2</div><div class="line">condition released by Thread-2</div><div class="line">condition acquired by Thread-2</div><div class="line">condition wait by Thread-2</div><div class="line">condition acquired by Thread-1</div><div class="line">116 appended to list by Thread-1</div><div class="line">condition notified by Thread-1</div><div class="line">condition released by Thread-1</div><div class="line">116 popped from list by Thread-2</div><div class="line">condition released by Thread-2</div><div class="line">condition acquired by Thread-2</div><div class="line">condition wait by Thread-2</div></pre></td></tr></table></figure>
<p>Thread-1添加159到列表中，通知消费者同时释放锁，Thread-2获得锁，取回159，并且释放锁。此时因为执行time.sleep(1)，生产者正在睡眠，当消费者再次试图获取整数时，列表中并没有整数，这时消费者进入等待状态，等待生产者的通知。当wait()被调用时，它会释放资源，从而生产者能够利用资源生产整数。</p>
<p>下面我们看一下Python内部是如何实现条件同步机制的。如果用户没有传入锁（lock）对象，condition类的构造器创建一个可重入锁（RLock），这个锁将会在调用acquire()和release()时使用。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">_Condition</span><span class="params">(_Verbose)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, lock=None, verbose=None)</span>:</span></div><div class="line">        _Verbose.__init__(self, verbose)</div><div class="line">        <span class="keyword">if</span> lock <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            lock = RLock()</div><div class="line">        self.__lock = lock</div></pre></td></tr></table></figure>
<p>接下来是wait()方法。为了简化说明，我们假定在调用wait()方法时不使用timeout参数。wait()方法创建了一个名为waiter的锁，并且设置锁的状态为locked。这个waiter锁用于线程间的通讯，这样生产者（在生产完整数之后）就可以通知消费者释放waiter()锁。锁对象将会被添加到等待者列表，并且在调用waiter.acquire()时被阻塞。一开始condition锁的状态被保存，并且在wait()结束时被恢复。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">wait</span><span class="params">(self, timeout=None)</span>:</span></div><div class="line">    ...</div><div class="line">    waiter = _allocate_lock()</div><div class="line">    waiter.acquire()</div><div class="line">    self.__waiters.append(waiter)</div><div class="line">    saved_state = self._release_save()</div><div class="line">    <span class="keyword">try</span>:    <span class="comment"># 无论如何恢复状态 (例如, KeyboardInterrupt)</span></div><div class="line">        <span class="keyword">if</span> timeout <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            waiter.acquire()</div><div class="line">            ...</div><div class="line">        ...</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        self._acquire_restore(saved_state)</div></pre></td></tr></table></figure>
<p>当生产者调用notify()方法时，notify()释放waiter锁，唤醒被阻塞的消费者。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">notify</span><span class="params">(self, n=<span class="number">1</span>)</span>:</span></div><div class="line">    ...</div><div class="line">    __waiters = self.__waiters</div><div class="line">    waiters = __waiters[:n]</div><div class="line">    ...</div><div class="line">    <span class="keyword">for</span> waiter <span class="keyword">in</span> waiters:</div><div class="line">        waiter.release()</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            __waiters.remove(waiter)</div><div class="line">        <span class="keyword">except</span> ValueError:</div><div class="line">            <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>同样Condition对象也可以和“with”语句一起使用，这样“with”语句上下文会帮我们调用acquire()和release()方法。下面的代码使用“with”语句改写了生产者和消费者类。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">  ...</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">      integer = random.randint(<span class="number">0</span>, <span class="number">256</span>)</div><div class="line">      <span class="keyword">with</span> self.condition:</div><div class="line">        <span class="keyword">print</span> <span class="string">'condition acquired by %s'</span> % self.name</div><div class="line">        self.integers.append(integer)</div><div class="line">        <span class="keyword">print</span> <span class="string">'%d appended to list by %s'</span> % (integer, self.name)</div><div class="line">        <span class="keyword">print</span> <span class="string">'condition notified by %s'</span> % self.name</div><div class="line">        self.condition.notify()</div><div class="line">        <span class="keyword">print</span> <span class="string">'condition released by %s'</span> % self.name</div><div class="line">      time.sleep(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">  ...</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">      <span class="keyword">with</span> self.condition:</div><div class="line">        <span class="keyword">print</span> <span class="string">'condition acquired by %s'</span> % self.name</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">          <span class="keyword">if</span> self.integers:</div><div class="line">            integer = self.integers.pop()</div><div class="line">            <span class="keyword">print</span> <span class="string">'%d popped from list by %s'</span> % (integer, self.name)</div><div class="line">            <span class="keyword">break</span></div><div class="line">          <span class="keyword">print</span> <span class="string">'condition wait by %s'</span> % self.name</div><div class="line">          self.condition.wait()</div><div class="line">        <span class="keyword">print</span> <span class="string">'condition released by %s'</span> % self.name</div></pre></td></tr></table></figure>
<h1 id="信号量（Semaphore）"><a href="#信号量（Semaphore）" class="headerlink" title="信号量（Semaphore）"></a>信号量（Semaphore）</h1><p>信号量同步基于内部计数器，每调用一次acquire()，计数器减1；每调用一次release()，计数器加1.当计数器为0时，acquire()调用被阻塞。这是迪科斯彻（Dijkstra）信号量概念P()和V()的Python实现。信号量同步机制适用于访问像服务器这样的有限资源。</p>
<p>信号量同步的例子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">semaphore = threading.Semaphore()</div><div class="line">semaphore.acquire()</div><div class="line"> <span class="comment"># 使用共享资源</span></div><div class="line">...</div><div class="line">semaphore.release()</div></pre></td></tr></table></figure>
<p>让我们看一下信号量同步在Python内部是如何实现的。构造器使用参数value来表示计数器的初始值，默认值为1。一个条件锁实例用于保护计数器，同时当信号量被释放时通知其他线程。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">_Semaphore</span><span class="params">(_Verbose)</span>:</span></div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value=<span class="number">1</span>, verbose=None)</span>:</span></div><div class="line">        _Verbose.__init__(self, verbose)</div><div class="line">        self.__cond = Condition(Lock())</div><div class="line">        self.__value = value</div><div class="line">        ...</div></pre></td></tr></table></figure>
<p>acquire()方法。如果信号量为0，线程被条件锁的wait()方法阻塞，直到被其他线程唤醒；如果计数器大于0，调用acquire()使计数器减1。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">acquire</span><span class="params">(self, blocking=<span class="number">1</span>)</span>:</span></div><div class="line">    rc = <span class="keyword">False</span></div><div class="line">    self.__cond.acquire()</div><div class="line">    <span class="keyword">while</span> self.__value == <span class="number">0</span>:</div><div class="line">        ...</div><div class="line">        self.__cond.wait()</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        self.__value = self.__value - <span class="number">1</span></div><div class="line">        rc = <span class="keyword">True</span></div><div class="line">    self.__cond.release()</div><div class="line">    <span class="keyword">return</span> rc</div></pre></td></tr></table></figure>
<p>信号量类的release()方法增加计数器的值并且唤醒其他线程。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">release</span><span class="params">(self)</span>:</span></div><div class="line">    self.__cond.acquire()</div><div class="line">    self.__value = self.__value + <span class="number">1</span></div><div class="line">    self.__cond.notify()</div><div class="line">    self.__cond.release()</div></pre></td></tr></table></figure>
<p>还有一个“有限”(bounded)信号量类，可以确保release()方法的调用次数不能超过给定的初始信号量数值(value参数)，下面是“有限”信号量类的Python代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">_BoundedSemaphore</span><span class="params">(_Semaphore)</span>:</span></div><div class="line">    <span class="string">"""检查release()的调用次数是否小于等于acquire()次数"""</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value=<span class="number">1</span>, verbose=None)</span>:</span></div><div class="line">        _Semaphore.__init__(self, value, verbose)</div><div class="line">        self._initial_value = value</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">release</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self._Semaphore__value &gt;= self._initial_value:</div><div class="line">            <span class="keyword">raise</span> ValueError, <span class="string">"Semaphore released too many times"</span></div><div class="line">        <span class="keyword">return</span> _Semaphore.release(self)</div></pre></td></tr></table></figure>
<p>样信号量(Semaphore)对象可以和“with”一起使用：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">semaphore = threading.Semaphore()</div><div class="line"><span class="keyword">with</span> semaphore:</div><div class="line">  <span class="comment"># 使用共享资源</span></div><div class="line">  ...</div></pre></td></tr></table></figure>
<h1 id="事件（Event）"><a href="#事件（Event）" class="headerlink" title="事件（Event）"></a>事件（Event）</h1><p>基于事件的同步是指：一个线程发送/传递事件，另外的线程等待事件的触发。 让我们再来看看前面的生产者和消费者的例子，现在我们把它转换成使用事件同步而不是条件同步。完整的源码可以在threads/event.py里面找到。</p>
<p>首先是生产者类，我们传入一个Event实例给构造器而不是Condition实例。一旦整数被添加进列表，事件(event)被设置和发送去唤醒消费者。注意事件(event)实例默认是被发送的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">  <span class="string">"""</span></div><div class="line">  向列表中生产随机整数</div><div class="line">  """</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, integers, event)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    构造器</div><div class="line"></div><div class="line">    @param integers 整数列表</div><div class="line">    @param event 事件同步对象</div><div class="line">    """</div><div class="line">    threading.Thread.__init__(self)</div><div class="line">    self.integers = integers</div><div class="line">    self.event = event</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    实现Thread的run方法。在随机时间向列表中添加一个随机整数</div><div class="line">    """</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">      integer = random.randint(<span class="number">0</span>, <span class="number">256</span>)</div><div class="line">      self.integers.append(integer)</div><div class="line">      <span class="keyword">print</span> <span class="string">'%d appended to list by %s'</span> % (integer, self.name)</div><div class="line">      <span class="keyword">print</span> <span class="string">'event set by %s'</span> % self.name</div><div class="line">      self.event.set()      <span class="comment">#设置事件</span></div><div class="line">      self.event.clear()    <span class="comment">#发送事件</span></div><div class="line">      <span class="keyword">print</span> <span class="string">'event cleared by %s'</span> % self.name</div><div class="line">      time.sleep(<span class="number">1</span>)</div></pre></td></tr></table></figure>
<p>同样我们传入一个Event实例给消费者的构造器，消费者阻塞在wait()方法，等待事件被触发，即有可供消费的整数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">  <span class="string">"""</span></div><div class="line">   从列表中消费整数</div><div class="line">  """</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, integers, event)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    构造器</div><div class="line"></div><div class="line">    @param integers 整数列表</div><div class="line">    @param event 事件同步对象</div><div class="line">    """</div><div class="line">    threading.Thread.__init__(self)</div><div class="line">    self.integers = integers</div><div class="line">    self.event = event</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    实现Thread的run()方法，从列表中消费整数</div><div class="line">    """</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">      self.event.wait() <span class="comment">#等待事件被触发</span></div><div class="line">      <span class="keyword">try</span>:</div><div class="line">        integer = self.integers.pop()</div><div class="line">        <span class="keyword">print</span> <span class="string">'%d popped from list by %s'</span> % (integer, self.name)</div><div class="line">      <span class="keyword">except</span> IndexError:</div><div class="line">        <span class="comment"># catch pop on empty list</span></div><div class="line">        time.sleep(<span class="number">1</span>)</div></pre></td></tr></table></figure>
<p><img src="https://draapho.github.io/images/1615/event.png" alt="event"></p>
<p>下面是程序的输出，Thread-1添加124到整数列表中，然后设置事件并且唤醒消费者。消费者从wait()方法中唤醒，在列表中获取到整数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ python event.py</div><div class="line">124 appended to list by Thread-1</div><div class="line">event set by Thread-1</div><div class="line">event cleared by Thread-1</div><div class="line">124 popped from list by Thread-2</div><div class="line">223 appended to list by Thread-1</div><div class="line">event set by Thread-1</div><div class="line">event cleared by Thread-1</div><div class="line">223 popped from list by Thread-2</div></pre></td></tr></table></figure>
<p>事件锁的Python内部实现，首先是Event锁的构造器。构造器中创建了一个条件（Condition）锁，来保护事件标志（event flag）,同事唤醒其他线程当事件被设置时。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">_Event</span><span class="params">(_Verbose)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, verbose=None)</span>:</span></div><div class="line">        _Verbose.__init__(self, verbose)</div><div class="line">        self.__cond = Condition(Lock())</div><div class="line">        self.__flag = <span class="keyword">False</span></div></pre></td></tr></table></figure>
<p>接下来是set()方法，它设置事件标志为True，并且唤醒其他线程。条件锁对象保护程序修改事件标志状态的关键部分。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(self)</span>:</span></div><div class="line">    self.__cond.acquire()</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        self.__flag = <span class="keyword">True</span></div><div class="line">        self.__cond.notify_all()</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        self.__cond.release()</div></pre></td></tr></table></figure>
<p>而clear()方法正好相反，它设置时间标志为False。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self)</span>:</span></div><div class="line">    self.__cond.acquire()</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        self.__flag = <span class="keyword">False</span></div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        self.__cond.release()</div></pre></td></tr></table></figure>
<p>最后，wait()方法将阻塞直到调用了set()方法，当事件标志为True时，wait()方法就什么也不做。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">wait</span><span class="params">(self, timeout=None)</span>:</span></div><div class="line">    self.__cond.acquire()</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.__flag: <span class="comment">#如果flag不为真</span></div><div class="line">            self.__cond.wait(timeout)</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        self.__cond.release()</div></pre></td></tr></table></figure>
<h1 id="队列（Queue）"><a href="#队列（Queue）" class="headerlink" title="队列（Queue）"></a>队列（Queue）</h1><p>队列是一个非常好的线程同步机制，使用队列我们不用关心锁，队列会为我们处理锁的问题。 队列(Queue)有以下4个用户感兴趣的方法：</p>
<ul>
<li>put: 向队列中添加一个项；</li>
<li>get: 从队列中删除并返回一个项；</li>
<li>task_done: 当某一项任务完成时调用；</li>
<li>join: 阻塞直到所有的项目都被处理完。</li>
</ul>
<p>下面我们将上面的生产者/消费者的例子转换成使用队列。源代码可以在threads/queue.py中找到。</p>
<p>首先是生产者类，我们不需要传入一个整数列表，因为我们使用队列就可以存储生成的整数。生产者线程在一个无限循环中生成整数并将生成的整数添加到队列中。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">  <span class="string">"""</span></div><div class="line">  向队列中生产随机整数</div><div class="line">  """</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, queue)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    构造器</div><div class="line"></div><div class="line">    @param integers 整数列表    #译注：不需要这个参数</div><div class="line">    @param queue 队列同步对象</div><div class="line">    """</div><div class="line">    threading.Thread.__init__(self)</div><div class="line">    self.queue = queue</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    实现Thread的run方法。在随机时间向队列中添加一个随机整数</div><div class="line">    """</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">      integer = random.randint(<span class="number">0</span>, <span class="number">256</span>)</div><div class="line">      self.queue.put(integer)   <span class="comment">#将生成的整数添加到队列</span></div><div class="line">      <span class="keyword">print</span> <span class="string">'%d put to queue by %s'</span> % (integer, self.name)</div><div class="line">      time.sleep(<span class="number">1</span>)</div></pre></td></tr></table></figure>
<p>下面是消费者类。线程从队列中获取整数，并且在任务完成时调用task_done()方法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">  <span class="string">"""</span></div><div class="line">  从队列中消费整数</div><div class="line">  """</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, queue)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    构造器</div><div class="line"></div><div class="line">    @param integers 整数列表    #译注：不需要这个参数</div><div class="line">    @param queue 队列同步对象</div><div class="line">    """</div><div class="line">    threading.Thread.__init__(self)</div><div class="line">    self.queue = queue</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    实现Thread的run()方法，从队列中消费整数</div><div class="line">    """</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">      integer = self.queue.get()</div><div class="line">      <span class="keyword">print</span> <span class="string">'%d popped from list by %s'</span> % (integer, self.name)</div><div class="line">      self.queue.task_done()</div></pre></td></tr></table></figure>
<p>以下是程序的输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ python queue.py</div><div class="line">61 put to queue by Thread-1</div><div class="line">61 popped from list by Thread-2</div><div class="line">6 put to queue by Thread-1</div><div class="line">6 popped from list by Thread-2</div></pre></td></tr></table></figure>
<p>队列同步的最大好处就是队列帮我们处理了锁。现在让我们去看看在Python内部是如何实现队列同步机制的。</p>
<p>队列（Queue）构造器创建一个锁，保护队列元素的添加和删除操作。同时创建了一些条件锁对象处理队列事件，比如队列不空事件（削除get()的阻塞），队列不满事件（削除put()的阻塞）和所有项目都被处理完事件（削除join()的阻塞）。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, maxsize=<span class="number">0</span>)</span>:</span></div><div class="line">        ...</div><div class="line">        self.mutex = threading.Lock()</div><div class="line">        self.not_empty = threading.Condition(self.mutex)</div><div class="line">        self.not_full = threading.Condition(self.mutex)</div><div class="line">        self.all_tasks_done = threading.Condition(self.mutex)</div><div class="line">        self.unfinished_tasks = <span class="number">0</span></div></pre></td></tr></table></figure>
<p>put()方法向队列中添加一个项，或者阻塞如果队列已满。这时队列非空，它唤醒阻塞在get()方法中的线程。更多关于Condition锁的内容请查看上面的讲解。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, item, block=True, timeout=None)</span>:</span></div><div class="line">    ...</div><div class="line">    self.not_full.acquire()</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">if</span> self.maxsize &gt; <span class="number">0</span>:</div><div class="line">            ...</div><div class="line">            <span class="keyword">elif</span> timeout <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                <span class="keyword">while</span> self._qsize() == self.maxsize:</div><div class="line">                    self.not_full.wait()</div><div class="line">        self._put(item)</div><div class="line">        self.unfinished_tasks += <span class="number">1</span></div><div class="line">        self.not_empty.notify()</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        self.not_full.release()</div></pre></td></tr></table></figure>
<p>get()方法从队列中获得并删除一个项，或者阻塞当队列为空时。这时队列不满，他唤醒阻塞在put()方法中的线程。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, block=True, timeout=None)</span>:</span></div><div class="line">    ...</div><div class="line">    self.not_empty.acquire()</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        ...</div><div class="line">        <span class="keyword">elif</span> timeout <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">while</span> <span class="keyword">not</span> self._qsize():</div><div class="line">                self.not_empty.wait()</div><div class="line">        item = self._get()</div><div class="line">        self.not_full.notify()</div><div class="line">        <span class="keyword">return</span> item</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        self.not_empty.release()</div></pre></td></tr></table></figure>
<p>当调用task_done()方法时，未完成任务的数量减1。如果未完成任务的数量为0，线程等待队列完成join()方法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_done</span><span class="params">(self)</span>:</span></div><div class="line">    self.all_tasks_done.acquire()</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        unfinished = self.unfinished_tasks - <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> unfinished &lt;= <span class="number">0</span>:</div><div class="line">            <span class="keyword">if</span> unfinished &lt; <span class="number">0</span>:</div><div class="line">                <span class="keyword">raise</span> ValueError(<span class="string">'task_done() called too many times'</span>)</div><div class="line">            self.all_tasks_done.notify_all()</div><div class="line">        self.unfinished_tasks = unfinished</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        self.all_tasks_done.release()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">join</span><span class="params">(self)</span>:</span></div><div class="line">    self.all_tasks_done.acquire()</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">while</span> self.unfinished_tasks:</div><div class="line">            self.all_tasks_done.wait()</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        self.all_tasks_done.release()</div></pre></td></tr></table></figure>
<p><img src="https://draapho.github.io/images/1615/queue.png" alt="queue"></p>
<p>本文到此结束，希望您喜欢这篇文章。欢迎您的留言和反馈。</p>
<hr>
<p><strong><em>转载自 <a href="http://yoyzhou.github.io/blog/2013/02/28/python-threads-synchronization-locks/" target="_blank" rel="external">Zhou’s Blog, Python线程同步机制: Locks, RLocks, Semaphores, Conditions, Events和Queues</a></em></strong><br><strong><em>翻译自 <a href="http://www.laurentluce.com/posts/python-threads-synchronization-locks-rlocks-semaphores-conditions-events-and-queues/" target="_blank" rel="external">Laurent Luce, Python threads synchronization: Locks, RLocks, Semaphores, Conditions, Events and Queues</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git 初始设置及常用命令]]></title>
      <url>https://draapho.github.io/2016/10/24/1614-CheatSheet-git/</url>
      <content type="html"><![CDATA[<h1 id="git示意图"><a href="#git示意图" class="headerlink" title="git示意图"></a>git示意图</h1><p>  <img src="https://draapho.github.io/images/1614/git.jpg" alt="git"></p>
<h1 id="资料和参考"><a href="#资料和参考" class="headerlink" title="资料和参考"></a>资料和参考</h1><ul>
<li><a href="http://ndpsoftware.com/git-cheatsheet.html" target="_blank" rel="external">Visual Git Cheat Sheet</a></li>
<li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">Pro Git book</a></li>
<li>廖雪峰的 <a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">Git教程</a></li>
<li>设置SSH, 参考 <a href="https://help.github.com/categories/ssh/" target="_blank" rel="external">GitHub Help - SSH</a></li>
<li>设置GPG, 参考 <a href="https://help.github.com/categories/gpg/" target="_blank" rel="external">GitHub Help - GPG</a></li>
</ul>
<h1 id="一些理解"><a href="#一些理解" class="headerlink" title="一些理解"></a>一些理解</h1><ul>
<li>git的核心理解为指针即可, 包括 <code>workspace</code>, <code>index</code>, <code>commitHash</code><ul>
<li><code>repository</code>是基于<code>commitHash</code>管理版本的.</li>
<li><code>HEAD</code>, <code>HEAD^1</code>, <code>HEAD~3</code>, <code>branch</code>, <code>tags</code>都是<code>commitHash</code>的别名, 便于人们记忆和理解.</li>
<li>可以基于 <code>git reset</code> 来检测是否完全理解git基于指针的设计思路.</li>
<li><code>HEAD^1</code>基于父节点, <code>HEAD~1</code>基于层次. 单层结构下没有差别. 复杂多层结构建议直接用 <code>commitHash</code></li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">       A ---------------------  A =      = A^0</div><div class="line">      / \</div><div class="line">     B   C                      B = A^   = A^1     = A~1</div><div class="line">    /|\  |                      C = A^2  = A^2</div><div class="line">   / | \ |</div><div class="line">  D  E   F -------------------  D = A^^  = A^1^1   = A~2</div><div class="line"> / \    / \                     E = B^2  = A^^2</div><div class="line">/   \  /   \                    F = B^3  = A^^3</div><div class="line">G   H  I   J -----------------  G = A^^^ = A^1^1^1 = A~3</div><div class="line">                                H = D^2  = B^^2    = A^^^2  = A~2^2</div><div class="line">                                I = F^   = B^3^    = A^^3^</div><div class="line">                                J = F^2  = B^3^2   = A^^3^2</div></pre></td></tr></table></figure>
<ul>
<li>git的命令, 常见格式为 <code>git diff p1 p2 -- file</code>. 意为, 比较<code>p1</code>与<code>p2</code>两处指定file的区别<ul>
<li><code>p1</code> 缺省指向workspace, <code>p2</code> 缺省指向index.</li>
<li><code>--</code> 接文件或目录, 名字无歧义时可以省去<code>--</code>. (如 git checkout name 就可能有歧义, branch OR file?)</li>
<li><code>.</code> 表示所有的文件, 如 <code>git add .</code></li>
</ul>
</li>
<li>学会查看帮助, 加上 <code>-h</code> 即可. 如 <code>git checkout -h</code><ul>
<li><code>[]</code> 表示可选项, <code>&lt;&gt;</code> 表示必填项</li>
</ul>
</li>
</ul>
<h1 id="初始安装"><a href="#初始安装" class="headerlink" title="初始安装"></a>初始安装</h1><ul>
<li><p>新建git仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># Create local repository</div><div class="line"># put &quot;.gitignore&quot; to project root direct.</div><div class="line">git init                        # create local repository</div><div class="line">git add README.md               # add somefiles</div><div class="line">git commit -m &quot;first commit&quot;    # commit to local repository</div><div class="line"></div><div class="line"># link with remote repository</div><div class="line">git remote add origin url       # add remote repository, &lt;url&gt; like https://... OR ssh://...</div><div class="line">git push -u origin master       # -u, 指定默认远程主机为 origin</div><div class="line"></div><div class="line"># Clone existing repository</div><div class="line">git clone url                   # &lt;url&gt; like https://... OR ssh://...</div><div class="line"></div><div class="line"># more cmd about config</div><div class="line">git config --list               # show config</div><div class="line">git config -e                   # edit local config file</div><div class="line">git config -e --global          # edit global config file</div></pre></td></tr></table></figure>
</li>
<li><p>使用命令设置全局参数. (可跳过, 建议使用 <code>git config -e --global</code>)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"># global setting</div><div class="line">git config --global user.name &quot;Your Name&quot;</div><div class="line">git config --global user.email &quot;email@example.com&quot;</div><div class="line"></div><div class="line"># alise setting</div><div class="line">git config --global alias.a &apos;add&apos;</div><div class="line">git config --global alias.aa &apos;add .&apos;</div><div class="line">git config --global alias.b &apos;branch&apos;</div><div class="line">git config --global alias.bb &apos;branch -a -v&apos;</div><div class="line">git config --global alias.co &apos;checkout&apos;</div><div class="line">git config --global alias.cm &apos;commit -m&apos;</div><div class="line">git config --global alias.lg &quot;log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit&quot;</div><div class="line">git config --global alias.ll &quot;log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit -10&quot;</div><div class="line">git config --global alias.st &apos;status&apos;</div><div class="line">git config --global alias.diffname &apos;diff --name-status&apos;</div><div class="line"></div><div class="line"># set diff color</div><div class="line">git config --global color.diff.old &quot;red normal bold&quot;</div><div class="line">git config --global color.diff.new &quot;green normal bold&quot;</div><div class="line"></div><div class="line"># solve the warning, LF will be replaced by CRLF</div><div class="line">git config --global core.autocrlf false</div><div class="line">git config --global core.safecrlf false</div><div class="line"></div><div class="line"># set difftool mergetool (need p4merge)</div><div class="line">git config --global diff.tool p4merge</div><div class="line">git config --global difftool.p4merge.cmd &apos;&quot;D:\Program\Perforce\p4merge.exe&quot; &quot;$LOCAL&quot; &quot;$REMOTE&quot;&apos;</div><div class="line">git config --global difftool.prompt false</div><div class="line">git config --global merge.tool p4merge</div><div class="line">git config --global mergetool.p4merge.cmd &apos;&quot;D:\Program\Perforce\p4merge.exe&quot; &quot;$PWD/$BASE&quot; &quot;$PWD/$REMOTE&quot; &quot;$PWD/$LOCAL&quot; &quot;$PWD/$MERGED&quot;&apos;</div><div class="line">git config --global mergetool.p4merge.trustExitCode false</div><div class="line">git config --global mergetool.keepBackup false</div></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>git config -e --global</code> 打开全局配置文件, 设置全局参数.</p>
</li>
<li>安装 <a href="https://www.perforce.com/product/components/perforce-visual-merge-and-diff-tools" target="_blank" rel="external">p4merge</a>, 用于支持 <code>difftool</code> 和 <code>mergetool</code></li>
<li>安装位置以 <code>D:\Program\Perforce\p4merge.exe</code> 为例<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">[user]</div><div class="line">    name = https://draapho.github.io/</div><div class="line">    email = draapho@gmail.com</div><div class="line">[alias]</div><div class="line">    a = add</div><div class="line">    aa = add .</div><div class="line">    b = branch</div><div class="line">    bb = branch -a -v</div><div class="line">    co = checkout</div><div class="line">    cm = commit -m</div><div class="line">    lg = log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit</div><div class="line">    ll = log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit -10</div><div class="line">    st = status</div><div class="line">    diffname = diff --name-status</div><div class="line">[color &quot;diff&quot;]</div><div class="line">    old = red normal bold</div><div class="line">    new = green normal bold</div><div class="line">[core]</div><div class="line">    autocrlf = false</div><div class="line">    safecrlf = false</div><div class="line">[diff]</div><div class="line">    tool = p4merge</div><div class="line">[difftool &quot;p4merge&quot;]</div><div class="line">    cmd = \&quot;D:\\Program\\Perforce\\p4merge.exe\&quot; \&quot;$LOCAL\&quot; \&quot;$REMOTE\&quot;</div><div class="line">[difftool]</div><div class="line">    prompt = false</div><div class="line">[merge]</div><div class="line">    tool = p4merge</div><div class="line">[mergetool &quot;p4merge&quot;]</div><div class="line">    cmd = \&quot;D:\\Program\\Perforce\\p4merge.exe\&quot; \&quot;$PWD/$BASE\&quot; \&quot;$PWD/$REMOTE\&quot; \&quot;$PWD/$LOCAL\&quot; \&quot;$PWD/$MERGED\&quot;</div><div class="line">    trustExitCode = false</div><div class="line">[mergetool]</div><div class="line">    keepBackup = false</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"># 查看信息</div><div class="line">git st                          # git status            # 显示工作区变更的文件</div><div class="line">git lg                          # git log 增强版        # 显示所有提交</div><div class="line">git ll                          # git lg -10            # 显示过去10次提交</div><div class="line">git shortlog -sn                                        # 显示所有提交过的用户</div><div class="line">git show --name-only commit                             # 显示某次提交发生变化的文件</div><div class="line"></div><div class="line"># stash                                                 # 少量且短时间的使用!</div><div class="line">git stash                                               # workspace-&gt;stash(藏匿处)</div><div class="line">git stash pop                                           # stash(不保存)-&gt;workspace</div><div class="line"></div><div class="line"># 提交文件</div><div class="line">git aa                          # git add .             # workspace-&gt;index</div><div class="line">git a *.c *.h                   # &lt;file | dir&gt;          # 添加指定文件</div><div class="line">git reset HEAD [file]           # discard file @index   # add的逆操作 HEAD-&gt;index</div><div class="line">git cm &quot;msg&quot;                    # git commit -m &quot;msg&quot;   # index-&gt;repository</div><div class="line">git commit --amend -m &quot;message&quot;                         # 修改/替换之前的提交</div><div class="line"></div><div class="line"># 分支操作</div><div class="line">git b name                      # git branch name       # 创建分支</div><div class="line">git b name commit                                       # 基于指定 commit 创建分支</div><div class="line">git b -d name                   # branch delete         # 删除分支</div><div class="line">git b -dr origin/name           # delete remote         # 删除远程分支</div><div class="line">git b -m new_name               # git branch --move     # 重命名分支</div><div class="line">git bb                          # git branch -a         # 查看所有分支</div><div class="line">git remote -v                                           # 查看远程分支</div><div class="line">git co name                     # git checkout name     # 切换分支</div><div class="line">git co -b name                  # checkout &amp; branch     # 创建并切换分支</div><div class="line"></div><div class="line"># 版本合并和回退</div><div class="line">git merge branch                # 合并branch到当前分支</div><div class="line">git mergetool                   # 已图形化工具处理文件冲突 (如 p4merge.exe)</div><div class="line">git cherry-pick commit          # 合并commit到当前分支</div><div class="line">git rebase -i HEAD~3            # 修改/压缩多个提交, 根据提示操作, 第一行不能是squash!</div><div class="line">git revert commit               # 提交逆操作来实现版本恢复, 不影响任何历史记录!</div><div class="line">git push                                                # 推送到默认的远程主机</div><div class="line">git push -f                     # --force               # 忽略冲突, 强制推送</div><div class="line">git pull                        # fetch &amp; merge         # 合并远程分支到当前分支</div><div class="line"></div><div class="line"># tag                           # 用于标记一个版本, 可以替代 commitHash</div><div class="line">git tag                         # 查看版本</div><div class="line">git tag v100                    # 创建版本</div><div class="line">git tag -d v100                 # 删除版本</div><div class="line">git push --tags                 # 推送tag</div><div class="line"></div><div class="line"># 查看差异</div><div class="line">git diff                        # workspace VS index (p1缺省指向workspace, p2缺省指向index)</div><div class="line">git diff p1 p2                  # p1 VS p2, 可以是 HEAD~1, commitHash值, TAG, 分支名称</div><div class="line">git diff p1 p2 -- *.c *.h       # -- 指定文件或目录, 可省</div><div class="line">git diff --name-status p1 p2    # 获得变更的文件列表</div><div class="line">git diff --stat p1 p2           # 统计变更的数据</div><div class="line">git difftool p1 p2 -- file      # 使用图形化工具显示差异 (如 p4merge.exe)</div><div class="line"></div><div class="line"># 撤销</div><div class="line">git checkout p1 -- file         # p1-&gt;index-&gt;workspace  # p1缺省为index, --和file可省</div><div class="line">git reset p1 -- file            # p1-&gt;HEAD-&gt;index,      # p1缺省为HEAD, --和file可省</div><div class="line">git reset --soft p1             # p1-&gt;HEAD                      # p1缺省为HEAD, 不可带file参</div><div class="line">git reset --hard p1             # p1-&gt;HEAD-&gt;index &amp; workspace   # p1缺省为HEAD, 不可带file参</div><div class="line"></div><div class="line">git checkout .                  # index-&gt;workspace      # 清除工作区的变更(!!!危险操作)</div><div class="line">git checkout branch             # branch-&gt;index-&gt;workspace      # 切换分支</div><div class="line">git reset --hard                # HEAD-&gt;index &amp; workspace       # 恢复仓库到HEAD状态</div><div class="line">git reset HEAD^ file            # HEAD^-&gt;HEAD-&gt;index            # 指定file, 进行版本回滚</div><div class="line">git reset --soft HEAD~3         # HEAD~3-&gt;HEAD                  # 版本回滚</div></pre></td></tr></table></figure>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python调用命令行]]></title>
      <url>https://draapho.github.io/2016/10/21/1613-python-cli/</url>
      <content type="html"><![CDATA[<h1 id="python调用CLI"><a href="#python调用CLI" class="headerlink" title="python调用CLI"></a>python调用CLI</h1><ul>
<li>CLI = Command Line Interface, 即命令行</li>
<li>方法有很多, 通用性和安全性最好的就是<code>subprocess.Popen</code>这个方法. 见文档<ul>
<li><a href="https://docs.python.org/2.7/library/subprocess.html#popen-constructor" target="_blank" rel="external">Subprocess management</a></li>
<li><del><a href="https://docs.python.org/2.7/library/os.html#os.popen" target="_blank" rel="external">os.popen</a></del></li>
<li><del><a href="https://docs.python.org/2/library/commands.html" target="_blank" rel="external">Utilities for running commands</a></del></li>
</ul>
</li>
<li>example:</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen, PIPE</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># CLI: Command Line Interface</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">runCLI</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># __cmd_link = self.cur_dir + "\\stlink_cli\\ST-LINK_CLI.exe -c SWD SWJCLK=5 UR"</span></div><div class="line">    __cmd_link = <span class="string">"dir"</span></div><div class="line"></div><div class="line">    <span class="comment"># 多用 shell=True. shell=False只能运行bat文件或直接在终端中执行. 此例中显示的内容也会有区别</span></div><div class="line">    _pp = Popen(__cmd_link, shell=<span class="keyword">True</span>, stdout=PIPE, stderr=PIPE)</div><div class="line">    out, err = _pp.communicate()</div><div class="line"></div><div class="line">    logging.debug(<span class="string">"cmd &gt; "</span> + __cmd_link)</div><div class="line">    logging.debug(<span class="string">"out &gt; "</span> + out.rstrip())</div><div class="line">    logging.debug(<span class="string">"err &gt; "</span> + err.rstrip())</div><div class="line">    <span class="keyword">return</span> _pp.returncode</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    logging.basicConfig(level=logging.DEBUG)</div><div class="line">    logging.debug(runCLI())</div></pre></td></tr></table></figure>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PyQt 的交互操作]]></title>
      <url>https://draapho.github.io/2016/10/20/1612-python-pyqtui/</url>
      <content type="html"><![CDATA[<h1 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h1><ul>
<li>Windows</li>
<li><a href="https://www.python.org/downloads/" target="_blank" rel="external">python 2.7</a></li>
<li><a href="https://riverbankcomputing.com/software/pyqt/download" target="_blank" rel="external">PyQt 4.11.4</a></li>
</ul>
<h1 id="useful-guide-startup"><a href="#useful-guide-startup" class="headerlink" title="useful guide / startup"></a>useful guide / startup</h1><ul>
<li><a href="http://www.training.prace-ri.eu/uploads/tx_pracetmo/QtGuiIntro.pdf" target="_blank" rel="external">Introduction to GUI development using Qt</a>, 简单明了的介绍了qt gui的基本特性</li>
<li><a href="https://www.tutorialspoint.com/pyqt/" target="_blank" rel="external">PyQt Tutorial</a>, learn PyQt step by step.</li>
<li><a href="https://nikolak.com/pyqt-threading-tutorial/" target="_blank" rel="external">PyQt: Threading Basics Tutorial</a>, 防止UI阻塞, 使用线程</li>
</ul>
<h1 id="Generate-basic-UI-file"><a href="#Generate-basic-UI-file" class="headerlink" title="Generate basic UI file"></a>Generate basic UI file</h1><ul>
<li>use <code>Qt Designer</code> to create basic UI<ul>
<li><code>New</code>-&gt;<code>Widget</code>-&gt;drag <code>PushButton</code> to <code>Form</code> Window</li>
<li>Save it, for example <code>demo.ui</code></li>
</ul>
</li>
<li>make sure <code>pyuic4.bat</code> is in the System PATH<ul>
<li>input <code>pyuic4.bat -h</code> in shell, check the response.</li>
</ul>
</li>
<li>change <code>.ui</code> to <code>.py</code> file<ul>
<li>run <code>pyuic4.bat -x -o demo.py demo.ui</code> in the working folder.</li>
<li><code>-o</code> means output, set the output filename.</li>
<li><code>-x</code> will generate <code>if __name__ == &#39;__main__&#39;:</code> then can run directly</li>
<li><code>pyuic4.bat demo.ui &gt; demo.py</code> is also OK.</li>
</ul>
</li>
<li><del>the sample of <code>demo.py</code>, generated automatically by pyuic4.bat</del></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="comment"># Form implementation generated from reading ui file 'demo.ui'</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Created by: PyQt4 UI code generator 4.11.4</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># WARNING! All changes made in this file will be lost!</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> PyQt4 <span class="keyword">import</span> QtCore, QtGui</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    _fromUtf8 = QtCore.QString.fromUtf8</div><div class="line"><span class="keyword">except</span> AttributeError:</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_fromUtf8</span><span class="params">(s)</span>:</span></div><div class="line">        <span class="keyword">return</span> s</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    _encoding = QtGui.QApplication.UnicodeUTF8</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_translate</span><span class="params">(context, text, disambig)</span>:</span></div><div class="line">        <span class="keyword">return</span> QtGui.QApplication.translate(context, text, disambig, _encoding)</div><div class="line"><span class="keyword">except</span> AttributeError:</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_translate</span><span class="params">(context, text, disambig)</span>:</span></div><div class="line">        <span class="keyword">return</span> QtGui.QApplication.translate(context, text, disambig)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ui_Form</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setupUi</span><span class="params">(self, Form)</span>:</span></div><div class="line">        Form.setObjectName(_fromUtf8(<span class="string">"Form"</span>))</div><div class="line">        self.pushButton = QtGui.QPushButton(Form)</div><div class="line">        self.pushButton.setGeometry(QtCore.QRect(<span class="number">40</span>, <span class="number">40</span>, <span class="number">75</span>, <span class="number">23</span>))</div><div class="line">        self.pushButton.setObjectName(_fromUtf8(<span class="string">"pushButton"</span>))</div><div class="line"></div><div class="line">        self.retranslateUi(Form)</div><div class="line">        QtCore.QMetaObject.connectSlotsByName(Form)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retranslateUi</span><span class="params">(self, Form)</span>:</span></div><div class="line">        Form.setWindowTitle(_translate(<span class="string">"Form"</span>, <span class="string">"Form"</span>, <span class="keyword">None</span>))</div><div class="line">        self.pushButton.setText(_translate(<span class="string">"Form"</span>, <span class="string">"PushButton"</span>, <span class="keyword">None</span>))</div><div class="line"></div><div class="line"><span class="comment"># using -x will generate the following code</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="keyword">import</span> sys</div><div class="line">    app = QtGui.QApplication(sys.argv)</div><div class="line">    Form = QtGui.QWidget()</div><div class="line">    ui = Ui_Form()</div><div class="line">    ui.setupUi(Form)</div><div class="line">    Form.show()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<ul>
<li><del>run &amp; check the　UI</del><ul>
<li>run <code>python demo.py</code> in the working folder.</li>
<li>OR run directly in editor like atom.</li>
</ul>
</li>
</ul>
<h1 id="click-then-do-sth"><a href="#click-then-do-sth" class="headerlink" title="click then do sth"></a>click then do sth</h1><ul>
<li>create a new py file, for example <code>show.py</code>. input code like:</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> demo  <span class="comment"># generated from xxx.ui</span></div><div class="line"><span class="keyword">from</span> PyQt4 <span class="keyword">import</span> QtGui</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyForm</span><span class="params">(QtGui.QWidget, demo.Ui_Form)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(self.__class__, self).__init__()  <span class="comment"># QtGui.QWidget.__init__()</span></div><div class="line">        self.setupUi(self)</div><div class="line">        self.pushButton.clicked.connect(</div><div class="line">            self.handleButton)  <span class="comment"># here is important line</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handleButton</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> (<span class="string">"hello, https://draapho.github.io/"</span>)</div><div class="line">        <span class="comment"># size = self.geometry()</span></div><div class="line">        <span class="comment"># self.resize(size.width() + 2, size.height() + 2)</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    app = QtGui.QApplication(sys.argv)</div><div class="line">    form = MyForm()</div><div class="line">    form.show()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<ul>
<li>look at <code>self.ui.pushButton.clicked.connect(self.handleButton)</code><br>it links clicked event with handleButton function.</li>
<li>if you want to resize the window after clicked the button. change <code>handleButton</code> to</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handleButton</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="comment"># print ("hello, https://draapho.github.io/")</span></div><div class="line">    size = self.geometry()</div><div class="line">    self.resize(size.width() + <span class="number">2</span>, size.height() + <span class="number">2</span>)</div></pre></td></tr></table></figure>
<h1 id="click-then-do-heavy-work"><a href="#click-then-do-heavy-work" class="headerlink" title="click then do heavy work"></a>click then do heavy work</h1><ul>
<li><p><del>bad code, UI totally dead</del></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PyQt4 <span class="keyword">import</span> QtGui</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> demo</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyForm</span><span class="params">(QtGui.QWidget, demo.Ui_Form)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(self.__class__, self).__init__()</div><div class="line">        self.setupUi(self)</div><div class="line">        self.pushButton.clicked.connect(self.startCount)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startCount</span><span class="params">(self)</span>:</span></div><div class="line">        self.pushButton.clicked.disconnect()</div><div class="line">        self.pushButton.clicked.connect(self.stopCount)</div><div class="line">        i = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> i &lt; <span class="number">15</span>:</div><div class="line">            i += <span class="number">1</span></div><div class="line">            self.pushButton.setText(str(i))</div><div class="line">            <span class="keyword">print</span> i</div><div class="line">            time.sleep(<span class="number">1</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stopCount</span><span class="params">(self)</span>:</span></div><div class="line">        self.pushButton.clicked.disconnect()</div><div class="line">        self.pushButton.clicked.connect(self.startCount)</div><div class="line">        self.pushButton.setText(<span class="string">"PushButton"</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app = QtGui.QApplication(sys.argv)</div><div class="line">    form = MyForm()</div><div class="line">    form.show()</div><div class="line">    app.exec_()</div></pre></td></tr></table></figure>
</li>
<li><p>use thread, can do everything in UI</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PyQt4 <span class="keyword">import</span> QtGui</div><div class="line"><span class="keyword">from</span> PyQt4.QtCore <span class="keyword">import</span> QThread, SIGNAL</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> demo</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">getCountThread</span><span class="params">(QThread)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        QThread.__init__(self)</div><div class="line">        self.count = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        self.wait()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">while</span> self.count &lt; <span class="number">15</span>:</div><div class="line">            self.count += <span class="number">1</span></div><div class="line">            self.emit(SIGNAL(<span class="string">'showCount(int)'</span>), self.count)</div><div class="line">            <span class="keyword">print</span> self.count</div><div class="line">            self.sleep(<span class="number">1</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyForm</span><span class="params">(QtGui.QWidget, demo.Ui_Form)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(self.__class__, self).__init__()</div><div class="line">        self.setupUi(self)</div><div class="line">        self.pushButton.clicked.connect(self.startCount)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startCount</span><span class="params">(self)</span>:</span></div><div class="line">        self.pushButton.clicked.disconnect()</div><div class="line">        self.get_thread = getCountThread()</div><div class="line">        self.connect(self.get_thread, SIGNAL(<span class="string">"showCount(int)"</span>), self.showCount)</div><div class="line">        self.connect(self.get_thread, SIGNAL(<span class="string">"finished()"</span>), self.done)</div><div class="line">        self.get_thread.start()</div><div class="line">        <span class="comment"># must be under the self.get_thread.start()</span></div><div class="line">        self.pushButton.clicked.connect(self.get_thread.terminate)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showCount</span><span class="params">(self, count)</span>:</span></div><div class="line">        self.pushButton.setText(str(count))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">done</span><span class="params">(self)</span>:</span></div><div class="line">        self.pushButton.clicked.disconnect()</div><div class="line">        self.pushButton.setText(<span class="string">"PushButton"</span>)</div><div class="line">        self.pushButton.clicked.connect(self.startCount)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app = QtGui.QApplication(sys.argv)</div><div class="line">    form = MyForm()</div><div class="line">    form.show()</div><div class="line">    app.exec_()</div></pre></td></tr></table></figure>
</li>
<li><p>explanation</p>
<ul>
<li><code>getCountThread</code> 子线程类, 执行繁重任务</li>
<li><code>MyForm</code>-&gt;<code>startCount</code> 点击按键后执行, 设置好信号, 启动子线程</li>
<li><code>self.connect(self.get_thread, SIGNAL(&quot;showCount(int)&quot;), self.showCount)</code><br>准备接收来自线程的信号, 并在 <code>showCount</code> 更新UI</li>
<li><code>self.connect(self.get_thread, SIGNAL(&quot;finished()&quot;), self.done)</code><br>准备接收来自线程的结束信号, 然后在 <code>done</code> 下更新标记和UI</li>
<li><code>self.get_thread.start()</code><br>启动子线程</li>
<li><code>self.pushButton.clicked.connect(self.get_thread.terminate)</code><br>将按键的功能设置为终止子线程, 必须放在 <code>self.get_thread.start()</code> 下面</li>
</ul>
</li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows 软件系列-开发软件]]></title>
      <url>https://draapho.github.io/2016/10/16/1611-WinSoft-other/</url>
      <content type="html"><![CDATA[<h1 id="eclipse"><a href="#eclipse" class="headerlink" title="eclipse"></a><a href="https://eclipse.org/downloads/" target="_blank" rel="external">eclipse</a></h1><ul>
<li><a href="https://eclipse.org/downloads/" target="_blank" rel="external">eclipse</a> 就不做介绍了.</li>
<li>设置主题<ul>
<li><code>Window</code>-&gt;<code>Preferences</code>-&gt;<code>General</code>-&gt;<code>Appearance</code>-&gt;<code>Color Theme</code>-&gt;<code>Sublime Text 2</code></li>
</ul>
</li>
<li>设置编辑界面<ul>
<li><code>Window</code>-&gt;<code>Preferences</code>-&gt; <code>General</code>-&gt;<code>Editors</code>-&gt;<code>Text Editors</code>-&gt;<ul>
<li><code>Insert spaces for tabs</code></li>
<li><code>Show print margin</code></li>
<li><code>Show whitespace characters</code>-&gt;<code>configure visibility</code>-&gt;<del><code>Carriage Return</code></del> <del><code>Line Feed</code></del></li>
</ul>
</li>
<li><code>Window</code>-&gt;<code>Preferences</code>-&gt; <code>General</code>-&gt;<code>Editors</code>-&gt;<code>Text Editors</code>-&gt;<code>Quick Diff</code><ul>
<li><code>Enable Quick Diff</code></li>
<li><code>Use this reference source:</code>-&gt;<code>A Git Revision</code></li>
<li>需要装好git</li>
</ul>
</li>
</ul>
</li>
<li>设置路径<ul>
<li><code>Window</code>-&gt;<code>Preferences</code>-&gt;<code>Team</code>-&gt;<code>Git</code>-&gt;<code>Default repository folder:</code>-&gt;<code>${project_loc}</code></li>
<li><code>Window</code>-&gt;<code>Preferences</code>-&gt;<code>Terminal</code>-&gt;<code>Local Terminal</code>-&gt;<code>Initial Working Directory</code>-&gt;<code>${project_loc}</code></li>
<li>注意, 上述两项需要有git项目并编译后, 才可以成功设置</li>
</ul>
</li>
<li>设置快捷键<ul>
<li><code>Window</code>-&gt;<code>Preferences</code>-&gt;<code>General</code>-&gt;<code>Keys</code> 可设置快捷键</li>
<li>快捷键设置要求见 <a href="https://draapho.github.io/2016/10/08/1607-Shortcut-win/">Windows快捷键</a></li>
<li>配置文件名为 <code>org.eclipse.ui.workbench.prefs</code>, 路径如下, $workspace$ 表示 eclipse 的工作路径.</li>
<li><code>$workspace$\.metadata\.plugins\org.eclipse.core.runtime\.settings</code>下</li>
<li>TrueSTUIDO版的快捷键见TureSTUDIO</li>
</ul>
</li>
</ul>
<h1 id="TrueSTUIDO"><a href="#TrueSTUIDO" class="headerlink" title="TrueSTUIDO"></a><a href="http://atollic.com/truestudio/" target="_blank" rel="external">TrueSTUIDO</a></h1><ul>
<li><a href="http://atollic.com/truestudio/" target="_blank" rel="external">TrueSTUIDO</a>是一款免费的ARM IDE, 基于eclipse. 免费版有5s广告.</li>
<li>快捷键配置文件<ul>
<li>我的配置文件 <a href="https://github.com/draapho/Blog/tree/master/_blog_stuff/TrueSTUIDIO/org.eclipse.ui.workbench.prefs" target="_blank" rel="external">org.eclipse.ui.workbench.prefs</a></li>
<li>下载后直接覆盖放入 <code>$workspace$/.metadata/.plugins/org.eclipse.core.runtime/.settings/</code></li>
</ul>
</li>
<li><a href="https://www.youtube.com/watch?v=R2hfq4S_-B0" target="_blank" rel="external">TrueSTUIDO Download and Reset (no debug)</a><ul>
<li><code>Run</code>-&gt;<code>Debug Configurations...</code>-&gt;<code>Embedded C/C++...</code>下的文件-&gt;<code>Startup Scripts</code></li>
<li>delete all context after <code>load</code> and input <code>quit</code></li>
<li><code>Window</code>-&gt;<code>Perspective</code>-&gt;<code>Customize Pespective...</code>-&gt;<code>Launch</code>-&gt;选择 <code>Debug</code> 和 <code>Run</code></li>
</ul>
</li>
<li>生成指定格式<ul>
<li>项目右键 <code>Properties</code>-&gt;<code>C/C++ Build</code>-&gt;<code>Settings</code>-&gt;<code>Tool Settings</code>-&gt;<code>Other</code>-&gt;<code>Output format</code>-&gt;<code>Convert build output</code>-&gt;<code>Intel Hex</code> or <code>Binary</code></li>
</ul>
</li>
</ul>
<h1 id="RealView-MDK"><a href="#RealView-MDK" class="headerlink" title="RealView MDK"></a>RealView MDK</h1><ul>
<li>RVMDK 设置成utf8格式. <code>Edit</code>-&gt;<code>Configuration</code>-&gt;<code>Editor</code>-&gt;<code>Encoding</code>-&gt;<code>UTF8</code></li>
</ul>
<h1 id="Source-Insight"><a href="#Source-Insight" class="headerlink" title="Source Insight"></a>Source Insight</h1><ul>
<li>添加完文件后, 需要同步. <code>Project</code>-&gt;<code>Synchronize Files...</code></li>
<li>添加文件类型. <code>Options</code>-&gt;<code>Document Options</code>-&gt;<code>Document Type</code>, 在file filter内增加文件类型即可</li>
</ul>
<h1 id="使用mingw编译C语言"><a href="#使用mingw编译C语言" class="headerlink" title="使用mingw编译C语言"></a>使用mingw编译C语言</h1><ul>
<li>主要用于写一些小程序用来验证或测试. 与linux开发习惯一致, 而且免费轻巧快捷.</li>
<li><p>下载 <a href="http://www.mingw.org/" target="_blank" rel="external">MinGW</a>, 安装并设置好环境变量.</p>
<ul>
<li>安装好后, 只是 MinGW Installation Manager, 实际上是个绿色软件. 打开后继续安装组件</li>
<li><code>Basic Setup</code>-&gt;<code>mingw32-base</code> 和 <code>mingw32-gcc-g++</code>-&gt;左上 <code>Installation</code>-&gt;<code>Apply changes</code>-&gt;等待安装完成.</li>
<li>这里只需要编译c和c++文件, 无需安装其它组件了.</li>
<li>设置 <code>...\MinGW\bin</code> 文件夹到系统环境变量中</li>
<li>复制一份 <code>mingw32-make.exe</code> 并重命名为 <code>make.exe</code>, 这样就能直接用 make 指令了</li>
<li>测试. 终端中输入 <code>make -v</code> 和 <code>gcc -v</code>, 看是否可以识别到指令</li>
</ul>
</li>
<li><p>建立一个工作目录, 建立2个文件即可. 一个 <code>.c</code>, 另一个 <code>makefile</code> 即可</p>
<ul>
<li><p>创建并命名为 <code>main.c</code></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\r\nhello: %s\r\n"</span>, <span class="string">"DRA&amp;PHO"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>创建并命名为 <code>makefile</code></p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">test:main.o</div><div class="line">    gcc -o hello main.o</div><div class="line"></div><div class="line">main.o:main.c</div><div class="line">    gcc -c main.c</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>打开终端, 切换到这个工作目录</p>
<ul>
<li>输入 <code>make</code> 即可编译, 会生成 <code>main.o</code> <code>hello.exe</code> 两个文件</li>
<li>输入 <code>./hello.exe</code> 执行, 终端就会输出 <code>hello: DRA&amp;PHO</code></li>
</ul>
</li>
<li>资料和参考<ul>
<li><a href="http://blog.csdn.net/zhanghan3/article/details/1334308" target="_blank" rel="external">windows下使用makefile编译C语言</a></li>
</ul>
</li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows 软件系列-atom插件]]></title>
      <url>https://draapho.github.io/2016/10/12/1610-WinSoft-atompack/</url>
      <content type="html"><![CDATA[<h1 id="atom简介"><a href="#atom简介" class="headerlink" title="atom简介"></a><a href="https://atom.io/" target="_blank" rel="external">atom</a>简介</h1><ul>
<li>界面简洁, 基本上手可用, 无需复杂设置</li>
<li>开源免费, 而且多平台支持, 有丰富的插件库</li>
<li>和git的整合度很好! 直观明了好用</li>
<li>启动相对较慢, 但可接受.</li>
<li>懒人不想折腾, atom无明显短板, 就作为主力代码编辑器了</li>
<li>定位是 Notepad++ 为快速处理文件, atom 处理项目</li>
<li>此篇重点介绍 atom 插件的选择和安装, 以及配置快捷键. 基础介绍见<a href="https://draapho.github.io/2016/09/30/1603-WinSoft-editor/">Windows 软件系列-文本编辑</a></li>
</ul>
<h1 id="atom-插件的安装方式"><a href="#atom-插件的安装方式" class="headerlink" title="atom 插件的安装方式"></a>atom 插件的安装方式</h1><ul>
<li><code>ctrl-,</code>-&gt;<code>Settings</code>-&gt;<code>Install</code>-&gt;选择要安装的插件</li>
<li>终端下使用命令行 <code>apm install</code>, 装完后需要重启atom.<br>有些插件只能通过这个方式安装. 譬如要安装 <code>linter</code>, 命令行输入<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apm install linter</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="atom-通用插件"><a href="#atom-通用插件" class="headerlink" title="atom 通用插件"></a>atom 通用插件</h1><ul>
<li><code>Sublime-Style-Column-Selection</code> 使用 <code>alt-鼠标左键</code> 进入列选模式</li>
<li><code>atom-beautify</code> 自动格式化代码,<ul>
<li>需设置 <code>ctrl-b</code> 美化</li>
</ul>
</li>
<li><del><code>autocomplete-paths</code></del> 辅助完成路径</li>
<li><code>block-comment-plus</code> 批量注释, 支持多种语言<ul>
<li>需设置 <code>ctrl-shift-/</code> 和 <code>ctrl-shift-\</code></li>
</ul>
</li>
<li><code>dash</code>  文档帮助, 配合 zeal (windows/linux) 或 dash(apple), 实现快速查询API<ul>
<li>需设置 <code>F1</code> 帮助</li>
</ul>
</li>
<li><del><code>disable-keybindings</code></del> 快速禁用atom的部分快捷键</li>
<li><code>docblockr</code> 注释辅助, 快速添加函数的注释<ul>
<li>支持 <code>tab</code> 键直接在参数间跳转</li>
<li><code>Align tags</code>-&gt;<code>deep</code></li>
<li><code>Auto add method tag</code></li>
<li><del><code>Extend double slash</code></del></li>
</ul>
</li>
<li><code>highlight-selected</code> 自动高亮匹配的词,</li>
<li><code>hyperclick</code> 快速跳转到定义处, 仅限单文件, 但可由别的插件扩展<ul>
<li><code>Trigger keys for Windows</code> <code>ctrl-shift-click</code>. 用ctrl键和系统多选冲突</li>
</ul>
</li>
<li><code>last-cursor-position</code> 浏览历史跳转<ul>
<li>需设置 <code>ctrl-shift-z</code> <code>ctrl-shift-y</code> 进行跳转</li>
</ul>
</li>
<li><code>linter</code> 语法检查基础包</li>
<li><code>minimap</code> 文件地图</li>
<li><code>minimap-highlight-selected</code> 在文件地图中显示匹配的词</li>
<li><code>platformio-ide-terminal</code> 终端软件 <ul>
<li>支持 <code>ctrl-~</code> 快速打开, <code>ctrl-enter</code> 输入选中的文本</li>
<li><code>Close Terminal on Exit</code></li>
<li><code>Shell Override</code>-&gt;<code>git-cmd.exe</code> 没有配置环境变量则需要使用绝对路径</li>
<li><code>Shell Arguments</code>-&gt;<code>--no-cd --command=usr/bin/bash.exe -l -i</code></li>
<li><code>Working Directory</code>-&gt;<code>Project</code></li>
<li><code>Theme</code>-&gt;<code>homebrew</code> 黑底绿字</li>
</ul>
</li>
<li><del><code>Project Manager</code></del> 加入项目的概念, 纯快捷键操作. 与<code>project-viewer</code>二选一即可.</li>
<li><code>project-viewer</code> 加入项目的概念,  带UI. 与<code>Project Manager</code>二选一即可.<ul>
<li><code>Status Bar Visibility</code></li>
<li><code>Autohide</code></li>
<li><code>Positon of the panel</code>-&gt;<code>Left</code></li>
<li><del><code>Convert Old Data</code></del></li>
</ul>
</li>
<li><code>script</code> 一键执行, 支持多种代码, 不弹窗<ul>
<li>需设置 <code>F5</code> 执行</li>
</ul>
</li>
<li><code>symbols-tree-view</code> 显示类/变量/函数列表<ul>
<li><code>Auto Hide</code></li>
<li><code>Auto Toggle</code></li>
</ul>
</li>
<li><code>tabs-to-spaces</code> tab空格互相转换</li>
<li><del><code>vim-mode</code></del> vim操作方式. 需要屏蔽按键 <code>ctrl-f</code>, 恢复为搜索按键<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&apos;atom-text-editor.vim-mode:not(.insert-mode)&apos;:</div><div class="line">  &apos;ctrl-f&apos;: &apos;unset!&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="git-插件"><a href="#git-插件" class="headerlink" title="git 插件"></a>git 插件</h1><ul>
<li><code>git-time-machine</code> 查看单文件的git历史<ul>
<li>需设置 <code>f6</code> 查看比较</li>
</ul>
</li>
<li><del><code>git-plus</code></del> git辅助, 我是通过 <code>platformio-ide-terminal</code> 打开终端敲git命令.</li>
<li>merge-conflicts 查看git文件冲突<ul>
<li>需设置 <code>ctrl-f6</code> 查看冲突</li>
</ul>
</li>
</ul>
<h1 id="python-插件"><a href="#python-插件" class="headerlink" title="python 插件"></a>python 插件</h1><ul>
<li>配置 <code>atom-beautify</code> 之python语言<ul>
<li>安装 <a href="https://www.python.org/" target="_blank" rel="external">python</a> </li>
<li>安装 <a href="https://github.com/hhatto/autopep8" target="_blank" rel="external">autopep8</a>, 调用 <code>pip install --upgrade autopep8</code></li>
<li>默认就是使用 <code>autopep8</code> 优化代码, 也推荐这个使用这个工具. <code>yapf</code>的优化结果无法满足<code>linter-flake8</code>的检查.</li>
<li>测试. 打开一个 <code>.py</code> 文件, 右键选择 <code>Beautify editor contents</code> 看是否成功了.</li>
</ul>
</li>
<li><del><code>atom-python-run</code></del> <code>F5</code>运行, 但是会弹cmd窗, 改用<code>script</code></li>
<li><code>autocomplete-python</code> python辅助, 配合 <code>hyperclick</code> 跳转很方便<ul>
<li>设置快捷键 <code>f4</code> 跳转</li>
<li><code>Show Descriptions</code></li>
<li><code>Autocomplete Function Parameters</code>-&gt;<code>all</code></li>
</ul>
</li>
<li><code>linter-flake8</code> 代码规范检查, 检查很严, 配合 autopep8 的自动格式化就很完美了.<ul>
<li>终端输入 <code>pip install flake8</code> python 安装 <code>flake8</code></li>
<li>终端输入 <code>apm install linter-flake8</code> atom 安装 <code>linter-flake8</code></li>
<li>插件配置 <code>Ignore Error</code>-&gt;<code>E501</code> 超过79列不要提示错误</li>
</ul>
</li>
</ul>
<h1 id="c-c-插件"><a href="#c-c-插件" class="headerlink" title="c/c++ 插件"></a>c/c++ 插件</h1><ul>
<li>配置 <code>atom-beautify</code> 之c/c++语言<ul>
<li>安装<a href="http://uncrustify.sourceforge.net/" target="_blank" rel="external">uncrustify</a>, 可以自动美化多种语言的格式.<ul>
<li>下载<a href="https://sourceforge.net/projects/uncrustify/files/uncrustify/uncrustify-0.63/" target="_blank" rel="external">uncrustify-0.63.0-g44ce0f1-win32.zip</a></li>
<li>解压后, 将uncrustify目录加入环境变量, 已 <code>D:\uncrustify\</code> 为例</li>
<li>终端内输入 <code>uncrustify -v</code>, 测试是否配置好 uncrustify</li>
</ul>
</li>
<li><code>atom-beautify</code> 插件的配置, 在c和c++下分别操作一次.<ul>
<li><code>Default Beautifier</code>-&gt;<code>Uncrustify</code> . <del>另一个选项 <code>clang-format</code> 需要安装clang, 里面带有指令<code>clang-format.exe</code></del></li>
<li><code>Config Path</code>-&gt;<code>D:\uncrustify\cfg\linux.cfg</code> 选择格式化模板</li>
</ul>
</li>
<li>测试, 打开一个 <code>.c</code> 文件, 右键选择 <code>Beautify editor contents</code> 看是否成功了.</li>
</ul>
</li>
<li><code>atom-gtags</code>, 能比较好的实现跳转<ul>
<li>设置快捷键 <code>f4</code> 跳转</li>
<li>右键项目根目录即可 <code>Build Gtags</code></li>
<li>放弃 <del><code>atom-ctags</code></del> 实测效果很差!</li>
<li>比较: <a href="https://github.com/OpenGrok/OpenGrok/wiki/Comparison-with-Similar-Tools" target="_blank" rel="external">https://github.com/OpenGrok/OpenGrok/wiki/Comparison-with-Similar-Tools</a></li>
</ul>
</li>
<li>基于gcc编译的配置<ul>
<li>下载 <a href="http://www.mingw.org/" target="_blank" rel="external">MinGW</a>, 安装并设置好环境变量<ul>
<li>安装好后, 只是 <code>MinGW Installation Manager</code>, 实际上是个绿色软件. 打开后继续安装组件</li>
<li><code>Basic Setup</code>-&gt;<code>mingw32-base</code> 和 <code>mingw32-gcc-g++</code>-&gt;左上 <code>Installation</code>-&gt;<code>Apply changes</code>-&gt;等待安装完成.</li>
<li>这里只需要编译c和c++文件, 无需安装其它组件了.</li>
<li>设置 <code>...\MinGW\bin</code> 文件夹到系统环境变量中</li>
<li>复制一份 <code>mingw32-make.exe</code> 并重命名为 <code>make.exe</code>, 这样就能直接用 <code>make</code> 指令了</li>
<li>测试. 终端中输入 <code>make -v</code> 和 <code>gcc -v</code>, 看是否可以识别到指令</li>
</ul>
</li>
<li><del><code>gpp-compiler</code></del> <code>f5</code>运行, 但会弹cmd窗, 决定使用内置终端</li>
<li><code>linter-gcc</code> 基于gcc进行语法检查<ul>
<li><code>GCC Excutable Path</code>-&gt;<code>gcc</code> 或 <code>g++</code>, 没有配置环境变量的话, 使用绝对路径, 注意斜杠!</li>
<li><code>GCC Include Paths</code>-&gt;<code>.../MinGW/include/*</code> 注意斜杠方向! 加入必要头文件.</li>
<li>只在保存时, 才会进行语法检查</li>
</ul>
</li>
</ul>
</li>
<li><del>基于clang编译的配置</del><ul>
<li>彻底放弃这个系列, 不用vs, 基于mingw的配置失败.</li>
<li>相关软件和参考如下</li>
<li><del><code>autocomplete-clang</code></del> 自动完成</li>
<li><del><code>linter-clang</code></del> 语法检查</li>
<li><a href="http://llvm.org/" target="_blank" rel="external">clang官网</a>. 官网进入的链接是找不到windows下编译好的版本的.</li>
<li>下载特定版本的clang, 如 <code>LLVM-3.9.0</code>, 使用链接:<a href="http://llvm.org/releases/3.9.0/" target="_blank" rel="external">http://llvm.org/releases/3.9.0/</a></li>
<li>参考 <a href="http://m.blog.csdn.net/article/details?id=49902519" target="_blank" rel="external">解决llvm/clang在windows下编译时找不到头文件和Lib的问题</a></li>
</ul>
</li>
</ul>
<h1 id="markdown插件"><a href="#markdown插件" class="headerlink" title="markdown插件"></a>markdown插件</h1><ul>
<li>atom已经支持markdown, 使用<code>ctrl-shift-m</code>即可预览. 如果要增强功能, 可以使用插件</li>
<li><del><code>markdown-preview-enhanced</code></del> markdown, 导出为pdf时, 制图显示有问题<ul>
<li><code>Break On Single Newline</code></li>
<li><code>Enable Typographer</code></li>
<li><code>Math Rendering Option</code>-&gt;<code>MathJax</code></li>
<li><del><code>Enable Wiki Link Syntax</code></del></li>
<li><del><code>Use GitHub.com syntax theme</code></del></li>
<li><del><code>Print Background when generating pdf</code></del> 否则pdf不显示制图</li>
<li><del><code>Use Github style when generating pdf</code></del> 否则pdf不显示制图</li>
<li><del><code>Open preview pane automatically when opening a markdown file</code></del></li>
<li><code>Image Uploader</code>-&gt;<code>sm.ms</code> 建议这个. <code>imgur</code> 有时限</li>
<li><code>Mermaid Theme</code>-&gt;<code>mermaid.forest.css</code></li>
</ul>
</li>
</ul>
<h1 id="atom快捷键配置"><a href="#atom快捷键配置" class="headerlink" title="atom快捷键配置"></a>atom快捷键配置</h1><ul>
<li>使用 <code>ctrl-.</code> 查看按键冲突. 如果无效, 试试点到非编辑区(如目录树)试试.</li>
<li><code>ctrl-,</code>-&gt;<code>Settings</code>-&gt;<code>Keybindings</code>-&gt;<code>your keymap file</code>-&gt;打开<code>keymap.cson</code></li>
<li>自定义快捷键方式可参考 <a href="http://flight-manual.atom.io/using-atom/sections/basic-customization/#_customizing_keybindings" target="_blank" rel="external">Basic Customization</a></li>
<li>很明显, 要备份自己的快捷键设置, 只需要保存这份 <code>keymap.cson</code> 文件</li>
<li>最后禁用插件里不需要的快捷键, 或者使用 <code>disable-keybindings</code>.<ul>
<li><code>Keybindings</code> -&gt; <del><code>Enable</code></del>. 屏蔽以下插件:</li>
<li><code>atom-beautify</code>, <code>atom-gtags</code>, <code>autocomplete-python</code></li>
<li><code>block-comment-plus</code>, <code>dash</code>, <code>git-time-machine</code></li>
<li><code>highlight-selected</code>, <code>hyperclick</code>, </li>
<li><code>script</code>, <code>symbols-tree-view</code>, <code>tabs-to-spaces</code></li>
</ul>
</li>
<li><p>我的 <code>keymap.cson</code> 配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line"># atom 大致原则是, 小窗口&gt;大窗口, 然后才是客户配置&gt;插件配置&gt;系统配置</div><div class="line"># 因此优先级 &apos;body&apos; &lt; &apos;atom-workspace&apos; &lt; &apos;atom-text-editor&apos; &lt; &apos;atom-text-editor:not([mini])&apos;</div><div class="line"></div><div class="line">&apos;atom-text-editor[data-grammar~=python]:not(.mini)&apos;:</div><div class="line">  &apos;f4&apos;: &apos;autocomplete-python:go-to-definition&apos;</div><div class="line">  &apos;shift-f4&apos;: &apos;autocomplete-python:go-to-definition&apos;</div><div class="line">  &apos;alt-shift-s&apos;: &apos;autocomplete-python:override-method&apos;</div><div class="line"></div><div class="line">&apos;atom-text-editor[data-grammar~=c]:not(.mini)&apos;:</div><div class="line">  &apos;f4&apos;: &apos;atom-gtags:get-definitions&apos;</div><div class="line">  &apos;shift-f4&apos;: &apos;atom-gtags:get-references&apos;</div><div class="line"></div><div class="line">&apos;.platform-win32 atom-workspace atom-text-editor:not([mini])&apos;:</div><div class="line"># character                            </div><div class="line">  &apos;ctrl-b&apos;: &apos;atom-beautify:beautify-editor&apos;</div><div class="line">  &apos;ctrl-d&apos;: &apos;core:delete&apos;</div><div class="line">  &apos;ctrl-shift-d&apos;: &apos;editor:delete-line&apos;</div><div class="line">  &apos;ctrl-j&apos;: &apos;core:move-down&apos; </div><div class="line">  &apos;ctrl-k&apos;: &apos;core:move-up&apos;   </div><div class="line">  &apos;ctrl-l&apos;: &apos;core:move-right&apos;</div><div class="line">  &apos;ctrl-h&apos;: &apos;core:move-left&apos;</div><div class="line">  &apos;ctrl-shift-j&apos;: &apos;editor:move-line-down&apos;</div><div class="line">  &apos;ctrl-shift-k&apos;: &apos;editor:move-line-up&apos;</div><div class="line">  &apos;ctrl-shift-l&apos;: &apos;editor:move-to-end-of-word&apos;</div><div class="line">  &apos;ctrl-shift-h&apos;: &apos;editor:move-to-beginning-of-word&apos;</div><div class="line">  &apos;alt-shift-j&apos;: &apos;editor:join-lines&apos;</div><div class="line">  &apos;ctrl-m&apos;: &apos;bookmarks:toggle-bookmark&apos;  </div><div class="line">  &apos;ctrl-r&apos;: &apos;core:redo&apos;</div><div class="line">  &apos;ctrl-u&apos;: &apos;core:undo&apos;</div><div class="line">  &apos;ctrl-shift-v&apos;: &apos;editor:duplicate-lines&apos;</div><div class="line">  &apos;ctrl-shift-W&apos;: &apos;tabs:close-other-tabs&apos;</div><div class="line">  &apos;ctrl-shift-x&apos;: &apos;editor:select-line&apos;</div><div class="line">  &apos;ctrl-shift-y&apos;: &apos;last-cursor-position:next&apos;</div><div class="line">  &apos;ctrl-shift-z&apos;: &apos;last-cursor-position:previous&apos;</div><div class="line"># special</div><div class="line">  &apos;ctrl-4&apos;: &apos;editor:move-to-end-of-screen-line&apos;         # ctrl-$</div><div class="line">  &apos;ctrl-6&apos;: &apos;editor:move-to-first-character-of-line&apos;    # ctrl-^</div><div class="line">  &apos;ctrl-$&apos;: &apos;editor:select-to-end-of-line&apos;              # ctrl-shift-$</div><div class="line">  &apos;ctrl-^&apos;: &apos;editor:select-to-first-character-of-line&apos;  # ctrl-shift-^</div><div class="line">  &apos;ctrl-?&apos;: &apos;block-comment-plus:toggle&apos;                 # ctrl-shift-/</div><div class="line">  &apos;ctrl-|&apos;: &apos;block-comment-plus:toggle&apos;                 # ctrl-shift-\</div><div class="line">  &apos;ctrl-]&apos;: &apos;bracket-matcher:select-inside-brackets&apos;</div><div class="line">  &apos;ctrl-[&apos;: &apos;bracket-matcher:go-to-matching-bracket&apos;</div><div class="line">  &apos;ctrl-.&apos;: &apos;tabs-to-spaces:untabify-all&apos;</div><div class="line">  &apos;ctrl-&gt;&apos;: &apos;tabs-to-spaces:tabify&apos;                     # ctrl-shift-.</div><div class="line"># alt</div><div class="line">  &apos;alt-0&apos;: &apos;editor:fold-all&apos;</div><div class="line">  &apos;alt-)&apos;: &apos;editor:unfold-all&apos;                          # alt-shift-0</div><div class="line">  &apos;alt-!&apos;: &apos;editor:unfold-all&apos;                          # alt-shift-1</div><div class="line">  &apos;alt-1&apos;: &apos;editor:fold-at-indent-level-1&apos;</div><div class="line">  &apos;alt-2&apos;: &apos;editor:fold-at-indent-level-2&apos;</div><div class="line">  &apos;alt-3&apos;: &apos;editor:fold-at-indent-level-3&apos;</div><div class="line">  &apos;alt-4&apos;: &apos;editor:fold-at-indent-level-4&apos;</div><div class="line">  &apos;alt-5&apos;: &apos;editor:fold-at-indent-level-5&apos;</div><div class="line">  &apos;alt-6&apos;: &apos;editor:fold-at-indent-level-6&apos;</div><div class="line">  &apos;alt-7&apos;: &apos;editor:fold-at-indent-level-7&apos;</div><div class="line">  &apos;alt-8&apos;: &apos;editor:fold-at-indent-level-8&apos;</div><div class="line">  &apos;alt-9&apos;: &apos;editor:fold-at-indent-level-9&apos;</div><div class="line"># f1-f6</div><div class="line">  &apos;f1&apos;: &apos;dash:shortcut&apos;</div><div class="line">  &apos;ctrl-f2&apos;: &apos;bookmarks:view-all&apos;</div><div class="line">  &apos;ctrl-shift-f2&apos;: &apos;bookmarks:clear-bookmarks&apos;</div><div class="line">  &apos;ctrl-f3&apos;: &apos;find-and-replace:select-all&apos;</div><div class="line">  &apos;f5&apos;: &apos;script:run&apos;</div><div class="line">  &apos;f6&apos;: &apos;git-time-machine:toggle&apos;</div><div class="line">  &apos;ctrl-f6&apos;: &apos;merge-conflicts:detect&apos;</div><div class="line">  &apos;shift-f6&apos;: &apos;merge-conflicts:next-unresolved&apos;</div><div class="line">  &apos;ctrl-shift-f6&apos;: &apos;merge-conflicts:previous-unresolved&apos;</div><div class="line"></div><div class="line">&apos;body&apos;:</div><div class="line">  &apos;ctrl-j&apos;: &apos;core:move-down&apos;</div><div class="line">  &apos;ctrl-k&apos;: &apos;core:move-up&apos;</div><div class="line">  &apos;ctrl-r&apos;: &apos;core:redo&apos;</div><div class="line">  &apos;ctrl-u&apos;: &apos;core:undo&apos;</div><div class="line">  &apos;ctrl-shift-S&apos;: &apos;window:save-all&apos;</div><div class="line"># unset ctrl-k *</div><div class="line">  &apos;ctrl-k up&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k down&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k left&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k right&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-w&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-alt-w&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-p&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-n&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-up&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-down&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-left&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-right&apos;: &apos;unset!&apos;</div><div class="line">&apos;atom-workspace atom-text-editor&apos;:</div><div class="line">  &apos;ctrl-k ctrl-u&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-l&apos;: &apos;unset!&apos;</div><div class="line">&apos;atom-workspace atom-text-editor:not([mini])&apos;:</div><div class="line">  &apos;ctrl-k ctrl-0&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-1&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-2&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-3&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-4&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-5&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-6&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-7&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-8&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-9&apos;: &apos;unset!&apos;</div><div class="line">&apos;.platform-win32, .platform-linux&apos;: </div><div class="line">  &apos;ctrl-k ctrl-b&apos;: &apos;unset!&apos;</div><div class="line">&apos;.platform-win32 .tree-view, .platform-linux .tree-view&apos;:</div><div class="line">  &apos;ctrl-k right&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k l&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k left&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k h&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k up&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k k&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k down&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k j&apos;: &apos;unset!&apos;</div><div class="line">&apos;.platform-win32 atom-text-editor, .platform-linux atom-text-editor&apos;:</div><div class="line">  &apos;ctrl-k ctrl-d&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-u&apos;: &apos;unset!&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="参考和资料"><a href="#参考和资料" class="headerlink" title="参考和资料"></a>参考和资料</h1><ul>
<li><a href="http://flight-manual.atom.io/" target="_blank" rel="external">Atom Flight Manual</a>, atom手册</li>
<li><a href="https://atom.io/packages" target="_blank" rel="external">atom Packages</a>, atom插件中心</li>
<li>我的 <a href="https://draapho.github.io/2016/10/08/1607-Shortcut-win/">Windows快捷键</a></li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows 软件系列-终端]]></title>
      <url>https://draapho.github.io/2016/10/10/1609-WinSoft-terminal/</url>
      <content type="html"><![CDATA[<h1 id="ConEmu-简介"><a href="#ConEmu-简介" class="headerlink" title="ConEmu 简介"></a><a href="https://conemu.github.io/" target="_blank" rel="external">ConEmu</a> 简介</h1><ul>
<li><a href="https://conemu.github.io/" target="_blank" rel="external">ConEmu</a> 即 Console Emulate, 一款终端模拟器, 完全免费, 可以通过他加载多种终端如 cmd, shell, bash, putty 而且便于管理!</li>
<li>简而言之, 凡是喜欢用命令行方式的, windows就请使用这款软件, 分分钟变身geek或者hacker的感觉…</li>
<li>右键文件夹打开ConEmu就自动进入此文件夹, <code>ConEmu Inside</code> 甚至能嵌入到文件夹中.</li>
<li>顺便说一句, cmder就是他的马甲, 核心还是ConEmu.</li>
</ul>
<h2 id="我的ConEmu"><a href="#我的ConEmu" class="headerlink" title="我的ConEmu"></a>我的ConEmu</h2><ul>
<li>我希望的ConEmu, 就是想输命令行, 打开ConEmu就行!</li>
<li>本文的配置可以在ConEmu中执行:<ul>
<li><code>cmd</code> <code>shell</code> windows自带终端</li>
<li><code>git</code> windows下安装好git即可, 包含了<code>git-bash</code></li>
<li><code>mingw</code> windows下用gnu工具链编译c, c++</li>
<li><code>putty</code> ssh链接远程linux, 串口链接嵌入式linux</li>
<li><code>cygwin</code> windows下模拟linux运行环境 (目前尚未使用, 在用传统的虚拟机)</li>
<li>其它指令如: <code>hexo</code> 博客使用, <code>choco</code> 安装软件使用, <code>apm</code> atom下载插件使用.</li>
</ul>
</li>
<li>快速在指定文件夹下打开ConEmu, 可在 <code>Listary</code> 关联快捷键 <code>ctrl-~</code></li>
<li>快速在Notepad++下打开ConEmu, 关联快捷键 <code>ctrl-~</code></li>
</ul>
<h2 id="自制ConEmu绿色版"><a href="#自制ConEmu绿色版" class="headerlink" title="自制ConEmu绿色版"></a>自制ConEmu绿色版</h2><ul>
<li>下载 <a href="https://conemu.github.io/" target="_blank" rel="external">ConEmu便携版</a><ul>
<li>解压后放在理想的文件夹中. 下面以 <code>D:\Green\ConEmu</code> 路径为例.</li>
</ul>
</li>
<li>下载 <a href="https://mridgers.github.io/clink/" target="_blank" rel="external">clink便携版</a>, 用于增强终端操作, 如复制拷贝快捷键等<ul>
<li>解压后, 所有文件放入 <code>D:\Green\ConEmu\ConEmu\clink</code>, 这里面原来就有个 <code>Readme.txt</code>, 说的非常清楚了</li>
</ul>
</li>
<li>下载 <a href="https://git-scm.com/download/win" target="_blank" rel="external">git便携版</a>, 版本管理软件<ul>
<li>解压后命名为 <code>Git</code> 放到 <code>D:\Green\ConEmu\plugins</code>,</li>
</ul>
</li>
<li>下载并使用默认设置安装 <a href="http://www.mingw.org/" target="_blank" rel="external">mingw</a>, 用于在win下使用gnu工具编译<ul>
<li>只是装了 <code>MinGW Installation Manager</code> (实际上是个绿色软件). 打开后继续安装组件</li>
<li><code>Basic Setup</code>-&gt;<code>mingw32-base</code>和<code>mingw32-gcc-g++</code>-&gt;左上<code>Installation</code>-&gt;<code>Apply changes</code>-&gt;等待安装完成.</li>
<li>我只需要编译c和c++文件, <code>msys</code>也已经由git软件实现了, 因此无需安装其它组件了.</li>
<li>然后把整个 <code>MinGW</code> 文件夹放到 <code>D:\Green\ConEmu\plugins</code></li>
<li>复制一份 <code>mingw32-make.exe</code> 并重命名为 <code>make.exe</code>, 这样就能直接用 <code>make</code> 指令了</li>
</ul>
</li>
<li>下载 <a href="http://www.putty.org/" target="_blank" rel="external">putty.zip</a>, ssh远程连接软件及串口软件<ul>
<li>解压后命名为 <code>putty</code> 放到 <code>D:\Green\ConEmu\plugins</code></li>
</ul>
</li>
<li><p>然后需要将上述软件加入环境变量, 这个可以在ConEmu设置中完成!!!</p>
<ul>
<li><p>打开ConEmu, <code>Setting</code>-&gt;<code>Startup</code>-&gt;<code>Environment</code>-&gt;<code>set PATH=%ConEmuBaseDir%\Scripts;%PATH%</code> 下面加上如下语句</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># git PATH</div><div class="line">set PATH=%ConEmuDir%\plugins\Git;%PATH%</div><div class="line">set PATH=%ConEmuDir%\plugins\Git\cmd;%PATH%</div><div class="line"># mingw PATH</div><div class="line">set PATH=%ConEmuDir%\plugins\MinGW\bin;%PATH%</div><div class="line"># putty PATH%</div><div class="line">set PATH=%ConEmuDir%\plugins\putty;%PATH%</div></pre></td></tr></table></figure>
</li>
<li><p>这样, ConEmu在启动时, 会自动加入上述软件到PATH中</p>
</li>
<li>如果使用 <strong>更通用的做法</strong>, 把上述环境变量删除或注释掉.</li>
</ul>
</li>
<li>自制ConEmu绿色版就初步完成, 下面只需要配置了.</li>
</ul>
<h2 id="更通用的做法"><a href="#更通用的做法" class="headerlink" title="更通用的做法"></a>更通用的做法</h2><ul>
<li>用上述方法有三个缺点<ul>
<li>git便携版不支持ssh或GPG免密远程同步, 每次都要求输入用户名和密码, 非常麻烦.</li>
<li>如果不用ConEmu, 那么其它终端, 如atom下的终端就无法使用上述软件.</li>
<li>发现putty会新打开一个窗口, 而不是嵌入到ConEmu中.</li>
</ul>
</li>
<li>下载 <a href="https://git-scm.com/download/win" target="_blank" rel="external">git安装版</a>, 使用默认配置安装即可.<ul>
<li>为了便于使用, 建议把git的根目录也加入环境变量, 这样就能直接调用 <code>git-cmd.exe</code></li>
</ul>
</li>
<li>设置 <code>D:\Green\ConEmu\plugins\MinGW\bin</code> 文件夹到系统环境变量中</li>
<li>设置 <code>D:\Green\ConEmu\plugins\putty</code> 文件夹到系统环境变量中</li>
<li>还可以考虑下载安装 <a href="https://www.cygwin.com/" target="_blank" rel="external">cygwin</a> 并加入ConEmu中, 这是一款Windows下的Linux模拟器. 注意安装和卸载都比较麻烦.<h2 id="ConEmu的设置"><a href="#ConEmu的设置" class="headerlink" title="ConEmu的设置"></a>ConEmu的设置</h2></li>
<li>所有设置都会存放在 <code>conEmu.xml</code> 里, 所以设置的备份很简单</li>
<li>首次打开会有设置向导 <code>fast configuration</code>, 用于生成 <code>conEmu.xml</code></li>
<li>可以在设置好环境变量, 安装好git后, 删除<code>conEmu.xml</code>重新运行, 这样ConEmu会自动检测加入<code>Git bash</code> 和 <code>putty</code>, 省心不少. clink放在指定路径后, 其功能也会自动启用.</li>
<li>配置过程如下, 需要图文版可参考 <a href="https://higoge.github.io/2015/07/22/tools02/" target="_blank" rel="external">工具02：cmd的替代品ConEmu+Clink</a>, 配置上略有区别, 进入 <code>Settings</code> 后<ul>
<li><code>Main</code>-&gt;<code>Appearance</code>-&gt;<code>Generic</code>-&gt;<code>Single instance mode (...)</code></li>
<li><code>Main</code>-&gt;<code>Confirm</code>-&gt;<code>CLose confirmations</code>-&gt;<del><code>When running process was detected</code></del></li>
<li><code>Startup</code>-&gt;<code>Specified named task</code>-&gt;<code>Bash:: Git bash</code> 更改打开时默认使用的终端类型</li>
<li><code>Startup</code>-&gt;<code>Environment</code> 启动时, 会加载这里的环境变量. 配置好系统环境变量的话, 可以全部删除</li>
<li>注册鼠标右键 <code>ConEmu Here</code> 和 <code>ConEmu Inside</code>, 并设置为使用 <code>Git bash</code> 启动<ul>
<li><code>Integration</code>-&gt;<code>ConEmu Here</code>-&gt;<code>Command:</code>改为<code>{Git Bash} -cur_console:n</code>-&gt;<code>Register</code></li>
<li><code>Integration</code>-&gt;<code>ConEmu Inside</code>-&gt;<code>Command:</code>改为<code>{Git Bash} -cur_console:n</code>-&gt;<code>Register</code></li>
</ul>
</li>
<li><code>Integration</code>-&gt;<code>Default term</code>-&gt;<code>Force ConEmu as default terminal for console applications</code></li>
<li>添加 <code>tasks</code>. 选择 <code>Startup</code>-&gt;<code>Tasks</code>, 根据现有例子依样画葫芦即可.<ul>
<li><code>Bash::Git bash</code>: <code>git-cmd.lnk --no-cd --command=usr/bin/bash.exe -l -i</code> 也可以点击<code>File path...</code>使用绝对路径替代快捷方式.</li>
<li><code>Bash::Git bash(Admin)</code>: <code>*git-cmd.exe --no-cd --command=usr/bin/bash.exe -l -i</code> 最前面加个<code>*</code>就是管理员权限了.</li>
<li><code>Putty::default</code>: <code>putty.exe</code> 同样, 可能需要使用绝对路径, 点击<code>File path...</code>选择即可</li>
<li><code>Putty::Ubuntu</code>: <code>putty.exe -new_console -load &quot;ubuntu&quot;</code> 需要putty设置好名为<code>ubuntu</code>的session</li>
<li><code>Cygwin</code>: <code>set HOME=d:\cygwin\home\XXX &amp; &quot;d:\cygwin\bin\mintty.exe&quot; -i /Cygwin.ico -</code> 这条指令没有测试过.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="Putty"><a href="#Putty" class="headerlink" title="Putty"></a><a href="http://www.putty.org/" target="_blank" rel="external">Putty</a></h1><ul>
<li><a href="http://www.putty.org/" target="_blank" rel="external">Putty</a> 可用于ssh连接远程主机, 也支持串口. 使用简单, 完全免费</li>
<li>putty的配置, 一个配置就是一个<code>Session</code>. 可以参考<a href="http://blog.csdn.net/tianlesoftware/article/details/5831605" target="_blank" rel="external">Putty 工具 保存配置的 小技巧</a></li>
<li>putty免密登录, 没有尝试, 可以参考如下两篇文章.<ul>
<li><a href="https://segmentfault.com/a/1190000000639516" target="_blank" rel="external">PuTTY的自动登录设置</a></li>
<li><a href="http://blog.csdn.net/hxg130435477/article/details/9960187" target="_blank" rel="external">windows 上用程序putty使用 ssh自动登录linux</a></li>
</ul>
</li>
</ul>
<h2 id="设置Default"><a href="#设置Default" class="headerlink" title="设置Default"></a>设置Default</h2><ul>
<li><code>Window</code>-&gt;<code>Lines of scrollback</code>-<code>20000</code>  回看更多历史屏幕信息</li>
<li><code>Window</code>-&gt;<code>Apperance</code>-&gt;<code>Vertical line</code>, <code>Cursor blinks</code> 游标闪烁</li>
<li><code>Window</code>-&gt;<code>Colours</code>-&gt;<code>Default Backgroud</code>-&gt;<code>R0 G43 B54</code> 使用ConEmu背景色</li>
<li><code>Connection</code>-&gt;<code>Serial</code>-&gt;<code>Flow control</code>-&gt;<code>None</code> 默认串口不用流控制</li>
<li><code>Session</code>-&gt;<code>Saved Sessions</code>-&gt;输入 <code>Default Settings</code>-&gt;<code>Save</code> 默认值设置完成</li>
</ul>
<h2 id="设置ssh"><a href="#设置ssh" class="headerlink" title="设置ssh"></a>设置ssh</h2><ul>
<li><code>Session</code>-&gt;<code>Conncection type</code>选<code>SSH</code>-&gt;<code>Host Name (or IP address)</code>-&gt;<code>10.0.0.99</code> 或者  <code>username@10.0.0.99</code> 来指定登录名</li>
<li><code>Session</code>-&gt;<code>Saved Session</code> <code>Ubuntu</code>-&gt;<code>Save</code> 设置好配置名称, 保存即可.</li>
<li>如果需要免密登录, 明文的很简单, 调用 <code>putty.exe -load &quot;session_name&quot; -l &quot;username&quot; -pw &quot;password&quot;</code> 即可</li>
<li>如果需要密码加密, 稍微麻烦点. 参考 <a href="http://blog.csdn.net/hxg130435477/article/details/9960187" target="_blank" rel="external">windows 上用程序putty使用 ssh自动登录linux</a>. 我不需要这个功能, 略过不表.</li>
</ul>
<h2 id="设置serial"><a href="#设置serial" class="headerlink" title="设置serial"></a>设置serial</h2><ul>
<li><code>Session</code>-&gt;<code>Conncection type</code>选<code>Serial</code>-&gt;<code>Serial line</code> <code>COM4</code>-&gt;<code>Speed</code> <code>9600</code> 即串口4, 波特率9600</li>
<li><code>Connection</code>-&gt;<code>Serial</code>-&gt;<code>Flow control</code> <code>None</code> 这里可以设置其它串口参数, 不支持自动回显.</li>
<li><code>Session</code>-&gt;<code>Saved Session</code> <code>COM4-9600</code>-&gt;<code>Save</code> 设置好配置名称, 保存即可.</li>
</ul>
<h2 id="配置的导入和导出"><a href="#配置的导入和导出" class="headerlink" title="配置的导入和导出"></a>配置的导入和导出</h2><ul>
<li>putty直接把配置存放在注册表中. 所以思路就是导入导出注册表</li>
<li>cmd下-&gt;<code>regedit</code>-&gt;打开注册表</li>
<li>找到 <code>HKEY_CURRENT_USER\Software\SimonTatham</code></li>
<li>在 <code>SimonTatham</code> 这个节点上点击右键, 选择导出, 保存为<code>config.reg</code>. 这里不单单是putty的配置</li>
<li>恢复时, 管理员权限执行 <code>config.reg</code> 即可</li>
</ul>
<h2 id="putty的调用"><a href="#putty的调用" class="headerlink" title="putty的调用"></a>putty的调用</h2><ul>
<li>基本用法 <code>putty.exe -load &quot;session_name&quot;</code></li>
<li>自动登录 <code>putty.exe -load &quot;session_name&quot; -l &quot;username&quot; -pw &quot;password&quot;</code></li>
<li>更多调用方式可查看 <code>PUTTY.CHM 3.8.x</code> 包含于下载的<code>putty.zip</code>中</li>
</ul>
<h2 id="对比TeraTerm"><a href="#对比TeraTerm" class="headerlink" title="对比TeraTerm"></a>对比<a href="https://ttssh2.osdn.jp/index.html.en" target="_blank" rel="external">TeraTerm</a></h2><ul>
<li>TeraTerm相比于putty设置显得更复杂, 至少串口的功能比putty的要多一点</li>
<li>TeraTerm有自己的脚本语句, 可以实现比较复杂的自动化功能</li>
<li>TeraTerm在ConEmu字体显示有问题.</li>
<li>putty完全满足需求, 配置简单, 完美兼容ConEmu, 因此没有考虑TeraTerm</li>
</ul>
<h1 id="Cygwin"><a href="#Cygwin" class="headerlink" title="Cygwin"></a><a href="https://www.cygwin.com/" target="_blank" rel="external">Cygwin</a></h1><ul>
<li>是windows下的unix仿真环境, 可以用来做交叉编译, 因此可替代虚拟机安装linux.</li>
<li>安装, 可以参考 <a href="http://velep.com/archives/747.html" target="_blank" rel="external">cygwin介绍、安装及其使用</a></li>
<li>交叉编译, 可以参考<ul>
<li><a href="http://mazhijing.blog.51cto.com/215535/39539/" target="_blank" rel="external">Cygwin 安装  基本使用 交叉编译vivi kernel</a></li>
<li><a href="http://www.360doc.com/content/12/0929/14/5013584_238783155.shtml" target="_blank" rel="external">在cygwin中安装gcc编译器</a></li>
</ul>
</li>
<li>卸载, 因为权限问题, Cygwin卸载很麻烦. 可以参考两篇文章, 已经是最简单的方法了<ul>
<li><a href="http://blog.csdn.net/yelangjueqi/article/details/45199209" target="_blank" rel="external">window 下完全卸载Cygwin最简单方法</a>, 就是在运行一次 <code>setup.exe</code> 来卸载</li>
<li><a href="http://blog.163.com/zhuandi_h/blog/static/180270288201282204521376/" target="_blank" rel="external">Win7 完全删除cygwin（本人已删除成功）</a></li>
</ul>
</li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows 软件系列-自定义环境变量]]></title>
      <url>https://draapho.github.io/2016/10/09/1608-WinSoft-path/</url>
      <content type="html"><![CDATA[<h1 id="自定义环境变量"><a href="#自定义环境变量" class="headerlink" title="自定义环境变量"></a>自定义环境变量</h1><ul>
<li>测试过几个例子, 简单的调用没问题, 但带参调用就会有各种无法预料的问题.</li>
<li><code>ConEmu.lnk</code> 后面不支持带参数, <code>git-cmd.lnk</code> 支持带参, 但有奇怪现象.</li>
<li><code>Typora.lnk</code> <code>zeal.lnk</code> 没有问题.</li>
<li>使用此方法可以配合 <code>win-r</code> 快速打开文件夹, 软件等功能! 我没有使用, 因为有更好的替代方案.</li>
<li>!!!注意!!!, 带参调用 <code>.lnk</code> 不完全等同于 <code>.exe</code>, 还是没有linux的链接来的便捷</li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>做软件开发是绕不过环境变量 <code>PATH</code> 的设置的, 经常到后来 <code>PATH</code> 就变得非常长, 难以管理维护.</li>
<li>借助linux链接的概念, 实验了一下windows的快捷方式是否也可以用命令行执行, 发现是可行的!</li>
<li>譬如创建 <code>ConEmu.exe</code> 的快捷方式 <code>ConEmu.lnk</code> (.lnk不会显示). 此时, 在cmd内执行 <code>ConEmu.lnk</code> 等同于执行 <code>ConEmu.exe</code></li>
<li>这样, 就有办法简化自定义 <code>PATH</code> 的数量了, 只需添加一个用户路径到 <code>PATH</code> 中, 如<code>D:\Green\userpath\bin</code>, 然后把用户软件的 <code>.exe</code> 和 <code>.lnk</code> 放到这个目录下面就可以了.</li>
</ul>
<h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><ul>
<li>譬如, 配置 <code>D:\Green\cli\bin</code> 到环境变量中.</li>
<li><code>我的电脑</code>-&gt;右键<code>属性</code> 或者 <code>控制面板</code>-&gt;<code>系统和安全</code>-&gt;<code>系统</code>-&gt;<code>高级系统设置</code></li>
<li>弹出 <code>系统属性</code> 页面-&gt;<code>高级</code> 标签-&gt;最下面 <code>环境变量...</code>-&gt;<code>系统变量</code>-&gt;<code>Path</code>-&gt;加入自定义路径如 <code>D:\Green\cli\bin</code>, windows7的话需要分隔符<code>;</code></li>
<li><code>D:\Green\cli\bin</code> 只是个例子, 可以自己规定任意一个文件夹, 便于记忆即可.</li>
</ul>
<h2 id="添加软件"><a href="#添加软件" class="headerlink" title="添加软件"></a>添加软件</h2><ul>
<li>MinGW, windows下提供 gnu 工具链, 像linux下一样使用 make 编译即可<br>把 <code>.\MinGW\bin</code> 下的所有文件复制一份到 <code>D:\Green\cli\bin</code> 即可</li>
<li>Pandoc, 格式转换软件. 众多markdown编辑器需要此软件来转换格式<br>把 <code>pandoc.exe</code> 和 <code>pandoc-citeproc.exe</code> 复制一份到 <code>D:\Green\cli\bin</code> 即可</li>
<li>putty, ssh和串口终端软件, 多用于远程连接<br><del>putty所有文件复制一份到 <code>D:\Green\cli\bin</code></del>, 放个 <code>putty.exe</code> 即可</li>
<li>uncrustify, 编程语言格式化软件. 可格式化 c, c++, d, java 等众多语言<br>把 <code>uncrustify.exe</code> 复制到 <code>D:\Green\cli\bin</code> 即可</li>
<li>下述软件创建快捷方式, 然后放到 <code>D:\Green\cli\bin</code> 即可</li>
<li><del><code>ConEmu.lnk</code></del> 模拟终端软件, 可整合多种终端如cmd, shell, bash, putty</li>
<li><del><code>Cygwin.lnk</code></del> 模拟linux环境, 可以部分充当windows下的linux虚拟机使用</li>
<li><del><code>git-cmd.lnk</code></del> 启动git, 供ConEmu调用</li>
<li><code>Typora.lnk</code> 一款markdown编辑器</li>
<li><code>zeal.lnk</code> 软件API离线查询工具, windows下的dash</li>
</ul>
<h2 id="便捷性"><a href="#便捷性" class="headerlink" title="便捷性"></a>便捷性</h2><ul>
<li>上述软件主要是辅助作用, 我会在常用软件中调用上述软件. 如notepad++, atom, ConEmu中</li>
<li>以 notepad++ 调用 <code>zeal.lnk</code> 为例.</li>
<li><code>notepad++</code>-&gt;<code>Run</code>-&gt;<code>Run...</code>-&gt;输入 <code>zeal.lnk $(CURRENT_WORD)</code>-&gt;<code>Save...</code>-&gt;<code>Name:``help</code>, 快捷键<code>F1</code>-&gt;<code>OK</code></li>
<li>配置好以后, 写代码遇到需要查询的地方, 只要选中关键词, 按 <code>F1</code> 就会自动调用 zeal 了</li>
<li>以后环境变了, 只需要重新创建一下 <code>zeal.lnk</code> 然后放到 <code>D:\Green\userpath\bin</code> 即可.</li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows快捷键]]></title>
      <url>https://draapho.github.io/2016/10/08/1607-CheatSheet-win/</url>
      <content type="html"><![CDATA[<h1 id="专用快捷键"><a href="#专用快捷键" class="headerlink" title="专用快捷键"></a>专用快捷键</h1><table>
<thead>
<tr>
<th>atom</th>
<th>备注</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ctrl-shift-p</code></td>
<td>palette</td>
<td>调出命令板</td>
</tr>
<tr>
<td><code>ctrl-alt-i</code></td>
<td>information</td>
<td>调用控制台</td>
</tr>
<tr>
<td><code>ctrl-,</code></td>
<td></td>
<td>打开设置面板</td>
</tr>
<tr>
<td><code>ctrl-.</code></td>
<td>非编辑区有效</td>
<td>调试快捷键</td>
</tr>
<tr>
<td>+<code>ctrl-f6</code></td>
<td>merge-conflicts</td>
<td>显示有冲突的文件</td>
</tr>
<tr>
<td>+<code>shift-f6</code></td>
<td>merge-conflicts</td>
<td>显示下一个冲突</td>
</tr>
<tr>
<td>+<code>ctrl-shift-f6</code></td>
<td>merge-conflicts</td>
<td>显示上一个冲突</td>
</tr>
<tr>
<td><strong>eclipse</strong></td>
<td><strong>备注</strong></td>
<td><strong>说明</strong></td>
</tr>
<tr>
<td><code>ctrl-o</code></td>
<td></td>
<td>显示函数列表</td>
</tr>
<tr>
<td><code>ctrl-shift-o</code></td>
<td></td>
<td>自动处理 include/import</td>
</tr>
<tr>
<td><code>alt-shift-s</code></td>
<td>source</td>
<td>显示代码常用操作</td>
</tr>
<tr>
<td><code>alt-/</code></td>
<td></td>
<td>代码提示</td>
</tr>
<tr>
<td>+ <code>ctrl \</code></td>
<td><del><code>ctrl-tab</code></del></td>
<td>切换<code>.c``.h</code>文件</td>
</tr>
<tr>
<td>+ <code>alt-\</code></td>
<td><code>alt-shift-a</code></td>
<td>列选模式</td>
</tr>
<tr>
<td>+ <code>ctrl-f3</code></td>
<td><code>ctrl-1</code></td>
<td>快速修复</td>
</tr>
<tr>
<td>+ <code>alt-shift-f</code></td>
<td><code>ctrl-shift-t</code></td>
<td>查找类</td>
</tr>
</tbody>
</table>
<h1 id="编辑器快捷键"><a href="#编辑器快捷键" class="headerlink" title="编辑器快捷键"></a>编辑器快捷键</h1><table>
<thead>
<tr>
<th>文件操作</th>
<th>助记</th>
<th>说明</th>
<th>来源</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ctrl-n</code></td>
<td>new</td>
<td>创建文件</td>
<td>windows</td>
</tr>
<tr>
<td><code>ctrl-o</code></td>
<td>open</td>
<td>打开文件</td>
<td>windows</td>
</tr>
<tr>
<td><code>ctrl-s</code></td>
<td>save</td>
<td>保存</td>
<td>windows</td>
</tr>
<tr>
<td><code>ctrl-shift-s</code></td>
<td>save</td>
<td>保存所有</td>
<td>notepad++</td>
</tr>
<tr>
<td><code>ctrl-w</code></td>
<td>windows</td>
<td>关闭当前页</td>
<td>windows</td>
</tr>
<tr>
<td><code>ctrl-shift-w</code></td>
<td>windows</td>
<td>关闭其它页面</td>
<td>custom</td>
</tr>
<tr>
<td><code>ctrl-shift-t</code></td>
<td>tags</td>
<td>恢复关闭的文件</td>
<td>notepad++</td>
</tr>
<tr>
<td><code>ctrl-tab</code></td>
<td>tab</td>
<td>下一个标签</td>
<td>notepad++</td>
</tr>
<tr>
<td><code>ctrl-shift-tab</code></td>
<td>tab</td>
<td>上一个标签</td>
<td>notepad++</td>
</tr>
<tr>
<td><code>f1</code></td>
<td></td>
<td>help</td>
<td>windows</td>
</tr>
<tr>
<td><code>ctrl-f1</code></td>
<td></td>
<td>google搜索选定内容</td>
<td>custom</td>
</tr>
<tr>
<td><strong>文件编辑</strong></td>
<td><strong>助记</strong></td>
<td><strong>说明</strong></td>
<td><strong>来源</strong></td>
</tr>
<tr>
<td><code>ctrl-a</code></td>
<td>all</td>
<td>全部选中</td>
<td>windows</td>
</tr>
<tr>
<td><code>ctrl-c</code></td>
<td>copy</td>
<td>复制</td>
<td>windows</td>
</tr>
<tr>
<td><code>ctrl-shift-c</code></td>
<td>copy</td>
<td>复制文档路径</td>
<td>atom</td>
</tr>
<tr>
<td><code>ctrl-d</code></td>
<td>delete</td>
<td>删除</td>
<td>custom</td>
</tr>
<tr>
<td><code>ctrl-shift-d</code></td>
<td>delete</td>
<td>删除当前行</td>
<td>custom</td>
</tr>
<tr>
<td><code>ctrl-</code> <code>h</code> <code>j</code> <code>k</code> <code>l</code></td>
<td>vim</td>
<td>上下左右</td>
<td>custom</td>
</tr>
<tr>
<td><code>ctrl-shift-h</code> <code>ctrl-←</code></td>
<td>vim h</td>
<td>左移到词首</td>
<td>custom / sublime</td>
</tr>
<tr>
<td><code>ctrl-shift-l</code> <code>ctrl-→</code></td>
<td>vim l</td>
<td>右移到词尾</td>
<td>custom / sublime</td>
</tr>
<tr>
<td><code>ctrl-shift-j</code> <code>ctrl-↓</code></td>
<td>vim j</td>
<td>向下移行</td>
<td>custom / sublime</td>
</tr>
<tr>
<td><code>ctrl-shift-k</code> <code>ctrl-↑</code></td>
<td>vim k</td>
<td>向上移行</td>
<td>custom / sublime</td>
</tr>
<tr>
<td><code>alt-shift-j</code></td>
<td>vim J</td>
<td>合并行</td>
<td>custom</td>
</tr>
<tr>
<td><del><code>ctrl-t</code></del></td>
<td>禁用掉</td>
<td>避免<code>ctrl-y</code>失效</td>
<td>custom</td>
</tr>
<tr>
<td><code>ctrl-v</code></td>
<td>velcro</td>
<td>黏贴</td>
<td>windows</td>
</tr>
<tr>
<td><code>ctrl-shift-v</code></td>
<td>ctrl-v</td>
<td>复制当前行</td>
<td>custom</td>
</tr>
<tr>
<td><code>ctrl-x</code></td>
<td></td>
<td>剪切</td>
<td>windows</td>
</tr>
<tr>
<td><code>ctrl-shift-x</code></td>
<td>ctrl-x</td>
<td>剪切当前行</td>
<td>notepad++</td>
</tr>
<tr>
<td><code>ctrl-y</code> <code>ctrl-r</code></td>
<td>redo</td>
<td>恢复更改</td>
<td>windows / vim</td>
</tr>
<tr>
<td><code>ctrl-z</code> <code>ctrl-u</code></td>
<td>undo</td>
<td>撤销更改</td>
<td>windows / vim</td>
</tr>
<tr>
<td><code>ctrl-shift-y</code></td>
<td></td>
<td>下一个浏览记录</td>
<td>custom</td>
</tr>
<tr>
<td><code>ctrl-shift-z</code></td>
<td></td>
<td>上一个浏览记录</td>
<td>custom</td>
</tr>
<tr>
<td><code>alt-鼠标</code> <code>alt-\</code></td>
<td></td>
<td>列选模式</td>
<td>notepad++ / custom</td>
</tr>
<tr>
<td><code>ctrl-enter</code></td>
<td>enter</td>
<td>下面新增一行</td>
<td>sublime</td>
</tr>
<tr>
<td><code>ctrl-shift-enter</code></td>
<td>enter</td>
<td>上面新增一行</td>
<td>sublime</td>
</tr>
<tr>
<td><code>tab</code> <code>shift-tab</code></td>
<td></td>
<td>插入缩进/删除缩进</td>
<td>notepad++</td>
</tr>
<tr>
<td><code>ctrl-^</code></td>
<td>vim</td>
<td>移到行首</td>
<td>custom</td>
</tr>
<tr>
<td><code>ctrl-shift-^</code></td>
<td>vim</td>
<td>选到行首</td>
<td>custom</td>
</tr>
<tr>
<td><code>ctrl-$</code></td>
<td>vim</td>
<td>移到行尾</td>
<td>custom</td>
</tr>
<tr>
<td><code>ctrl-shift-$</code></td>
<td>vim</td>
<td>选到行尾</td>
<td>custom</td>
</tr>
<tr>
<td><strong>查找与替换</strong></td>
<td><strong>助记</strong></td>
<td><strong>说明</strong></td>
<td><strong>来源</strong></td>
</tr>
<tr>
<td><code>ctrl-f</code></td>
<td>find</td>
<td>查找</td>
<td>windows</td>
</tr>
<tr>
<td><code>ctrl-shift-f</code></td>
<td>find</td>
<td>多文件查找</td>
<td>sublime</td>
</tr>
<tr>
<td><code>f3</code> <code>shift-f3</code></td>
<td></td>
<td>查找下一个 / 查找上一个</td>
<td>windows</td>
</tr>
<tr>
<td><code>ctrl-f3</code></td>
<td></td>
<td>选中所有匹配的关键字</td>
<td>custom</td>
</tr>
<tr>
<td><code>ctrl-m</code></td>
<td>mark</td>
<td>打标记</td>
<td>custom</td>
</tr>
<tr>
<td><code>f2</code> <code>shift-f2</code></td>
<td>tag</td>
<td>下一个标记/上一个标记</td>
<td>notepad++</td>
</tr>
<tr>
<td><code>ctrl-f2</code></td>
<td>tag</td>
<td>显示所有标签</td>
<td>custom</td>
</tr>
<tr>
<td><code>ctrl-shift-f2</code></td>
<td>tag</td>
<td>清空所有标签</td>
<td>custom</td>
</tr>
<tr>
<td><code>ctrl-.</code></td>
<td>..</td>
<td>TAB转为空格</td>
<td>custom</td>
</tr>
<tr>
<td><code>ctrl-shift-.</code></td>
<td>&gt;&gt;</td>
<td>空格转为TAB</td>
<td>custom</td>
</tr>
<tr>
<td><strong>代码专用</strong></td>
<td><strong>助记</strong></td>
<td><strong>说明</strong></td>
<td><strong>来源</strong></td>
</tr>
<tr>
<td><code>ctrl-b</code></td>
<td>beautify</td>
<td>格式化代码</td>
<td>custom</td>
</tr>
<tr>
<td><code>ctrl-shift-m</code></td>
<td>markdown</td>
<td>markdown预览</td>
<td>atom</td>
</tr>
<tr>
<td><code>alt-0</code> <code>alt-shift-0</code></td>
<td>0-9</td>
<td>折叠代码/展开代码</td>
<td>notepad++</td>
</tr>
<tr>
<td><code>ctrl-[</code> <code>ctrl-]</code></td>
<td></td>
<td>移动/全选对应括号</td>
<td>custom</td>
</tr>
<tr>
<td><code>ctrl-鼠标</code> <code>shift-鼠标</code></td>
<td></td>
<td>跳转</td>
<td>eclipse / custom</td>
</tr>
<tr>
<td><code>f4</code> <code>shift-f4</code></td>
<td></td>
<td>跳转 / 跳回</td>
<td>custom</td>
</tr>
<tr>
<td><code>f5</code></td>
<td>run</td>
<td>运行</td>
<td>notepad++</td>
</tr>
<tr>
<td><code>f6</code></td>
<td></td>
<td>比较文件</td>
<td>custom</td>
</tr>
<tr>
<td><code>ctrl-/</code></td>
<td><code>//</code></td>
<td>单行注释翻转</td>
<td>eclipse</td>
</tr>
<tr>
<td><code>ctrl-shift-/</code></td>
<td><code>/*</code></td>
<td>多行注释</td>
<td>eclipse</td>
</tr>
<tr>
<td><code>ctrl-shift-\</code></td>
<td><code>/*</code></td>
<td>取消多行注释</td>
<td>eclipse</td>
</tr>
<tr>
<td><code>ctrl-~</code></td>
<td></td>
<td>打开终端</td>
<td>sublime</td>
</tr>
</tbody>
</table>
<h1 id="Win系统快捷键"><a href="#Win系统快捷键" class="headerlink" title="Win系统快捷键"></a>Win系统快捷键</h1><table>
<thead>
<tr>
<th>Listary</th>
<th>助记</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>win-~</code></td>
<td></td>
<td>打开Listary</td>
</tr>
<tr>
<td><code>enter</code></td>
<td>enter</td>
<td>打开文件</td>
</tr>
<tr>
<td><code>ctrl-enter</code></td>
<td>enter</td>
<td>打开路径</td>
</tr>
<tr>
<td><code>ctrl-c</code></td>
<td>copy</td>
<td>复制</td>
</tr>
<tr>
<td><code>ctrl-shift-c</code></td>
<td>copy</td>
<td>复制路径</td>
</tr>
<tr>
<td><code>ctrl+j</code> <code>ctrl+k</code></td>
<td>vim j,k</td>
<td>下一个 / 上一个(需设置)</td>
</tr>
<tr>
<td><strong>Ditto</strong></td>
<td><strong>助记</strong></td>
<td><strong>文件夹/应用</strong></td>
</tr>
<tr>
<td><code>ctrl-1</code></td>
<td>list</td>
<td>打开ditto面板</td>
</tr>
<tr>
<td><code>enter</code></td>
<td>enter</td>
<td>黏贴</td>
</tr>
<tr>
<td><code>shift-enter</code></td>
<td>enter</td>
<td>纯文本黏贴</td>
</tr>
<tr>
<td><strong>AHK</strong></td>
<td><strong>助记</strong></td>
<td><strong>功能</strong></td>
</tr>
<tr>
<td><code>鼠标中键</code></td>
<td></td>
<td>复制</td>
</tr>
<tr>
<td><code>shift-鼠标中键</code></td>
<td></td>
<td>剪切</td>
</tr>
<tr>
<td><code>ctrl-shift-鼠标中键</code></td>
<td></td>
<td>复制当前路径</td>
</tr>
<tr>
<td><code>鼠标右键</code></td>
<td></td>
<td>首次黏贴</td>
</tr>
<tr>
<td><code>ctrl-鼠标右键</code></td>
<td></td>
<td>黏贴</td>
</tr>
<tr>
<td><code>ctrl-~</code></td>
<td></td>
<td>打开终端 (关联路径)</td>
</tr>
<tr>
<td><code>alt-win-鼠标中键</code></td>
<td></td>
<td>复制屏幕颜色</td>
</tr>
<tr>
<td><code>alt-win-←↑↓→</code></td>
<td></td>
<td>单像素移动鼠标</td>
</tr>
<tr>
<td><code>alt-win-d</code></td>
<td>date</td>
<td>输入当前日期</td>
</tr>
<tr>
<td><strong>AHK快捷方式</strong></td>
<td><strong>助记</strong></td>
<td><strong>文件夹/应用</strong></td>
</tr>
<tr>
<td><code>alt-a</code> <code>win-a</code></td>
<td>all / audio</td>
<td>我的电脑 / 音频处理软件</td>
</tr>
<tr>
<td><code>alt-b</code> <code>win-b</code></td>
<td>backup</td>
<td>backup / FreeFileSync</td>
</tr>
<tr>
<td><code>alt-c</code> <code>win-c</code></td>
<td>c盘 / caculate</td>
<td>c盘 / 计算器</td>
</tr>
<tr>
<td><code>alt-d</code> <code>win-d</code></td>
<td>download</td>
<td>download / 迅雷</td>
</tr>
<tr>
<td><code>alt-e</code> <code>win-e</code></td>
<td>e盘 / editor</td>
<td>e盘 / 编辑器</td>
</tr>
<tr>
<td><code>alt-f</code> <code>win-f</code></td>
<td>f盘 / find</td>
<td>f盘 / everything</td>
</tr>
<tr>
<td><code>alt-g</code> <code>win-g</code></td>
<td>green / google</td>
<td>绿色软件 / 浏览器</td>
</tr>
<tr>
<td><code>win-h</code></td>
<td>help</td>
<td>zeal 文档帮助</td>
</tr>
<tr>
<td><code>win-i</code></td>
<td>ie</td>
<td>IE核浏览器</td>
</tr>
<tr>
<td><code>win-j</code></td>
<td>记账</td>
<td>MoneyHome</td>
</tr>
<tr>
<td><code>alt-l</code> <code>win-l</code></td>
<td>life / look</td>
<td>life / 视频搜索</td>
</tr>
<tr>
<td><code>alt-m</code> <code>win-m</code></td>
<td>music</td>
<td>music / mcool</td>
</tr>
<tr>
<td><code>win-n</code></td>
<td>notepad</td>
<td>notepad++</td>
</tr>
<tr>
<td><code>alt-p</code> <code>win-p</code></td>
<td>picture</td>
<td>picture / Paint.Net</td>
</tr>
<tr>
<td><code>alt-s</code> <code>win-s</code></td>
<td>study / ScreenShot</td>
<td>study / 截屏</td>
</tr>
<tr>
<td><code>alt-v</code> <code>win-v</code></td>
<td>video</td>
<td>video / PotPlayer</td>
</tr>
<tr>
<td><code>alt-w</code> <code>win-w</code></td>
<td>work / word</td>
<td>work / word</td>
</tr>
<tr>
<td><code>win-x</code></td>
<td>虚拟机</td>
<td>Hyper-V</td>
</tr>
<tr>
<td><code>alt-y</code> <code>win-y</code></td>
<td>移动硬盘 / 翻译</td>
<td>y盘 / 有道词典</td>
</tr>
<tr>
<td><code>win-z</code></td>
<td>证券</td>
<td>证券</td>
</tr>
</tbody>
</table>
<h1 id="大致原则"><a href="#大致原则" class="headerlink" title="大致原则"></a>大致原则</h1><ul>
<li><code>ctrl</code> 基本操作</li>
<li><code>shift</code> 反向操作/块操作</li>
<li><code>alt</code> 处理文件-AHK使用</li>
<li><code>win</code> 打开应用-AHK使用</li>
<li><code>alt-win</code> 特殊应用-AHK使用</li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows 软件系列-基于NFS的家庭网]]></title>
      <url>https://draapho.github.io/2016/10/03/1606-WinSoft-cloud/</url>
      <content type="html"><![CDATA[<h1 id="家庭网设想"><a href="#家庭网设想" class="headerlink" title="家庭网设想"></a>家庭网设想</h1><h2 id="理想的云"><a href="#理想的云" class="headerlink" title="理想的云"></a>理想的云</h2><ul>
<li>理想的家庭网是由NAS做数据中心, 是家里的云</li>
<li>需要使用千兆网来支持数据分享(如视频流)</li>
<li>考虑到设备多样性, 可使用多种分享模式, 如NFS, windows共享服务等等</li>
<li>理想很丰满, 现实很骨干. 由于预算, 稳定性, 易用性等问题, 多半会用折中方案</li>
<li>可以看看混乱的方案推荐: <a href="https://www.zhihu.com/question/20791825" target="_blank" rel="external">如何实现一个简单的家庭云存储（NAS）系统？</a></li>
</ul>
<h2 id="现实的云"><a href="#现实的云" class="headerlink" title="现实的云"></a>现实的云</h2><ul>
<li>理想之所以遥远, 往往是因为没有明确需求, 导致什么都想要! 所以, 先明确需求<ul>
<li>NAS是用来折腾和看电影的(电影存在硬盘上, 能在沙发上和床上观影).</li>
<li>日常资料还是存储在本地硬盘比较便捷</li>
<li>有安全需求, 要备份或镜像本地资料到家庭云(<strong>双设备备份</strong>, 相比NAS的各种RAID, 一大优势是<strong>防偷</strong>)</li>
<li>做嵌入式开发, 需要在windows上装linux虚拟机, 然后数据共享</li>
<li>关键数据出问题时, 在可靠和有把握的环境下来恢复数据.</li>
</ul>
</li>
<li>给出最终使用的方案. 折腾记就不写在此文了.<ul>
<li>使用 Intel NUC 作为桌面主机和云服务器. 小巧, 够用(不玩游戏), 省电.</li>
<li>使用 Hyper-V 安装 家用NAS 和 Ubuntu.</li>
<li>另有嵌入式linux开发板, 投影仪, 手机等设备需要和云交换数据.</li>
<li>使用 <a href="https://www.hanewin.net/nfs-e.htm" target="_blank" rel="external">HaneWIN</a> 向其它设备提供NFS服务</li>
<li>使用 <a href="http://www.freefilesync.org/" target="_blank" rel="external">freefilesync</a> 备份资料到移动硬盘(和理想中的备份方式差好多…)</li>
</ul>
</li>
</ul>
<h1 id="HaneWIN"><a href="#HaneWIN" class="headerlink" title="HaneWIN"></a><a href="https://www.hanewin.net/nfs-e.htm" target="_blank" rel="external">HaneWIN</a></h1><ul>
<li><a href="https://www.hanewin.net/nfs-e.htm" target="_blank" rel="external">HaneWIN</a> 可免费试用30天. 适合做win下的nfs服务器. </li>
<li>如果要免费软件, 可尝试 <a href="https://sourceforge.net/projects/freenfs/" target="_blank" rel="external">FreeNFS</a>. 功能较弱. 可参考<a href="https://wenku.baidu.com/view/b9dccaedf8c75fbfc77db2c1.html?from=search" target="_blank" rel="external">FreeNFS简易教程</a>.</li>
<li>需要支持嵌入式linux端的NFS(只支持NFS v2), 配置见图:<br><img src="https://draapho.github.io/images/1606/haneWIN_NFS.PNG" alt="haneWIN_NFS"></li>
<li>务必使用<code>UTF-8 character set</code><br><img src="https://draapho.github.io/images/1606/haneWIN_Server.PNG" alt="haneWIN_Server"></li>
<li><p>重点说一下<code>Exports</code>这一块, 即把文件通过NFS分享出去.<br><img src="https://draapho.github.io/images/1606/haneWIN_Exports.PNG" alt="haneWIN_Exports"></p>
<ul>
<li><code>E:\Downloads -name:Downloads 10.0.0.99</code><br>就是把本地<code>Downloads</code>文件夹分享给<code>ip=10.0.0.99</code>的机器, 对外名称为<code>Downloads</code></li>
<li><code>-mapall:0:0</code> 是提供给linux端root权限. (这句最短? 花了一周时间才实验成功啊…)</li>
<li><code>-range 10.0.0.1 10.0.0.111</code> 是设置ip范围, 这里是从<code>10.0.0.1</code>-<code>10.0.0.111</code></li>
<li><p>语法规则不多, 详见<a href="https://www.hanewin.net/doc/nfs/nfsd.htm" target="_blank" rel="external">官网说明</a>. 可用参数如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># The following options are supported:</div><div class="line">-name:&lt;sharename&gt;   assigns a name to the exported path as an alternate name for mounting.</div><div class="line">-alldirs    allows the host(s) to mount at any point within the filesystem.</div><div class="line">-umask:&lt;mask&gt;   set the umask for group and world permissions on the filesystem, default 022</div><div class="line">-readonly   limits access to reading</div><div class="line">-public Enables WebNFS access.</div><div class="line">-lowercase  maps all file names to lowercase, otherwise case is preserved.</div><div class="line">-exec   forces in access rights the x bit for all files.</div><div class="line">-mapall:&lt;uid&gt;[:&lt;gid&gt;]   all Unix user-ids and group-ids are mapped to the specified user-id and group-id.</div><div class="line">-maproot:&lt;uid&gt;[:&lt;gid&gt;]  the Unix super user root is mapped to the specified user-id, group-id. Without a mapping entry root will be mapped to user and group nobody.</div><div class="line">-range  IP adresses are interpreted in pairs as from-to ranges enabling client access from all addresses in a range (more flexible than the unix -net -mask options).</div></pre></td></tr></table></figure>
</li>
<li><p>再举几个例子:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># exports example</div><div class="line">c:\ftp -range 192.168.1.1 192.168.1.10</div><div class="line">c:\public -public -readonly</div><div class="line">c:\tools -readonly 192.168.1.4</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>如果NFS被成功加载, 那么会在<code>Mounts</code>页显示出来<br><img src="https://draapho.github.io/images/1606/haneWIN_Mounts.PNG" alt="haneWIN_Mounts"></p>
</li>
<li>参考<ul>
<li><a href="http://www.nasyun.com/thread-25086-1-1.html" target="_blank" rel="external">GEN8折腾日记-第三方NFS工具 hanewin 设置(需登录)</a></li>
<li><a href="http://wenku.baidu.com/view/c78baefefad6195f302ba665.html" target="_blank" rel="external">GEN8折腾日记-第三方NFS工具 hanewin 设置(百度文库)</a></li>
<li><a href="https://www.chiphell.com/thread-1240623-1-1.html" target="_blank" rel="external">群晖加载Windows NFS文件</a></li>
</ul>
</li>
</ul>
<h1 id="Hyper-V"><a href="#Hyper-V" class="headerlink" title="Hyper-V"></a>Hyper-V</h1><ul>
<li>从Win8开始, Hyper-V是Windows自带的软件.</li>
<li>启用Hper-V, <code>控制面板</code>-&gt;<code>程序和功能</code>-&gt;<code>启用或关闭Windows功能</code>-&gt;<code>Hyper-V</code><br><img src="https://draapho.github.io/images/1606/HyperV_Enable.PNG" alt="HyperV_Enable"></li>
<li>设置虚拟网络<br><img src="https://draapho.github.io/images/1606/HyperV_NIC1.PNG" alt="HyperV_NIC1"><br><img src="https://draapho.github.io/images/1606/HyperV_NIC2.PNG" alt="HyperV_NIC2"></li>
<li>新建虚拟机<br><img src="https://draapho.github.io/images/1606/HyperV_Install1.png" alt="HyperV_Install1"><br><img src="https://draapho.github.io/images/1606/HyperV_Install2.png" alt="HyperV_Install2"><br><img src="https://draapho.github.io/images/1606/HyperV_Install3.png" alt="HyperV_Install3"></li>
<li>安装Ubuntu 32位服务器版本, 用于交叉编译. (另一个备选方案是用cygwin)</li>
<li>安装家用NAS, 用于多设备(投影仪, 平板, 手机)看硬盘上的影片.</li>
</ul>
<h1 id="NAS和智能路由器"><a href="#NAS和智能路由器" class="headerlink" title="NAS和智能路由器"></a>NAS和智能路由器</h1><h2 id="两者的区别"><a href="#两者的区别" class="headerlink" title="两者的区别"></a>两者的区别</h2><ul>
<li>NAS, Network Attached Storage. 家用的话, 大多定位于多媒体观赏和数据备份两个核心功能.</li>
<li>专做NAS的厂家, <a href="https://www.synology.com/" target="_blank" rel="external">Synology(群晖)</a> 和 <a href="https://www.qnap.com/" target="_blank" rel="external">QNAP(威联通)</a> 比较有名</li>
<li>智能路由器, 从小米路由器到airport extreme.</li>
<li>两者区别的话, 就是一个更专业, 一个更娱乐.<br>所谓专业, 就是更多的权限设置和管理(对用户不友好), 更多的功能, 更高的安全要求.<br>所谓娱乐, 就是傻瓜易上手, 能用好用为主要需求.<br>简而言之, 一个是专业单反, 一个是傻瓜机, 然后有一些就是处于中间位置的微单…</li>
</ul>
<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ul>
<li>大多数的家庭, 对此类产品的第一要求就是<strong>好用</strong>. 只有Geek一类的人需要<strong>好玩</strong>.</li>
<li>NAS在宣传上, 必然会强调数据安全, 列出诸如支持多种RAID这种让非专业人士云里雾里的概念.</li>
<li>而普通家庭最大的数据安全问题就是数据过于集中, 防偷防意外损坏之类的风险防范反而不足了.</li>
<li>因此, 家用云市场应该侧重于易于配置和使用. 家庭的数据安全问题不是靠一台专业NAS设备就能解决的.</li>
<li>结论: 在家用市场, 智能路由器有更好的市场前景.</li>
</ul>
<h2 id="数据安全"><a href="#数据安全" class="headerlink" title="数据安全"></a>数据安全</h2><ul>
<li>家庭环境的话, 建议用移动硬盘备份关键资料(即RAID1), 然后分开存储, 当然也可以基于SFTP等服务自动备份. 这样可以做到物理上相对独立, 而且因为用的是RAID1, 数据出问题后的恢复也非常简单.</li>
<li>中小企业就需要用到稍微专业一点的NAS才比较好了. 话说, 很多本土企业对数据安全这一块很不上心啊…</li>
<li>推荐完全免费的同步软件<a href="http://www.freefilesync.org/" target="_blank" rel="external">freefilesync</a>, 买块硬盘, 家用足够了.</li>
</ul>
<h2 id="个人推荐"><a href="#个人推荐" class="headerlink" title="个人推荐"></a>个人推荐</h2><ul>
<li>听说过家庭云, 不知道具体需求, 买个便宜的小米路由器先体验体验.</li>
<li>苹果爱好者直接上 airport extreme, 二千元可以给手机平板太多额外的存储空间了.</li>
<li>想要玩NAS的, 可以先用虚拟机装了体验一下效果.</li>
<li>如果买专业的NAS, 推荐直接用企业入门级产品QNAP的<code>TS-251</code>或<code>TS-253 Pro</code>,内置虚拟机, 可玩性很高.</li>
<li>群晖的机器不太推荐, 因为数据的存储格式很奇怪, 万一出点问题自己一点办法也没有!</li>
<li>组装机也不是太推荐, 因为功耗美观服务都要考虑进去.</li>
</ul>
<h1 id="同步软件freefilesync"><a href="#同步软件freefilesync" class="headerlink" title="同步软件freefilesync"></a>同步软件<a href="http://www.freefilesync.org/" target="_blank" rel="external">freefilesync</a></h1><ul>
<li><a href="http://www.freefilesync.org/" target="_blank" rel="external">freefilesync</a>是一款完全免费的同步软件, 可以完全媲美GoodSync</li>
<li>支持sftp, 所以也可以通过网络自动备份数据</li>
<li>家庭用户使用RAID1, 即关键资料双硬盘完整备份, 然后分开存放就足够了.</li>
</ul>
<h1 id="远程开机"><a href="#远程开机" class="headerlink" title="远程开机"></a>远程开机</h1><p>如果是7x24小时开机当服务器用, 则不用考虑这一块. 远程开机是针对虚拟机和组装机用户说的.</p>
<h2 id="LAN唤醒"><a href="#LAN唤醒" class="headerlink" title="LAN唤醒"></a>LAN唤醒</h2><ul>
<li>LAN唤醒需要主板的支持, 不支持无线网络, 必须使用有线. 新一点的机器一般都能支持.</li>
<li>启用主板的WOL功能<ul>
<li>开机进入BIOS, 寻找<code>wake on lan``resume on lan``power on PME``power on by PCI-E device``Power on by Onboard LAN</code>等与电源管理和唤醒有关的选项并使能</li>
</ul>
</li>
<li>设置网卡驱动<ul>
<li><code>设备管理器</code>-&gt;<code>网络适配器</code>-&gt;选择有线网卡设备-&gt;右键<code>属性</code>-&gt;在<code>高级</code>和<code>电源管理</code>标签下-&gt;启用<code>唤醒模式``唤醒魔包``幻数据包``唤醒计算机</code>之类的选项</li>
</ul>
</li>
<li>配置 WIN10 WOL(Wake on Lan 远程唤醒) 最大的坑就是要关闭 “启用快速启动(推荐)”, 而默认是打开的. 另外, <ul>
<li><code>控制面板</code>-&gt;<code>硬件和声音</code>-&gt;<code>电源选项</code>-&gt;左边栏<code>选择电源按钮的功能</code>-&gt;弹出<code>系统设置</code>页面-&gt;<code>关机设置</code>-&gt;<del><code>启用快速启动(推荐)</code></del></li>
</ul>
</li>
<li>电脑非正常关机后, 是无法远程唤醒的.</li>
<li>建议分级测试.<ol>
<li>可以先确定bios配置正确. 配置好bios, 进入winPE之类的系统, 选择关机, 看WOL是否起作用.</li>
<li>然后进入win10配置网卡的相关选项, 然后让机器进入睡眠模式, 看WOL是否起作用.</li>
<li>最后win10关机, 测试WOL是否起作用.</li>
<li>“启用快速启动(推荐)”, 位于 控制面板\硬件和声音\电源选项\唤醒时需要密码(系统设置)\关机设置.</li>
<li>注意: bios设置内关于PCI节能的设置特别注意, 考虑全部关闭</li>
</ol>
</li>
<li>Android端WOL软件推荐. <code>Wake On LAN</code> 配置简单, 界面友好.</li>
<li>参考链接<ul>
<li><a href="https://www.teamviewer.com/zhCN/res/pdf/Teamviewer9-Manual-Wake-on-LAN-zhCN.pdf" target="_blank" rel="external">TeamViewer手册-LAN唤醒</a></li>
<li><a href="http://www.iplaysoft.com/wol.html" target="_blank" rel="external">WOL 网络唤醒远程开机设置方法教程 + 多款软件下载！(手机远程开启电脑)</a></li>
</ul>
</li>
</ul>
<h2 id="WAN远程唤醒"><a href="#WAN远程唤醒" class="headerlink" title="WAN远程唤醒"></a>WAN远程唤醒</h2><ul>
<li>WAN远程唤醒的前提是配置好LAN唤醒.</li>
<li>需要设置路由器, 设置过程非常复杂, 而且免费的不稳定.</li>
<li>我买了向日葵开机棒, 但实际体验不好. 一是向日葵的服务器不太稳定, 而是远程操作意义不大, 纯玩性质.</li>
<li>所以, 建议普通用户不用折腾这块了. 真有异地工作, 资料同步的需求, 用公共云, github, BitBucket都很好.</li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[stm32选型及资料搜索指南]]></title>
      <url>https://draapho.github.io/2016/10/01/1605-Stm32Selection/</url>
      <content type="html"><![CDATA[<h1 id="stm32选型及手册搜索"><a href="#stm32选型及手册搜索" class="headerlink" title="stm32选型及手册搜索"></a>stm32选型及手册搜索</h1><ul>
<li>进入搜索网页<a href="http://www.st.com/content/st_com/en/products/microcontrollers.html" target="_blank" rel="external">STM选型</a></li>
<li>在搜索框输入指定型号, 点击进入具体型号的页面. 如<a href="http://www.st.com/content/st_com/en/products/microcontrollers/stm32-32-bit-arm-cortex-mcus/stm32f1-series/stm32f103/stm32f103rc.html" target="_blank" rel="external">STM32F103RC</a></li>
<li><a href="http://www.st.com/content/ccc/resource/technical/document/datasheet/59/f6/fa/84/20/4e/4c/59/CD00191185.pdf/files/CD00191185.pdf/jcr:content/translations/en.CD00191185.pdf" target="_blank" rel="external">DS5792</a> -  <strong>DataSheet, 数据手册. 电气参数详解, 软硬件必备</strong></li>
<li><a href="http://www.st.com/content/ccc/resource/technical/document/reference_manual/59/b9/ba/7f/11/af/43/d5/CD00171190.pdf/files/CD00171190.pdf/jcr:content/translations/en.CD00171190.pdf" target="_blank" rel="external">RM0008</a> - <strong>Reference Manuals, 参考手册. 寄存器详解. 软件开发必备</strong></li>
<li><a href="http://www.st.com/content/ccc/resource/technical/document/application_note/a2/9c/07/d9/2a/b2/47/dc/CD00004479.pdf/files/CD00004479.pdf/jcr:content/translations/en.CD00004479.pdf" target="_blank" rel="external">AN1709</a> - <strong>Application Notes, 应用指南. 需要仔细看这类文档</strong>. 是针对具体问题的指南, 如这一篇是EMC设计指南</li>
<li><a href="http://www.st.com/content/ccc/resource/technical/document/programming_manual/10/98/e8/d4/2b/51/4b/f5/CD00283419.pdf/files/CD00283419.pdf/jcr:content/translations/en.CD00283419.pdf" target="_blank" rel="external">PM0075</a> - Programming Manuals, 烧录手册. 介绍擦写flash相关的流程和寄存器</li>
<li><a href="http://www.st.com/content/ccc/resource/technical/document/errata_sheet/f5/50/c9/46/56/db/4a/f6/CD00197763.pdf/files/CD00197763.pdf/jcr:content/translations/en.CD00197763.pdf" target="_blank" rel="external">ES0340</a> - Errata Sheets, 勘误表. 遇到非常奇怪的问题时, 可以先来看看勘误表, 是否源文件就是错的!</li>
<li><a href="http://www.st.com/content/ccc/resource/technical/document/technical_note/92/30/3c/a1/4c/bb/43/6f/DM00103228.pdf/files/DM00103228.pdf/jcr:content/translations/en.DM00103228.pdf" target="_blank" rel="external">TN1163</a> - Technical Notes &amp; Articles, 技术指南, 存储焊接, 开发工具配置之类的解答. <strong>生产必备</strong></li>
<li><a href="http://www.st.com/content/ccc/resource/technical/document/user_manual/f9/4a/8d/e6/b8/20/4a/46/DM00062592.pdf/files/DM00062592.pdf/jcr:content/translations/en.DM00062592.pdf" target="_blank" rel="external">UM1561</a> - User Manuals, 对官方开发板或开发工具的用户说明书</li>
</ul>
<h1 id="其它设计资料的搜索"><a href="#其它设计资料的搜索" class="headerlink" title="其它设计资料的搜索"></a>其它设计资料的搜索</h1><ul>
<li>根据型号并不能找出期望的文档. 譬如需要一份电源设计参考.</li>
<li>进去搜索网页<a href="http://www.st.com/content/st_com/en/products/microcontrollers.html" target="_blank" rel="external">STM选型</a></li>
<li>在搜索框输入关键词<code>hardware power</code>, 在搜索结果页面, 选择<code>Resouces</code>标签</li>
<li>这里第一条就是 <a href="http://www.st.com/content/ccc/resource/technical/document/application_note/87/b8/0f/5e/ab/d0/4f/2d/DM00071779.pdf/files/DM00071779.pdf/jcr:content/translations/en.DM00071779.pdf" target="_blank" rel="external">AN4218: Hardware design guideline power supply and voltage measurement</a></li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vim常用快捷键]]></title>
      <url>https://draapho.github.io/2016/10/01/1604-CheatSheet-vim/</url>
      <content type="html"><![CDATA[<h1 id="Vim常用快捷键"><a href="#Vim常用快捷键" class="headerlink" title="Vim常用快捷键"></a>Vim常用快捷键</h1><h2 id="进入输入模式"><a href="#进入输入模式" class="headerlink" title="进入输入模式"></a>进入输入模式</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>助记</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>i</code></td>
<td>insert</td>
<td>光标前插入文本</td>
</tr>
<tr>
<td><code>I</code></td>
<td>insert</td>
<td>行首插入文本</td>
</tr>
<tr>
<td><code>ea</code></td>
<td>end append</td>
<td>单词末插入文本</td>
</tr>
<tr>
<td><code>a</code></td>
<td>append</td>
<td>光标后插入文本</td>
</tr>
<tr>
<td><code>A</code></td>
<td>append</td>
<td>行尾插入文本</td>
</tr>
<tr>
<td><code>o</code></td>
<td>open new line</td>
<td>向下插入新行</td>
</tr>
<tr>
<td><code>O</code></td>
<td>open new line</td>
<td>向上插入新行</td>
</tr>
<tr>
<td><code>cw</code></td>
<td>change word</td>
<td>修改单词</td>
</tr>
<tr>
<td><code>cc</code></td>
<td>change</td>
<td>删除整行后修改</td>
</tr>
<tr>
<td><code>c^</code> <code>c$</code></td>
<td>change</td>
<td>删除到行首/行尾后修改</td>
</tr>
</tbody>
</table>
<h2 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>助记</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>h</code> <code>j</code> <code>k</code> <code>l</code></td>
<td></td>
<td>左/下/上/右</td>
</tr>
<tr>
<td><code>^</code> <code>0</code> <code>$</code></td>
<td></td>
<td>行首/首字母/行尾</td>
</tr>
<tr>
<td><code>w</code></td>
<td>word</td>
<td>下个字开头</td>
</tr>
<tr>
<td><code>e</code></td>
<td>end</td>
<td>本字结尾</td>
</tr>
<tr>
<td><code>b</code></td>
<td>before</td>
<td>上个字开头</td>
</tr>
<tr>
<td><code>fx</code></td>
<td>find+字符</td>
<td>移动到x字符处</td>
</tr>
<tr>
<td><code>5enter</code></td>
<td></td>
<td>向下移5行</td>
</tr>
<tr>
<td><code>gg</code> <code>1G</code></td>
<td>go</td>
<td>回首行</td>
</tr>
<tr>
<td><code>G</code></td>
<td>go</td>
<td>到末行</td>
</tr>
<tr>
<td><code>5G</code></td>
<td>num+go</td>
<td>到第5行</td>
</tr>
<tr>
<td><code>ctrl+u</code></td>
<td>up</td>
<td>向上翻半页</td>
</tr>
<tr>
<td><code>ctrl+d</code></td>
<td>down</td>
<td>向下翻半页</td>
</tr>
<tr>
<td><code>{</code> <code>}</code></td>
<td></td>
<td>块首/块尾</td>
</tr>
<tr>
<td><code>H</code></td>
<td>high</td>
<td>屏幕顶部</td>
</tr>
<tr>
<td><code>M</code></td>
<td>medium</td>
<td>屏幕中部</td>
</tr>
<tr>
<td><code>L</code></td>
<td>low</td>
<td>屏幕底部</td>
</tr>
</tbody>
</table>
<h2 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a>文本编辑</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>助记</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>r</code></td>
<td>repalce</td>
<td>替换单个字符</td>
</tr>
<tr>
<td><code>~</code></td>
<td></td>
<td>改变字符大小写</td>
</tr>
<tr>
<td><code>x</code> <code>5x</code></td>
<td></td>
<td>删除字符</td>
</tr>
<tr>
<td><code>dw</code> <code>5dw</code></td>
<td>delete word</td>
<td>删除单词</td>
</tr>
<tr>
<td><code>db</code> <code>5db</code></td>
<td>delete befor</td>
<td>向前删除单词</td>
</tr>
<tr>
<td><code>dd</code> <code>5dd</code></td>
<td>delete</td>
<td>删除整行</td>
</tr>
<tr>
<td><code>d^</code> <code>d$</code></td>
<td>delete</td>
<td>删除到行首/行尾</td>
</tr>
<tr>
<td><code>d1G</code> <code>dG</code></td>
<td>delete</td>
<td>删除到第一行/最后一行</td>
</tr>
<tr>
<td><code>yw</code> <code>5yw</code></td>
<td>yank word</td>
<td>复制单词</td>
</tr>
<tr>
<td><code>yy</code> <code>5yy</code></td>
<td>yank</td>
<td>复制整行</td>
</tr>
<tr>
<td><code>y^</code> <code>y$</code></td>
<td>yank</td>
<td>复制到行首/行尾</td>
</tr>
<tr>
<td><code>&gt;&gt;</code> <code>&lt;&lt;</code></td>
<td></td>
<td>单行缩进</td>
</tr>
<tr>
<td><code>p</code> <code>P</code></td>
<td>paste</td>
<td>黏贴(光标后/光标前)</td>
</tr>
<tr>
<td><code>J</code></td>
<td>join</td>
<td>将下一行合并到当前行</td>
</tr>
<tr>
<td><code>u</code></td>
<td>undo</td>
<td>撤销更改/撤销输入</td>
</tr>
<tr>
<td><code>ctrl+r</code></td>
<td>redo</td>
<td>恢复</td>
</tr>
<tr>
<td><code>ctrl+r</code></td>
<td>redo</td>
<td>恢复</td>
</tr>
<tr>
<td><code>.</code></td>
<td></td>
<td>重复编辑动作</td>
</tr>
</tbody>
</table>
<h2 id="视图模式"><a href="#视图模式" class="headerlink" title="视图模式"></a>视图模式</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>助记</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>v</code></td>
<td>visual</td>
<td>进入视图模式</td>
</tr>
<tr>
<td><code>&gt;</code> <code>&lt;</code></td>
<td></td>
<td>代码缩进</td>
</tr>
<tr>
<td><code>d</code> <code>y</code></td>
<td>delete yank</td>
<td>剪切/复制</td>
</tr>
<tr>
<td><code>~</code></td>
<td></td>
<td>改变大小写</td>
</tr>
</tbody>
</table>
<h2 id="查找与替换"><a href="#查找与替换" class="headerlink" title="查找与替换"></a>查找与替换</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>助记</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>/str</code></td>
<td></td>
<td>查找str</td>
</tr>
<tr>
<td><code>n</code> <code>N</code></td>
<td>next</td>
<td>查找下一个/上一个</td>
</tr>
<tr>
<td><code>:s/old/new/g</code></td>
<td>start…go</td>
<td>所在行old替换为new</td>
</tr>
<tr>
<td><code>:n1,n2s/old/new/g</code></td>
<td>start…go</td>
<td>n1-n2行old替换为new</td>
</tr>
<tr>
<td><code>:0,$/old/new/g</code></td>
<td>start…go</td>
<td>全文old替换为new</td>
</tr>
<tr>
<td><code>:%s/old/new/g</code></td>
<td>start…go</td>
<td>全文old替换为new</td>
</tr>
<tr>
<td><code>:n1,n2s/^/\/\//g</code></td>
<td><code>^</code> 行首 <code>/</code> 转义</td>
<td>行首替换为//, 即注释掉</td>
</tr>
</tbody>
</table>
<h2 id="保存与退出"><a href="#保存与退出" class="headerlink" title="保存与退出"></a>保存与退出</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>助记</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>esc</code></td>
<td></td>
<td>返回命令模式</td>
</tr>
<tr>
<td><code>:wq</code> <code>:wq!</code></td>
<td>write &amp; quit</td>
<td>保存并退出</td>
</tr>
<tr>
<td><code>:q</code> <code>:q!</code></td>
<td>quit  <code>!</code> sudo</td>
<td>退出</td>
</tr>
</tbody>
</table>
<h2 id="Vim-助记图-总有一款适合你"><a href="#Vim-助记图-总有一款适合你" class="headerlink" title="Vim 助记图, 总有一款适合你"></a>Vim 助记图, 总有一款适合你</h2><ul>
<li><p><a href="http://vim.rtorr.com/lang/zh_cn/" target="_blank" rel="external">中文版 Vim Cheat Sheet</a> 网页版, 支持多语言</p>
</li>
<li><p><a href="http://vimsheet.com/" target="_blank" rel="external">A Great Vim Cheat Sheet</a> 网页版</p>
</li>
<li><p><a href="http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html" target="_blank" rel="external">Graphical vi-vim Cheat Sheet and Tutorial</a><br><img src="http://www.viemu.com/vi-vim-cheat-sheet.gif" alt="vi/vim graphical cheat sheet"></p>
</li>
<li><a href="http://vimcheatsheet.com/" target="_blank" rel="external">Beautiful Vim Cheat-Sheet</a><br><img src="https://cdn.shopify.com/s/files/1/0165/4168/files/preview.png" alt="Vim Cheat-Sheet Preview"></li>
<li><a href="https://www.gosquared.com/blog/vi-linux-terminal-help-sheet" target="_blank" rel="external">VI (Linux Terminal) Help Sheet</a><br><img src="https://downloads.gosquared.com/help_sheets/10/VI-Help-Sheet-large.jpg" alt="VI Help Sheet"></li>
<li><a href="http://blog.vgod.tw/2009/12/08/vim-cheat-sheet-for-programmers/" target="_blank" rel="external">給程式設計師的Vim入門圖解說明</a><br><img src="http://blog.vgod.tw.s3.amazonaws.com/wp-content/uploads/2009/12/vim-cheat-sheet-diagram.png" alt="Vim入門圖解說明"></li>
<li><a href="http://linux.vbird.org/linux_basic/0310vi.php" target="_blank" rel="external">vim极简中文示意图</a>-&gt;<code>9.3.6 vim 常用指令示意图</code><br><img src="https://draapho.github.io/images/1604/vimCheatSheet.jpg" alt="vim极简中文示意图"></li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows 软件系列-文本编辑]]></title>
      <url>https://draapho.github.io/2016/09/30/1603-WinSoft-editor/</url>
      <content type="html"><![CDATA[<h1 id="Notepad"><a href="#Notepad" class="headerlink" title="Notepad++"></a><a href="https://notepad-plus-plus.org/" target="_blank" rel="external">Notepad++</a></h1><h2 id="Npp简介"><a href="#Npp简介" class="headerlink" title="Npp简介"></a>Npp简介</h2><ul>
<li><a href="https://notepad-plus-plus.org/" target="_blank" rel="external">Notepad++</a>简称Npp, 是免费好用的记事本</li>
<li>轻便小巧, 打开速度快. 自带丰富功能且有插件, 如语法高亮</li>
<li>建议用他彻底替换windows自带的记事本</li>
<li>目前出到npp7, <strong>不要装64位版本</strong>, 很多插件都不支持</li>
<li>有绿色便携版, 但需要额外设置右键打开和文件关联功能</li>
</ul>
<h2 id="Npp设置"><a href="#Npp设置" class="headerlink" title="Npp设置"></a>Npp设置</h2><h3 id="首选项设置"><a href="#首选项设置" class="headerlink" title="首选项设置"></a>首选项设置</h3><ul>
<li><code>Setting</code>-&gt;<code>Preferences</code> 打开首选项页面</li>
<li><code>General</code>-&gt;<code>Double click to close document</code></li>
<li><code>Editing</code>-&gt;<code>Muli-Editing Setting</code>-&gt;<code>Enable (Ctrl...)</code></li>
<li><code>Editing</code>-&gt;<code>Vertical Edge Setting</code>-&gt;<code>Show vertical edge</code>-&gt;<code>Line mode</code>-&gt;<code>Number of columns: 80</code></li>
<li><code>File Association</code>-&gt;选择需要关联的文件后缀, 加入到<code>Registered extensions</code><br>关联其它后缀名, 只需在<code>customize</code>-&gt;填入后缀并加入, 如 <code>.config</code> <code>.gitignore</code><br>注意: <strong>绿色便携版设置了文件关联也是没有效果的</strong>, 用windows下右键<code>打开方式</code>设置吧</li>
<li><code>Tab Setting</code>-&gt;<code>[Default]</code>-&gt;<code>Tab size:4</code>-&gt;<code>Replace by space</code></li>
<li><code>Tab Setting</code>-&gt;<code>makefile</code>-&gt;<del><code>Use default value</code></del>-&gt;<del><code>Replace by space</code></del>, 因为make只认TAB键</li>
<li><code>Auto-Completion</code>-&gt;<code>Auto-Completion</code>-&gt;<code>From 2 th character</code></li>
<li><code>Auto-Completion</code>-&gt;<code>Auto-Insert</code>-&gt;<code>&#39;</code></li>
<li><code>Auto-Completion</code>-&gt;<code>Auto-Insert</code>-&gt;<code>html/xml close tag</code></li>
<li><del><code>Auto-Completion</code>-&gt;<code>Auto-Insert</code>-&gt;<code>Matched pair</code></del> 加入 <code>*</code> 和 <code>(即</code>~`键), !!!重启后失效, 原因不明.</li>
</ul>
<h3 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h3><ul>
<li><code>Settings</code>-&gt;<code>Style Configurator</code>-&gt;<code>Select theme</code>-&gt;<code>Twilight</code></li>
<li>对<code>Monokai</code>注释配色非常无语, 而且对python的配色也太不友好了, 只好放弃.</li>
</ul>
<h3 id="自定义语法高亮"><a href="#自定义语法高亮" class="headerlink" title="自定义语法高亮"></a>自定义语法高亮</h3><ul>
<li>以导入自定义的 markdown 语法高亮为例</li>
<li>可以去网上搜索<a href="https://github.com/draapho/Blog/tree/master/_blog_stuff/Notepad%2B%2B/markdown" target="_blank" rel="external">下载markdown语法高亮文件</a></li>
<li><code>Language</code>-&gt;<code>Define your language ...</code>-&gt;<code>Import</code>-&gt;选择下载的<code>markdown_*.xml</code>文件即可</li>
<li>导入成功后, <code>Language</code>-&gt;<code>Define your language ...</code>下面就会有markdown语言了</li>
</ul>
<h3 id="Npp插件"><a href="#Npp插件" class="headerlink" title="Npp插件"></a>Npp插件</h3><ul>
<li>插件的安装 (<strong>64位版本无法支持大多数插件</strong>)<ol>
<li><code>Plugins</code>-&gt;<code>Plugin Manager</code>-&gt;<code>Show Plugin Manager</code>-&gt;安装插件</li>
<li>将插件的<code>.dll</code>文件直接放到<code>plugins</code>目录下. (说明插件可以免安装)</li>
</ol>
</li>
<li><code>compare</code> 文件比较功能.<br>由于使用了深色主题, 需要使用深色作为背景<br><code>Plugins</code>-&gt;<code>compare</code>-&gt;<code>Option</code>-&gt;<code>Clolr setting</code>-&gt;点选颜色<code>More Colors</code> 调深即可</li>
<li><code>customize toolbar</code> 可自定义工具栏</li>
<li><code>File Switcher</code> 提供<code>ctrl+tab</code>在视图窗口切换标签的功能</li>
<li><code>Hex-Editor</code> 增加二进制编辑模式</li>
<li><code>Light Explorer</code> 增加资源管理器界面</li>
<li><code>Location Navigate</code> 浏览历史跳转<br>取消 <code>Mark Changed Line</code>, 配色看不清楚!</li>
<li><del><code>ViSimulator</code></del> vim模式, <code>ctrl+shift+alt+v</code> 使能或禁止. 可以从<a href="https://web.archive.org/web/20150515145616/http://www.visimulator.com/download.html" target="_blank" rel="external">这里下载</a></li>
<li><code>Zoom Disabler</code> 屏蔽ctrl+滚轮的缩放功能</li>
</ul>
<h2 id="Python-Script插件"><a href="#Python-Script插件" class="headerlink" title="Python Script插件"></a><a href="http://npppythonscript.sourceforge.net/index.shtml" target="_blank" rel="external">Python Script</a>插件</h2><ul>
<li><a href="http://npppythonscript.sourceforge.net/index.shtml" target="_blank" rel="external">Python Script</a>针对notepad++的python插件, 可以用来批量处理文件</li>
<li><a href="https://sourceforge.net/projects/npppythonscript/files/Python%20Script%201.0.8.0/" target="_blank" rel="external">下载最新版本1.0.8.0</a> <code>PythonScript_Full_1.0.8.0.zip</code> 即可</li>
<li><p>解压后将整个文件拷贝到notepad++的根目录下, 目录结构如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Notepad++ (Notepad++ 根目录, 例如&quot;C:\Program Files\npp&quot;)</div><div class="line"> +</div><div class="line"> |-- python26.dll</div><div class="line"> +-- plugins</div><div class="line">           |-- PythonScript.dll</div><div class="line">           |-- PythonScript</div><div class="line">           |   |-- lib</div><div class="line">           |   |     |-- (*.py)</div><div class="line">           |   |-- scripts</div><div class="line">           |             |-- (machine-level scripts)</div><div class="line">           |-- doc</div><div class="line">           |     |-- PythonScript</div><div class="line">           |             |-- PythonScript.chm</div><div class="line">           |-- Config (也可能在 %APPDATA%\Notepad++\plugins\config\)</div><div class="line">                         \-- PythonScript</div><div class="line">                                         |-- scripts</div><div class="line">                                                   |-- (用户脚本)</div></pre></td></tr></table></figure>
</li>
<li><p>检测是否安装成功. 重启notepad++. 按如下步骤进行测试<br><code>Plugins-&gt;Python Script</code>-&gt;<code>Show Console</code>-&gt;显示<code>Python ... Ready.</code></p>
</li>
<li><p><a href="https://github.com/draapho/Blog/tree/master/_blog_stuff/Notepad%2B%2B/Python%20Script" target="_blank" rel="external">一个实用的脚本示例</a>, <strong>注意</strong>, 需要使用Notepad++ 7及以上版本, 否则执行结果和预期会有差别.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os;</div><div class="line"><span class="keyword">import</span> sys;</div><div class="line"><span class="keyword">from</span> Npp <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="comment"># 对所有打开的文件去除行尾空格并将空格替换为TAB</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_menu_command</span><span class="params">()</span>:</span></div><div class="line">  <span class="comment"># Edit-&gt;Blank Operations</span></div><div class="line">  notepad.runMenuCommand(<span class="string">"Blank Operations"</span>, <span class="string">"Trim Trailing Space"</span>)</div><div class="line">  notepad.runMenuCommand(<span class="string">"Blank Operations"</span>, <span class="string">"Space to TAB (All)"</span>)</div><div class="line">  <span class="keyword">return</span></div><div class="line"></div><div class="line"><span class="comment"># Find and operate files opened at notepad</span></div><div class="line"><span class="comment"># There is something wrong run in NPP6.X</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_file_in_notepad</span><span class="params">()</span>:</span></div><div class="line">  file_list = notepad.getFiles()</div><div class="line">  <span class="keyword">for</span> file <span class="keyword">in</span> file_list:</div><div class="line">      fn = file[<span class="number">0</span>]</div><div class="line">      notepad.activateFile(fn)</div><div class="line">      run_menu_command()</div><div class="line"></div><div class="line">operate_file_in_notepad()</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="绿色版注册右键"><a href="#绿色版注册右键" class="headerlink" title="绿色版注册右键"></a>绿色版注册右键</h2><ul>
<li>基本思路是直接修改注册表, 增加右键<code>Notepad++ Here</code></li>
<li>写了批处理文件, 放到notepad++根目录, 管理员权限执行即可.<br><a href="https://github.com/draapho/Blog/blob/master/_blog_stuff/Notepad%2B%2B/_RegisterKey_Admin.bat" target="_blank" rel="external">_RegisterKey_Admin.bat</a> 注册右键, 需管理员权限执行.<br><a href="https://github.com/draapho/Blog/blob/master/_blog_stuff/Notepad%2B%2B/_UnregisterKey_Admin.bat" target="_blank" rel="external">_UnregisterKey_Admin.bat</a> 注销右键, 需管理员权限执行.</li>
<li>也可以手动创建文件 <code>注册右键.reg</code>, 内容如下.<br><strong>上述批处理的思路</strong>就是自动生成这个 <code>.reg</code> 文件然后导入注册表.<br><strong>需要替换notepad++安装路径</strong>. 然后管理员权限执行即可.<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Windows Registry Editor Version 5.00</div><div class="line">[HKEY_CLASSES_ROOT\*\Shell\NotePad++ Here]</div><div class="line">[HKEY_CLASSES_ROOT\*\Shell\NotePad++ Here\Command]</div><div class="line">@=&quot;\&quot;D:\\Program Files\\npp\\notepad++.exe\&quot; \&quot;%1\&quot;&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="快捷键设置"><a href="#快捷键设置" class="headerlink" title="快捷键设置"></a>快捷键设置</h2><ul>
<li>需按照<a href="https://draapho.github.io/2016/10/08/1607-Shortcut-win/">编辑器快捷键</a>设置</li>
<li>设置好的<a href="https://github.com/draapho/Blog/tree/master/_blog_stuff/Notepad%2B%2B/shortcuts.xml" target="_blank" rel="external">快捷键配置文件</a>, 直接替换原有的shortcuts.xml即可</li>
<li>说明一下<code>run</code>的设置, 可参考官方说明<a href="http://docs.notepad-plus-plus.org/index.php/External_Programs" target="_blank" rel="external">Notepad++调用外部程序</a><ul>
<li><code>Zeal.lnk $(CURRENT_WORD)</code> 在Zeal中查询选中内容</li>
<li><code>Typora.lnk &quot;$(FULL_CURRENT_PATH)&quot;</code> 在Typora中预览文件</li>
<li><code>ConEmu.lnk -Dir &quot;$(CURRENT_DIRECTORY)&quot;</code> 使用当前路径打开ConEmu</li>
<li>上述三个指令需要配置好全局变量, 或者使用绝对路径. </li>
<li>后缀名为lnk是因为我用了快捷方式放在同一个目录下, 简化设置全局变量的步骤</li>
<li><code>http://www.google.com/search?q=$(CURRENT_WORD)</code> 选中的内容直接google搜索</li>
</ul>
</li>
<li>环境变量的配置, 可以参考<a href="https://draapho.github.io/2016/10/09/1608-WinSoft-path/">Windows 软件系列-自定义环境变量</a></li>
<li>notepad++的宏录制功能也非常有用, 譬如可以录制一个 <code>TAB to Space</code> + <code>Trim Trailing Space</code> + <code>Save</code> 保存并设置快捷键为 <code>ctrl-s</code>, 这样就可以保存前自动完成空格处理了.</li>
</ul>
<h2 id="资源和参考"><a href="#资源和参考" class="headerlink" title="资源和参考"></a>资源和参考</h2><p><a href="https://notepad-plus-plus.org/" target="_blank" rel="external">Notepad++官网</a><br><a href="http://docs.notepad-plus-plus.org/index.php/Plugin_Central" target="_blank" rel="external">Notepad++插件中心</a><br><a href="http://docs.notepad-plus-plus.org/index.php/External_Programs" target="_blank" rel="external">Notepad++调用外部程序</a><br><a href="http://www.crifan.com/files/doc/docbook/rec_soft_npp/release/html/rec_soft_npp.html" target="_blank" rel="external">轻量级文本编辑器，Notepad最佳替代品：Notepad++</a><br><a href="http://jingyan.baidu.com/article/a24b33cd71f2d619ff002b60.html" target="_blank" rel="external">notepad++如何关联到右键菜单</a></p>
<h1 id="atom"><a href="#atom" class="headerlink" title="atom"></a><a href="https://atom.io/" target="_blank" rel="external">atom</a></h1><h2 id="atom简介"><a href="#atom简介" class="headerlink" title="atom简介"></a>atom简介</h2><ul>
<li>界面简洁, 基本上手可用, 无需复杂设置</li>
<li>开源免费, 而且多平台支持, 有丰富的插件库</li>
<li>和git的整合度很好! 直观明了好用</li>
<li>启动相对较慢, 但可接受.</li>
<li>懒人不想折腾, atom无明显短板, 就作为主力代码编辑器了</li>
<li>定位是 Notepad++ 为快速处理文件, atom 处理项目</li>
</ul>
<h2 id="两个快捷键"><a href="#两个快捷键" class="headerlink" title="两个快捷键"></a>两个快捷键</h2><ul>
<li>为了避免打开atom后一头雾水, 需要记住两个快捷键</li>
<li><code>ctrl+shift+p</code>, 打开atom命令窗口, 可以输入指令如<code>setting</code></li>
<li><code>ctrl+,</code> 打开设置页面</li>
</ul>
<h2 id="atom设置"><a href="#atom设置" class="headerlink" title="atom设置"></a>atom设置</h2><ul>
<li><code>ctrl+,</code>进入设置界面 <code>Settings</code></li>
<li><code>Editor</code> 界面下, 设置基本参数<ul>
<li><code>Show Ivisibles</code></li>
<li><code>Soft Tabs</code></li>
<li><code>Tab Length</code>-&gt;<code>4</code></li>
<li><code>Tab Type</code>-&gt;<code>auto</code>, 由于makefile必须为TAB, 否则可以设为 <code>soft</code> Tab键输入4个空格</li>
</ul>
</li>
<li><code>System</code> 界面下, 增加系统右键<ul>
<li><code>Register as file handler</code></li>
<li><code>Show in file context menus</code></li>
<li><code>Show in folder context menus</code></li>
</ul>
</li>
<li><code>Themes</code> 界面下, 选个喜欢的主题. 默认是<code>One Dark</code></li>
<li><code>Packages</code>-&gt;搜索<code>tree view</code>-&gt;<code>Core Packages</code>-&gt;<code>tree-view</code>-&gt;<code>Settings</code><ul>
<li><code>Hide Ignored Names</code> 隐藏atom指定的文件</li>
<li><code>Hide VCS Ignored Files</code> 隐藏<code>.gitignore</code>指定的文件</li>
</ul>
</li>
</ul>
<h2 id="atom插件"><a href="#atom插件" class="headerlink" title="atom插件"></a>atom插件</h2><ul>
<li>插件太多, 脱离需求讲插件是没有意义的. 新手的话, 先探索着玩玩吧.</li>
<li>记得仔细阅读插件的使用说明, 有些插件配置起来挺麻烦的. 但atom的插件管理已经很好了.</li>
<li>后续会根据自己的需求再写一篇atom的插件篇, 并详述如何配置.</li>
<li>下面推荐几个通用型的实用插件.</li>
<li><code>ctrl+,</code>进入设置界面 <code>Settings</code></li>
<li><code>Install</code> 界面下, 搜索安装如下插件<ul>
<li><code>atom-beautify</code> 代码格式美化, 需要安装辅助软件</li>
<li><code>git-time-machine</code> 查看比较文件的git历史</li>
<li><code>highlight-selected</code> 高亮选择的词</li>
<li><code>minimap</code> 文件小地图</li>
<li><code>minimap-highlight-selected</code> 在minimap内高亮选择的词</li>
<li><code>platformio-ide-terminal</code> 内嵌终端</li>
<li><code>project-manager</code> 管理项目.</li>
<li><code>project-viewer</code> 管理项目, 带UI</li>
<li><code>Sublime-Style-Column-Selection</code> 列操作使用<code>alt+drag</code></li>
<li><code>tabs-to-spaces</code> 空格/TAB自动转换</li>
<li><code>vim-mode</code> 提供vim模式.</li>
</ul>
</li>
</ul>
<h2 id="自定义快捷键"><a href="#自定义快捷键" class="headerlink" title="自定义快捷键"></a>自定义快捷键</h2><ul>
<li>以 <code>ctrl-f</code> 为例, 安装vim后, 变成翻页键, 但希望的是文件搜索和替换键.</li>
<li>可以禁止vim的<code>keybindings</code>, 但这里不适用, 因为还要用vim的其它快捷键.</li>
<li><code>ctrl+,</code>-&gt;进入设置界面 <code>Settings</code>-&gt;<code>Keybindings</code>-&gt;输入<code>ctrl-f</code></li>
<li>找到<code>vim-mode:scroll-full-screen-down</code>-&gt;点左边的复制图标</li>
<li><p>点击<code>your keymap file</code>-&gt;打开<code>keymap.cson</code>-&gt;黏贴内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&apos;atom-text-editor.vim-mode:not(.insert-mode)&apos;:</div><div class="line">  &apos;ctrl-f&apos;: &apos;vim-mode:scroll-full-screen-down&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>要屏蔽 vim 的 <code>ctrl-f</code>, 修改为<code>unset!</code>即可. 内容如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&apos;atom-text-editor.vim-mode:not(.insert-mode)&apos;:</div><div class="line">  &apos;ctrl-f&apos;: &apos;unset!&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>自定义详情可以参考官网的<a href="http://flight-manual.atom.io/using-atom/sections/basic-customization/#_customizing_keybindings" target="_blank" rel="external">Basic Customization</a></p>
</li>
<li>需按照<a href="https://draapho.github.io/2016/10/08/1607-Shortcut-win/">编辑器快捷键</a>设置</li>
<li>环境变量的配置, 可以参考<a href="https://draapho.github.io/2016/10/09/1608-WinSoft-path/">Windows 软件系列-自定义环境变量</a></li>
</ul>
<h1 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a><a href="http://www.typora.io/" target="_blank" rel="external">Typora</a></h1><h2 id="markdown简介"><a href="#markdown简介" class="headerlink" title="markdown简介"></a>markdown简介</h2><ul>
<li><strong><em>强烈推荐 Markdown</em></strong>, 基本可以放弃office word了!!!</li>
<li>markdown在专注于写作内容的同时, 快速便捷的自动美化格式</li>
<li><a href="https://draapho.github.io/about/markdownplus/">查看Markdown语法和效果</a></li>
<li>atom做编辑器也不错, 推荐插件 <code>markdown-preview-enhanced</code>. 但mermaid制图打印有问题.</li>
<li>而且什么都用atom, atom就太重了, 这里推荐 <a href="http://www.typora.io/" target="_blank" rel="external">Typora</a>.</li>
</ul>
<h2 id="Typora简介"><a href="#Typora简介" class="headerlink" title="Typora简介"></a>Typora简介</h2><ul>
<li><a href="http://www.typora.io/" target="_blank" rel="external">Typora</a>是一款极简的markdown编辑器. 多平台可用</li>
<li>单窗口显示, 使用 <code>ctrl+/</code> 切换预览和写作模式. 而且预览模式下也可直接写作.</li>
<li>支持<a href="https://en.wikibooks.org/wiki/LaTeX/Mathematics" target="_blank" rel="external">LaTex数学公式</a>, <a href="http://knsv.github.io/mermaid/" target="_blank" rel="external">mermaid制图</a>,<a href="http://www.webpagefx.com/tools/emoji-cheat-sheet/" target="_blank" rel="external">Emoji图标</a></li>
<li>借助<a href="http://pandoc.org/" target="_blank" rel="external">pandoc</a>,可导出多种格式</li>
<li>缺点: 打开较慢, 不支持列操作, 不能用鼠标右键.</li>
<li>熟悉markdown格式后, 可以用notepad++写作, 用Typora查看效果和转换格式.</li>
</ul>
<h2 id="Typora安装和设置"><a href="#Typora安装和设置" class="headerlink" title="Typora安装和设置"></a>Typora安装和设置</h2><ul>
<li>下载并安装<a href="http://www.typora.io/#windows" target="_blank" rel="external">Typora windows 版本</a></li>
<li>下载并安装<a href="http://pandoc.org/installing.html" target="_blank" rel="external">pandoc-xxx-windows.msi</a></li>
<li>打开<code>Typora</code>-&gt;<code>File</code>-&gt;<code>Preference</code></li>
<li><code>Syntax Support</code> 使能如下选项<ul>
<li><code>Inline math</code> 数学公式</li>
<li><code>Subscript</code> 下标</li>
<li><code>Superscript</code> 上标</li>
<li><code>Highlight</code> 高亮</li>
<li><code>Diagrams</code> 制图</li>
</ul>
</li>
<li><code>Syntax Preference</code><ul>
<li><code>Heading Style</code> <code>atx(#)</code> 偏好使用<code>#</code>标记为标题</li>
<li><code>Unodered List</code> <code>-</code> 偏好使用<code>-</code>标记为列表</li>
</ul>
</li>
</ul>
<h2 id="markdown语法参考"><a href="#markdown语法参考" class="headerlink" title="markdown语法参考"></a>markdown语法参考</h2><ul>
<li><a href="https://draapho.github.io/about/markdownplus/">Markdown语法</a></li>
<li><a href="http://knsv.github.io/mermaid/" target="_blank" rel="external">mermaid制图</a></li>
<li><a href="https://en.wikibooks.org/wiki/LaTeX/Mathematics" target="_blank" rel="external">LaTeX数学公式</a></li>
<li><a href="http://www.webpagefx.com/tools/emoji-cheat-sheet/" target="_blank" rel="external">Emoji图标</a></li>
</ul>
<h1 id="google-drive"><a href="#google-drive" class="headerlink" title="google drive"></a><a href="https://drive.google.com/" target="_blank" rel="external">google drive</a></h1><ul>
<li>主要作为云使用, 不少手机APP支持<a href="https://drive.google.com/" target="_blank" rel="external">google drive</a>, 而且还有好用的网页端应用</li>
<li>在线markdown编辑器<a href="https://stackedit.io/" target="_blank" rel="external">stackedit</a></li>
<li>在线制图软件<a href="https://www.draw.io" target="_blank" rel="external">draw.io</a></li>
<li>手机端markdown编辑器<a href="https://ia.net/writer" target="_blank" rel="external">iA Writer</a></li>
</ul>
<h1 id="默认新建utf-8文本文件"><a href="#默认新建utf-8文本文件" class="headerlink" title="默认新建utf-8文本文件"></a>默认新建utf-8文本文件</h1><ul>
<li>用notepad++建立一个样本文件, 命名为<code>UTF8.txt</code>, 设置为 <code>UTF-8</code> 编码(不带BOM), 放在 <code>C:\Windows\SHELLNEW</code> 下. 建议内容为空(内容会出现在新建文件中).</li>
<li><code>regedit</code>-&gt;打开 <code>注册表</code>-&gt;<code>HKEY_CLASSES_ROOT\.txt\ShellNew</code>-&gt;右侧新建 <code>字符串值</code>-&gt;名称 <code>FileName</code>-&gt; 数据 <code>UTF8.txt</code></li>
<li>此时, 新建的<code>文本文档</code>就是<code>UTF-8</code>编码的的文件. 事实上是复制了 <code>UTF8.txt</code> 这个样本文件.</li>
<li>参考 <a href="http://alanhou.org/windows-default-encoding-utf8/" target="_blank" rel="external">Windows新建文件改为默认UTF8</a></li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows 软件系列-提高效率]]></title>
      <url>https://draapho.github.io/2016/09/28/1602-WinSoft-efficiency/</url>
      <content type="html"><![CDATA[<h1 id="AutoHotKey"><a href="#AutoHotKey" class="headerlink" title="AutoHotKey"></a><a href="https://autohotkey.com/" target="_blank" rel="external">AutoHotKey</a></h1><h2 id="AHK-简介"><a href="#AHK-简介" class="headerlink" title="AHK 简介"></a>AHK 简介</h2><ul>
<li><a href="https://autohotkey.com/" target="_blank" rel="external">AutoHotkey</a>是一个windows下的开源, 免费, 自动化软件工具. </li>
<li>我主要用于绑定快捷键, 便于快速打开应用和文件夹. 以此提高<strong>工作效率</strong></li>
<li>常用符号含义<blockquote>
<p><code>#</code> 代表 Win 键<br><code>!</code> 代表 Alt 键<br><code>^</code> 代表 Ctrl 键<br><code>+</code> 代表 shift 键<br><code>::</code> 起分隔作用<br><code>run</code> 非常常用 的 AHK 命令之一<br><code>;</code>  注释后面一行内容</p>
</blockquote>
</li>
<li>举个例子<br>用 <code>Ctrl - Alt - Shift - Win - n</code> 打开记事本的脚本<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^!+#n::run C:\Windows\notepad.exe</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="AHK懒人用法-ezAHK"><a href="#AHK懒人用法-ezAHK" class="headerlink" title="AHK懒人用法: ezAHK"></a>AHK懒人用法: <a href="https://github.com/draapho/ezAHK" target="_blank" rel="external">ezAHK</a></h2><ul>
<li>安装 <a href="https://autohotkey.com/download/" target="_blank" rel="external">AutoHotKey</a> V1.1.* 版本</li>
<li>下载 <a href="https://github.com/draapho/ezAHK" target="_blank" rel="external">ezAHK</a> 放到任意位置</li>
<li>把文件或目录的<strong>快捷方式放到link目录</strong>里, 改成希望使用的<strong>快捷键名称</strong>即可.<br>譬如, 希望把notepad绑定到 <code>win-n</code>这个快捷键, 只需要:<ol>
<li>创建<strong>notepad.exe的快捷方式</strong>到<strong>link目录</strong></li>
<li>重命名该快捷方式为 <code>win-n</code></li>
<li>注意 <code>-</code> 的左右<strong>没有空格</strong>, <strong>删除后缀</strong> <code>.exe</code></li>
<li>可以考虑使用 <code>win-r</code> 的方式替代, 毕竟快捷键数量有限, 命令行更灵活.</li>
</ol>
</li>
<li>ezAHK 还包括如下几个实用功能<ul>
<li><code>鼠标中键</code> 复制</li>
<li><code>shift-鼠标中键</code> 剪切</li>
<li><code>ctrl-shift-鼠标中键</code> 复制路径</li>
<li><code>鼠标右键</code> 使用鼠标中键复制后, 首次黏贴</li>
<li><code>ctrl-鼠标右键</code> 黏贴</li>
<li><code>ctrl-~</code> 根据所在目录打开终端</li>
<li><code>alt-win-鼠标中键</code> 复制颜色</li>
<li><code>alt-win-↑ ↓ ← →</code> 单像素移动鼠标</li>
<li><code>alt-win-d</code> 输入当前日期</li>
</ul>
</li>
<li>添加到开机自启动: 创建<code>ezAHK.ahk</code>的快捷方式, 并放到如下 Windows 的 <strong>StartUp目录</strong>.<br>Windows 10 的 StartUp 目录如下:<br><code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</code></li>
</ul>
<h2 id="资源和参考"><a href="#资源和参考" class="headerlink" title="资源和参考"></a>资源和参考</h2><ul>
<li><a href="https://autohotkey.com/boards/viewtopic.php?t=4296" target="_blank" rel="external">实用 AutoHotkey 脚本推荐</a></li>
<li><a href="https://autohotkey.com/boards/viewtopic.php?t=4267" target="_blank" rel="external">AHK 快餐店系列索引</a></li>
<li><a href="https://autohotkey.com/docs/scripts/#AutoHotkey_Script_Showcase" target="_blank" rel="external">AutoHotkey_Script_Showcase</a></li>
<li><a href="https://autohotkey.com/board/topic/60985-get-paths-of-selected-items-in-an-explorer-window/" target="_blank" rel="external">Get paths of selected items in an explorer window</a></li>
<li>AutoHotKey<a href="https://autohotkey.com/" target="_blank" rel="external">官网</a> 及 <a href="http://ahkcn.sourceforge.net/docs/AutoHotkey.htm" target="_blank" rel="external">中文帮助</a></li>
<li><a href="http://www.jeffjade.com/2016/03/11/2016-03-11-autohotkey/" target="_blank" rel="external">Win下最爱效率神器:AutoHotKey</a></li>
</ul>
<h1 id="快速搜索和定位"><a href="#快速搜索和定位" class="headerlink" title="快速搜索和定位"></a>快速搜索和定位</h1><h2 id="Everything"><a href="#Everything" class="headerlink" title="Everything"></a><a href="https://www.voidtools.com/" target="_blank" rel="external">Everything</a></h2><ul>
<li><a href="https://www.voidtools.com/" target="_blank" rel="external">Everything</a>是免费软件, 有<strong>便携版</strong>.</li>
<li><a href="https://www.voidtools.com/" target="_blank" rel="external">Everything</a>是<strong>普通搜索工具</strong>, 便于在搜索结果中慢慢查阅.</li>
</ul>
<h2 id="Listary"><a href="#Listary" class="headerlink" title="Listary"></a><a href="http://www.listary.com/" target="_blank" rel="external">Listary</a></h2><ul>
<li><a href="http://www.listary.com/" target="_blank" rel="external">Listary</a>分为免费版和专业版.</li>
<li>相比于 <a href="https://www.voidtools.com/" target="_blank" rel="external">Everything</a>, 索引方式相似,但操作体验完全不同.</li>
<li><a href="http://www.listary.com/" target="_blank" rel="external">Listary</a>是<strong>随时随地的查找定位</strong>, 目标明确时很方便. </li>
<li>强烈推荐都尝试一下后决定用哪个, 或和我一样同时使用.</li>
<li>Listary 实用快捷键</li>
</ul>
<table>
<thead>
<tr>
<th>Listary</th>
<th>助记</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>win-~</code></td>
<td></td>
<td>打开Listary</td>
</tr>
<tr>
<td><code>enter</code></td>
<td>enter</td>
<td>打开文件</td>
</tr>
<tr>
<td><code>ctrl-enter</code></td>
<td>enter</td>
<td>打开路径</td>
</tr>
<tr>
<td><code>ctrl-c</code></td>
<td>copy</td>
<td>复制</td>
</tr>
<tr>
<td><code>ctrl-shift-c</code></td>
<td>copy</td>
<td>复制路径</td>
</tr>
<tr>
<td><code>ctrl+j</code> <code>ctrl+k</code></td>
<td>vim j,k</td>
<td>下一个 / 上一个(需设置)</td>
</tr>
</tbody>
</table>
<h2 id="使用-win-r-快速启动"><a href="#使用-win-r-快速启动" class="headerlink" title="使用 win-r 快速启动"></a>使用 <code>win-r</code> 快速启动</h2><ul>
<li>基本原理是使用 <code>Run</code> 来直接运行配置在环境变量中的快捷方式 <code>.lnk</code>, </li>
<li>由于是执行命令行, 比快捷键方式有更好的扩展性和灵活性更好. 也可以在任何终端中直接调用!</li>
<li>运行环境的搭建可以参考 <a href="https://draapho.github.io/2016/10/09/1608-WinSoft-path/">Windows 软件系列-自定义环境变量</a></li>
<li>详细介绍可参考 <a href="https://xbeta.info/win-run.htm#h-6" target="_blank" rel="external">最绿色最高效，用win+r启动常用程序和文档</a></li>
<li>为了更省事, 可以使用AHK设置为<code>win</code>键替代<code>win-r</code>键</li>
<li>要把win键也省了的话, 专业版 <a href="http://www.listary.com/" target="_blank" rel="external">Listary</a> 可以满足这个需求</li>
</ul>
<h1 id="Ditto"><a href="#Ditto" class="headerlink" title="Ditto"></a><a href="http://ditto-cp.sourceforge.net/" target="_blank" rel="external">Ditto</a></h1><ul>
<li><a href="http://ditto-cp.sourceforge.net/" target="_blank" rel="external">Ditto</a> 一款剪切板增强软件, 免费开源. 有绿色便携版(无法支持部分功能)</li>
<li>对复制黏贴功能多多支持总是好的, 使用频率太高了! 这个软件的功能非常实用.<ul>
<li>软件的核心在于 <code>ctrl-~</code> 调用出 Ditto 信息板</li>
<li><code>shift-enter</code> 忽略格式黏贴纯文本</li>
<li><code>新建剪辑</code>-&gt;<code>项目标题</code> <code>email</code>-&gt;<code>快速黏贴文本</code> <code>myemail@gmail.com</code>-&gt;设置为<code>禁止自动删除</code>, 也可以归类到组. 以后只需输入email, 就可以直接黏贴具体email地址了</li>
<li>轻松管理复制历史, 可用作搜索资料, 然后批量黏贴</li>
</ul>
</li>
<li>重新设置 <code>激活Ditto</code> 快捷键为 <code>ctrl-q</code>, 因为 <code>ctrl-~</code>默认用于打开终端</li>
<li>参考 <a href="https://xbeta.info/ditto.htm" target="_blank" rel="external">Ditto:首选的剪贴板增强软件</a></li>
</ul>
<h1 id="Chocolatey"><a href="#Chocolatey" class="headerlink" title="Chocolatey"></a><del><a href="https://chocolatey.org/" target="_blank" rel="external">Chocolatey</a></del></h1><p><strong><a href="https://chocolatey.org/" target="_blank" rel="external">Chocolatey</a>可以作为软件安装的补充, 但不做推荐</strong> </p>
<h2 id="Chocolatey-简介"><a href="#Chocolatey-简介" class="headerlink" title="Chocolatey 简介"></a>Chocolatey 简介</h2><ul>
<li><a href="https://chocolatey.org/" target="_blank" rel="external">Chocolatey</a>是windows下的软件管理工具. 软件源由社区成员提交和维护. 基础版免费.</li>
<li>基于命令行来查找和安装软件,方便快捷,<del>耍酷</del>.</li>
<li>安装包的类型:<ul>
<li>无后缀, 如 git</li>
<li><em>.install, 如 git.install, 这个会出现在系统的 <em>*卸载或更改程序</em></em> 界面里</li>
<li>*.commandline, 如 git.commandline. 不建议使用</li>
<li>*.portable, 如 putty.portable, zip包, 我的理解就是绿色便携软件</li>
</ul>
</li>
<li>软件都是自动静默安装, 无法指定安装位置, 无法再安装时配置.</li>
<li>由于运行在管理员权限且不能保证软件绝对无毒, 所以有安全风险. <a href="https://chocolatey.org/about" target="_blank" rel="external">Chocolatey官网</a>有如下语句:<blockquote>
<p>If you need better peace of mind, we offer <a href="https://chocolatey.org/docs/features-virus-check" target="_blank" rel="external">runtime malware protection</a> in <a href="https://chocolatey.org/pricing" target="_blank" rel="external">Chocolatey Pro</a> and <a href="https://chocolatey.org/pricing" target="_blank" rel="external">Chocolatey for Business</a></p>
</blockquote>
</li>
<li>搜索和下载指定版本的软件也没有想象中方便.</li>
<li>综合考虑后, <a href="https://chocolatey.org/" target="_blank" rel="external">Chocolatey</a>可以作为软件安装的补充(如制作安装脚本), 但不做推荐</li>
</ul>
<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><ul>
<li><p>windows <a href="https://chocolatey.org/install" target="_blank" rel="external">安装 Chocolatey</a>. 使用管理员权限打开 cmd.exe, 输入:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@powershell -NoProfile -ExecutionPolicy Bypass -Command &quot;iex ((New-Object System.Net.WebClient).DownloadString(&apos;https://chocolatey.org/install.ps1&apos;))&quot; &amp;&amp; SET &quot;PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>几个常用指令</p>
<ul>
<li><code>choco -?</code> 帮助指令, 获取choco指令的详细说明</li>
<li><code>choco search</code> 搜索. 用 <code>-all</code> 可显示所有版本. 也可以查看<a href="https://chocolatey.org/packages/" target="_blank" rel="external">网页版</a></li>
<li><code>choco install</code> 安装. 用 ‘-version’ 可指定版本</li>
<li><code>choco upgrade</code> 升级</li>
<li><code>choco uninstall</code> 删除</li>
<li><code>choco list -localonly</code> 查看本地已安装的软件</li>
</ul>
</li>
<li>以nodejs为例<ul>
<li><code>choco search nodejs</code> 加 <code>-all</code> 会显示所有版本!!! </li>
<li>建议网页端搜索 <a href="https://chocolatey.org/packages/" target="_blank" rel="external"><strong>软件源列表</strong></a></li>
<li><code>choco install nodejs -version 5.0.0</code>  安装nodejs 5.0.0这个版本, 默认使用安装 <strong>.install</strong></li>
<li><code>choco upgrade nodejs</code>  升级nodejs到最新版本</li>
<li><code>choco uninstall nodejs</code>  删除nodejs</li>
<li><code>choco list -localonly</code> 确认是否已删除</li>
</ul>
</li>
</ul>
<h2 id="资料和参考"><a href="#资料和参考" class="headerlink" title="资料和参考"></a>资料和参考</h2><ul>
<li>Chocolatey 官方说明的 <a href="https://chocolatey.org/install" target="_blank" rel="external">安装方式</a></li>
<li><a href="https://chocolatey.org/packages/" target="_blank" rel="external">Chocolatey 软件源列表</a></li>
<li><a href="http://ninghao.net/blog/2071" target="_blank" rel="external">更好的安装软件的方法</a></li>
<li><a href="http://www.jianshu.com/p/831aa4a280e7" target="_blank" rel="external">Windows下的包管理器Chocolatey</a></li>
<li><a href="https://medium.com/@keivan/why-chocolatey-is-broken-beyond-any-hope-d1a4e33b3d23#.jzmj9o5cd" target="_blank" rel="external">Why Chocolatey is broken beyond any hope</a></li>
</ul>
<h1 id="Zeal"><a href="#Zeal" class="headerlink" title="Zeal"></a><a href="https://zealdocs.org/" target="_blank" rel="external">Zeal</a></h1><ul>
<li><a href="https://zealdocs.org/" target="_blank" rel="external">Zeal</a>是一款在windows和Linux上, 功能类似于Mac上Dash的一款离线文档查看软件.</li>
<li>免费软件, 有绿色便携版, 支持的手册种类和Dash是一样的. 应该是为了跨平台, 基于Qt5开发, 反应有点慢.</li>
<li>下载安装完成后, <code>Tool</code>-&gt;<code>Docksets...</code>-&gt;窗口<code>Docsets</code>下-&gt;<code>Available</code>-&gt;选择语言-&gt;<code>Download</code>即可.</li>
<li><strong>软件开发人员必备</strong>. 还可以在atom直接调用查看API, 省去大量的文档搜索时间.</li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows下使用github和hexo建独立博客]]></title>
      <url>https://draapho.github.io/2016/09/24/1601-InitBlog/</url>
      <content type="html"><![CDATA[<h1 id="我需要一个博客"><a href="#我需要一个博客" class="headerlink" title="我需要一个博客"></a>我需要一个<a href="https://draapho.github.io">博客</a></h1><p>三年前学linux的时候, 深感复杂,  然后也略微记录了些笔记放在电脑里. 但是真要用的时候, 依旧会google或baidu, 原因很简单: 电脑的笔记用起来不方便, 找文档慢不说, 找到后要么是没有格式的txt文档, 有些是花了力气排版好的word, 又觉得打开很慢. 于是觉得需要一个博客, 在CSDN开了博, 坚持不到10篇文章就放弃了, 原因很简单: 太麻烦了. 我的本意只是学习笔记加资料仓库, 但维护它的时间成本太高了. 一晃三年, 工作上进入一个新领域, 需要系统的学习嵌入式linux和python, 再度觉得需要建一个博客来管理和维护一些笔记和资料.</p>
<p><strong>工欲善其事, 必先利其器</strong>. 所以, 我需要一个博客. 寻寻觅觅, 幸运寻得github.io和markdown写作这么一个方案.</p>
<h1 id="折腾记-jekyII方案"><a href="#折腾记-jekyII方案" class="headerlink" title="折腾记, jekyII方案"></a><del>折腾记, jekyII方案</del></h1><p>不过依旧走了一点弯路, 因为github.io推荐的是jekyII环境, 如果对这个方案感兴趣, 点击<a href="https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/" target="_blank" rel="external">这里</a>可以按照官方教程来操作. 人家第一句话就是<a href="https://help.github.com/articles/setting-up-your-github-pages-site-locally-with-jekyll/" target="_blank" rel="external"><strong>jekyII并不原生支持Windows</strong></a> , 但我岂是会轻易投降的人, 遇到问题就解决问题, 这不还有另外一句 <a href="http://jekyllrb.com/docs/windows/#installation" target="_blank" rel="external"><strong>Jekyll on Windows</strong></a>, 流程如下, 然后还要注意编码问题.</p>
<ul>
<li>装<a href="http://rubyinstaller.org/downloads/" target="_blank" rel="external">Ruby</a> 或者 <code>choco install ruby -y</code></li>
<li>装jekyII,   <code>gem install jekyll</code><br>最终, 我是安装失败了…具体卡在哪个错误提示也给忘了. 所幸的是搜到了对windows友好的hexo方案.</li>
</ul>
<h1 id="Hexo方案"><a href="#Hexo方案" class="headerlink" title="Hexo方案"></a>Hexo方案</h1><p>恩, 这里才是正文的开始! windows下安装hexo这个任务非常简单!</p>
<ul>
<li>对<a href="https://git-scm.com/" target="_blank" rel="external">Git软件</a>和<a href="https://github.com/" target="_blank" rel="external">GitHub网站</a>不熟的话, 建议安装<a href="https://desktop.github.com/" target="_blank" rel="external">GitHub Windows</a>, 安装后根据提示操作.</li>
<li>安装<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.JS</a>, 选推荐版本, 目前是v4.5.0 LTS (即 Long Term Support), 环境变量默认会设置好.</li>
<li><p>安装Hexo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure>
</li>
<li><p>创建并初始化博客文件夹,这里命名为<strong><em>Blog</em></strong>, 右键点”Git Bash Here”, 或者打开cmd进入到<strong><em>Blog</em></strong>目录下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">cd Blog           # 确保在Blog这文件夹下</div><div class="line">npm install hexo --save # 安装hexo</div><div class="line">hexo init         # 初始化Blog文件夹内容</div><div class="line">npm install       # 安装必要的依赖包</div><div class="line"># 下面是必要的插件包</div><div class="line">npm install hexo-deployer-git --save      # 使用github发布</div><div class="line">npm install hexo-deployer-rsync --save    # 不装, 使用 rysnc发布</div><div class="line">npm install hexo-deployer-openshift --save    # 不装, 使用OpenShift发布</div><div class="line">npm install hexo-generator-feed --save    # 不装, 生成atom.xml, 供RSS使用</div><div class="line">npm install hexo-generator-sitemap --save # 不装, 生成sitemap.xml, 用于提高搜索量</div><div class="line">npm install hexo-generator-search --save  # 用于本地搜索</div></pre></td></tr></table></figure>
</li>
<li><p>本地查看效果, 输入<code>hexo s</code>成功后登录 <code>localhost:4000</code>查看效果<br>这里, 我遇到了错误, 提示是 4000 端口已经被占用.<br>最后发现是 foxitProtect.exe (福昕PDF保护进程)占用此端口, 先结束, 然后直接删除.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">netstat -aon | findstr &quot;4000&quot;     # 查找占用4000端口的PID, 譬如, 结果为1234</div><div class="line">tasklist | findstr &quot;1234&quot;         # 查找PID=1234的进程名称, 譬如, 结果为foxitProtect.exe</div><div class="line">taskkill /f /t /im foxitProtect.exe   # 强制杀死此进程</div></pre></td></tr></table></figure>
</li>
<li><p>配置 hexo 的 <code>_config.yml</code></p>
<blockquote>
<p># Site<br>title: DRA&amp;PHO                  # 博客名字<br>subtitle: thinking &amp; logging    # 副标题<br>description: Embedded System, IoT, M2M  # 博客描述<br>author: draapho                 # 作者<br>language: en        # 语言, 中文为 zh-Hans, 需设置category_map和tag_map</p>
<p># URL<br>url: <a href="https://YourGitHubName.github.io/" target="_blank" rel="external">https://YourGitHubName.github.io/</a>  # 替换<strong><em>YourGitHubName</em></strong><br># 譬如: <a href="https://draapho.github.io/">https://draapho.github.io/</a> 我的GitHub注册名是<strong><em>draapho</em></strong></p>
<p># Directory<br>source_dir: source      # source文件夹, 用来写文章<br>public_dir: public      # public文件夹, 自动生成的静态页面都放在这里<br>tag_dir: tags           # 标签文件夹, 需要安装 hexo-generator-tag<br>archive_dir: archives   # 归档文件夹, 需安装 hexo-generator-archive<br>category_dir: categories    # 分类文件夹, 需安装 hexo-generator-category</p>
<p># Extensions<br>theme: next         # 随了大流, 用了next主题</p>
<p># Deployment<br>deploy:<br>  type: git         # 使用git部署, 需安装 hexo-deployer-git<br>  repository: <a href="https://github.com/YourGitHubName/YourGitHubName.github.io.git" target="_blank" rel="external">https://github.com/YourGitHubName/YourGitHubName.github.io.git</a><br>  # 我的注册名是<strong><em>draapho</em></strong>, 就写成: <a href="https://github.com/draapho/draapho.github.io.git" target="_blank" rel="external">https://github.com/draapho/draapho.github.io.git</a><br>  branch: master</p>
<p># search Settings, 默认没有这行内容, 自己添加即可<br>search:             # 本地搜索功能, 需安装 hexo-generator-search<br>   path: search.xml<br>   field: post</p>
</blockquote>
</li>
<li><p>创建about,categories,tags文件夹及文件<br>在<code>Blog\source</code>下, 新建文件夹about, 然后新建文件index.md, 用于生成关于页面</p>
<blockquote>
<p>-–<br>title: about<br>date: 2016-09-08<br>comments: false<br>-–<br>这一篇的内容是自我介绍</p>
</blockquote>
<p>在<code>Blog\source</code>下, 新建文件夹categories, 然后新建文件index.md, 用于生成分类页面</p>
<blockquote>
<p>-–<br>title: categories<br>date: 2016-09-08<br>type: “categories”<br>comments: false<br>-–</p>
</blockquote>
<p>在<code>Blog\source</code>下, 新建文件夹tags, 然后新建文件index.md, 用于生成标签页面</p>
<blockquote>
<p>-–<br>title: tags<br>date: 2016-09-08<br>type: “tags”<br>comments: false<br>-–</p>
</blockquote>
</li>
</ul>
<h1 id="github端的配置"><a href="#github端的配置" class="headerlink" title="github端的配置"></a>github端的配置</h1><ul>
<li>如果之前没有使用过github, 第一次上传应该要求输入用户名和密码. 但如果每次部署都要这样, 就显得很麻烦. github端可以使用SSH 或 GPG keys来免去这个步骤. 建议使用GPG keys.</li>
<li>这里就不详细展开了, 具体步骤参考github, <a href="https://help.github.com/articles/generating-a-gpg-key/" target="_blank" rel="external">生成一个GPG key</a></li>
</ul>
<h1 id="使用mermaid插件支持流程图等"><a href="#使用mermaid插件支持流程图等" class="headerlink" title="使用mermaid插件支持流程图等"></a><del>使用mermaid插件支持流程图等</del></h1><ul>
<li><p>安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-tag-mermaid --save</div></pre></td></tr></table></figure>
</li>
<li><p>添加mermaid依赖到主题模板<br>进入themes/your_theme_folder/layout/partial目录，添加mermaid相关文件。<br>head.jade 添加如下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">link(rel=&quot;stylesheet&quot;, href=url_for(&quot;https://cdn.bootcss.com/mermaid/6.0.0/mermaid.min.css&quot;))</div></pre></td></tr></table></figure>
<p>scripts.jade 添加如下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">link(rel=&quot;stylesheet&quot;, script(src=&quot;//cdn.bootcss.com/mermaid/6.0.0/mermaid.min.js&quot;)</div></pre></td></tr></table></figure>
</li>
<li><p>我暂时放弃了<br>next用的swig, 不知道和jade文件是什么关系. 暂时不愿去研究.<br>看了下此插件的格式, 和我常用的Typora使用的mermaid不一样.<br>博客上用到流程图之类的机会不多, 偶尔需要使用图片即可.<br>如有兴趣, 可参考 <a href="http://jcchow.com/2016/07/11/mermaid-sequence/" target="_blank" rel="external">Hexo流程图等插件安装教程</a></p>
</li>
</ul>
<h1 id="NexT主题"><a href="#NexT主题" class="headerlink" title="NexT主题"></a>NexT主题</h1><p>主题的选择我没有花太多时间, 测试了2-3个主题后, 最终还是随大流的用了NexT主题. 说实话, 设计感很好, 用的人很多, 略有审美疲劳. 好在博客目标明确, NexT能很好的覆盖我几个基本需求, 文档又写的很完善, 就不折腾了.</p>
<ul>
<li>安装NexT, 见<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">官方文档</a></li>
<li>menu_icons 图标配置, 名称用的是<a href="http://fontawesome.io/icons/" target="_blank" rel="external">Font Awesome</a></li>
<li>about 页面的链接是 <a href="https://YourGitHubName.github.io/about" target="_blank" rel="external">https://YourGitHubName.github.io/about</a><br>我的注册名是<strong><em>draapho</em></strong>, 就写成 <a href="https://draapho.github.io/about">https://draapho.github.io/about</a></li>
<li><code>\themes\next\_config.yml</code>文件内找到<code>use_motion:</code> 设置为<code>false</code>. 表示禁止动画效果, 立刻显示页面</li>
</ul>
<h1 id="Hexo的日常使用"><a href="#Hexo的日常使用" class="headerlink" title="Hexo的日常使用"></a>Hexo的日常使用</h1><ul>
<li>习惯于直接在 \Blog\source_posts\ 下面直接新建文件 xxx.md<br>然后打开文件, 添加并修改如下内容:<blockquote>
<p>title: Windows下使用github和hexo建立自己的博客<br>date: 2016-09-08<br>categories: environment<br>tags: [blog, hexo, next]</p>
</blockquote>
</li>
<li>Hexo的常用指令<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hexo clean    #更换hexo主题后, 建议先执行此条命令清空</div><div class="line">hexo g        # g=generate, 生成public静态文件</div><div class="line">hexo s        # s=server, 本地发布预览效果, 默认地址是 localhost:4000</div><div class="line">hexo d        # d=deploy, 自动部署</div><div class="line">hexo d -g     # 我最常用的指令, 意思是先generate再deploy.</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://wsgzao.github.io/post/hexo-guide/" target="_blank" rel="external">使用GitHub和Hexo搭建免费静态Blog</a></li>
<li><a href="http://www.jianshu.com/p/35e197cb1273" target="_blank" rel="external">Hexo搭建Github-Pages博客填坑教程</a></li>
<li><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">Hexo 文档</a></li>
<li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">Next 主题</a></li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[开博序]]></title>
      <url>https://draapho.github.io/2016/09/23/1600-Preface/</url>
      <content type="html"><![CDATA[<p>&emsp; &emsp; 我在IoT(物联网), M2M, 安防及智能建筑方面有丰富的需求分析和研发经验, 并且持续关注着这些领域. 如果我们把未来的网络世界看成一个生命体, 那么, 物联网的各个节点会是整个互联网世界的感知系统; 互联网和物联网扮演着神经系统; 人工智能则是大脑的角色; 而能量问题则全部由现有的电力系统来解决了.</p>
<p>&emsp; &emsp; 对于这个新生的生命体, 通过过去的30年左右的发育, 消化系统基本完善——单位能量的运算能力大幅提高, 神经系统 的主干也已经发育成熟——互联网已成为全球信息传输的不二选择. 目前, 物联网和人工智能的盛行, 则意味着这个生命体的已经开始在另外两个方面的发育成长了, 一是感官系统 ——借助于物联网的各个节点, 虚拟的网络世界会具有感知真实世界的能力; 二是大脑 ——人工智能的快速发展终将会使机器具有自主学习能力. 最终, 人类将成为造物主, 创造出一个智能生命体, 他能感知真实环境, 做出独立的判断(不知是福是祸!). 现在, 我们站在这个开端, 持续时间至少是30年以上!</p>
<p>&emsp; &emsp; 上面一段是我坚信不疑的脑洞. 结合自己的实际情况, 更多的精力会放在物联网方面.<br>目前物联网在特定的M2M领域很成功, 借助诸如 Zigbee, BLE, Enocean 或其它RF技术, 让各个节点采集的信息能联网汇总到一个网关, 然后通过 有线, wifi, 2G/3G/4G 以及值得关注的LPWAN(如NB-IOT) 等方式, 将数据发送到服务器端. 服务器端在收集存储数据后, 根据特定需求对这些数据进行整理和分析后, 或实现自动化, 或将信息交由人类决策, 整个系统最终就产生了商业价值.</p>
<p>&emsp; &emsp; 我的目标之一就是在技术上完全掌握这么一个系统. 各个节点的开发难度在于能耗和传感器技术, 组网难度相对比较小, 大多由无线协议帮助解决.  一般而言, 这些数据都需要通过一个中间设备传输给服务器或云端. 这个中间设备需要使用embedded linux实现socket, https之类的协议, 根据使用环境, 还需要平衡性能和功耗等不同的需求. 云端, 需要实现数据的收集, 提取, 归类, 分析, 展示功能, 这也都是成熟技术了, 更多的关注点在于云端的流量和运维. 需要特别提一下数据分析, 这个是没底的, 需要根据特定的需求来决定招聘怎样的人, 如何做分析. 在某些情况, 节点和中间设备会融合成一个终端设备, 这时候, 开发难度就很大了, 因为方案公司一般无法覆盖到这类设备的全部需求, 需要定制或自行研发这类设备.</p>
<p>&emsp; &emsp; 物联网在家庭中的应用就是智能家居, 智能家居的概念冷冷热热几回了, 但依旧一点也不实用, 不以人为本. 这里面的关键原因是, 物联网是物物链接, 信息收集处理展示就可以了, 基于这种概念做出来的智能家居系统, 不可能是智能的. 宣传上, 说是用户可以远程监视控制之类云云, 但实际上, 只是把一堆无用的数据直接展现给了最终客户, 操作过程繁琐, 一点也不好用! 因此, 智能家居的关键点在于物体和人的交互, 解决好交互问题, 才可能会是好用的智能家居系统. 综合来看, 智能家居的大规模应用时机尚未成熟, 需要继续等待. 几个关键点如下:</p>
<ul>
<li>传感器价格的降低, 易用性的提高. (涉及到能耗, 稳定性, 可靠性, 免维护)</li>
<li>组网标准的进一步统一. (目前重点关注BLE和LPWAN)</li>
<li>AI技术的进一步实用化.</li>
<li>UI交互体验的突破. (大部分基于AI的智能化判断, 但也需要提供非常便捷的人工介入方式)</li>
</ul>
<p>&emsp; &emsp; 技术选择上, 各个节点主要考量点在于功耗和组网方式, 来决定使用哪种无线技术. 譬如如果节点需要和手机交换数据, 那BLE是不二选择; 如果节点需要无源不间断工作, 价格也不太敏感, 那Enocean方案就是不错的选择. 中间设备的关键技术无疑就是embedded linux, 掌握后就能根据各种应用需求来灵活开发产品, 构建系统了. 云端目前主流也是使用linux系统的, 因此linux必学, 只是我会更侧重于嵌入式端的开发. 来到服务器端, 给自己安排的学习内容是python, 一来模块丰富, 开发快速, 二者可以用来写测试程序.<br>UI展示方面, 目前的云端应用基本都是基于HTML页面的, 因此可以简单了解学习HTML5. 关键是要了解技术标准, 懂得的系统架构和运行原理.</p>
<p>&emsp; &emsp; 对于AI的发展态势, 我无法继续无动于衷地持旁观态度. 不一定要将其作为主业, 但必须抽出业余时间慢慢学起来. 掌握一些基础知识, 尝试一些可能的应用.</p>
<p>&emsp; &emsp; 以上类似于一份职业规划了, 出发点是兴趣, 希望自己能坚持着一样样学下来, 并在这个博客内有所体现.</p>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a> E-mail: draapho@gmail.com</em></strong></p>
]]></content>
    </entry>
    
  
  
</search>
