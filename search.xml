<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[python 延时及超时]]></title>
      <url>https://draapho.github.io/2016/11/28/1622-python-time/</url>
      <content type="html"><![CDATA[<h1 id="实用的例子"><a href="#实用的例子" class="headerlink" title="实用的例子"></a>实用的例子</h1><h2 id="time-sleep-单线程阻塞延时"><a href="#time-sleep-单线程阻塞延时" class="headerlink" title="time.sleep 单线程阻塞延时"></a><code>time.sleep</code> 单线程阻塞延时</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">time_sleep</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">        <span class="keyword">print</span> i</div><div class="line">        time.sleep(<span class="number">1</span>)       <span class="comment"># delay 1s, not that accurate</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    start = time.time()</div><div class="line">    time_sleep()</div><div class="line">    end = time.time()</div><div class="line">    <span class="keyword">print</span> <span class="string">"run time: &#123;&#125;"</span>.format(end - start)</div></pre></td></tr></table></figure>
<h2 id="time-time-单线程非阻塞延时-超时"><a href="#time-time-单线程非阻塞延时-超时" class="headerlink" title="time.time 单线程非阻塞延时/超时"></a><code>time.time</code> 单线程非阻塞延时/超时</h2><p>通过比较时间戳实现, 多用于循环中的延时/超时判断</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">time_compare</span><span class="params">()</span>:</span></div><div class="line">    timeout = time.time() + <span class="number">10</span>  <span class="comment"># 10s delay</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</div><div class="line">        <span class="keyword">print</span> i</div><div class="line">        time.sleep(<span class="number">1</span>)</div><div class="line">        <span class="keyword">if</span> timeout &lt; time.time(): <span class="comment"># compare the timestamps</span></div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"time out !"</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    start = time.time()</div><div class="line">    time_compare()</div><div class="line">    end = time.time()</div><div class="line">    <span class="keyword">print</span> <span class="string">"run time: &#123;&#125;"</span>.format(end - start)</div></pre></td></tr></table></figure>
<h2 id="threading-Timer-多线程非阻塞延时"><a href="#threading-Timer-多线程非阻塞延时" class="headerlink" title="threading.Timer 多线程非阻塞延时"></a><code>threading.Timer</code> 多线程非阻塞延时</h2><p>这个例子中, 会先执行完 <code>threading_main</code>. 5s后, 才会执行 <code>threading_sub</code><br>子线程函数可以带参 <code>threading.Timer(interval, function, args=[], kwargs={})</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">threading_main</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"main thread: start"</span></div><div class="line">    thrd = threading.Timer(<span class="number">5.0</span>, threading_sub, args = [<span class="string">"sub thread"</span>])</div><div class="line">    thrd.start()</div><div class="line">    <span class="keyword">print</span> <span class="string">"main thread: end"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">threading_sub</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">print</span> name + <span class="string">": hello"</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    start = time.time()</div><div class="line">    threading_main()</div><div class="line">    end = time.time()</div><div class="line">    <span class="keyword">print</span> <span class="string">"run time: &#123;&#125;"</span>.format(end - start)</div></pre></td></tr></table></figure>
<h2 id="threading-Timer-threading-join-多线程阻塞延时"><a href="#threading-Timer-threading-join-多线程阻塞延时" class="headerlink" title="threading.Timer + threading.join 多线程阻塞延时"></a><code>threading.Timer</code> + <code>threading.join</code> 多线程阻塞延时</h2><p>使用 <code>join</code> 语句, 让主线程等待子线程完成后才继续执行<br>子线程函数可以带参 <code>threading.Timer(interval, function, args=[], kwargs={})</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">threading_main</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"main thread: start"</span></div><div class="line">    thrd = threading.Timer(<span class="number">5.0</span>, threading_sub, args = [<span class="string">"sub thread"</span>])</div><div class="line">    thrd.start()</div><div class="line">    <span class="keyword">print</span> <span class="string">"main thread: wait"</span></div><div class="line">    thrd.join()     <span class="comment"># add this line</span></div><div class="line">    <span class="comment"># thrd.join(timeout=2)  # just wait 2s then continue</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"main thread: end"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">threading_sub</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">print</span> name + <span class="string">": hello"</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    start = time.time()</div><div class="line">    threading_main()</div><div class="line">    end = time.time()</div><div class="line">    <span class="keyword">print</span> <span class="string">"run time: &#123;&#125;"</span>.format(end - start)</div></pre></td></tr></table></figure>
<h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><h2 id="装饰器-使用KThread-localtrace结束线程-通用性最好-性能较低"><a href="#装饰器-使用KThread-localtrace结束线程-通用性最好-性能较低" class="headerlink" title="装饰器, 使用KThread,.localtrace结束线程. (通用性最好, 性能较低)"></a>装饰器, 使用<code>KThread,.localtrace</code>结束线程. (通用性最好, 性能较低)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timeout</span><span class="params">(Exception)</span>:</span></div><div class="line">    <span class="string">"""function run timeout"""</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">KThread</span><span class="params">(threading.Thread)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></div><div class="line">        threading.Thread.__init__(self, *args, **kwargs)</div><div class="line">        self.killed = <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""Start the thread."""</span></div><div class="line">        self.__run_backup = self.run</div><div class="line">        <span class="comment"># Force the Thread to install our trace.</span></div><div class="line">        self.run = self.__run</div><div class="line">        threading.Thread.start(self)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""Hacked run function, which installs the trace."""</span></div><div class="line">        sys.settrace(self.globaltrace)</div><div class="line">        self.__run_backup()</div><div class="line">        self.run = self.__run_backup</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">globaltrace</span><span class="params">(self, frame, why, arg)</span>:</span></div><div class="line">        <span class="keyword">if</span> why == <span class="string">'call'</span>:</div><div class="line">            <span class="keyword">return</span> self.localtrace</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">localtrace</span><span class="params">(self, frame, why, arg)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.killed:</div><div class="line">            <span class="keyword">if</span> why == <span class="string">'line'</span>:</div><div class="line">                <span class="keyword">raise</span> SystemExit()</div><div class="line">        <span class="keyword">return</span> self.localtrace</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kill</span><span class="params">(self)</span>:</span></div><div class="line">        self.killed = <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeout</span><span class="params">(timeout, default=None, try_except=False)</span>:</span></div><div class="line">    <span class="string">"""Timeout decorator, parameter in timeout."""</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">timeout_decorator</span><span class="params">(func)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">new_func</span><span class="params">(oldfunc, result, oldfunc_args, oldfunc_kwargs)</span>:</span></div><div class="line">            result.append(oldfunc(*oldfunc_args, **oldfunc_kwargs))</div><div class="line"></div><div class="line">        <span class="string">"""Wrap the original function."""</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">func_wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            result = []</div><div class="line">            <span class="comment"># create new args for _new_func, because we want to get the func</span></div><div class="line">            <span class="comment"># return val to result list</span></div><div class="line">            new_kwargs = &#123;</div><div class="line">                <span class="string">'oldfunc'</span>: func,</div><div class="line">                <span class="string">'result'</span>: result,</div><div class="line">                <span class="string">'oldfunc_args'</span>: args,</div><div class="line">                <span class="string">'oldfunc_kwargs'</span>: kwargs</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            thd = KThread(target=new_func, args=(), kwargs=new_kwargs)</div><div class="line">            thd.start()</div><div class="line">            thd.join(timeout)</div><div class="line">            <span class="comment"># timeout or finished?</span></div><div class="line">            isAlive = thd.isAlive()</div><div class="line">            thd.kill()</div><div class="line"></div><div class="line">            <span class="keyword">if</span> isAlive:</div><div class="line">                <span class="keyword">if</span> try_except <span class="keyword">is</span> <span class="keyword">True</span>:</div><div class="line">                    <span class="keyword">raise</span> Timeout(<span class="string">"&#123;&#125; Timeout: &#123;&#125; seconds."</span>.format(func, timeout))</div><div class="line">                <span class="keyword">return</span> default</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">return</span> result[<span class="number">0</span>]</div><div class="line"></div><div class="line">        func_wrapper.__name__ = func.__name__</div><div class="line">        func_wrapper.__doc__ = func.__doc__</div><div class="line">        <span class="keyword">return</span> func_wrapper</div><div class="line"></div><div class="line">    <span class="keyword">return</span> timeout_decorator</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="meta">    @timeout(5)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(name)</span>:</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">            print(<span class="string">"&#123;&#125;: &#123;&#125;"</span>.format(name, i))</div><div class="line">            time.sleep(<span class="number">1</span>)</div><div class="line">        <span class="keyword">return</span> <span class="string">"finished"</span></div><div class="line"></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">print</span> count(<span class="string">"thread1"</span>)</div><div class="line">        <span class="keyword">print</span> count(<span class="string">"thread2"</span>)</div><div class="line">    <span class="keyword">except</span> Timeout <span class="keyword">as</span> e:</div><div class="line">        <span class="keyword">print</span> e</div></pre></td></tr></table></figure>
<p>将上面的例子, 改为函数调用模式, 这样timeout参数可灵活设置!</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timeout</span><span class="params">(Exception)</span>:</span></div><div class="line">    <span class="string">"""function run timeout"""</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">KThread</span><span class="params">(threading.Thread)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></div><div class="line">        threading.Thread.__init__(self, *args, **kwargs)</div><div class="line">        self.killed = <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""Start the thread."""</span></div><div class="line">        self.__run_backup = self.run</div><div class="line">        <span class="comment"># Force the Thread to install our trace.</span></div><div class="line">        self.run = self.__run</div><div class="line">        threading.Thread.start(self)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""Hacked run function, which installs the trace."""</span></div><div class="line">        sys.settrace(self.globaltrace)</div><div class="line">        self.__run_backup()</div><div class="line">        self.run = self.__run_backup</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">globaltrace</span><span class="params">(self, frame, why, arg)</span>:</span></div><div class="line">        <span class="keyword">if</span> why == <span class="string">'call'</span>:</div><div class="line">            <span class="keyword">return</span> self.localtrace</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">localtrace</span><span class="params">(self, frame, why, arg)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.killed:</div><div class="line">            <span class="keyword">if</span> why == <span class="string">'line'</span>:</div><div class="line">                <span class="keyword">raise</span> SystemExit()</div><div class="line">        <span class="keyword">return</span> self.localtrace</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kill</span><span class="params">(self)</span>:</span></div><div class="line">        self.killed = <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeout_call</span><span class="params">(timeout, func, args=<span class="params">()</span>, kwargs=None, default=None, try_except=False)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">new_func</span><span class="params">(oldfunc, result, oldfunc_args, oldfunc_kwargs)</span>:</span></div><div class="line">            result.append(oldfunc(*oldfunc_args, **oldfunc_kwargs))</div><div class="line"></div><div class="line">    result = []</div><div class="line">    kwargs = &#123;&#125; <span class="keyword">if</span> kwargs <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">else</span> kwargs</div><div class="line">    <span class="comment"># create new args for _new_func, because we want to get the func</span></div><div class="line">    <span class="comment"># return val to result list</span></div><div class="line">    new_kwargs = &#123;</div><div class="line">        <span class="string">'oldfunc'</span>: func,</div><div class="line">        <span class="string">'result'</span>: result,</div><div class="line">        <span class="string">'oldfunc_args'</span>: args,</div><div class="line">        <span class="string">'oldfunc_kwargs'</span>: kwargs</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    thd = KThread(target=new_func, args=(), kwargs=new_kwargs)</div><div class="line">    thd.start()</div><div class="line">    thd.join(timeout)</div><div class="line">    <span class="comment"># timeout or finished?</span></div><div class="line">    isAlive = thd.isAlive()</div><div class="line">    thd.kill()</div><div class="line"></div><div class="line">    <span class="keyword">if</span> isAlive:</div><div class="line">        <span class="keyword">if</span> try_except <span class="keyword">is</span> <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">raise</span> Timeout(<span class="string">"&#123;&#125; Timeout: &#123;&#125; seconds."</span>.format(func, timeout))</div><div class="line">        <span class="keyword">return</span> default</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> result[<span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="keyword">import</span> time</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(name)</span>:</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">            print(<span class="string">"&#123;&#125;: &#123;&#125;"</span>.format(name, i))</div><div class="line">            time.sleep(<span class="number">1</span>)</div><div class="line">        <span class="keyword">return</span> <span class="string">"finished"</span></div><div class="line"></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">print</span> timeout_call(<span class="number">5</span>, count, [<span class="string">"thread1"</span>])</div><div class="line">        <span class="keyword">print</span> timeout_call(<span class="number">5</span>, count, [<span class="string">"thread2"</span>])</div><div class="line">    <span class="keyword">except</span> Timeout <span class="keyword">as</span> e:</div><div class="line">        <span class="keyword">print</span> e</div></pre></td></tr></table></figure>
<h2 id="装饰器-使用thread-interrupt-main-结束线程-仅可用于主线程"><a href="#装饰器-使用thread-interrupt-main-结束线程-仅可用于主线程" class="headerlink" title="装饰器, 使用thread.interrupt_main()结束线程. (仅可用于主线程)"></a>装饰器, 使用<code>thread.interrupt_main()</code>结束线程. (仅可用于主线程)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> thread</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeout_quit</span><span class="params">(fn_name)</span>:</span></div><div class="line">    thread.interrupt_main()     <span class="comment"># raises KeyboardInterrupt</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeout</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    use as decorator to exit process if</div><div class="line">    function takes longer than s seconds</div><div class="line">    '''</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(fn)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            timer = threading.Timer(s, timeout_quit, args=[fn.__name__])</div><div class="line">            timer.start()</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                result = fn(*args, **kwargs)</div><div class="line">            <span class="keyword">finally</span>:</div><div class="line">                timer.cancel()</div><div class="line">            <span class="keyword">return</span> result</div><div class="line">        <span class="keyword">return</span> inner</div><div class="line">    <span class="keyword">return</span> outer</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="meta">    @timeout(5)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">processNum</span><span class="params">(num)</span>:</span></div><div class="line">        time.sleep(<span class="number">2</span>)</div><div class="line">        <span class="keyword">return</span> num</div><div class="line"></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">print</span> processNum(<span class="number">1</span>)</div><div class="line">    <span class="keyword">except</span> KeyboardInterrupt:</div><div class="line">        <span class="keyword">print</span> <span class="string">"timeout"</span></div></pre></td></tr></table></figure>
<h1 id="学习过程中的例子"><a href="#学习过程中的例子" class="headerlink" title="学习过程中的例子"></a>学习过程中的例子</h1><h2 id="threading-Timer-threading-join-多线程阻塞延时-1"><a href="#threading-Timer-threading-join-多线程阻塞延时-1" class="headerlink" title="threading.Timer + threading.join 多线程阻塞延时"></a><code>threading.Timer</code> + <code>threading.join</code> 多线程阻塞延时</h2><p>使用 <code>join</code> 语句, 让主线程等待子线程完成后才继续执行<br>子线程函数可以带参 <code>threading.Timer(interval, function, args=[], kwargs={})</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">threading_main</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"main thread: start"</span></div><div class="line">    thrd = threading.Timer(<span class="number">5.0</span>, threading_sub, args = [<span class="string">"sub thread"</span>])</div><div class="line">    thrd.start()</div><div class="line">    <span class="keyword">print</span> <span class="string">"main thread: wait"</span></div><div class="line">    thrd.join()     <span class="comment"># add this line</span></div><div class="line">    <span class="comment"># thrd.join(timeout=2)  # just wait 2s then continue</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"main thread: end"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">threading_sub</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">print</span> name + <span class="string">": hello"</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    start = time.time()</div><div class="line">    threading_main()</div><div class="line">    end = time.time()</div><div class="line">    <span class="keyword">print</span> <span class="string">"run time: &#123;&#125;"</span>.format(end - start)</div></pre></td></tr></table></figure>
<h2 id="join-timeout-10-多进程超时判断"><a href="#join-timeout-10-多进程超时判断" class="headerlink" title="join(timeout=10) 多进程超时判断"></a><code>join(timeout=10)</code> 多进程超时判断</h2><p><code>multiprocessing</code>的本质是进程, 但是提供了类似于<code>threading</code>的一系列方法.<br>使用 <code>multiprocessing.terminate</code> 语句, 让主线程可以杀死子线程<br>子进程函数可以带参 multiprocessing.Process(group=None, target=None, name=None, args=(), kwargs={})<br>multiprocessing 没有 <code>Timer()</code> 方法的, 无法方便的延时执行.</p>
<p>注意, 这里没有办法使用 threading 类来实现. 因为没有 <code>terminate()</code> 方法,<br>而如果用<code>signal</code>方法来结束线程, 有两个限制. 1, windows不支持. 2, 子线程不支持</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> multiprocessing</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">processing_main</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"main process: start"</span></div><div class="line">    prcs = multiprocessing.Process(</div><div class="line">        target=processing_sub, args=[<span class="string">"sub process"</span>])</div><div class="line">    prcs.start()</div><div class="line">    <span class="keyword">print</span> <span class="string">"main process: wait"</span></div><div class="line">    prcs.join(timeout=<span class="number">10</span>)</div><div class="line"></div><div class="line">    <span class="comment"># If thread is still active</span></div><div class="line">    <span class="keyword">if</span> prcs.is_alive():</div><div class="line">        <span class="keyword">print</span> <span class="string">"main process: kill"</span></div><div class="line">        prcs.terminate()</div><div class="line">        prcs.join()</div><div class="line">    <span class="keyword">print</span> <span class="string">"main process: end"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">processing_sub</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</div><div class="line">        <span class="comment"># if use print, can not show immediately in the console.</span></div><div class="line">        logging.error(<span class="string">"&#123;&#125;: &#123;&#125;"</span>.format(name, i))</div><div class="line">        time.sleep(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    start = time.time()</div><div class="line">    processing_main()</div><div class="line">    end = time.time()</div><div class="line">    <span class="keyword">print</span> <span class="string">"run time: &#123;&#125;"</span>.format(end - start)</div></pre></td></tr></table></figure>
<h2 id="multiprocessing-pool-实现超时判断"><a href="#multiprocessing-pool-实现超时判断" class="headerlink" title="multiprocessing.pool 实现超时判断"></a><code>multiprocessing.pool</code> 实现超时判断</h2><p>说说python下的 thread 和 process.<br>thread, 提供了signal结束方式, 但是windows不支持, 仅主线程可用! 换句话说, 终止线程很繁琐<br>process, 提供了terminate结束方式, 但是参数传递限制条件很多, (必须可以是pickle的…)</p>
<p><strong>下面的代码是有问题的!!!</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> multiprocessing.pool</div><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeout</span><span class="params">(timeout, default=None, try_except=False)</span>:</span></div><div class="line">    <span class="string">"""Timeout decorator, parameter in seconds."""</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">timeout_decorator</span><span class="params">(item)</span>:</span></div><div class="line">        <span class="string">"""Wrap the original function."""</span></div><div class="line"><span class="meta">        @functools.wraps(item)</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">func_wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            <span class="string">"""Closure for function."""</span></div><div class="line">            pool = multiprocessing.pool.ThreadPool(processes=<span class="number">1</span>)</div><div class="line">            <span class="comment"># pool = multiprocessing.pool.Pool(processes=1) ## raise error about pickle problem!!!</span></div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                async_result = pool.apply_async(item, args, kwargs)</div><div class="line">                val = async_result.get(timeout)</div><div class="line">            <span class="keyword">except</span> multiprocessing.TimeoutError:</div><div class="line">                pool.terminate() <span class="comment">## not work here, because it is acutally thread, not process!!!</span></div><div class="line">                val = default</div><div class="line">                <span class="keyword">if</span> try_except <span class="keyword">is</span> <span class="keyword">True</span>:</div><div class="line">                    <span class="keyword">raise</span> multiprocessing.TimeoutError</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                pool.close()</div><div class="line">                pool.join()</div><div class="line">            <span class="keyword">return</span> val</div><div class="line">        <span class="keyword">return</span> func_wrapper</div><div class="line">    <span class="keyword">return</span> timeout_decorator</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="meta">    @timeout(5)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(name)</span>:</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">            print(<span class="string">"&#123;&#125;: &#123;&#125;"</span>.format(name, i))</div><div class="line">            time.sleep(<span class="number">1</span>)</div><div class="line">        <span class="keyword">return</span> <span class="string">"finished"</span></div><div class="line"></div><div class="line">    start = time.time()</div><div class="line">    <span class="keyword">print</span> count(<span class="string">"thread1"</span>)</div><div class="line">    <span class="keyword">print</span> count(<span class="string">"thread2"</span>)  <span class="comment">## you can find problem here, thread1 is still running...</span></div><div class="line">    end = time.time()</div><div class="line">    <span class="keyword">print</span> <span class="string">"run time: &#123;&#125;"</span>.format(end - start)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> multiprocessing</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeout_call</span><span class="params">(timeout, func, args=<span class="params">()</span>, kwargs=None, default=None, try_except=False)</span>:</span></div><div class="line">    kwargs = &#123;&#125; <span class="keyword">if</span> kwargs <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">else</span> kwargs</div><div class="line">    pool = multiprocessing.Pool(processes=<span class="number">1</span>)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        async_result = pool.apply_async(func, args, kwargs)</div><div class="line">        val = async_result.get(timeout)</div><div class="line">    <span class="keyword">except</span> multiprocessing.TimeoutError:</div><div class="line">        pool.terminate()</div><div class="line">        val = default</div><div class="line">        <span class="keyword">if</span> try_except <span class="keyword">is</span> <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">raise</span> multiprocessing.TimeoutError</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        pool.close()</div><div class="line">        pool.join()</div><div class="line">    <span class="keyword">return</span> val</div><div class="line"></div><div class="line"><span class="comment">################### example ##########</span></div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">        logging.error(<span class="string">"&#123;&#125;: &#123;&#125;"</span>.format(name, i))</div><div class="line">        time.sleep(<span class="number">1</span>)</div><div class="line">    <span class="keyword">return</span> <span class="string">"finished"</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="comment">## if count function is here, will raise error!!!</span></div><div class="line"></div><div class="line">    start = time.time()</div><div class="line">    <span class="keyword">print</span> timeout_call(<span class="number">5</span>, count, [<span class="string">"process1"</span>])</div><div class="line">    <span class="keyword">print</span> timeout_call(<span class="number">5</span>, count, [<span class="string">"process2"</span>])</div><div class="line">    end = time.time()</div><div class="line">    <span class="keyword">print</span> <span class="string">"run time: &#123;&#125;"</span>.format(end - start)</div></pre></td></tr></table></figure>
<h2 id="第三方方案"><a href="#第三方方案" class="headerlink" title="第三方方案"></a>第三方方案</h2><ul>
<li><a href="https://pypi.python.org/pypi/timeoutcontext/1.1.1" target="_blank" rel="external">timeoutcontext 1.1.1</a><ul>
<li>基于signal实现, 不支持windows系统, 不支持子线程</li>
</ul>
</li>
<li><a href="https://pypi.python.org/pypi/timeout-decorator/0.3.2" target="_blank" rel="external">timeout-decorator 0.3.2</a><ul>
<li>signal或Multithreading可选</li>
<li>使用signal时, 不支持windows, 不支持子线程</li>
<li>使用Multithreading时, 无法返回不能pickle的数据(因为需要通过pickle来跨进程交换数据)</li>
</ul>
</li>
<li><a href="https://pypi.python.org/pypi/stopit#stopit-threading-timeoutable" target="_blank" rel="external">stopit 1.1.1</a><ul>
<li>threading或signal可选</li>
<li>计时误差太大, 不可接受(翻倍的误差)</li>
</ul>
</li>
</ul>
<h2 id="使用gevent协程"><a href="#使用gevent协程" class="headerlink" title="使用gevent协程"></a>使用gevent协程</h2><p>参考 <a href="http://xlambda.com/gevent-tutorial/#_6" target="_blank" rel="external">gevent程序员指南之超时</a><br>参考 <a href="https://my.oschina.net/1123581321/blog/208671" target="_blank" rel="external">gevent 延时、定时、超时、io等待、动态添加任务</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> gevent</div><div class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> Timeout</div><div class="line"></div><div class="line">time_to_wait = <span class="number">5</span> <span class="comment"># seconds</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TooLong</span><span class="params">(Exception)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">with</span> Timeout(time_to_wait, TooLong):</div><div class="line">    gevent.sleep(<span class="number">10</span>)</div></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://stackoverflow.com/questions/492519/timeout-on-a-function-call" target="_blank" rel="external">Timeout on a function call</a>, 关于此问题的讨论(signal / multiprocessing)</li>
<li><a href="https://my.oschina.net/leejun2005/blog/607741" target="_blank" rel="external">论 Python 装饰器控制函数 Timeout 的正确姿势</a>, 装饰器方式, 性能较低</li>
<li><a href="http://xlambda.com/gevent-tutorial/" target="_blank" rel="external">gevent程序员指南</a></li>
<li><a href="https://my.oschina.net/1123581321/blog/208671" target="_blank" rel="external">gevent 延时、定时、超时、io等待、动态添加任务</a></li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python 字符串处理]]></title>
      <url>https://draapho.github.io/2016/11/24/1621-python-string/</url>
      <content type="html"><![CDATA[<h1 id="进制转换-编码转换"><a href="#进制转换-编码转换" class="headerlink" title="进制转换 / 编码转换"></a>进制转换 / 编码转换</h1><ul>
<li><a href="https://docs.python.org/2/library/functions.html#hex" target="_blank" rel="external">hex</a>, 十进制-&gt;十六进制字符串</li>
<li><a href="https://docs.python.org/2/library/functions.html#oct" target="_blank" rel="external">oct</a>, 十进制-&gt;八进制字符串</li>
<li><a href="https://docs.python.org/2/library/functions.html#oct" target="_blank" rel="external">oct</a>, 十进制-&gt;八进制字符串</li>
<li><a href="https://docs.python.org/2/library/functions.html#chr" target="_blank" rel="external">chr</a>, 十进制-&gt;ASCII码字符</li>
<li><a href="https://docs.python.org/2/library/functions.html#unichr" target="_blank" rel="external">unichr</a>,  十进制-&gt;unicode编码</li>
<li><a href="https://docs.python.org/2/library/functions.html#ord" target="_blank" rel="external">ord</a>,  ascii码/unicode编码-&gt;十进制</li>
<li><a href="https://docs.python.org/2/library/binascii.html" target="_blank" rel="external">binascii</a>, 字符串&lt;-&gt;字节流</li>
<li><a href="https://docs.python.org/2/library/struct.html" target="_blank" rel="external">struct</a>, 字符串&lt;-&gt;字节流<ul>
<li>struct中的 <a href="https://docs.python.org/2/library/struct.html#format-characters" target="_blank" rel="external">fmt</a> 详解</li>
</ul>
</li>
</ul>
<ul>
<li><a href="https://docs.python.org/2/library/stdtypes.html#string-methods" target="_blank" rel="external">str.decode / str.encode</a>, 基于unicode的编码转换</li>
<li><a href="https://docs.python.org/2/library/codecs.html#standard-encodings" target="_blank" rel="external">Standard Encodings</a>, python支持的编码表<ul>
<li>常用的有 <code>hex</code>, <code>utf-8</code>, <code>unicode_escape</code></li>
</ul>
</li>
<li><a href="http://blog.csdn.net/pipisorry/article/details/44136297" target="_blank" rel="external">python字符串编码及乱码解决方案</a><ul>
<li>解释了unicode与str在python2.7 和 python3下的区别. <code>str.decode</code>和<code>str.encode</code>的含义</li>
<li>python2.7, 默认str编码为ascii, 需要使用<code>s=u&quot;人生苦短&quot;</code>来表示unicode编码字符串(便于跨平台统一)</li>
<li><strong>终极原则： decode early, unicode everywhere, encode late</strong></li>
</ul>
</li>
</ul>
<ul>
<li><a href="https://docs.python.org/2/library/functions.html" target="_blank" rel="external">更多的python内置函数</a>如下<ul>
<li>int(x [,base ]), 将x转换为一个整数</li>
<li>long(x [,base ]), 将x转换为一个长整数</li>
<li>float(x), 将x转换到一个浮点数</li>
<li>complex(real [,imag ]), 创建一个复数</li>
<li>str(x) , 将对象 x 转换为字符串</li>
<li>repr(x), 将对象 x 转换为表达式字符串</li>
<li>eval(str), 用来计算在字符串中的有效Python表达式,并返回一个对象</li>
<li>tuple(s), 将序列 s 转换为一个元组</li>
<li>list(s), 将序列 s 转换为一个列表</li>
</ul>
</li>
</ul>
<h2 id="十进制-lt-gt-十六进制字符串"><a href="#十进制-lt-gt-十六进制字符串" class="headerlink" title="十进制&lt;-&gt;十六进制字符串"></a>十进制&lt;-&gt;十六进制字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>hex(<span class="number">255</span>)</div><div class="line"><span class="string">'0xff'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>float.hex(<span class="number">1.0</span>)</div><div class="line"><span class="string">'0x1.0000000000000p+0'</span></div><div class="line"></div><div class="line"><span class="comment"># 可以有前缀 0b/0B(二进制), 0o/0O/0(八进制), or 0x/0X(十六进制),</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'0xff'</span>, <span class="number">16</span>)</div><div class="line"><span class="number">255</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'ff'</span>, <span class="number">16</span>)</div><div class="line"><span class="number">255</span></div></pre></td></tr></table></figure>
<h2 id="二进制字符串-lt-gt-十六进制字符串"><a href="#二进制字符串-lt-gt-十六进制字符串" class="headerlink" title="二进制字符串&lt;-&gt;十六进制字符串"></a>二进制字符串&lt;-&gt;十六进制字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>bin(int(<span class="string">'0xff'</span>, <span class="number">16</span>))</div><div class="line"><span class="string">'0b11111111'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>hex(int(<span class="string">'0b1010'</span>,<span class="number">2</span>))</div><div class="line"><span class="string">'0xa'</span></div></pre></td></tr></table></figure>
<h2 id="十进制-lt-gt-unicode字符串-lt-gt-utf8编码"><a href="#十进制-lt-gt-unicode字符串-lt-gt-utf8编码" class="headerlink" title="十进制&lt;-&gt;unicode字符串&lt;-&gt;utf8编码"></a>十进制&lt;-&gt;unicode字符串&lt;-&gt;utf8编码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="string">u'ñ'</span>            <span class="comment"># u表示使用unicode编码存储.</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c                   <span class="comment"># 显示c在电脑中的值</span></div><div class="line"><span class="string">u'\xf1'</span>                 <span class="comment"># 即 u'\u00f1', \u需要2byte!</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ord(c)</div><div class="line"><span class="number">241</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>unichr(<span class="number">241</span>)</div><div class="line"><span class="string">u'\xf1'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u'\u00f1'</span>.encode(<span class="string">'utf-8'</span>)       <span class="comment"># unicode-&gt;utf-8</span></div><div class="line"><span class="string">'\xc3\xb1'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'\xc3\xb1'</span>.decode(<span class="string">'utf-8'</span>)      <span class="comment"># utf-8-&gt;unicode</span></div><div class="line"><span class="string">u'\xf1'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">u'\u00f1'</span>                 <span class="comment"># 打印显示</span></div><div class="line">ñ</div></pre></td></tr></table></figure>
<h2 id="字节流-lt-gt-整数"><a href="#字节流-lt-gt-整数" class="headerlink" title="字节流&lt;-&gt;整数"></a>字节流&lt;-&gt;整数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使用 struct</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> struct</div><div class="line"></div><div class="line"><span class="comment"># 字节流-&gt;整数</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>struct.unpack(<span class="string">'&lt;hh'</span>, bytes(<span class="string">b'\x01\x00\x00\x00'</span>))    <span class="comment"># 转义为short型整数</span></div><div class="line">(<span class="number">1</span>, <span class="number">0</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>struct.unpack(<span class="string">'&lt;L'</span>, bytes(<span class="string">b'\x01\x00\x00\x00'</span>))     <span class="comment"># 转义为long型整数</span></div><div class="line">(<span class="number">1</span>,)</div><div class="line"></div><div class="line"><span class="comment"># 整数-&gt;字节流</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>struct.pack(<span class="string">'&lt;HH'</span>, <span class="number">1</span>,<span class="number">2</span>)</div><div class="line"><span class="string">'\x01\x00\x02\x00'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>struct.pack(<span class="string">'&lt;LL'</span>, <span class="number">1</span>,<span class="number">2</span>)</div><div class="line"><span class="string">'\x01\x00\x00\x00\x02\x00\x00\x00'</span></div></pre></td></tr></table></figure>
<h2 id="几个实用的例子"><a href="#几个实用的例子" class="headerlink" title="几个实用的例子"></a>几个实用的例子</h2><ul>
<li>去掉字符串中的跳脱符, 生成标准的unicode字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u'\\u4f60\\u4f60'</span>.decode(<span class="string">'unicode_escape'</span>)</div><div class="line"><span class="string">u'\u4f60\u4f60'</span></div></pre></td></tr></table></figure>
<ul>
<li>解码16进制字符串：也可以直接 print 出来</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>b=<span class="string">'\xd1\xee\xba\xea\xc1\xc1\n'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> unicode(b, <span class="string">'gbk'</span>).encode(<span class="string">'utf8'</span>) <span class="comment"># 等同于 print b.decode('gbk').encode('utf8')</span></div></pre></td></tr></table></figure>
<ul>
<li>bin &lt;-&gt; ascii</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 字符串-&gt;ASCII编码串</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'1234'</span>.encode(<span class="string">"hex"</span>)</div><div class="line"><span class="string">'31323334'</span></div><div class="line"><span class="comment"># ASCII编码串-&gt;字符串</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'3031'</span>.decode(<span class="string">"hex"</span>)</div><div class="line"><span class="string">'01'</span></div><div class="line"></div><div class="line"><span class="comment"># 使用 binascii</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> binascii</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>binascii.hexlify(<span class="string">"1234"</span>)    <span class="comment"># 或者 binascii.b2a_hex("1234")</span></div><div class="line"><span class="string">'31323334'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>binascii.unhexlify(<span class="string">"3031"</span>)  <span class="comment"># 或者 binascii.a2b_hex("3031")</span></div><div class="line"><span class="string">'01'</span></div></pre></td></tr></table></figure>
<h1 id="字符串-lt-gt-数值-列表-字典"><a href="#字符串-lt-gt-数值-列表-字典" class="headerlink" title="字符串&lt;-&gt;数值/列表/字典"></a>字符串&lt;-&gt;数值/列表/字典</h1><h2 id="字符串-lt-gt-数值"><a href="#字符串-lt-gt-数值" class="headerlink" title="字符串&lt;-&gt;数值"></a>字符串&lt;-&gt;数值</h2><ul>
<li>int(x [,base ]), 将x转换为一个整数</li>
<li>long(x [,base ]), 将x转换为一个长整数</li>
<li>float(x), 将x转换到一个浮点数</li>
<li><strong>使用re正则表达式, 实用范例</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">"test: 12a345 to 325.-123.34"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># this can get the number from str like "good456sdg78", return ['456', '78']</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> re.findall(<span class="string">r'\d+'</span>, str)</div><div class="line">[<span class="string">'12'</span>, <span class="string">'345'</span>, <span class="string">'325'</span>, <span class="string">'123'</span>, <span class="string">'34'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># this can get the number seperate in str like "good12sd 45 78 ", return ['45', '78']</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> re.findall(<span class="string">r'\b\d+\b'</span>, str)</div><div class="line">[<span class="string">'325'</span>, <span class="string">'123'</span>, <span class="string">'34'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># more complicated, can recognize and return [30, -10, 34.12, -12.34, 67.56E+3, -14.23e-2]</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> re.findall(<span class="string">"[-+]?\d+[\.]?\d+[eE]?[-+]?\d*"</span>, str)</div><div class="line">[<span class="string">'12'</span>, <span class="string">'345'</span>, <span class="string">'325'</span>, <span class="string">'-123.34'</span>]</div></pre></td></tr></table></figure>
<h2 id="字符串-gt-列表-字典-去掉引号"><a href="#字符串-gt-列表-字典-去掉引号" class="headerlink" title="字符串-&gt;列表/字典 (去掉引号)"></a>字符串-&gt;列表/字典 (去掉引号)</h2><ul>
<li>eval(), 将str当成有效的表达式来求值并返回计算结果. 在确保str源安全的情况下可用.<ul>
<li><a href="http://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html" target="_blank" rel="external">Eval really is dangerous</a></li>
<li><a href="http://blog.csdn.net/zhanh1218/article/details/37562167" target="_blank" rel="external">Python:eval的妙用和滥用</a></li>
</ul>
</li>
<li><a href="https://docs.python.org/2/library/ast.html#ast-helpers" target="_blank" rel="external">ast.literal_eval()</a>, eval的替代品, 更安全</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 字符串-&gt;列表</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>eval(<span class="string">"[1,2,3]"</span>)</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"></div><div class="line"><span class="comment"># 字符串-&gt;字典</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>eval(<span class="string">"&#123;'one':1, 'two':2&#125;"</span>)</div><div class="line">&#123;<span class="string">'two'</span>: <span class="number">2</span>, <span class="string">'one'</span>: <span class="number">1</span>&#125;</div></pre></td></tr></table></figure>
<h2 id="字符串-lt-gt-列表"><a href="#字符串-lt-gt-列表" class="headerlink" title="字符串&lt;-&gt;列表"></a>字符串&lt;-&gt;列表</h2><ul>
<li>str.join(), 列表-&gt;字符串</li>
<li>str.split(), 字符串-&gt;列表</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 字符串-&gt;列表</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst = list(<span class="string">"hello"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst</div><div class="line">[<span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</div><div class="line"></div><div class="line"><span class="comment"># 列表-&gt;字符串</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.join(lst)</div><div class="line"><span class="string">'hello'</span></div><div class="line"></div><div class="line"><span class="comment"># 字符串-&gt;列表 (指定分隔符, 如空格, 逗号)</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>season = <span class="string">'spring, summer, autumn, winter'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>season.split (<span class="string">','</span>)</div><div class="line">[<span class="string">'spring'</span>, <span class="string">' summer'</span>, <span class="string">' autumn'</span>, <span class="string">' winter'</span>]</div><div class="line"></div><div class="line"><span class="comment"># 列表-&gt;字符串</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="string">"spring"</span>, <span class="string">"summer"</span>, <span class="string">"autumn"</span>, <span class="string">"winter"</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">', '</span>.join(lst)</div><div class="line"><span class="string">'spring, summer, autumn, winter'</span></div><div class="line"></div><div class="line"><span class="comment"># 整数列表-&gt;字符串</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.join(str(e) <span class="keyword">for</span> e <span class="keyword">in</span> lst)</div><div class="line"><span class="string">'123'</span></div><div class="line"></div><div class="line"><span class="comment"># 字符串-&gt;hex格式列表-&gt;hex格式字符串</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>map(ord, <span class="string">"1234"</span>) <span class="comment"># [0x31, 0x32, 0x33 0x34]</span></div><div class="line">[<span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.join([<span class="string">"%02x"</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> map(ord, <span class="string">"1234"</span>)])</div><div class="line"><span class="string">'31323334'</span></div></pre></td></tr></table></figure>
<h1 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h1><h2 id="操作基础"><a href="#操作基础" class="headerlink" title="操作基础"></a>操作基础</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 去前后空格及特殊符号</span></div><div class="line">s.strip().lstrip().rstrip(<span class="string">','</span>)</div><div class="line"></div><div class="line"><span class="comment"># 查找字符</span></div><div class="line">sStr1.index(sStr2)  <span class="comment"># 返回所在位置, 不存在则报错</span></div><div class="line">sStr2 <span class="keyword">in</span> sStr1      <span class="comment"># 返回 True or False</span></div><div class="line"></div><div class="line"><span class="comment"># 比较字符串</span></div><div class="line">cmp(sStr1,sStr)</div><div class="line"></div><div class="line"><span class="comment"># 字符串长度</span></div><div class="line">len(sStr1)</div><div class="line"></div><div class="line"><span class="comment"># 将字符串中的大小写转换</span></div><div class="line">sStr1.upper().lower()</div><div class="line"></div><div class="line"><span class="comment"># 扩充到指定长度</span></div><div class="line">str(<span class="number">01</span>).zfill(<span class="number">5</span>) <span class="comment"># “00001”</span></div><div class="line"></div><div class="line"><span class="comment"># 翻转字符串</span></div><div class="line">sStr1[::<span class="number">-1</span>]</div><div class="line"></div><div class="line"><span class="comment"># 分割字符串</span></div><div class="line">s.split(<span class="string">','</span>)</div><div class="line"></div><div class="line"><span class="comment"># 字符串切片</span></div><div class="line">str = ’<span class="number">0123456789</span>′</div><div class="line"><span class="keyword">print</span> str[<span class="number">0</span>:<span class="number">3</span>]      <span class="comment"># 截取第一位到第三位的字符</span></div><div class="line"><span class="keyword">print</span> str[:]        <span class="comment"># 截取字符串的全部字符</span></div><div class="line"><span class="keyword">print</span> str[<span class="number">6</span>:]       <span class="comment"># 截取第七个字符到结尾</span></div><div class="line"><span class="keyword">print</span> str[:<span class="number">-3</span>]      <span class="comment"># 截取从头开始到倒数第三个字符之前</span></div><div class="line"><span class="keyword">print</span> str[<span class="number">2</span>]        <span class="comment"># 截取第三个字符</span></div><div class="line"><span class="keyword">print</span> str[<span class="number">-1</span>]       <span class="comment"># 截取倒数第一个字符</span></div><div class="line"><span class="keyword">print</span> str[::<span class="number">-1</span>]     <span class="comment"># 创造一个与原字符串顺序相反的字符串</span></div><div class="line"><span class="keyword">print</span> str[<span class="number">-3</span>:<span class="number">-1</span>]    <span class="comment"># 截取倒数第三位与倒数第一位之前的字符</span></div><div class="line"><span class="keyword">print</span> str[<span class="number">-3</span>:]      <span class="comment"># 截取倒数第三位到结尾</span></div></pre></td></tr></table></figure>
<h2 id="查看手册及高阶使用"><a href="#查看手册及高阶使用" class="headerlink" title="查看手册及高阶使用"></a>查看手册及高阶使用</h2><ul>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/chapters/p02_strings_and_text.html" target="_blank" rel="external">cookbook-第二章：字符串和文本</a>, 实用范例<ul>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p01_split_string_on_multiple_delimiters.html" target="_blank" rel="external">2.1 使用多个界定符分割字符串</a>, split(), re.split()</li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p02_match_text_at_start_end.html" target="_blank" rel="external">2.2 字符串开头或结尾匹配</a>, startswith(), endswith()</li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p03_match_strings_with_shell_wildcard.html" target="_blank" rel="external">2.3 用Shell通配符匹配字符串</a>, fnmatch(), fnmatchcase()</li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p04_match_and_search_text.html" target="_blank" rel="external">2.4 字符串匹配和搜索</a>, find(), findall(), match(), re.match()</li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p05_search_and_replace_text.html" target="_blank" rel="external">2.5 字符串搜索和替换</a>, replace(), re.sub()</li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p06_search_replace_case_insensitive.html" target="_blank" rel="external">2.6 字符串忽略大小写的搜索替换</a>, re.IGNORECASE</li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p07_specify_regexp_for_shortest_match.html" target="_blank" rel="external">2.7 最短匹配模式</a>, 解决成对符号的问题, 避免贪婪算法</li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p08_regexp_for_multiline_partterns.html" target="_blank" rel="external">2.8 多行匹配模式</a>, 解决回车换行的问题</li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p09_normalize_unicode_text_to_regexp.html" target="_blank" rel="external">2.9 将Unicode文本标准化</a></li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p10_work_with_unicode_in_regexp.html" target="_blank" rel="external">2.10 在正则式中使用Unicode</a></li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p11_strip_unwanted_characters.html" target="_blank" rel="external">2.11 删除字符串中不需要的字符</a>, strip(), replace(), re.sub()</li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p12_sanitizing_clean_up_text.html" target="_blank" rel="external">2.12 审查清理文本字符串</a></li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p13_aligning_text_strings.html" target="_blank" rel="external">2.13 字符串对齐</a>, ljust(), rjust(), center(), format()</li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p14_combine_and_concatenate_strings.html" target="_blank" rel="external">2.14 合并拼接字符串</a>, join()</li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p15_interpolating_variables_in_strings.html" target="_blank" rel="external">2.15 字符串中插入变量</a>, format()的高阶使用</li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p16_reformat_text_to_fixed_number_columns.html" target="_blank" rel="external">2.16 以指定列宽格式化字符串</a>, textwrap</li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p17_handle_html_xml_in_text.html" target="_blank" rel="external">2.17 在字符串中处理html和xml</a></li>
<li><del><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p18_tokenizing_text.html" target="_blank" rel="external">2.18 字符串令牌解析</a>, 语法的解析</del></li>
<li><del><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p19_writing_recursive_descent_parser.html" target="_blank" rel="external">2.19 实现一个简单的递归下降分析器</a>, 语法的解析</del></li>
<li><del><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p20_perform_text_operations_on_byte_string.html" target="_blank" rel="external">2.20 字节字符串上的字符串操作</a>, bytearray</del></li>
</ul>
</li>
</ul>
<ul>
<li><a href="https://docs.python.org/2/library/stdtypes.html#string-methods" target="_blank" rel="external">String Methods</a>, string提供的方法/函数<ul>
<li><a href="https://docs.python.org/2/library/stdtypes.html#string-formatting-operations" target="_blank" rel="external">String Formatting Operations</a>, 格式化显示, 建议使用format替代</li>
</ul>
</li>
</ul>
<ul>
<li><a href="https://docs.python.org/2/library/string.html" target="_blank" rel="external">string — Common string operations</a>, python官方手册之字符串操作<ul>
<li><a href="https://docs.python.org/2/library/string.html#string-constants" target="_blank" rel="external">String constants</a>, 字符串常量, 如字母, 数字</li>
<li><a href="https://docs.python.org/2/library/string.html#format-examples" target="_blank" rel="external">Format examples</a>, 格式化显示</li>
<li><del><a href="https://docs.python.org/2/library/string.html#template-strings" target="_blank" rel="external">Template strings</a>, 模板显示</del>, 建议使用format代替.</li>
</ul>
</li>
</ul>
<h2 id="使用正则表达式的一些例子"><a href="#使用正则表达式的一些例子" class="headerlink" title="使用正则表达式的一些例子"></a>使用正则表达式的一些例子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 去掉所有的空格和tab</span></div><div class="line">re.sub(<span class="string">'[\s+]'</span>, <span class="string">''</span>, str)</div><div class="line"></div><div class="line"><span class="comment"># 转换小写下划线格式变化为驼峰格式</span></div><div class="line">re.sub(<span class="string">'^\w|_\w'</span>, <span class="keyword">lambda</span> x:x.group()[<span class="number">-1</span>].upper(), <span class="string">'blog_view'</span>) <span class="comment"># 输出 'BlogView'。</span></div></pre></td></tr></table></figure>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构资料收集]]></title>
      <url>https://draapho.github.io/2016/11/23/1620-software-data-struct/</url>
      <content type="html"><![CDATA[<h1 id="python各数据结构性能列表-TimeComplexity"><a href="#python各数据结构性能列表-TimeComplexity" class="headerlink" title="python各数据结构性能列表, TimeComplexity"></a>python各数据结构性能列表, <a href="https://wiki.python.org/moin/TimeComplexity" target="_blank" rel="external">TimeComplexity</a></h1><ul>
<li>list</li>
</ul>
<table>
<thead>
<tr>
<th>Operation</th>
<th>Average Case</th>
<th>Amortized Worst Case</th>
</tr>
</thead>
<tbody>
<tr>
<td>Copy</td>
<td>O(n)</td>
<td>O(n)                </td>
</tr>
<tr>
<td>Append[1]</td>
<td>O(1)</td>
<td>O(1)                </td>
</tr>
<tr>
<td>Insert</td>
<td>O(n)</td>
<td>O(n)                </td>
</tr>
<tr>
<td>Get Item</td>
<td>O(1)</td>
<td>O(1)                </td>
</tr>
<tr>
<td>Set Item</td>
<td>O(1)</td>
<td>O(1)                </td>
</tr>
<tr>
<td>Delete Item</td>
<td>O(n)</td>
<td>O(n)                </td>
</tr>
<tr>
<td>Iteration</td>
<td>O(n)</td>
<td>O(n)                </td>
</tr>
<tr>
<td>Get Slice</td>
<td>O(k)</td>
<td>O(k)                </td>
</tr>
<tr>
<td>Del Slice</td>
<td>O(n)</td>
<td>O(n)                </td>
</tr>
<tr>
<td>Set Slice</td>
<td>O(k+n)</td>
<td>O(k+n)              </td>
</tr>
<tr>
<td>Extend[1]</td>
<td>O(k)</td>
<td>O(k)                </td>
</tr>
<tr>
<td>Sort</td>
<td>O(n log n)</td>
<td>O(n log n)          </td>
</tr>
<tr>
<td>Multiply</td>
<td>O(nk)</td>
<td>O(nk)               </td>
</tr>
<tr>
<td>x in s</td>
<td>O(n)</td>
<td>-                   </td>
</tr>
<tr>
<td>min(s), max(s)</td>
<td>O(n)</td>
<td>-                   </td>
</tr>
<tr>
<td>Get Length</td>
<td>O(1)</td>
<td>O(1)                </td>
</tr>
</tbody>
</table>
<ul>
<li>collections.deque</li>
</ul>
<table>
<thead>
<tr>
<th>Operation</th>
<th>Average Case</th>
<th>Amortized Worst Case</th>
</tr>
</thead>
<tbody>
<tr>
<td>Copy</td>
<td>O(n)</td>
<td>O(n)                </td>
</tr>
<tr>
<td>append</td>
<td>O(1)</td>
<td>O(1)                </td>
</tr>
<tr>
<td>appendleft</td>
<td>O(1)</td>
<td>O(1)                </td>
</tr>
<tr>
<td>pop</td>
<td>O(1)</td>
<td>O(1)                </td>
</tr>
<tr>
<td>popleft</td>
<td>O(1)</td>
<td>O(1)                </td>
</tr>
<tr>
<td>extend</td>
<td>O(k)</td>
<td>O(k)                </td>
</tr>
<tr>
<td>extendleft</td>
<td>O(k)</td>
<td>O(k)                </td>
</tr>
<tr>
<td>rotate</td>
<td>O(k)</td>
<td>O(k)                </td>
</tr>
<tr>
<td>remove</td>
<td>O(n)</td>
<td>O(n)                </td>
</tr>
</tbody>
</table>
<ul>
<li>dict</li>
</ul>
<table>
<thead>
<tr>
<th>Operation</th>
<th>Average Case</th>
<th>Amortized Worst Case</th>
</tr>
</thead>
<tbody>
<tr>
<td>Copy[2]</td>
<td>O(n)</td>
<td>O(n)                </td>
</tr>
<tr>
<td>Get Item</td>
<td>O(1)</td>
<td>O(n)                </td>
</tr>
<tr>
<td>Set Item[1]</td>
<td>O(1)</td>
<td>O(n)                </td>
</tr>
<tr>
<td>Delete Item</td>
<td>O(1)</td>
<td>O(n)                </td>
</tr>
<tr>
<td>Iteration[2]</td>
<td>O(n)</td>
<td>O(n)                </td>
</tr>
</tbody>
</table>
<h1 id="教科书风格的数据结构"><a href="#教科书风格的数据结构" class="headerlink" title="教科书风格的数据结构"></a><a href="http://sjjp.tjuci.edu.cn/sjjg/datastructure/ds/web/gailun/gailun1.1.1b.htm" target="_blank" rel="external">教科书风格的数据结构</a></h1><ul>
<li>讲述了 <code>线性链表</code>, <code>字符串</code>, <code>栈和队列</code>, <code>多维数组</code>, <code>广义表</code>, <code>树</code>, <code>图</code>, <code>排序</code>, <code>查找</code>, <code>文件</code></li>
<li><strong>有较为详细的性能分析</strong>, 偏重理论细节, 还有习题可以做!<ul>
<li>平方阶(O(n^2))排序: 一般称为简单排序，例如直接插入、直接选择和冒泡排序</li>
<li>线性对数阶(O(nlgn))排序: 如快速、堆和归并排序</li>
<li>O(n^(1+￡))阶排序(0&lt;￡&lt;1): 如希尔排序</li>
<li>线性阶(O(n))排序: 如桶、箱和基数排序</li>
</ul>
</li>
<li>排序方法的选择<ul>
<li>简单排序中直接插入最好，快速排序最快，当文件为正序时，直接插入和冒泡均最佳。</li>
<li>若n较小(如n≤50)，可采用直接插入或直接选择排序。</li>
<li>若文件初始状态基本有序(指正序)，则应选用直接插人、冒泡或随机的快速排序为宜；</li>
<li>若n较大，则应采用时间复杂度为O(nlgn)的排序方法：快速排序、堆排序或归并排序。<ul>
<li>快速排序是目前基于比较的内部排序中被认为是最好的方法，当待排序的关键字是随机分布时，快速排序的平均时间最短；</li>
<li>堆排序所需的辅助空间少于快速排序，并且不会出现快速排序可能出现的最坏情况。这两种排序都是不稳定的。</li>
<li>若要求排序稳定，则可选用归并排序。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="纸上谈兵-算法与数据结构"><a href="#纸上谈兵-算法与数据结构" class="headerlink" title="纸上谈兵: 算法与数据结构"></a><a href="http://www.cnblogs.com/vamei/archive/2013/03/22/2974052.html" target="_blank" rel="external">纸上谈兵: 算法与数据结构</a></h1><ul>
<li>理论与实践相结合的讲述数据结构, <strong>配图很有意思, 并提供了C代码</strong>. 但没有对性能和特性做详细介绍.</li>
<li><a href="http://www.cnblogs.com/vamei/archive/2013/03/30/2989930.html" target="_blank" rel="external">纸上谈兵: 数学归纳法, 递归, 栈</a></li>
<li><a href="http://www.cnblogs.com/vamei/archive/2013/03/12/2948847.html" target="_blank" rel="external">纸上谈兵: 排序算法简介及其C实现</a></li>
<li><a href="http://www.cnblogs.com/vamei/archive/2013/03/14/2958940.html" target="_blank" rel="external">纸上谈兵: 表 (list)</a></li>
<li><a href="http://www.cnblogs.com/vamei/archive/2013/03/14/2960201.html" target="_blank" rel="external">纸上谈兵: 栈 (stack)</a></li>
<li><a href="http://www.cnblogs.com/vamei/archive/2013/03/15/2961729.html" target="_blank" rel="external">纸上谈兵: 队列 (queue)</a></li>
<li><a href="http://www.cnblogs.com/vamei/archive/2013/03/17/2962290.html" target="_blank" rel="external">纸上谈兵: 树, 二叉树, 二叉搜索树</a><ul>
<li><a href="http://www.cnblogs.com/vamei/archive/2013/03/21/2964092.html" target="_blank" rel="external">纸上谈兵: AVL树</a></li>
<li><a href="http://www.cnblogs.com/vamei/archive/2013/03/24/2976545.html" target="_blank" rel="external">纸上谈兵: 伸展树 (splay tree)</a></li>
</ul>
</li>
<li><a href="http://www.cnblogs.com/vamei/archive/2013/03/20/2966612.html" target="_blank" rel="external">纸上谈兵: 堆 (heap)</a><ul>
<li><a href="http://www.cnblogs.com/vamei/archive/2013/04/19/2978555.html" target="_blank" rel="external">纸上谈兵: 左倾堆 (leftist heap)</a></li>
</ul>
</li>
<li><a href="http://www.cnblogs.com/vamei/archive/2013/03/24/2970339.html" target="_blank" rel="external">纸上谈兵: 哈希表 (hash table)</a></li>
<li><a href="http://www.cnblogs.com/vamei/p/3113912.html" target="_blank" rel="external">纸上谈兵: 图 (graph)</a><ul>
<li><a href="http://www.cnblogs.com/vamei/p/3232432.html" target="_blank" rel="external">纸上谈兵: 拓扑排序</a></li>
<li><a href="http://www.cnblogs.com/vamei/p/3604629.html" target="_blank" rel="external">纸上谈兵: 最短路径与贪婪</a></li>
</ul>
</li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[30 个有关 Python 的小技巧]]></title>
      <url>https://draapho.github.io/2016/11/22/1619-python-tips/</url>
      <content type="html"><![CDATA[<p>转载自 <a href="http://sahandsaba.com/thirty-python-language-features-and-tricks-you-may-not-know.html" target="_blank" rel="external">30 Python Language Features and Tricks You May Not Know About</a><br>中文版 <a href="http://blog.jobbole.com/63320/" target="_blank" rel="external">30个有关Python的小技巧</a></p>
<hr>
<h1 id="批量赋值"><a href="#批量赋值" class="headerlink" title="批量赋值"></a>批量赋值</h1><h2 id="Unpacking"><a href="#Unpacking" class="headerlink" title="Unpacking"></a>Unpacking</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c</div><div class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c</div><div class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c = (<span class="number">2</span> * i + <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c</div><div class="line">(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a, (b, c), d = [<span class="number">1</span>, (<span class="number">2</span>, <span class="number">3</span>), <span class="number">4</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line"><span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c</div><div class="line"><span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d</div><div class="line"><span class="number">4</span></div></pre></td></tr></table></figure>
<h2 id="Unpacking-for-swapping-variables"><a href="#Unpacking-for-swapping-variables" class="headerlink" title="Unpacking for swapping variables"></a>Unpacking for swapping variables</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a, b = <span class="number">1</span>, <span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a, b = b, a</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a, b</div><div class="line">(<span class="number">2</span>, <span class="number">1</span>)</div></pre></td></tr></table></figure>
<h2 id="Extended-unpacking-Python-3-only"><a href="#Extended-unpacking-Python-3-only" class="headerlink" title="Extended unpacking (Python 3 only)"></a>Extended unpacking (Python 3 only)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a, *b, c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c</div><div class="line"><span class="number">5</span></div></pre></td></tr></table></figure>
<h1 id="list-amp-dictionary-列表和字典"><a href="#list-amp-dictionary-列表和字典" class="headerlink" title="list &amp; dictionary / 列表和字典"></a>list &amp; dictionary / 列表和字典</h1><h2 id="Negative-indexing"><a href="#Negative-indexing" class="headerlink" title="Negative indexing"></a>Negative indexing</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">-1</span>]</div><div class="line"><span class="number">10</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">-3</span>]</div><div class="line"><span class="number">8</span></div></pre></td></tr></table></figure>
<h2 id="List-slices-a-start-end"><a href="#List-slices-a-start-end" class="headerlink" title="List slices (a[start:end])"></a>List slices (a[start:end])</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:<span class="number">8</span>]</div><div class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</div></pre></td></tr></table></figure>
<h2 id="List-slices-with-negative-indexing"><a href="#List-slices-with-negative-indexing" class="headerlink" title="List slices with negative indexing"></a>List slices with negative indexing</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">-4</span>:<span class="number">-2</span>]</div><div class="line">[<span class="number">7</span>, <span class="number">8</span>]</div></pre></td></tr></table></figure>
<h2 id="List-slices-with-step-a-start-end-step"><a href="#List-slices-with-step-a-start-end-step" class="headerlink" title="List slices with step (a[start:end:step])"></a>List slices with step (a[start:end:step])</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[::<span class="number">2</span>]</div><div class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[::<span class="number">3</span>]</div><div class="line">[<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:<span class="number">8</span>:<span class="number">2</span>]</div><div class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</div></pre></td></tr></table></figure>
<h2 id="List-slices-with-negative-step"><a href="#List-slices-with-negative-step" class="headerlink" title="List slices with negative step"></a>List slices with negative step</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[::<span class="number">-1</span>]</div><div class="line">[<span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[::<span class="number">-2</span>]</div><div class="line">[<span class="number">10</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>]</div></pre></td></tr></table></figure>
<h2 id="List-slice-assignment-切割并赋值"><a href="#List-slice-assignment-切割并赋值" class="headerlink" title="List slice assignment / 切割并赋值"></a>List slice assignment / 切割并赋值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:<span class="number">3</span>] = [<span class="number">0</span>, <span class="number">0</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>:<span class="number">1</span>] = [<span class="number">8</span>, <span class="number">9</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">1</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>:<span class="number">-1</span>] = []</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">1</span>, <span class="number">5</span>]</div></pre></td></tr></table></figure>
<h2 id="for循环取list的索引和值-enumerate"><a href="#for循环取list的索引和值-enumerate" class="headerlink" title="for循环取list的索引和值 (enumerate)"></a>for循环取list的索引和值 (enumerate)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">'Hello'</span>, <span class="string">'world'</span>, <span class="string">'!'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i, x <span class="keyword">in</span> enumerate(a):</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">'&#123;&#125;: &#123;&#125;'</span>.format(i, x)</div><div class="line">...</div><div class="line"><span class="number">0</span>: Hello</div><div class="line"><span class="number">1</span>: world</div><div class="line"><span class="number">2</span>: !</div></pre></td></tr></table></figure>
<h2 id="list加入索引值-enumerate"><a href="#list加入索引值-enumerate" class="headerlink" title="list加入索引值 (enumerate)"></a>list加入索引值 (enumerate)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>seasons = [<span class="string">'Spring'</span>, <span class="string">'Summer'</span>, <span class="string">'Fall'</span>, <span class="string">'Winter'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(enumerate(seasons))</div><div class="line">[(<span class="number">0</span>, <span class="string">'Spring'</span>), (<span class="number">1</span>, <span class="string">'Summer'</span>), (<span class="number">2</span>, <span class="string">'Fall'</span>), (<span class="number">3</span>, <span class="string">'Winter'</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(enumerate(seasons, start=<span class="number">1</span>))</div><div class="line">[(<span class="number">1</span>, <span class="string">'Spring'</span>), (<span class="number">2</span>, <span class="string">'Summer'</span>), (<span class="number">3</span>, <span class="string">'Fall'</span>), (<span class="number">4</span>, <span class="string">'Winter'</span>)]</div></pre></td></tr></table></figure>
<h2 id="Naming-slices-slice-start-end-step-给切割操作命名"><a href="#Naming-slices-slice-start-end-step-给切割操作命名" class="headerlink" title="Naming slices (slice(start, end, step)) / 给切割操作命名"></a>Naming slices (slice(start, end, step)) / 给切割操作命名</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>LASTTHREE = slice(<span class="number">-3</span>, <span class="keyword">None</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>LASTTHREE</div><div class="line">slice(<span class="number">-3</span>, <span class="keyword">None</span>, <span class="keyword">None</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[LASTTHREE]</div><div class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div></pre></td></tr></table></figure>
<h2 id="Zipping-and-unzipping-lists-and-iterables-列表以及迭代器的压缩和解压缩"><a href="#Zipping-and-unzipping-lists-and-iterables-列表以及迭代器的压缩和解压缩" class="headerlink" title="Zipping and unzipping lists and iterables / 列表以及迭代器的压缩和解压缩"></a>Zipping and unzipping lists and iterables / 列表以及迭代器的压缩和解压缩</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>z = zip(a, b)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>z</div><div class="line">[(<span class="number">1</span>, <span class="string">'a'</span>), (<span class="number">2</span>, <span class="string">'b'</span>), (<span class="number">3</span>, <span class="string">'c'</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>zip(*z)</div><div class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)]</div></pre></td></tr></table></figure>
<h2 id="Grouping-adjacent-list-items-using-zip-列表相邻元素压缩器"><a href="#Grouping-adjacent-list-items-using-zip-列表相邻元素压缩器" class="headerlink" title="Grouping adjacent list items using zip / 列表相邻元素压缩器"></a>Grouping adjacent list items using zip / 列表相邻元素压缩器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Using iterators / 使用迭代器</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent = <span class="keyword">lambda</span> a, k: zip(*([iter(a)] * k))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent(a, <span class="number">3</span>)</div><div class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent(a, <span class="number">2</span>)</div><div class="line">[(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">6</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent(a, <span class="number">1</span>)</div><div class="line">[(<span class="number">1</span>,), (<span class="number">2</span>,), (<span class="number">3</span>,), (<span class="number">4</span>,), (<span class="number">5</span>,), (<span class="number">6</span>,)]</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Using slices / 使用切片</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> itertools <span class="keyword">import</span> islice</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent = <span class="keyword">lambda</span> a, k: zip(*(islice(a, i, <span class="keyword">None</span>, k) <span class="keyword">for</span> i <span class="keyword">in</span> range(k)))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent(a, <span class="number">3</span>)</div><div class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent(a, <span class="number">2</span>)</div><div class="line">[(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">6</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent(a, <span class="number">1</span>)</div><div class="line">[(<span class="number">1</span>,), (<span class="number">2</span>,), (<span class="number">3</span>,), (<span class="number">4</span>,), (<span class="number">5</span>,), (<span class="number">6</span>,)]</div></pre></td></tr></table></figure>
<h2 id="Sliding-windows-n-grams-using-zip-and-iterators-列表元素压缩器-同上方法二"><a href="#Sliding-windows-n-grams-using-zip-and-iterators-列表元素压缩器-同上方法二" class="headerlink" title="Sliding windows (n-grams) using zip and iterators / 列表元素压缩器(同上方法二)"></a>Sliding windows (n-grams) using zip and iterators / 列表元素压缩器(同上方法二)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> itertools <span class="keyword">import</span> islice</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">n_grams</span><span class="params">(a, n)</span>:</span></div><div class="line"><span class="meta">... </span>    z = (islice(a, i, <span class="keyword">None</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(n))</div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> zip(*z)</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>n_grams(a, <span class="number">3</span>)</div><div class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>n_grams(a, <span class="number">2</span>)</div><div class="line">[(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">5</span>), (<span class="number">5</span>, <span class="number">6</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>n_grams(a, <span class="number">4</span>)</div><div class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)]</div></pre></td></tr></table></figure>
<h2 id="Flattening-lists-列表展开"><a href="#Flattening-lists-列表展开" class="headerlink" title="Flattening lists: / 列表展开"></a>Flattening lists: / 列表展开</h2><p>Note: according to Python’s documentation on sum, itertools.chain.from_iterable is the preferred method for this.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 推荐使用 itertools.chain.from_iterable</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.chain.from_iterable(a))</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line"></div><div class="line"><span class="comment"># 不推荐使用 sum</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sum(a, [])</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> l <span class="keyword">in</span> a <span class="keyword">for</span> x <span class="keyword">in</span> l]</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [[[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]], [[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]]]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> l1 <span class="keyword">in</span> a <span class="keyword">for</span> l2 <span class="keyword">in</span> l1 <span class="keyword">for</span> x <span class="keyword">in</span> l2]</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], [[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]]]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>flatten = <span class="keyword">lambda</span> x: [y <span class="keyword">for</span> l <span class="keyword">in</span> x <span class="keyword">for</span> y <span class="keyword">in</span> flatten(l)] <span class="keyword">if</span> type(x) <span class="keyword">is</span> list <span class="keyword">else</span> [x]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>flatten(a)</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</div></pre></td></tr></table></figure></p>
<h2 id="for循环取dict的关键字和值-iteritems"><a href="#for循环取dict的关键字和值-iteritems" class="headerlink" title="for循环取dict的关键字和值 (iteritems)"></a>for循环取dict的关键字和值 (iteritems)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k, v <span class="keyword">in</span> m.iteritems():</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">'&#123;&#125;: &#123;&#125;'</span>.format(k, v)</div><div class="line">...</div><div class="line">a: <span class="number">1</span></div><div class="line">c: <span class="number">3</span></div><div class="line">b: <span class="number">2</span></div><div class="line">d: <span class="number">4</span></div><div class="line">Note: use dict.items <span class="keyword">in</span> Python <span class="number">3.</span></div></pre></td></tr></table></figure>
<h2 id="Inverting-a-dictionary-字典与表的转换-以及翻转"><a href="#Inverting-a-dictionary-字典与表的转换-以及翻转" class="headerlink" title="Inverting a dictionary / 字典与表的转换, 以及翻转"></a>Inverting a dictionary / 字典与表的转换, 以及翻转</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># using zip</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.items()</div><div class="line">[(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'c'</span>, <span class="number">3</span>), (<span class="string">'b'</span>, <span class="number">2</span>), (<span class="string">'d'</span>, <span class="number">4</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>zip(m.values(), m.keys())</div><div class="line">[(<span class="number">1</span>, <span class="string">'a'</span>), (<span class="number">3</span>, <span class="string">'c'</span>), (<span class="number">2</span>, <span class="string">'b'</span>), (<span class="number">4</span>, <span class="string">'d'</span>)]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mi = dict(zip(m.values(), m.keys()))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mi</div><div class="line">&#123;<span class="number">1</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>, <span class="number">3</span>: <span class="string">'c'</span>, <span class="number">4</span>: <span class="string">'d'</span>&#125;</div><div class="line"></div><div class="line"><span class="comment"># using a dictionary comprehension</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m</div><div class="line">&#123;<span class="string">'d'</span>: <span class="number">4</span>, <span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;v: k <span class="keyword">for</span> k, v <span class="keyword">in</span> m.items()&#125;</div><div class="line">&#123;<span class="number">1</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>, <span class="number">3</span>: <span class="string">'c'</span>, <span class="number">4</span>: <span class="string">'d'</span>&#125;</div></pre></td></tr></table></figure>
<h2 id="Dictionary-comprehensions-快速生成规律性字典"><a href="#Dictionary-comprehensions-快速生成规律性字典" class="headerlink" title="Dictionary comprehensions / 快速生成规律性字典"></a>Dictionary comprehensions / 快速生成规律性字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = &#123;x: x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>)&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m</div><div class="line">&#123;<span class="number">0</span>: <span class="number">0</span>, <span class="number">1</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">4</span>, <span class="number">3</span>: <span class="number">9</span>, <span class="number">4</span>: <span class="number">16</span>&#125;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = &#123;x: <span class="string">'A'</span> + str(x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m</div><div class="line">&#123;<span class="number">0</span>: <span class="string">'A0'</span>, <span class="number">1</span>: <span class="string">'A1'</span>, <span class="number">2</span>: <span class="string">'A2'</span>, <span class="number">3</span>: <span class="string">'A3'</span>, <span class="number">4</span>: <span class="string">'A4'</span>, <span class="number">5</span>: <span class="string">'A5'</span>, <span class="number">6</span>: <span class="string">'A6'</span>, <span class="number">7</span>: <span class="string">'A7'</span>, <span class="number">8</span>: <span class="string">'A8'</span>, <span class="number">9</span>: <span class="string">'A9'</span>&#125;</div></pre></td></tr></table></figure>
<h1 id="语法上的一些技巧"><a href="#语法上的一些技巧" class="headerlink" title="语法上的一些技巧"></a>语法上的一些技巧</h1><h2 id="双重for循环"><a href="#双重for循环" class="headerlink" title="双重for循环"></a>双重for循环</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="string">'la'</span>,<span class="string">'luo'</span>,<span class="string">'lao'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b =(<span class="string">'hua'</span>,<span class="string">'huo'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> [(x,y) <span class="keyword">for</span> x <span class="keyword">in</span> a <span class="keyword">for</span> y <span class="keyword">in</span> b]</div><div class="line">[(<span class="string">'la'</span>, <span class="string">'hua'</span>), (<span class="string">'la'</span>, <span class="string">'huo'</span>), (<span class="string">'luo'</span>, <span class="string">'hua'</span>), (<span class="string">'luo'</span>, <span class="string">'huo'</span>), (<span class="string">'lao'</span>, <span class="string">'hua'</span>), (<span class="string">'lao'</span>, <span class="string">'huo'</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> zip(a,b)</div><div class="line">[(<span class="string">'la'</span>, <span class="string">'hua'</span>), (<span class="string">'luo'</span>, <span class="string">'huo'</span>)]</div></pre></td></tr></table></figure>
<h2 id="python-中-switch-的替代方案"><a href="#python-中-switch-的替代方案" class="headerlink" title="python 中 switch 的替代方案"></a>python 中 switch 的替代方案</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 字典映射</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">numbers_to_strings</span><span class="params">(argument)</span>:</span></div><div class="line">    switcher = &#123;                                <span class="comment"># switch(argument) &#123;</span></div><div class="line">        <span class="number">0</span>: <span class="string">"zero"</span>,                              <span class="comment"># case 0: return "zero";</span></div><div class="line">        <span class="number">1</span>: <span class="string">"one"</span>,                               <span class="comment"># case 1: return "one";</span></div><div class="line">        <span class="number">2</span>: <span class="string">"two"</span>,                               <span class="comment"># case 2: return "two";</span></div><div class="line">    &#125;                                           <span class="comment"># &#125;</span></div><div class="line">    <span class="keyword">return</span> switcher.get(argument, <span class="string">"nothing"</span>)    <span class="comment"># default: return "nothing";</span></div><div class="line"></div><div class="line"><span class="comment"># 函数的字典映射</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">zero</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">"zero"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">one</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">"one"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">numbers_to_functions_to_strings</span><span class="params">(argument)</span>:</span></div><div class="line">    switcher = &#123;</div><div class="line">        <span class="number">0</span>: zero,</div><div class="line">        <span class="number">1</span>: one,</div><div class="line">        <span class="number">2</span>: <span class="keyword">lambda</span>: <span class="string">"two"</span>,</div><div class="line">    &#125;</div><div class="line">    <span class="comment"># Get the function from switcher dictionary</span></div><div class="line">    func = switcher.get(argument, <span class="keyword">lambda</span>: <span class="string">"nothing"</span>)</div><div class="line">    <span class="comment"># Execute the function</span></div><div class="line">    <span class="keyword">return</span> func()</div><div class="line"></div><div class="line"><span class="comment"># 类的调度方法</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Switcher</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numbers_to_methods_to_strings</span><span class="params">(self, argument)</span>:</span></div><div class="line">        <span class="string">"""Dispatch method"""</span></div><div class="line">        <span class="comment"># prefix the method_name with 'number_' because method names</span></div><div class="line">        <span class="comment"># cannot begin with an integer.</span></div><div class="line">        method_name = <span class="string">'number_'</span> + str(argument)</div><div class="line">        <span class="comment"># Get the method from 'self'. Default to a lambda.</span></div><div class="line">        method = getattr(self, method_name, <span class="keyword">lambda</span>: <span class="string">"nothing"</span>)</div><div class="line">        <span class="comment"># Call the method as we return it</span></div><div class="line">        <span class="keyword">return</span> method()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">number_0</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"zero"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">number_1</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"one"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">number_2</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"two"</span></div></pre></td></tr></table></figure>
<h2 id="python-仅允许单实例"><a href="#python-仅允许单实例" class="headerlink" title="python 仅允许单实例"></a>python 仅允许单实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls)</span>:</span></div><div class="line">        <span class="comment"># 关键在于这，每一次实例化的时候，我们都只会返回这同一个instance对象</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">'instance'</span>):</div><div class="line">            cls.instance = super(Singleton, cls).__new__(cls)</div><div class="line">        <span class="keyword">return</span> cls.instance</div><div class="line"></div><div class="line"><span class="comment"># 测试</span></div><div class="line">obj1 = Singleton()</div><div class="line">obj2 = Singleton()</div><div class="line">obj1.attr1 = <span class="string">'value1'</span></div><div class="line"><span class="keyword">print</span> obj1.attr1, obj2.attr1</div><div class="line"><span class="keyword">print</span> obj1 <span class="keyword">is</span> obj2</div></pre></td></tr></table></figure>
<h2 id="Generator-expressions-生成器表达式"><a href="#Generator-expressions-生成器表达式" class="headerlink" title="Generator expressions / 生成器表达式"></a>Generator expressions / 生成器表达式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>g = (x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">10</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</div><div class="line"><span class="number">0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</div><div class="line"><span class="number">4</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</div><div class="line"><span class="number">9</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sum(x ** <span class="number">3</span> <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">10</span>))</div><div class="line"><span class="number">2025</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sum(x ** <span class="number">3</span> <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">3</span> == <span class="number">1</span>)</div><div class="line"><span class="number">408</span></div></pre></td></tr></table></figure>
<h2 id="Learn-the-Zen-of-Python-打印Python之道"><a href="#Learn-the-Zen-of-Python-打印Python之道" class="headerlink" title="Learn the Zen of Python / 打印Python之道"></a>Learn the Zen of Python / 打印Python之道</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import this</div><div class="line">The Zen of Python, by Tim Peters</div><div class="line"></div><div class="line">Beautiful is better than ugly.</div><div class="line">Explicit is better than implicit.</div><div class="line">Simple is better than complex.</div><div class="line">Complex is better than complicated.</div><div class="line">Flat is better than nested.</div><div class="line">Sparse is better than dense.</div><div class="line">Readability counts.</div><div class="line">Special cases aren't special enough to break the rules.</div><div class="line">Although practicality beats purity.</div><div class="line">Errors should never pass silently.</div><div class="line">Unless explicitly silenced.</div><div class="line">In the face of ambiguity, refuse the temptation to guess.</div><div class="line">There should be one-- and preferably only one --obvious way to do it.</div><div class="line">Although that way may not be obvious at first unless you're Dutch.</div><div class="line">Now is better than never.</div><div class="line">Although never is often better than *right* now.</div><div class="line">If the implementation is hard to explain, it's a bad idea.</div><div class="line">If the implementation is easy to explain, it may be a good idea.</div><div class="line">Namespaces are one honking great idea -- let's do more of those!</div></pre></td></tr></table></figure>
<h2 id="使用C语言括号替代缩进"><a href="#使用C语言括号替代缩进" class="headerlink" title="使用C语言括号替代缩进"></a>使用C语言括号替代缩进</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> __future__ <span class="keyword">import</span> braces</div></pre></td></tr></table></figure>
<h1 id="collections-的一些数据类型"><a href="#collections-的一些数据类型" class="headerlink" title="collections 的一些数据类型"></a>collections 的一些数据类型</h1><h2 id="Named-tuples-collections-namedtuple-类似于-C-的struct结构"><a href="#Named-tuples-collections-namedtuple-类似于-C-的struct结构" class="headerlink" title="Named tuples (collections.namedtuple) / 类似于 C 的struct结构"></a>Named tuples (collections.namedtuple) / 类似于 C 的struct结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> collections</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Point = collections.namedtuple(<span class="string">'Point'</span>, [<span class="string">'x'</span>, <span class="string">'y'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = Point(x=<span class="number">1.0</span>, y=<span class="number">2.0</span>) <span class="comment"># 这样赋值复杂了, 可以直接 p = Point(1.0, 2.0)</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p</div><div class="line">Point(x=<span class="number">1.0</span>, y=<span class="number">2.0</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.x</div><div class="line"><span class="number">1.0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.y</div><div class="line"><span class="number">2.0</span></div><div class="line"></div><div class="line">coordinate = collections.namedtuple(<span class="string">'Coordinate'</span>, [<span class="string">'x'</span>, <span class="string">'y'</span>])</div><div class="line">co = coordinate(<span class="number">10</span>,<span class="number">20</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>co[<span class="number">0</span>], co[<span class="number">1</span>]</div><div class="line">(<span class="number">10</span>, <span class="number">20</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>co = coordinate._make([<span class="number">100</span>,<span class="number">200</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>co[<span class="number">0</span>], co[<span class="number">1</span>]</div><div class="line">(<span class="number">100</span>, <span class="number">200</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>co = co._replace(x = <span class="number">30</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>co[<span class="number">0</span>], co[<span class="number">1</span>]</div><div class="line">(<span class="number">30</span>, <span class="number">200</span>)</div></pre></td></tr></table></figure>
<h2 id="Inheriting-from-named-tuples-自定义-namedtuple-的运算"><a href="#Inheriting-from-named-tuples-自定义-namedtuple-的运算" class="headerlink" title="Inheriting from named tuples: / 自定义 namedtuple 的运算"></a>Inheriting from named tuples: / 自定义 namedtuple 的运算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Point</span><span class="params">(collections.namedtuple<span class="params">(<span class="string">'PointBase'</span>, [<span class="string">'x'</span>, <span class="string">'y'</span>])</span>)</span>:</span></div><div class="line"><span class="meta">... </span>    __slots__ = ()</div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></div><div class="line"><span class="meta">... </span>            <span class="keyword">return</span> Point(x=self.x + other.x, y=self.y + other.y)</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = Point(x=<span class="number">1.0</span>, y=<span class="number">2.0</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q = Point(x=<span class="number">2.0</span>, y=<span class="number">3.0</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p + q</div><div class="line">Point(x=<span class="number">3.0</span>, y=<span class="number">5.0</span>)   <span class="comment"># 重定义了 + 运算符.</span></div><div class="line"><span class="comment"># 默认结果应该是: Point(1.0, 2.0, 2.0, 3.0)</span></div></pre></td></tr></table></figure>
<h2 id="Sets-and-set-operations-集合及其操作"><a href="#Sets-and-set-operations-集合及其操作" class="headerlink" title="Sets and set operations / 集合及其操作"></a>Sets and set operations / 集合及其操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>A = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A</div><div class="line">set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>B = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>B</div><div class="line">set([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A | B</div><div class="line">set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A &amp; B</div><div class="line">set([<span class="number">3</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A - B</div><div class="line">set([<span class="number">1</span>, <span class="number">2</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>B - A</div><div class="line">set([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A ^ B   <span class="comment"># 集合异或</span></div><div class="line">set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>(A ^ B) == ((A - B) | (B - A))</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
<h2 id="统计列表中元素出现的次数"><a href="#统计列表中元素出现的次数" class="headerlink" title="统计列表中元素出现的次数"></a>统计列表中元素出现的次数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>mylist = [<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>myset = set(mylist)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> item <span class="keyword">in</span> myset:</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> mylist.count(item), <span class="string">" of "</span>, item, <span class="string">" in list"</span></div><div class="line">...</div><div class="line"><span class="number">6</span>  of  <span class="number">2</span>  <span class="keyword">in</span> list</div><div class="line"><span class="number">4</span>  of  <span class="number">3</span>  <span class="keyword">in</span> list</div></pre></td></tr></table></figure>
<h2 id="Multisets-and-multiset-operations-collections-Counter-多重集合-显示元素个数"><a href="#Multisets-and-multiset-operations-collections-Counter-多重集合-显示元素个数" class="headerlink" title="Multisets and multiset operations (collections.Counter) / 多重集合(显示元素个数)"></a>Multisets and multiset operations (collections.Counter) / 多重集合(显示元素个数)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>A = collections.Counter([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>B = collections.Counter([<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A</div><div class="line">Counter(&#123;<span class="number">2</span>: <span class="number">2</span>, <span class="number">1</span>: <span class="number">1</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>B</div><div class="line">Counter(&#123;<span class="number">2</span>: <span class="number">2</span>, <span class="number">3</span>: <span class="number">1</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A | B</div><div class="line">Counter(&#123;<span class="number">2</span>: <span class="number">2</span>, <span class="number">1</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">1</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A &amp; B</div><div class="line">Counter(&#123;<span class="number">2</span>: <span class="number">2</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A + B</div><div class="line">Counter(&#123;<span class="number">2</span>: <span class="number">4</span>, <span class="number">1</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">1</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A - B</div><div class="line">Counter(&#123;<span class="number">1</span>: <span class="number">1</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>B - A</div><div class="line">Counter(&#123;<span class="number">3</span>: <span class="number">1</span>&#125;)</div></pre></td></tr></table></figure>
<h2 id="Most-common-elements-in-an-iterable-collections-Counter-统计在可迭代器中最常出现的元素"><a href="#Most-common-elements-in-an-iterable-collections-Counter-统计在可迭代器中最常出现的元素" class="headerlink" title="Most common elements in an iterable (collections.Counter) / 统计在可迭代器中最常出现的元素"></a>Most common elements in an iterable (collections.Counter) / 统计在可迭代器中最常出现的元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>A = collections.Counter([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A</div><div class="line">Counter(&#123;<span class="number">3</span>: <span class="number">4</span>, <span class="number">1</span>: <span class="number">2</span>, <span class="number">2</span>: <span class="number">2</span>, <span class="number">4</span>: <span class="number">1</span>, <span class="number">5</span>: <span class="number">1</span>, <span class="number">6</span>: <span class="number">1</span>, <span class="number">7</span>: <span class="number">1</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A.most_common(<span class="number">1</span>)</div><div class="line">[(<span class="number">3</span>, <span class="number">4</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A.most_common(<span class="number">3</span>)</div><div class="line">[(<span class="number">3</span>, <span class="number">4</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">2</span>)]</div></pre></td></tr></table></figure>
<h2 id="Double-ended-queue-collections-deque-双向队列-近似于双向链表"><a href="#Double-ended-queue-collections-deque-双向队列-近似于双向链表" class="headerlink" title="Double-ended queue (collections.deque) / 双向队列, 近似于双向链表"></a>Double-ended queue (collections.deque) / 双向队列, 近似于双向链表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>Q = collections.deque()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Q.append(<span class="number">1</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Q.appendleft(<span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Q.extend([<span class="number">3</span>, <span class="number">4</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Q.extendleft([<span class="number">5</span>, <span class="number">6</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Q</div><div class="line">deque([<span class="number">6</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Q.pop()</div><div class="line"><span class="number">4</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Q.popleft()</div><div class="line"><span class="number">6</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Q</div><div class="line">deque([<span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Q.rotate(<span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Q</div><div class="line">deque([<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Q.rotate(<span class="number">-3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Q</div><div class="line">deque([<span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>])</div></pre></td></tr></table></figure>
<h2 id="Double-ended-queue-with-maximum-length-collections-deque-限长的双向队列"><a href="#Double-ended-queue-with-maximum-length-collections-deque-限长的双向队列" class="headerlink" title="Double-ended queue with maximum length (collections.deque) / 限长的双向队列"></a>Double-ended queue with maximum length (collections.deque) / 限长的双向队列</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>last_three = collections.deque(maxlen=<span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">10</span>):</div><div class="line"><span class="meta">... </span>    last_three.append(i)</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">', '</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> last_three)</div><div class="line">...</div><div class="line"><span class="number">0</span></div><div class="line"><span class="number">0</span>, <span class="number">1</span></div><div class="line"><span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span></div><div class="line"><span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></div><div class="line"><span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span></div><div class="line"><span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span></div><div class="line"><span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span></div><div class="line"><span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span></div><div class="line"><span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span></div><div class="line"><span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span></div></pre></td></tr></table></figure>
<h2 id="Ordered-dictionaries-collections-OrderedDict-可排序字典"><a href="#Ordered-dictionaries-collections-OrderedDict-可排序字典" class="headerlink" title="Ordered dictionaries (collections.OrderedDict) / 可排序字典"></a>Ordered dictionaries (collections.OrderedDict) / 可排序字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 普通字典</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = dict((str(x), x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">', '</span>.join(m.keys())</div><div class="line"><span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">8</span></div><div class="line"></div><div class="line"><span class="comment"># 可排序字典</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = collections.OrderedDict((str(x), x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">', '</span>.join(m.keys())</div><div class="line"><span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = collections.OrderedDict((str(x), x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>, <span class="number">0</span>, <span class="number">-1</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">', '</span>.join(m.keys())</div><div class="line"><span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="Default-dictionaries-collections-defaultdict-默认字典"><a href="#Default-dictionaries-collections-defaultdict-默认字典" class="headerlink" title="Default dictionaries (collections.defaultdict) / 默认字典"></a>Default dictionaries (collections.defaultdict) / 默认字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 普通字典</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = dict()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m[<span class="string">'a'</span>]</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">KeyError: <span class="string">'a'</span></div><div class="line"></div><div class="line"><span class="comment"># 默认字典</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = collections.defaultdict(int)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m[<span class="string">'a'</span>]</div><div class="line"><span class="number">0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m[<span class="string">'b'</span>]</div><div class="line"><span class="number">0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = collections.defaultdict(str)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m[<span class="string">'a'</span>]</div><div class="line"><span class="string">''</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m[<span class="string">'b'</span>] += <span class="string">'a'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m[<span class="string">'b'</span>]</div><div class="line"><span class="string">'a'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = collections.defaultdict(<span class="keyword">lambda</span>: <span class="string">'[default value]'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m[<span class="string">'a'</span>]</div><div class="line"><span class="string">'[default value]'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m[<span class="string">'b'</span>]</div><div class="line"><span class="string">'[default value]'</span></div></pre></td></tr></table></figure>
<h2 id="Using-default-dictionaries-to-represent-simple-trees-默认字典实现树-快速生成xml文件"><a href="#Using-default-dictionaries-to-represent-simple-trees-默认字典实现树-快速生成xml文件" class="headerlink" title="Using default dictionaries to represent simple trees / 默认字典实现树, 快速生成xml文件"></a>Using default dictionaries to represent simple trees / 默认字典实现树, 快速生成xml文件</h2><p>See <a href="https://gist.github.com/hrldcpr/2012250" target="_blank" rel="external">One-line Tree in Python</a> for more on this.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tree = <span class="keyword">lambda</span>: collections.defaultdict(tree)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>root = tree()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>root[<span class="string">'menu'</span>][<span class="string">'id'</span>] = <span class="string">'file'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>root[<span class="string">'menu'</span>][<span class="string">'value'</span>] = <span class="string">'File'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>root[<span class="string">'menu'</span>][<span class="string">'menuitems'</span>][<span class="string">'new'</span>][<span class="string">'value'</span>] = <span class="string">'New'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>root[<span class="string">'menu'</span>][<span class="string">'menuitems'</span>][<span class="string">'new'</span>][<span class="string">'onclick'</span>] = <span class="string">'new();'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>root[<span class="string">'menu'</span>][<span class="string">'menuitems'</span>][<span class="string">'open'</span>][<span class="string">'value'</span>] = <span class="string">'Open'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>root[<span class="string">'menu'</span>][<span class="string">'menuitems'</span>][<span class="string">'open'</span>][<span class="string">'onclick'</span>] = <span class="string">'open();'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>root[<span class="string">'menu'</span>][<span class="string">'menuitems'</span>][<span class="string">'close'</span>][<span class="string">'value'</span>] = <span class="string">'Close'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>root[<span class="string">'menu'</span>][<span class="string">'menuitems'</span>][<span class="string">'close'</span>][<span class="string">'onclick'</span>] = <span class="string">'close();'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> json.dumps(root, sort_keys=<span class="keyword">True</span>, indent=<span class="number">4</span>, separators=(<span class="string">','</span>, <span class="string">': '</span>))</div><div class="line">&#123;</div><div class="line">    <span class="string">"menu"</span>: &#123;</div><div class="line">        <span class="string">"id"</span>: <span class="string">"file"</span>,</div><div class="line">        <span class="string">"menuitems"</span>: &#123;</div><div class="line">            <span class="string">"close"</span>: &#123;</div><div class="line">                <span class="string">"onclick"</span>: <span class="string">"close();"</span>,</div><div class="line">                <span class="string">"value"</span>: <span class="string">"Close"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="string">"new"</span>: &#123;</div><div class="line">                <span class="string">"onclick"</span>: <span class="string">"new();"</span>,</div><div class="line">                <span class="string">"value"</span>: <span class="string">"New"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="string">"open"</span>: &#123;</div><div class="line">                <span class="string">"onclick"</span>: <span class="string">"open();"</span>,</div><div class="line">                <span class="string">"value"</span>: <span class="string">"Open"</span></div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="string">"value"</span>: <span class="string">"File"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Mapping-objects-to-unique-counting-numbers-collections-defaultdict-生成对象的唯一索引值"><a href="#Mapping-objects-to-unique-counting-numbers-collections-defaultdict-生成对象的唯一索引值" class="headerlink" title="Mapping objects to unique counting numbers (collections.defaultdict) / 生成对象的唯一索引值"></a>Mapping objects to unique counting numbers (collections.defaultdict) / 生成对象的唯一索引值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> itertools, collections</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>value_to_numeric_map = collections.defaultdict(itertools.count().next)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>value_to_numeric_map[<span class="string">'a'</span>]</div><div class="line"><span class="number">0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>value_to_numeric_map[<span class="string">'b'</span>]</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>value_to_numeric_map[<span class="string">'c'</span>]</div><div class="line"><span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>value_to_numeric_map[<span class="string">'a'</span>]</div><div class="line"><span class="number">0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>value_to_numeric_map[<span class="string">'b'</span>]</div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="Largest-and-smallest-elements-heapq-nlargest-and-heapq-nsmallest-最大和最小的几个列表元素"><a href="#Largest-and-smallest-elements-heapq-nlargest-and-heapq-nsmallest-最大和最小的几个列表元素" class="headerlink" title="Largest and smallest elements (heapq.nlargest and heapq.nsmallest) / 最大和最小的几个列表元素"></a>Largest and smallest elements (heapq.nlargest and heapq.nsmallest) / 最大和最小的几个列表元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [random.randint(<span class="number">0</span>, <span class="number">100</span>) <span class="keyword">for</span> __ <span class="keyword">in</span> xrange(<span class="number">100</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.nsmallest(<span class="number">5</span>, a)</div><div class="line">[<span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.nlargest(<span class="number">5</span>, a)</div><div class="line">[<span class="number">100</span>, <span class="number">100</span>, <span class="number">99</span>, <span class="number">98</span>, <span class="number">98</span>]</div></pre></td></tr></table></figure>
<h1 id="itertools-迭代器的一些应用"><a href="#itertools-迭代器的一些应用" class="headerlink" title="itertools 迭代器的一些应用"></a>itertools 迭代器的一些应用</h1><h2 id="Cartesian-products-itertools-product-两个列表的笛卡尔积"><a href="#Cartesian-products-itertools-product-两个列表的笛卡尔积" class="headerlink" title="Cartesian products (itertools.product) / 两个列表的笛卡尔积"></a>Cartesian products (itertools.product) / 两个列表的笛卡尔积</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> p <span class="keyword">in</span> itertools.product([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]):</div><div class="line">(<span class="number">1</span>, <span class="number">4</span>)</div><div class="line">(<span class="number">1</span>, <span class="number">5</span>)</div><div class="line">(<span class="number">2</span>, <span class="number">4</span>)</div><div class="line">(<span class="number">2</span>, <span class="number">5</span>)</div><div class="line">(<span class="number">3</span>, <span class="number">4</span>)</div><div class="line">(<span class="number">3</span>, <span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> p <span class="keyword">in</span> itertools.product([<span class="number">0</span>, <span class="number">1</span>], repeat=<span class="number">4</span>):</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">''</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> p)</div><div class="line">...</div><div class="line"><span class="number">0000</span></div><div class="line"><span class="number">0001</span></div><div class="line"><span class="number">0010</span></div><div class="line"><span class="number">0011</span></div><div class="line"><span class="number">0100</span></div><div class="line"><span class="number">0101</span></div><div class="line"><span class="number">0110</span></div><div class="line"><span class="number">0111</span></div><div class="line"><span class="number">1000</span></div><div class="line"><span class="number">1001</span></div><div class="line"><span class="number">1010</span></div><div class="line"><span class="number">1011</span></div><div class="line"><span class="number">1100</span></div><div class="line"><span class="number">1101</span></div><div class="line"><span class="number">1110</span></div><div class="line"><span class="number">1111</span></div></pre></td></tr></table></figure>
<h2 id="Combinations-and-combinations-with-replacement-itertools-combinations-and-itertools-combinations-with-replacement-列表组合和列表元素替代组合"><a href="#Combinations-and-combinations-with-replacement-itertools-combinations-and-itertools-combinations-with-replacement-列表组合和列表元素替代组合" class="headerlink" title="Combinations and combinations with replacement (itertools.combinations and itertools.combinations_with_replacement) / 列表组合和列表元素替代组合"></a>Combinations and combinations with replacement (itertools.combinations and itertools.combinations_with_replacement) / 列表组合和列表元素替代组合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> c <span class="keyword">in</span> itertools.combinations([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="number">3</span>):</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">''</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> c)</div><div class="line">...</div><div class="line"><span class="number">123</span></div><div class="line"><span class="number">124</span></div><div class="line"><span class="number">125</span></div><div class="line"><span class="number">134</span></div><div class="line"><span class="number">135</span></div><div class="line"><span class="number">145</span></div><div class="line"><span class="number">234</span></div><div class="line"><span class="number">235</span></div><div class="line"><span class="number">245</span></div><div class="line"><span class="number">345</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> c <span class="keyword">in</span> itertools.combinations_with_replacement([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>):</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">''</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> c)</div><div class="line">...</div><div class="line"><span class="number">11</span></div><div class="line"><span class="number">12</span></div><div class="line"><span class="number">13</span></div><div class="line"><span class="number">22</span></div><div class="line"><span class="number">23</span></div><div class="line"><span class="number">33</span></div></pre></td></tr></table></figure>
<h2 id="Permutations-itertools-permutations-列表元素排列组合"><a href="#Permutations-itertools-permutations-列表元素排列组合" class="headerlink" title="Permutations (itertools.permutations) / 列表元素排列组合"></a>Permutations (itertools.permutations) / 列表元素排列组合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> p <span class="keyword">in</span> itertools.permutations([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]):</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">''</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> p)</div><div class="line">...</div><div class="line"><span class="number">1234</span></div><div class="line"><span class="number">1243</span></div><div class="line"><span class="number">1324</span></div><div class="line"><span class="number">1342</span></div><div class="line"><span class="number">1423</span></div><div class="line"><span class="number">1432</span></div><div class="line"><span class="number">2134</span></div><div class="line"><span class="number">2143</span></div><div class="line"><span class="number">2314</span></div><div class="line"><span class="number">2341</span></div><div class="line"><span class="number">2413</span></div><div class="line"><span class="number">2431</span></div><div class="line"><span class="number">3124</span></div><div class="line"><span class="number">3142</span></div><div class="line"><span class="number">3214</span></div><div class="line"><span class="number">3241</span></div><div class="line"><span class="number">3412</span></div><div class="line"><span class="number">3421</span></div><div class="line"><span class="number">4123</span></div><div class="line"><span class="number">4132</span></div><div class="line"><span class="number">4213</span></div><div class="line"><span class="number">4231</span></div><div class="line"><span class="number">4312</span></div><div class="line"><span class="number">4321</span></div></pre></td></tr></table></figure>
<h2 id="Chaining-iterables-itertools-chain-可链接迭代器"><a href="#Chaining-iterables-itertools-chain-可链接迭代器" class="headerlink" title="Chaining iterables (itertools.chain) / 可链接迭代器"></a>Chaining iterables (itertools.chain) / 可链接迭代器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> p <span class="keyword">in</span> itertools.chain(itertools.combinations(a, <span class="number">2</span>), itertools.combinations(a, <span class="number">3</span>)):</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> p</div><div class="line">...</div><div class="line">(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line">(<span class="number">1</span>, <span class="number">3</span>)</div><div class="line">(<span class="number">1</span>, <span class="number">4</span>)</div><div class="line">(<span class="number">2</span>, <span class="number">3</span>)</div><div class="line">(<span class="number">2</span>, <span class="number">4</span>)</div><div class="line">(<span class="number">3</span>, <span class="number">4</span>)</div><div class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>)</div><div class="line">(<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line">(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> subset <span class="keyword">in</span> itertools.chain.from_iterable(itertools.combinations(a, n) <span class="keyword">for</span> n <span class="keyword">in</span> range(len(a) + <span class="number">1</span>))</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> subset</div><div class="line">...</div><div class="line">()</div><div class="line">(<span class="number">1</span>,)</div><div class="line">(<span class="number">2</span>,)</div><div class="line">(<span class="number">3</span>,)</div><div class="line">(<span class="number">4</span>,)</div><div class="line">(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line">(<span class="number">1</span>, <span class="number">3</span>)</div><div class="line">(<span class="number">1</span>, <span class="number">4</span>)</div><div class="line">(<span class="number">2</span>, <span class="number">3</span>)</div><div class="line">(<span class="number">2</span>, <span class="number">4</span>)</div><div class="line">(<span class="number">3</span>, <span class="number">4</span>)</div><div class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>)</div><div class="line">(<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line">(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div></pre></td></tr></table></figure>
<h2 id="Grouping-rows-by-a-given-key-itertools-groupby-根据文件指定列类聚"><a href="#Grouping-rows-by-a-given-key-itertools-groupby-根据文件指定列类聚" class="headerlink" title="Grouping rows by a given key (itertools.groupby) / 根据文件指定列类聚"></a>Grouping rows by a given key (itertools.groupby) / 根据文件指定列类聚</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> itertools</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'contactlenses.csv'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> infile:</div><div class="line"><span class="meta">... </span>    data = [line.strip().split(<span class="string">','</span>) <span class="keyword">for</span> line <span class="keyword">in</span> infile]</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>data = data[<span class="number">1</span>:]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">print_data</span><span class="params">(rows)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">'\n'</span>.join(<span class="string">'\t'</span>.join(<span class="string">'&#123;: &lt;16&#125;'</span>.format(s) <span class="keyword">for</span> s <span class="keyword">in</span> row) <span class="keyword">for</span> row <span class="keyword">in</span> rows)</div><div class="line">...</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print_data(data)</div><div class="line">young               myope                   no                      reduced                 none</div><div class="line">young               myope                   no                      normal                  soft</div><div class="line">young               myope                   yes                     reduced                 none</div><div class="line">young               myope                   yes                     normal                  hard</div><div class="line">young               hypermetrope            no                      reduced                 none</div><div class="line">young               hypermetrope            no                      normal                  soft</div><div class="line">young               hypermetrope            yes                     reduced                 none</div><div class="line">young               hypermetrope            yes                     normal                  hard</div><div class="line">pre-presbyopic      myope                   no                      reduced                 none</div><div class="line">pre-presbyopic      myope                   no                      normal                  soft</div><div class="line">pre-presbyopic      myope                   yes                     reduced                 none</div><div class="line">pre-presbyopic      myope                   yes                     normal                  hard</div><div class="line">pre-presbyopic      hypermetrope            no                      reduced                 none</div><div class="line">pre-presbyopic      hypermetrope            no                      normal                  soft</div><div class="line">pre-presbyopic      hypermetrope            yes                     reduced                 none</div><div class="line">pre-presbyopic      hypermetrope            yes                     normal                  none</div><div class="line">presbyopic          myope                   no                      reduced                 none</div><div class="line">presbyopic          myope                   no                      normal                  none</div><div class="line">presbyopic          myope                   yes                     reduced                 none</div><div class="line">presbyopic          myope                   yes                     normal                  hard</div><div class="line">presbyopic          hypermetrope            no                      reduced                 none</div><div class="line">presbyopic          hypermetrope            no                      normal                  soft</div><div class="line">presbyopic          hypermetrope            yes                     reduced                 none</div><div class="line">presbyopic          hypermetrope            yes                     normal                  none</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>data.sort(key=itemgetter(<span class="number">-1</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> value, group <span class="keyword">in</span> itertools.groupby(data, <span class="keyword">lambda</span> r: r[<span class="number">-1</span>]):</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">'-----------'</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">'Group: '</span> + value</div><div class="line"><span class="meta">... </span>    print_data(group)</div><div class="line">...</div><div class="line">-----------</div><div class="line">Group: hard</div><div class="line">young               myope                   yes                     normal                  hard</div><div class="line">young               hypermetrope            yes                     normal                  hard</div><div class="line">pre-presbyopic      myope                   yes                     normal                  hard</div><div class="line">presbyopic          myope                   yes                     normal                  hard</div><div class="line">-----------</div><div class="line">Group: none</div><div class="line">young               myope                   no                      reduced                 none</div><div class="line">young               myope                   yes                     reduced                 none</div><div class="line">young               hypermetrope            no                      reduced                 none</div><div class="line">young               hypermetrope            yes                     reduced                 none</div><div class="line">pre-presbyopic      myope                   no                      reduced                 none</div><div class="line">pre-presbyopic      myope                   yes                     reduced                 none</div><div class="line">pre-presbyopic      hypermetrope            no                      reduced                 none</div><div class="line">pre-presbyopic      hypermetrope            yes                     reduced                 none</div><div class="line">pre-presbyopic      hypermetrope            yes                     normal                  none</div><div class="line">presbyopic          myope                   no                      reduced                 none</div><div class="line">presbyopic          myope                   no                      normal                  none</div><div class="line">presbyopic          myope                   yes                     reduced                 none</div><div class="line">presbyopic          hypermetrope            no                      reduced                 none</div><div class="line">presbyopic          hypermetrope            yes                     reduced                 none</div><div class="line">presbyopic          hypermetrope            yes                     normal                  none</div><div class="line">-----------</div><div class="line">Group: soft</div><div class="line">young               myope                   no                      normal                  soft</div><div class="line">young               hypermetrope            no                      normal                  soft</div><div class="line">pre-presbyopic      myope                   no                      normal                  soft</div><div class="line">pre-presbyopic      hypermetrope            no                      normal                  soft</div><div class="line">presbyopic          hypermetrope            no                      normal                  soft</div></pre></td></tr></table></figure>
<hr>
<p>转载自 <a href="http://sahandsaba.com/thirty-python-language-features-and-tricks-you-may-not-know.html" target="_blank" rel="external">30 Python Language Features and Tricks You May Not Know About</a><br>中文版 <a href="http://blog.jobbole.com/63320/" target="_blank" rel="external">30个有关Python的小技巧</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python基础： 深入理解 python 中的赋值、引用、拷贝、作用域]]></title>
      <url>https://draapho.github.io/2016/11/21/1618-python-variable/</url>
      <content type="html"><![CDATA[<p>转载自 <a href="https://my.oschina.net/leejun2005/blog/145911" target="_blank" rel="external">python基础（5）：深入理解 python 中的赋值、引用、拷贝、作用域</a></p>
<hr>
<h1 id="python的赋值"><a href="#python的赋值" class="headerlink" title="python的赋值"></a>python的赋值</h1><p>在 python 中赋值语句总是建立对象的引用值，而不是复制对象。因此，python 变量更像是指针，而不是数据存储区域，<br><img src="https://draapho.github.io/images/1618/python_point_1.jpg" alt="python_point"><br>这点和大多数 OO 语言类似吧，比如 C++、java 等 ~</p>
<h1 id="先来看个问题吧："><a href="#先来看个问题吧：" class="headerlink" title="先来看个问题吧："></a>先来看个问题吧：</h1><h2 id="一个赋值问题"><a href="#一个赋值问题" class="headerlink" title="一个赋值问题"></a>一个赋值问题</h2><p>在Python中，令<code>values=[0,1,2];values[1]=values</code>,为何结果是<code>[0,[...],2]</code>? <a href="http://www.zhihu.com/question/21000872" target="_blank" rel="external">链接</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>values = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>values[<span class="number">1</span>] = values</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>values</div><div class="line">[<span class="number">0</span>, [...], <span class="number">2</span>]       <span class="comment"># 实际结果, 为何要赋值无限次?</span></div><div class="line">[<span class="number">0</span>, [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], <span class="number">2</span>]   <span class="comment"># 预想结果</span></div></pre></td></tr></table></figure>
<p>可以说 Python 没有赋值，只有引用。你这样相当于创建了一个引用自身的结构，所以导致了无限循环。为了理解这个问题，有个基本概念需要搞清楚。</p>
<p>Python 没有「变量」，我们平时所说的变量其实只是「标签」，是引用。</p>
<p>执行 <code>values = [0, 1, 2]</code> 的时候，Python 做的事情是首先创建一个列表对象 [0, 1, 2]，然后给它贴上名为 values 的标签。</p>
<p>如果随后又执行 <code>values = [3, 4, 5]</code> 的话，Python 做的事情是创建另一个列表对象 [3, 4, 5]，然后把刚才那张名为 values 的标签从前面的 [0, 1, 2] 对象上撕下来，重新贴到 [3, 4, 5] 这个对象上。</p>
<p>至始至终，并没有一个叫做 values 的列表对象容器存在，Python 也没有把任何对象的值复制进 values 去。过程如图所示：</p>
<p><img src="https://draapho.github.io/images/1618/python_point_2.jpg" alt="python_point"></p>
<p>执行 <code>values[1] = values</code> 的时候，Python 做的事情则是把 values 这个标签所引用的列表对象的第二个元素指向 values 所引用的列表对象本身。执行完毕后，values 标签还是指向原来那个对象，只不过那个对象的结构发生了变化，从之前的列表 [0, 1, 2] 变成了 [0, ?, 2]，而这个 ? 则是指向那个对象本身的一个引用。如图所示：</p>
<p><img src="https://draapho.github.io/images/1618/python_point_3.jpg" alt="python_point"></p>
<h2 id="浅复制及其风险"><a href="#浅复制及其风险" class="headerlink" title="浅复制及其风险"></a>浅复制及其风险</h2><p>要达到你所需要的效果，即得到 [0, [0, 1, 2], 2] 这个对象，你不能直接将 values[1] 指向 values 引用的对象本身，而是需要吧 [0, 1, 2] 这个对象「复制」一遍，得到一个新对象，再将 values[1] 指向这个复制后的对象。Python 里面复制对象的操作因对象类型而异，复制列表 values 的操作是</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">values[:] <span class="comment">#生成对象的拷贝或者是复制序列，不再是引用和共享变量，但此法只能顶层复制</span></div></pre></td></tr></table></figure>
<p>所以你需要执行 <code>values[1] = values[:]</code> </p>
<p>Python 做的事情是，先 dereference 得到 values 所指向的对象 [0, 1, 2]，然后执行 [0, 1, 2][:] 复制操作得到一个新的对象，内容也是 [0, 1, 2]，然后将 values 所指向的列表对象的第二个元素指向这个复制二来的列表对象，最终 values 指向的对象是 [0, [0, 1, 2], 2]。过程如图所示：</p>
<p><img src="https://draapho.github.io/images/1618/python_point_4.jpg" alt="python_point"></p>
<p>往更深处说，values[:] 复制操作是所谓的「浅复制」(shallow copy)，当列表对象有嵌套的时候也会产生出乎意料的错误，比如为何要赋值无限次</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = [<span class="number">0</span>, [<span class="number">1</span>, <span class="number">2</span>], <span class="number">3</span>]</div><div class="line">b = a[:]</div><div class="line">a[<span class="number">0</span>] = <span class="number">8</span></div><div class="line">a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">9</span></div></pre></td></tr></table></figure>
<p>问：此时 a 和 b 分别是多少？</p>
<p>正确答案是 a 为 [8, [1, 9], 3]，b 为 [0, [1, 9], 3]。发现没？b 的第二个元素也被改变了。想想是为什么？不明白的话看下图</p>
<p><img src="https://draapho.github.io/images/1618/python_point_5.jpg" alt="python_point"></p>
<h2 id="深复制"><a href="#深复制" class="headerlink" title="深复制"></a>深复制</h2><p>正确的复制嵌套元素的方法是进行「深复制」(deep copy)，方法是</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> copy</div><div class="line"></div><div class="line">a = [<span class="number">0</span>, [<span class="number">1</span>, <span class="number">2</span>], <span class="number">3</span>]</div><div class="line">b = copy.deepcopy(a)</div><div class="line">a[<span class="number">0</span>] = <span class="number">8</span></div><div class="line">a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">9</span></div></pre></td></tr></table></figure>
<p><img src="https://draapho.github.io/images/1618/python_point_6.jpg" alt="python_point"></p>
<h1 id="引用-VS-拷贝："><a href="#引用-VS-拷贝：" class="headerlink" title="引用 VS 拷贝："></a>引用 VS 拷贝：</h1><ul>
<li>没有限制条件的分片表达式（L[:]）能够复制序列，但此法只能浅层复制。</li>
<li>字典 copy 方法，D.copy() 能够复制字典，但此法只能浅层复制</li>
<li>有些内置函数，例如 list，能够生成拷贝 list(L)</li>
<li>copy 标准库模块能够生成完整拷贝：deepcopy 本质上是递归 copy</li>
<li>对于不可变对象和可变对象来说，浅复制都是复制的引用，只是因为复制不变对象和复制不变对象的引用是等效的（因为对象不可变，当改变时会新建对象重新赋值）。所以看起来浅复制只复制不可变对象（整数，实数，字符串等），对于可变对象，浅复制其实是创建了一个对于该对象的引用，也就是说只是给同一个对象贴上了另一个标签而已。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">L = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">D = &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>&#125;</div><div class="line">A = L[:]</div><div class="line">B = D.copy()</div><div class="line"><span class="keyword">print</span> <span class="string">"L, D"</span></div><div class="line"><span class="keyword">print</span>  L, D</div><div class="line"><span class="keyword">print</span> <span class="string">"A, B"</span></div><div class="line"><span class="keyword">print</span> A, B</div><div class="line"><span class="keyword">print</span> <span class="string">"--------------------"</span></div><div class="line">A[<span class="number">1</span>] = <span class="string">'NI'</span></div><div class="line">B[<span class="string">'c'</span>] = <span class="string">'spam'</span></div><div class="line"><span class="keyword">print</span> <span class="string">"L, D"</span></div><div class="line"><span class="keyword">print</span>  L, D</div><div class="line"><span class="keyword">print</span> <span class="string">"A, B"</span></div><div class="line"><span class="keyword">print</span> A, B</div><div class="line"></div><div class="line"></div><div class="line">L, D</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</div><div class="line">A, B</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</div><div class="line">--------------------</div><div class="line">L, D</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</div><div class="line">A, B</div><div class="line">[<span class="number">1</span>, <span class="string">'NI'</span>, <span class="number">3</span>] &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'c'</span>: <span class="string">'spam'</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</div></pre></td></tr></table></figure>
<h1 id="增强赋值以及共享引用："><a href="#增强赋值以及共享引用：" class="headerlink" title="增强赋值以及共享引用："></a>增强赋值以及共享引用：</h1><p>x = x + y，x 出现两次，必须执行两次，性能不好，合并必须新建对象 x，然后复制两个列表合并</p>
<p>属于复制/拷贝</p>
<p>x += y，x 只出现一次，也只会计算一次，性能好，不生成新对象，只在内存块末尾增加元素。</p>
<p>当 x、y 为list时， += 会自动调用 extend 方法进行合并运算，in-place change。</p>
<p>属于共享引用</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">L = [<span class="number">1</span>, <span class="number">2</span>]</div><div class="line">M = L</div><div class="line">L = L + [<span class="number">3</span>, <span class="number">4</span>]</div><div class="line"><span class="keyword">print</span> L, M</div><div class="line"><span class="keyword">print</span> <span class="string">"-------------------"</span></div><div class="line">L = [<span class="number">1</span>, <span class="number">2</span>]</div><div class="line">M = L</div><div class="line">L += [<span class="number">3</span>, <span class="number">4</span>]</div><div class="line"><span class="keyword">print</span> L, M</div><div class="line"></div><div class="line"></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>] [<span class="number">1</span>, <span class="number">2</span>]</div><div class="line">-------------------</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>] [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div></pre></td></tr></table></figure>
<h1 id="python-从-2k-到-3k，语句变函数引发的变量作用域问题"><a href="#python-从-2k-到-3k，语句变函数引发的变量作用域问题" class="headerlink" title="python 从 2k 到 3k，语句变函数引发的变量作用域问题"></a>python 从 2k 到 3k，语句变函数引发的变量作用域问题</h1><p>先看段代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    a = <span class="keyword">False</span></div><div class="line">    <span class="keyword">exec</span> (<span class="string">"a = True"</span>)</div><div class="line">    <span class="keyword">print</span> (<span class="string">"a = "</span>, a)</div><div class="line">test()</div><div class="line"></div><div class="line">b = <span class="keyword">False</span></div><div class="line"><span class="keyword">exec</span> (<span class="string">"b = True"</span>)</div><div class="line"><span class="keyword">print</span> (<span class="string">"b = "</span>, b)</div></pre></td></tr></table></figure>
<p>在 python 2k 和 3k 下 你会发现他们的结果不一样：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">2</span>K：</div><div class="line">a =  <span class="keyword">True</span></div><div class="line">b =  <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="number">3</span>K：</div><div class="line">a =  <span class="keyword">False</span></div><div class="line">b =  <span class="keyword">True</span></div></pre></td></tr></table></figure>
<p>这是为什么呢？</p>
<p>因为 3k 中 exec 由语句变成函数了，而在函数中变量默认都是局部的，也就是说<br>你所见到的两个 a，是两个不同的变量，分别处于不同的命名空间中，而不会冲突。</p>
<p>具体参考 《learning python》P331-P332</p>
<p>知道原因了，我们可以这么改改：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    a = <span class="keyword">False</span></div><div class="line">    ldict = locals()</div><div class="line">    exec(<span class="string">"a=True"</span>,globals(),ldict)</div><div class="line">    a = ldict[<span class="string">'a'</span>]</div><div class="line">    print(a)</div><div class="line"></div><div class="line">test()</div><div class="line"></div><div class="line">b = <span class="keyword">False</span></div><div class="line">exec(<span class="string">"b = True"</span>, globals())</div><div class="line">print(<span class="string">"b = "</span>, b)</div></pre></td></tr></table></figure>
<p>这是一个典型的 python 2k 移植到 3k 不兼容的案例，类似的还有很多，也算是移植的坑吧~</p>
<p>具体的 2k 与 3k 有哪些差异可以看这里： <a href="http://woodpecker.org.cn/diveintopython3/porting-code-to-python-3-with-2to3.html" target="_blank" rel="external"><strong>使用 2to3 将代码移植到 Python 3</strong></a></p>
<h1 id="深入理解-python-变量作用域及其陷阱"><a href="#深入理解-python-变量作用域及其陷阱" class="headerlink" title="深入理解 python 变量作用域及其陷阱"></a>深入理解 python 变量作用域及其陷阱</h1><h2 id="可变对象-amp-不可变对象"><a href="#可变对象-amp-不可变对象" class="headerlink" title="可变对象 &amp; 不可变对象"></a>可变对象 &amp; 不可变对象</h2><ul>
<li>在Python中，对象分为两种：可变对象和不可变对象，</li>
<li>不可变对象包括int，float，long，str，tuple等，可变对象包括list，set，dict等。</li>
<li>需要注意的是：这里说的不可变指的是值的不可变。对于不可变类型的变量，如果要更改变量，则会创建一个新值，把变量绑定到新值上，而旧值如果没有被引用就等待垃圾回收。另外，不可变的类型可以计算hash值，作为字典的key。</li>
<li>可变类型数据对对象操作的时候，不需要再在其他地方申请内存，只需要在此对象后面连续申请(+/-)即可，也就是它的内存地址会保持不变，但区域会变长或者变短。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">'xianglong.me'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</div><div class="line"><span class="number">140443303134352</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">'1saying.com'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</div><div class="line"><span class="number">140443303131776</span></div><div class="line"><span class="comment"># 重新赋值之后，变量a的内存地址已经变了</span></div><div class="line"><span class="comment"># 'xianglong.me'是str类型，不可变，所以赋值操作知识重新创建了str '1saying.com'对象，然后将变量a指向了它</span></div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(a_list)</div><div class="line"><span class="number">140443302951680</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a_list.append(<span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(a_list)</div><div class="line"><span class="number">140443302951680</span></div><div class="line"><span class="comment"># list重新赋值之后，变量a_list的内存地址并未改变</span></div><div class="line"><span class="comment"># [1, 2, 3]是可变的，append操作只是改变了其value，变量a_list指向没有变</span></div></pre></td></tr></table></figure>
<h2 id="函数值传递"><a href="#函数值传递" class="headerlink" title="函数值传递"></a>函数值传递</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_int</span><span class="params">(a)</span>:</span></div><div class="line">    a += <span class="number">4</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_list</span><span class="params">(a_list)</span>:</span></div><div class="line">    a_list[<span class="number">0</span>] = <span class="number">4</span></div><div class="line"> </div><div class="line">t = <span class="number">0</span></div><div class="line">func_int(t)</div><div class="line"><span class="keyword">print</span> t</div><div class="line"><span class="comment"># output: 0</span></div><div class="line"> </div><div class="line">t_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">func_list(t_list)</div><div class="line"><span class="keyword">print</span> t_list</div><div class="line"><span class="comment"># output: [4, 2, 3]</span></div></pre></td></tr></table></figure>
<p>对于上面的输出，不少Python初学者都比较疑惑：第一个例子看起来像是传值，而第二个例子确实传引用。其实，解释这个问题也非常容易，主要是因为可变对象和不可变对象的原因：对于可变对象，对象的操作不会重建对象，而对于不可变对象，每一次操作就重建新的对象。</p>
<p>在函数参数传递的时候，Python其实就是把参数里传入的变量对应的对象的引用依次赋值给对应的函数内部变量。参照上面的例子来说明更容易理解，func_int中的局部变量”a”其实是全部变量”t”所指向对象的另一个引用，由于整数对象是不可变的，所以当func_int对变量”a”进行修改的时候，实际上是将局部变量”a”指向到了整数对象”1”。所以很明显，func_list修改的是一个可变的对象，局部变量”a”和全局变量”t_list”指向的还是同一个对象。</p>
<h2 id="为什么修改全局的dict变量不用global关键字"><a href="#为什么修改全局的dict变量不用global关键字" class="headerlink" title="为什么修改全局的dict变量不用global关键字"></a>为什么修改全局的dict变量不用global关键字</h2><p>为什么修改字典d的值不用global关键字先声明呢？</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'foo'</span></div><div class="line">d = &#123;<span class="string">'a'</span>:<span class="number">1</span>&#125;</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></div><div class="line">    s = <span class="string">'bar'</span></div><div class="line">    d[<span class="string">'b'</span>] = <span class="number">2</span></div><div class="line">f()</div><div class="line"><span class="keyword">print</span> s  <span class="comment"># foo</span></div><div class="line"><span class="keyword">print</span> d  <span class="comment"># &#123;'a': 1, 'b': 2&#125;</span></div></pre></td></tr></table></figure>
<p>这是因为，在s = ‘bar’这句中，它是“有歧义的“，因为它既可以是表示引用全局变量s，也可以是创建一个新的局部变量，所以在python中，默认它的行为是创建局部变量，除非显式声明global，global定义的本地变量会变成其对应全局变量的一个别名，即是同一个变量。</p>
<p>在d[‘b’]=2这句中，它是“明确的”，因为如果把d当作是局部变量的话，它会报KeyError，所以它只能是引用全局的d,故不需要多此一举显式声明global。</p>
<p>上面这两句赋值语句其实是不同的行为，一个是<strong>rebinding（不可变对象）</strong>, 一个是<strong>mutation（可变对象）</strong>.</p>
<p>但是如果是下面这样：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">d = &#123;<span class="string">'a'</span>:<span class="number">1</span>&#125;</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></div><div class="line">    d = &#123;&#125;</div><div class="line">    d[<span class="string">'b'</span>] = <span class="number">2</span></div><div class="line">f()</div><div class="line"><span class="keyword">print</span> d  <span class="comment"># &#123;'a': 1&#125;</span></div></pre></td></tr></table></figure>
<p>在d = {}这句，它是”有歧义的“了，所以它是创建了局部变量d，而不是引用全局变量d，所以d[‘b’]=2也是操作的局部变量。</p>
<p>推而远之，这一切现象的本质就是”它是否是明确的“。</p>
<p>仔细想想，就会发现不止dict不需要global，所有”明确的“东西都不需要global。因为int类型str类型之类的不可变对象，每一次操作就重建新的对象，他们只有一种修改方法，即x = y， 恰好这种修改方法同时也是创建变量的方法，所以产生了歧义，不知道是要修改还是创建。而dict/list/对象等可变对象，操作不会重建对象，可以通过dict[‘x’]=y或list.append()之类的来修改，跟创建变量不冲突，不产生歧义，所以都不用显式global。</p>
<h2 id="可变对象-list-的-和-append-extend-差别在哪？"><a href="#可变对象-list-的-和-append-extend-差别在哪？" class="headerlink" title="可变对象 list 的 = 和 append/extend 差别在哪？"></a>可变对象 list 的 = 和 append/extend 差别在哪？</h2><p>接上面 5.3 的理论，下面咱们再看一例常见的错误：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="comment"># 测试utf-8编码</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line">list_a = []</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span>:</span></div><div class="line">    list_a = [<span class="number">1</span>]      <span class="comment">## 语句1</span></div><div class="line">a()</div><div class="line"><span class="keyword">print</span> list_a    <span class="comment"># []</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"======================"</span></div><div class="line"></div><div class="line">list_b = []</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">()</span>:</span></div><div class="line">    list_b.append(<span class="number">1</span>)    <span class="comment">## 语句2</span></div><div class="line">b()</div><div class="line"><span class="keyword">print</span> list_b    <span class="comment"># [1]</span></div></pre></td></tr></table></figure>
<p>大家可以看到为什么 语句1 不能改变 list_a 的值，而 语句2 却可以？他们的差别在哪呢？</p>
<p><strong>因为 = 创建了局部变量，而 .append() 或者 .extend() 重用了全局变量。</strong></p>
<h2 id="陷阱：使用可变的默认参数"><a href="#陷阱：使用可变的默认参数" class="headerlink" title="陷阱：使用可变的默认参数"></a>陷阱：使用可变的默认参数</h2><p>我多次见到过如下的代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b, c=[])</span>:</span></div><div class="line"><span class="comment"># append to c</span></div><div class="line"><span class="comment"># do some more stuff</span></div></pre></td></tr></table></figure>
<p>永远不要使用可变的默认参数，可以使用如下的代码代替：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b, c=None)</span>:</span></div><div class="line">    <span class="keyword">if</span> c <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        c = []</div><div class="line">    <span class="comment"># append to c</span></div><div class="line">    <span class="comment"># do some more stuff</span></div></pre></td></tr></table></figure>
<p>‍‍与其解释这个问题是什么，不如展示下使用可变默认参数的影响：‍‍</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">In[<span class="number">2</span>]: <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b, c=[])</span>:</span></div><div class="line"><span class="meta">... </span>       c.append(a)</div><div class="line"><span class="meta">... </span>       c.append(b)</div><div class="line"><span class="meta">... </span>       print(c)</div><div class="line">...</div><div class="line">In[<span class="number">3</span>]: foo(<span class="number">1</span>, <span class="number">1</span>)</div><div class="line">[<span class="number">1</span>, <span class="number">1</span>]</div><div class="line">In[<span class="number">4</span>]: foo(<span class="number">1</span>, <span class="number">1</span>)</div><div class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</div><div class="line">In[<span class="number">5</span>]: foo(<span class="number">1</span>, <span class="number">1</span>)</div><div class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</div></pre></td></tr></table></figure>
<p>同一个变量c在函数调用的每一次都被反复引用。这可能有一些意想不到的后果。</p>
<h1 id="REF："><a href="#REF：" class="headerlink" title="REF："></a>REF：</h1><ul>
<li><a href="http://www.zhihu.com/question/21000872/answer/16856382" target="_blank" rel="external">《learning python》：P130、P134、P202、P204 、P245</a></li>
<li><a href="http://blog.segmentfault.com/sunisdown/1190000000640834" target="_blank" rel="external">理解 Python 的 LEGB</a></li>
<li><a href="http://cenalulu.github.io/python/default-mutable-arguments/" target="_blank" rel="external">Python函数参数默认值的陷阱和原理深究</a></li>
<li><a href="http://python.jobbole.com/81564/" target="_blank" rel="external">潜在的Python陷阱</a></li>
<li><a href="http://segmentfault.com/a/1190000000743526" target="_blank" rel="external">陷阱！python参数默认值</a></li>
<li><a href="http://xianglong.me/article/python-variable-quote-copy-and-scope/" target="_blank" rel="external">Python中的变量、引用、拷贝和作用域</a></li>
<li><a href="http://www.cnblogs.com/wanxsb/archive/2013/05/07/3064783.html" target="_blank" rel="external">Python入门基础知识(1) :locals() 和globals()</a></li>
<li><a href="http://bit.ly/29vnLvz" target="_blank" rel="external">Python程序员写代码时应该避免的16个“坑”</a></li>
</ul>
<hr>
<p>转载自 <a href="https://my.oschina.net/leejun2005/blog/145911" target="_blank" rel="external">python基础（5）：深入理解 python 中的赋值、引用、拷贝、作用域</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python的第一个小程序, 蓝牙及串口终端]]></title>
      <url>https://draapho.github.io/2016/11/16/1617-python-terminal/</url>
      <content type="html"><![CDATA[<h1 id="环境与资源"><a href="#环境与资源" class="headerlink" title="环境与资源"></a>环境与资源</h1><ul>
<li>windows 开发环境</li>
<li>python 2.7</li>
<li>pywin32, windows support</li>
<li>pyserial, serial port, com</li>
<li>pygatt, ble</li>
<li>pyinstaller, generate exe file</li>
<li>qt 4.8 (pyqt 4.11), GUI</li>
<li>Bluegiga 的 <a href="http://www.silabs.com/products/wireless/bluetooth/bluetooth-smart-modules/Pages/bled112-bluetooth-smart-dongle.aspx" target="_blank" rel="external">BLED112 Bluetooth Smart Dongle</a></li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul>
<li>略过 python 的安装</li>
<li>安装 pywin32: <code>pip install pygatt</code></li>
<li>安装 pyserial: <code>pip install pyserial</code></li>
<li>安装 pygatt: <code>pip install pygatt</code>, 事实上, pygatt依赖于pyserial. 因此直接装pygatt也可以</li>
<li>安装 pyinstaller: <code>pip install pyinstaller</code></li>
<li>下载并安装 <a href="https://riverbankcomputing.com/software/pyqt/download" target="_blank" rel="external">PyQt4-4.11.4-gpl-Py2.7-Qt4.8.7.exe</a><ul>
<li>注意匹配python版本和32位/64位window</li>
<li>pyqt5 仅支持 python3 以上版本. 我用 python2.7 是因为需要使用其它的库, 如 <a href="https://labjack.com/" target="_blank" rel="external">LabJack</a></li>
<li><code>Qt Designer</code> 用于设计UI, 文件格式为<code>.ui</code>. 它一般位于 <code>C:\Python27\Lib\site-packages\PyQt4\designer.exe</code>. 最终取决于Python安装路径</li>
<li><code>pyuic4.bat</code> 用于将 <code>.ui</code> 文件转换为 <code>.py</code> 文件. 它一般位于 <code>C:\Python27\Lib\site-packages\PyQt4\</code></li>
<li>把 <code>pyuic4.bat</code> 的路径放入系统环境变量, 这样后续就能方便使用这个指令了</li>
</ul>
</li>
<li>windows平台需要借助 <a href="http://www.silabs.com/products/wireless/bluetooth/bluetooth-smart-modules/Pages/bled112-bluetooth-smart-dongle.aspx" target="_blank" rel="external">BLED112 Bluetooth Smart Dongle</a> 这么一个设备才能实现BLE通讯</li>
</ul>
<h1 id="UI设计"><a href="#UI设计" class="headerlink" title="UI设计"></a>UI设计</h1><ul>
<li>可以参考我的另一篇文章 <a href="https://draapho.github.io/2016/10/20/1612-python-pyqtui/">PyQt 的交互操作</a></li>
</ul>
<h2 id="PyQt-入门"><a href="#PyQt-入门" class="headerlink" title="PyQt 入门"></a>PyQt 入门</h2><ul>
<li>为什么选择PyQt? (注意, 如果商用, PyQt是需要授权使用的)</li>
<li><a href="http://ojs.pythonpapers.org/index.php/tpp/article/view/61/57" target="_blank" rel="external">PyGTK, PyQT, Tkinter and wxPython comparison</a></li>
<li>PyQt使用入门:</li>
<li><a href="https://www.tutorialspoint.com/pyqt/index.htm" target="_blank" rel="external">PyQt Tutorial</a>, 新手上路, 建议看到 <code>Using Qt Designer</code> 即可</li>
<li><a href="http://www.training.prace-ri.eu/uploads/tx_pracetmo/QtGuiIntro.pdf" target="_blank" rel="external">Introduction to GUI development using Qt</a>, 整体理解Qt设计思路</li>
<li><a href="http://www.qaulau.com/books/PyQt4_Tutorial/" target="_blank" rel="external">PyQt4教程</a>, 中文版, 分类很细, 便于查阅范例</li>
</ul>
<h2 id="使用-Qt-Designer-设计GUI并生成-gui-py"><a href="#使用-Qt-Designer-设计GUI并生成-gui-py" class="headerlink" title="使用 Qt Designer 设计GUI并生成 gui.py"></a>使用 Qt Designer 设计GUI并生成 gui.py</h2><ul>
<li>使用 <code>Qt Designer</code> 设计 GUI 框架, 并保存<code>gui.ui</code>到项目路径, 如 <code>D:\ble terminal</code></li>
<li>打开cmd终端, 并切换到 <code>D:\ble terminal</code></li>
<li><code>pyuic4.bat -x -o gui.py gui.ui</code> 生成<code>gui.py</code>文件,<ul>
<li><code>-x</code> 表示可执行, 即包含<code>if __name__ == &quot;__main__&quot;</code>这部分代码</li>
<li><code>-o</code> 表示目标文件名</li>
<li>也可以使用命令行 <code>pyuic4.bat demo.ui &gt; demo.py</code>, 效果等同于 <code>pyuic4.bat -o gui.py gui.ui</code></li>
</ul>
</li>
<li>创建 <code>gui_action.py</code> 文件, 用于书写交互操作部分的代码, 基本格式如下<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> gui</div><div class="line"><span class="keyword">from</span> PyQt4.QtGui <span class="keyword">import</span> QApplication, QMainWindow</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GuiAction</span><span class="params">(QMainWindow, gui.Ui_MainWindow)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(self.__class__, self).__init__()</div><div class="line">        self.ui.setupUi(self)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    gui_action = GuiAction()</div><div class="line">    gui_action.show()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="UI线程通讯"><a href="#UI线程通讯" class="headerlink" title="UI线程通讯"></a>UI线程通讯</h1><ul>
<li>可以参考我的另一篇文章 <a href="https://draapho.github.io/2016/10/20/1612-python-pyqtui/">PyQt 的交互操作</a></li>
<li>PyQt的信号和槽, 是一种通讯机制, 可以用于QObject之间的信息交互. 可以参考:<ul>
<li><a href="http://www.training.prace-ri.eu/uploads/tx_pracetmo/QtGuiIntro.pdf" target="_blank" rel="external">Introduction to GUI development using Qt</a></li>
<li><a href="https://www.linuxzen.com/pyqt4-xin-hao-he-cao-xiang-jie.html" target="_blank" rel="external">PyQt4 信号和槽详解</a></li>
</ul>
</li>
<li>参考 <a href="https://nikolak.com/pyqt-threading-tutorial/" target="_blank" rel="external">PyQt: Threading Basics Tutorial</a></li>
<li>关于 QThread 高阶应用和注意事项, 可参考 <a href="http://blog.csdn.net/u011012932/article/details/52186626" target="_blank" rel="external">Qt之QThread（深入理解）</a></li>
<li>本程序使用的线程通讯框架如下:</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GuiAction</span><span class="params">(QMainWindow, gui.Ui_MainWindow)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        ...</div><div class="line">        <span class="comment"># queue_ble 用于传递数据给ble线程 (这样用不好, 可能有风险)</span></div><div class="line">        self.queue_ble = Queue.Queue()</div><div class="line">        <span class="comment"># thread_ble 为 ble 处理线程</span></div><div class="line">        self.thread_ble = ThreadBleServer(self.queue_ble)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cmd_send</span><span class="params">(self)</span>:</span></div><div class="line">        cmd = self.lineEdit.text()</div><div class="line">        <span class="comment"># 通过 queue_ble 传递数据给ble线程</span></div><div class="line">        self.queue_ble.put(cmd)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ble_start</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># 简单理解, 就是将 self.ble_handle 设置为 thread_ble 信号触发后的处理函数</span></div><div class="line">        <span class="comment"># 使用 PyQt_PyObject 作为参数类型具有更好的通用性, 可以传递任何数据.</span></div><div class="line">        self.connect(self.thread_ble, SIGNAL(</div><div class="line">            <span class="string">"ble_handle(PyQt_PyObject, PyQt_PyObject)"</span>), self.ble_handle)</div><div class="line">        <span class="comment"># 启动 ble 处理线程</span></div><div class="line">        self.thread_ble.start()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ble_stop</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># 用于终止 thread_ble 线程</span></div><div class="line">        self.thread_ble.stop_ble()</div><div class="line">        self.disconnect(self.thread_ble, SIGNAL(</div><div class="line">            <span class="string">"ble_handle(PyQt_PyObject, PyQt_PyObject)"</span>), self.ble_handle)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadBleServer</span><span class="params">(QThread)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, queue)</span>:</span></div><div class="line">        QThread.__init__(self)</div><div class="line">        self.stop = <span class="keyword">False</span></div><div class="line">        self.queue = queue</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop_ble</span><span class="params">(self)</span>:</span></div><div class="line">        self.stop = <span class="keyword">True</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.stop:</div><div class="line">            <span class="comment"># 这是一个循环任务, 每100ms执行一次</span></div><div class="line">            time.sleep(<span class="number">0.1</span>)</div><div class="line">            ...</div><div class="line">            <span class="comment"># 非阻塞查询queue队列</span></div><div class="line">            command = str(self.queue.get(<span class="keyword">False</span>))</div><div class="line">            do something after get command ...</div><div class="line">            ...</div><div class="line">            <span class="comment"># 发送信号给主线程</span></div><div class="line">            self.emit(SIGNAL(<span class="string">"ble_handle(PyQt_PyObject, PyQt_PyObject)"</span>), <span class="string">"ble_rx_timeout"</span>, <span class="string">""</span>)</div><div class="line">            ...</div></pre></td></tr></table></figure>
<ul>
<li>上述代码有一个未知风险, 在 QThread 中用了属于 python threading 的 Queque. 更稳妥的方法应该使用 PyQt 的信号和槽解决这个问题, 即<br><code>self.connect(self.cmd_send, SIGNAL(&quot;send_cmd(PyQt_PyObject)&quot;), self.thread_ble)</code></li>
<li>关于 QThread 和 Threading, 简单而言, 如果需要和PyQt打交道, 那就用 QThread, 否则就用 python 自带的 Threading</li>
<li><a href="https://github.com/draapho/ble-terminal" target="_blank" rel="external">全部源码</a> 在 github, 注意, 作为一个练习用程序, 上述错误我没有修改! 目前为止, 没看到不良影响.</li>
</ul>
<h1 id="生成exe文件"><a href="#生成exe文件" class="headerlink" title="生成exe文件"></a>生成exe文件</h1><ul>
<li>可以创建一个 <code>ble-terminal.bat</code> 文件, 点击即可运行. 但终究是显的不够专业, 没法给老板和客户交代. 内容如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@echo off</div><div class="line"></div><div class="line">start pythonw gui_action.py</div><div class="line">exit</div></pre></td></tr></table></figure>
<ul>
<li>windows下, 使用起来最简单的就是 <code>PyInstaller</code> 了. 基本一条指令, 然后需要的关联库全自动解决</li>
<li>其它方案有 <code>Py2Exe</code>, 需要自己配置dll之类的. <code>Py2App</code> 给Mac电脑用的. <code>cx_Freeze</code> 优点是跨平台, 看了下需要先做配置文件.</li>
<li>用一条指令即可生成 <code>.exe</code> 文件<br><code>pyinstaller.exe --windowed gui_action.py</code></li>
<li>另外还可以指定图标, 设置版本信息(需要写好<code>version.txt</code>), 将所有内容绑到单文件. 指令为:<br><code>pyinstaller.exe --onefile --windowed --icon=app.ico --version-file=version.txt gui_action.py</code></li>
<li>详情可参考 <a href="https://mborgerson.com/creating-an-executable-from-a-python-script" target="_blank" rel="external">Creating an Executable from a Python Script</a></li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用python实现BLE通讯]]></title>
      <url>https://draapho.github.io/2016/11/15/1616-python-ble/</url>
      <content type="html"><![CDATA[<h1 id="环境与资源"><a href="#环境与资源" class="headerlink" title="环境与资源"></a>环境与资源</h1><ul>
<li>windows 开发环境</li>
<li>python 2.7</li>
<li><a href="https://github.com/peplin/pygatt" target="_blank" rel="external">pygatt</a></li>
<li>Bluegiga 的 <a href="http://www.silabs.com/products/wireless/bluetooth/bluetooth-smart-modules/Pages/bled112-bluetooth-smart-dongle.aspx" target="_blank" rel="external">BLED112 Bluetooth Smart Dongle</a></li>
</ul>
<h1 id="闲扯"><a href="#闲扯" class="headerlink" title="闲扯"></a>闲扯</h1><ul>
<li>背景, 需要在windows上做一款基于BLE通讯的软件. 第一反应, 痛苦.</li>
<li>使用的是 Bluegiga 的BLE方案, 协议栈芯片内置, 串口通讯即可, 并寻得 <a href="https://github.com/jrowberg/bglib" target="_blank" rel="external">bglib</a> 这么一个python库, 还有范例!</li>
<li>不幸的是, 自己功力不够, 基于此函数库开发出的BLE通讯, 非常不稳定… 没有痛下决心自己写, 于是继续尝试寻找资源.</li>
<li>觅得 <a href="https://github.com/peplin/pygatt" target="_blank" rel="external">pygatt</a> 方案, 三平台全支持! windows 和 mac 下正是基于bglib实现的!</li>
<li><a href="https://github.com/peplin/pygatt" target="_blank" rel="external">pygatt</a> 是python的第三方库, 说明文档比较少, 测试了一下非常好用!</li>
</ul>
<h1 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h1><ul>
<li>DEVICE_ADDRESS, 默认的需要connect的BLE地址</li>
<li>基于 Bluegiga 的 <code>cable_replacement</code> 范例, 其 characteristic uuid 为 <code>e7add780-b042-4876-aae1-112855353cc1</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pygatt</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> binascii</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Many devices, e.g. Fitbit, use random addressing - this is required to connect.</span></div><div class="line">ADDRESS_TYPE = pygatt.BLEAddressType.random</div><div class="line">DEVICE_ADDRESS = <span class="string">"00:07:80:BF:6A:73"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">indication_callback</span><span class="params">(handle, value)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"indication, handle %d: %s "</span> % (handle, value)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pytest</span><span class="params">(address=DEVICE_ADDRESS, type=pygatt.BLEAddressType.public)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        adapter = pygatt.BGAPIBackend()</div><div class="line">        adapter.start()</div><div class="line"></div><div class="line">        <span class="keyword">print</span> <span class="string">"===== adapter.scan() ====="</span></div><div class="line">        devices = adapter.scan()</div><div class="line">        <span class="keyword">for</span> dev <span class="keyword">in</span> devices:</div><div class="line">            <span class="comment"># print dev</span></div><div class="line">            <span class="keyword">print</span> <span class="string">"address: %s, name: %s "</span> % (dev[<span class="string">'address'</span>], dev[<span class="string">'name'</span>])</div><div class="line"></div><div class="line">        <span class="keyword">print</span> <span class="string">"===== adapter.connect() ====="</span></div><div class="line">        device = adapter.connect(address, address_type=type)</div><div class="line">        <span class="keyword">print</span> <span class="string">"address: "</span> + str(device._address)</div><div class="line">        <span class="keyword">print</span> <span class="string">"handle : "</span> + str(device._handle)</div><div class="line">        <span class="keyword">print</span> <span class="string">"rssi   : "</span> + str(device.get_rssi())</div><div class="line"></div><div class="line">        <span class="keyword">print</span> <span class="string">"====== device.discover_characteristics() ====="</span></div><div class="line">        <span class="keyword">for</span> uuid <span class="keyword">in</span> device.discover_characteristics().keys():</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                print(<span class="string">"Read UUID %s (handle %d): %s"</span> %</div><div class="line">                      (uuid, device.get_handle(uuid), binascii.hexlify(device.char_read(uuid))))</div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                print(<span class="string">"Read UUID %s (handle %d): %s"</span> %</div><div class="line">                      (uuid, device.get_handle(uuid), <span class="string">"!deny!"</span>))</div><div class="line"></div><div class="line">        <span class="keyword">print</span> <span class="string">"====== device.char_read() / device.char_read_handle() ====="</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"2a00: "</span> + device.char_read(<span class="string">"00002a00-0000-1000-8000-00805f9b34fb"</span>)</div><div class="line">        <span class="keyword">print</span> <span class="string">"2a00: "</span> + device.char_read_handle(<span class="number">3</span>)</div><div class="line"></div><div class="line">        <span class="keyword">print</span> <span class="string">"====== device.subscribe() ====="</span></div><div class="line">        device.subscribe(<span class="string">"e7add780-b042-4876-aae1-112855353cc1"</span>,</div><div class="line">                         callback=indication_callback, indication=<span class="keyword">True</span>)</div><div class="line">        <span class="comment"># device.receive_notification(8, "test")</span></div><div class="line"></div><div class="line">        <span class="keyword">print</span> <span class="string">"====== device.char_write_handle() ====="</span></div><div class="line">        in_buf = map(ord, <span class="string">"hello world, hello BLE!!!"</span>)</div><div class="line">        <span class="comment"># send via uuid &amp; handle, maximum is 20 bytes</span></div><div class="line">        device.char_write(<span class="string">"e7add780-b042-4876-aae1-112855353cc1"</span>, in_buf[:<span class="number">20</span>])</div><div class="line">        device.char_write_handle(<span class="number">0x08</span>, in_buf[<span class="number">20</span>:])</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (<span class="keyword">True</span>):</div><div class="line">            time.sleep(<span class="number">0.1</span>)</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        adapter.stop()</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="comment"># logging.basicConfig()</span></div><div class="line">    <span class="comment"># logging.getLogger('pygatt').setLevel(logging.DEBUG)</span></div><div class="line">    pytest()</div></pre></td></tr></table></figure>
<h1 id="BleDevice-类"><a href="#BleDevice-类" class="headerlink" title="BleDevice 类"></a>BleDevice 类</h1><ul>
<li>为了方便使用, 自己基于 pygatt 再打包一层</li>
<li>遗憾的是没有disconnect的通知. 可以参考 <a href="https://github.com/peplin/pygatt/issues/72" target="_blank" rel="external">Disconnect event not shown</a></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pygatt</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BleDevice</span><span class="params">(pygatt.BGAPIBackend)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.device = <span class="keyword">None</span></div><div class="line">        self.adapter = pygatt.BGAPIBackend()</div><div class="line">        self.adapter.start()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></div><div class="line">        self.adapter.stop()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">scan</span><span class="params">(self, timeout=<span class="number">5</span>)</span>:</span></div><div class="line">        self.devices = self.adapter.scan(timeout)</div><div class="line">        <span class="keyword">return</span> self.devices</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect_name</span><span class="params">(self, name, devices=None)</span>:</span></div><div class="line">        <span class="keyword">if</span> devices <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            devices = self.devices</div><div class="line">        <span class="keyword">for</span> dev <span class="keyword">in</span> self.devices:</div><div class="line">            <span class="keyword">if</span> name == dev[<span class="string">'name'</span>]:</div><div class="line">                <span class="keyword">return</span> self.connect(dev[<span class="string">'address'</span>])</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self, address)</span>:</span></div><div class="line">        self.device = self.adapter.connect(address)</div><div class="line">        <span class="keyword">return</span> self.device</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">discover_characteristics</span><span class="params">(self, device=None)</span>:</span></div><div class="line">        <span class="keyword">if</span> device <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            device = self.device</div><div class="line">        characteristics = []</div><div class="line">        <span class="keyword">for</span> uuid <span class="keyword">in</span> device.discover_characteristics().keys():</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                device.char_read(uuid)</div><div class="line">                characteristics.append(</div><div class="line">                    &#123;<span class="string">'uuid'</span>: uuid, <span class="string">'handle'</span>: device.get_handle(uuid), <span class="string">'readable'</span>: <span class="keyword">True</span>&#125;)</div><div class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">                <span class="keyword">if</span> <span class="string">"unable to read"</span> <span class="keyword">in</span> str(e).lower():</div><div class="line">                    characteristics.append(</div><div class="line">                        &#123;<span class="string">'uuid'</span>: uuid, <span class="string">'handle'</span>: device.get_handle(uuid), <span class="string">'readable'</span>: <span class="keyword">False</span>&#125;)</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    <span class="keyword">raise</span> e</div><div class="line">        <span class="keyword">return</span> characteristics</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_indication</span><span class="params">(self, uuid, device=None, callback=None, indication=True)</span>:</span></div><div class="line">        <span class="keyword">if</span> device <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            device = self.device</div><div class="line">        device.subscribe(uuid, callback, indication)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_characteristics</span><span class="params">(self, uuid, device=None)</span>:</span></div><div class="line">        <span class="keyword">if</span> device <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            device = self.device</div><div class="line">        <span class="keyword">return</span> device.char_read(uuid)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_characteristics_handle</span><span class="params">(self, handle, device=None)</span>:</span></div><div class="line">        <span class="keyword">if</span> device <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            device = self.device</div><div class="line">        <span class="keyword">return</span> device.char_read_handle(handle)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_characteristics</span><span class="params">(self, str, uuid, device=None)</span>:</span></div><div class="line">        <span class="keyword">if</span> device <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            device = self.device</div><div class="line">        data = map(ord, str)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(data), <span class="number">20</span>):</div><div class="line">            device.char_write(uuid, data[i:i + <span class="number">20</span>])</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_characteristics_handle</span><span class="params">(self, str, handle, device=None)</span>:</span></div><div class="line">        <span class="keyword">if</span> device <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            device = self.device</div><div class="line">        data = map(ord, str)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(data), <span class="number">20</span>):</div><div class="line">            device.char_write_handle(handle, data[i:i + <span class="number">20</span>])</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="comment"># logging.basicConfig()</span></div><div class="line">    <span class="comment"># logging.getLogger('pygatt').setLevel(logging.DEBUG)</span></div><div class="line">    ble = BleDevice()</div><div class="line">    <span class="keyword">print</span> ble.scan()</div><div class="line">    device = ble.connect_name(<span class="string">"Bluegiga CR Demo"</span>)</div><div class="line">    <span class="keyword">print</span> device._address</div><div class="line">    chars = ble.discover_characteristics(device)</div><div class="line">    <span class="keyword">print</span> chars</div><div class="line">    <span class="comment"># print chars[0]['uuid']</span></div><div class="line">    <span class="keyword">print</span> ble.read_characteristics(chars[<span class="number">1</span>][<span class="string">'uuid'</span>])</div><div class="line">    ble.write_characteristics(<span class="string">"hello world"</span>, chars[<span class="number">0</span>][<span class="string">'uuid'</span>])</div></pre></td></tr></table></figure>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[协程/进程/线程资料收集]]></title>
      <url>https://draapho.github.io/2016/11/14/1615-python-thread/</url>
      <content type="html"><![CDATA[<p>协程(Coroutine), 多线程(Thread), 多进程(Multiprocessing)资料繁多, 学无止境, 就集中在这一篇收集贴中. 便于查阅学习</p>
<h1 id="自己的理解"><a href="#自己的理解" class="headerlink" title="自己的理解"></a>自己的理解</h1><ul>
<li>协程, 任务之间不是竞争关系, 而是协作关系, 需要每个任务都需要有一颗舍己为公的心!<ul>
<li>大家排队喝水, 喝到差不多就自己让给下一个人, 自己再去排队! 可按照优先级来插队的.</li>
<li>遇到不讲道理的人, 那这个机制就失效了. 因为没有抢占, 大家都只会默默等待…</li>
<li>优点, 任务切换的代价非常小. 由于没有抢占, 也就没有复杂的临界区问题. 锁的问题也变得简单.</li>
<li>缺点, 这个世界上总有不讲理的人, 所以, 大型任务和系统不敢这么用…</li>
<li>单片机开发是非常适合使用协程的! (资源有限, 需要减小任务切换的开销. 任务可控, 意味着易于协作)</li>
<li>python 下可用 gevent. </li>
</ul>
</li>
</ul>
<ul>
<li>多线程, 任务之间是竞争关系, 高优先级优先执行, 同时又有时间片限制, 避免高优先级任务霸占CPU<ul>
<li>谁强谁喝水, 不过旁边有个管理员, 哪个家伙喝水时间太久了, 就会把他给跩一边去, 大家重新来抢.</li>
<li>线程是共享内存的, 理解为这些水来自于同一个自来水厂(这个水厂有毒的话, 谁了逃不了),</li>
<li>多核就是多个水龙头, 同一时刻可以有多个人在喝水.</li>
<li>优点, 任务的开销比进程小(因为共享内存), 通讯方式多样. 加个水龙头和造个水厂的区别!!!</li>
<li>缺点, 一大帮自私又不讲理的人在一起总是很难管理的… 需要各种锁机制来维持和谐共处…</li>
<li>python的多线程, 由于GIL机制的存在, 是无法利用多核的. (意味着不适用于CPU密集型任务)</li>
<li>python有一个类进程版本的线程池 <code>multiprocessing.pool.ThreadPool</code>, 可以获取返回值<br>由于本质是线程, Windows下terminate方法是没有用的.</li>
</ul>
</li>
</ul>
<ul>
<li>多进程, 任务之间是竞争关系, 任务之间的数据全部隔离, 没有共享.<ul>
<li>进程是资源分配的基本单位. 进程包含线程, 线程共用进程的资源.</li>
<li>进程比线程安全性更高, 因为拥有独立的内存块(独立水厂供水)</li>
<li>进程的建立和调度比线程更费时间和资源</li>
<li>进程间的数据共享和交换很麻烦. (python例子中, 进程内 print 不会打印, 参数传递需要可以pickle)</li>
<li>python 下推荐使用 <code>multiprocessing.pool.Pool</code>. 可以获取返回值.</li>
</ul>
</li>
</ul>
<ul>
<li>进程和线程以及多核<ul>
<li>操作系统必须有一个进程, 创建进程时, 会分配好供这个进程使用的内存和上下文环境.</li>
<li>线程依赖于进程, 多线程运行于同一个进程下面, 会共享同一个进程的内存.</li>
<li>事实上, 线程是最难写好的一种多任务方式(因为共享内存). 用的多是因为它的开销比进程小很多.</li>
<li>以android为例,<ul>
<li>android的每一个应用就是一个linux进程, 所以写的再烂的应用也不会导致整个android系统崩溃.</li>
<li>应用内支持多线程, 也事实上都对应到linux的线程, 这些线程运行在分配好的linux进程中.</li>
</ul>
</li>
<li>进程和线程的概念和单核还是多核一点关系都没有! 先理解好单核再说, 真正涉及到CPU密集型任务时, 再考虑多核优化…</li>
</ul>
</li>
</ul>
<h1 id="优缺点比较"><a href="#优缺点比较" class="headerlink" title="优缺点比较"></a>优缺点比较</h1><ul>
<li>协程具有进程和线程各自的优点. 但其缺点是需要任务间自己来协作调度(很容易写成阻塞等待), 这一点直接导致了通用性很差.</li>
<li><a href="http://blog.csdn.net/lishenglong666/article/details/8557215" target="_blank" rel="external">多线程还是多进程的选择及区别</a>, 比较全面的一篇文章!<ul>
<li>本文也有一个转字, 应该是综合了多种搜素结果写出来的一篇博文. 有结论, 有实验代码和过程</li>
<li>鱼还是熊掌：浅谈多进程多线程的选择</li>
<li>1.进程与线程</li>
<li>一、重复周丽论文实验步骤</li>
<li>二、增加并发数量的实验</li>
<li>三、增加每进程/线程的工作强度的实验</li>
<li>四、多进程和多线程在创建和销毁上的效率比较</li>
<li>五、双核系统重复周丽论文实验步骤</li>
<li>六、并发服务的不可测性</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>对比维度</th>
<th>多进程</th>
<th>多线程</th>
<th>总结</th>
</tr>
</thead>
<tbody>
<tr>
<td>数据共享、同步</td>
<td>数据共享复杂，需要用IPC；数据是分开的，<strong>同步简单</strong></td>
<td>因为共享进程数据，<strong>数据共享简单</strong>，但也是因为这个原因导致同步复杂</td>
<td>各有优势</td>
</tr>
<tr>
<td>内存、CPU</td>
<td>占用内存多，切换复杂，CPU利用率低</td>
<td><strong>占用内存少，切换简单，CPU利用率高</strong></td>
<td>线程占优</td>
</tr>
<tr>
<td>创建销毁、切换</td>
<td>创建销毁、切换复杂，速度慢</td>
<td><strong>创建销毁、切换简单，速度很快</strong></td>
<td>线程占优</td>
</tr>
<tr>
<td>编程、调试</td>
<td><strong>编程简单，调试简单</strong></td>
<td>编程复杂，调试复杂</td>
<td>进程占优</td>
</tr>
<tr>
<td>可靠性</td>
<td><strong>进程间不会互相影响</strong></td>
<td>一个线程挂掉将导致整个进程挂掉</td>
<td>进程占优</td>
</tr>
<tr>
<td>分布式</td>
<td><strong>适应于多核、多机分布式</strong>；如果一台机器不够，扩展到多台机器比较简单</td>
<td>适应于多核分布式</td>
<td>进程占优</td>
</tr>
</tbody>
</table>
<h1 id="资料集"><a href="#资料集" class="headerlink" title="资料集"></a>资料集</h1><ul>
<li><p><a href="https://www.tutorialspoint.com/python/python_multithreading.htm" target="_blank" rel="external">Python Multithreaded Programming</a></p>
<ul>
<li>Python多线程入门教程, 有详细的说明, 源代码及运行结果.</li>
<li>主要有3个示例, 多线程, 多线程同步, 使用Queue来通讯</li>
</ul>
</li>
<li><p><a href="http://www.jianshu.com/p/0e4ff7c856d3" target="_blank" rel="external">Python 多线程</a></p>
<ul>
<li>介绍了Python多线程的状态, 类型</li>
<li>线程的创建, 合并(join), 同步, 锁(Lock, 死锁, RLock), 其它IPC</li>
<li>将子线程设置<strong>后台线程</strong>(setDaemon), 让子线程随主线程一起结束.</li>
<li>提了一下Python的GIL, 参考资料中的一篇对此做了很好的说明: <a href="http://zhuoqiang.me/python-thread-gil-and-ctypes.html" target="_blank" rel="external">python 线程，GIL 和 ctypes</a></li>
</ul>
</li>
<li><p><a href="http://yoyzhou.github.io/blog/2013/02/28/python-threads-synchronization-locks/" target="_blank" rel="external">Python线程同步机制: Locks, RLocks, Semaphores, Conditions, Events和Queues</a></p>
<ul>
<li>内容如题, 无需多言. 文章最后重点推荐使用Queue</li>
</ul>
</li>
<li><p><a href="https://my.oschina.net/leejun2005/blog/179265" target="_blank" rel="external">理解 Python 中的多线程</a></p>
<ul>
<li>示例1, 请求五个不同的url. 比较了单线程和多线程性能上的差别</li>
<li>示例2, 全局变量的线程安全问题（race condition）. BUG版和修改版</li>
<li>示例3, 多线程环境下的原子操作. BUG版和修改版</li>
<li>示例4, Python多线程简易版：线程池 threadpool</li>
<li>附上了很多参考和推荐阅读的资料!</li>
</ul>
</li>
<li><p>线程池 threadpool (需安装)</p>
<ul>
<li><a href="http://www.zhidaow.com/post/python-threadpool" target="_blank" rel="external">Python多线程简易版 - 线程池threadpool</a>, 新手上路版</li>
<li><a href="http://chriskiehl.com/article/parallelism-in-one-line/" target="_blank" rel="external">Parallelism in one line</a>, 比较了传统方案和线程池方案, 并给出了范例</li>
<li>这是<code>Parallelism in one line</code>的中文翻译版本, 并有遇到小坑和补充说明. <a href="https://my.oschina.net/leejun2005/blog/194270" target="_blank" rel="external">Python 并行任务技巧</a></li>
<li><strong>注意： threadpool 是非线程安全的</strong>。<ul>
<li>关于线程安全, 可参考<a href="http://blog.csdn.net/xiao__gui/article/details/8934832" target="_blank" rel="external">Java线程安全和非线程安全</a></li>
<li>个人理解, 对于python的非线程安全, 编程时需要特别注意 <code>可变对象</code> 和 <code>不可变对象</code>, 弄清楚Python到底是在<code>赋值</code>还是<code>引用</code>(相当于指针)</li>
<li>可以参考此文 <a href="https://my.oschina.net/leejun2005/blog/145911" target="_blank" rel="external">python基础（5）：深入理解 python 中的赋值、引用、拷贝、作用域</a></li>
</ul>
</li>
<li>初步结论, 还是比较推崇线程池的: 比起经典的方式来说简单很多，效率高，易懂，而且没什么死锁的陷阱。</li>
</ul>
</li>
<li><p><a href="https://my.oschina.net/leejun2005/blog/398826" target="_blank" rel="external">Python 多线程教程：并发与并行</a></p>
<ul>
<li>讲了多线程, 多进程, 以及分布式任务.</li>
<li>原作者已下载网络图片来说明问题, 转发者为了便于测试和理解, 简化了代码.</li>
<li>1, 单线程执行. 花了19.4秒去下载91张图片</li>
<li>2, 多线程. 下载时间变成了4.1秒. 并说明了为何有GIL的情况下, 多线程仍然是有效的(因为是IO密集型的任务)</li>
<li>3, 多进程. 优点, 避免了GIL, 适用于CPU密集型任务. 缺点, 耗内存!</li>
<li>4, 分布式任务. 提了一下<code>RQ</code>和<code>Celery</code></li>
<li>5, 总结: IO密集型，多线程或多进程. CPU密集型, 多进程. 网络应用, 分布式任务</li>
<li>6, 并发、并行区别与联系. 并发, 一个人按优先级处理多件事情(任一时刻只能做一件事情). 并行, 有多个人各自做事(多核多任务).</li>
</ul>
</li>
<li><p><strong>进程池 multiprocessing.Pool 以及 multiprocessing.pool.ThreadPool</strong></p>
<ul>
<li><a href="https://segmentfault.com/a/1190000003044986" target="_blank" rel="external">Python 多进程实践</a><ul>
<li>Python多进程的实现入门级文章</li>
<li>创建子进程的方法: fork, multiprocessing, Pool 进程池</li>
<li>IPC(进程间通讯): Queue, Pipe</li>
</ul>
</li>
<li><a href="http://blog.csdn.net/seetheworld518/article/details/49639651" target="_blank" rel="external">Python 多进程 multiprocessing.Pool类详解</a></li>
<li><a href="http://lucasb.eyer.be/snips/python-thread-pool.html" target="_blank" rel="external">Python’s undocumented ThreadPool</a>, 提了一下 ThreadPool</li>
<li><a href="https://draapho.github.io/2016/11/28/1622-python-time/">python 延时及超时</a>, “学习过程中的例子” 中有尝试使用进程池</li>
<li><a href="http://www.eenot.com/thread-103459-1-1.html" target="_blank" rel="external">Python 中 Ctrl+C 不能终止 Multiprocessing Pool 的解决方</a>, ThreadPool有同样的问题. 可以搜索关键字: Keyboard Interrupts multiprocessing Pool.</li>
<li><a href="http://bugs.python.org/issue17140" target="_blank" rel="external">使用 multiprocessing.pool.ThreadPool 可能的潜在风险</a>, 本质是线程, 而且没有文档说明</li>
</ul>
</li>
<li><p><a href="https://my.oschina.net/leejun2005/blog/203148" target="_blank" rel="external">浅谈 python multiprocessing（多进程）下如何共享变量</a></p>
<ul>
<li>1, 抛出了一个多进程的问题.</li>
<li>2, python 多进程共享变量的几种方式</li>
<li>3, 多进程的问题远不止这么多：数据的同步. (需要Lock)</li>
<li>4, 总结为: 多进程最好还是用IPC(message之类的). 如果一定要用共享变量, 那也是可以的…</li>
</ul>
</li>
<li><p><a href="https://liangxiansen.github.io/2016/08/08/python%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%8D%8F%E7%A8%8B/" target="_blank" rel="external">Python之路：(十五）进程、线程和协程</a></p>
<ul>
<li>Python线程, 线程锁(Lock, Rlock), 其它IPC, 线程池</li>
<li>Python进程, 进程数据共享, 进程IPC. (Python Windows下是可以用进程的, 只是不支持fork)</li>
<li>Python协程, greenlet(主动切换), gevent(遇到IO操作, 自动切换).</li>
</ul>
</li>
<li><p><strong><a href="http://xlambda.com/gevent-tutorial/" target="_blank" rel="external">gevent程序员指南</a></strong></p>
<ul>
<li>核心部分, 较为详细的介绍了 gevent 的原理和使用方式.</li>
<li>数据结构, 介绍了协程之间的通讯工具</li>
<li>真实世界的应用, 几个实际应用的例子</li>
</ul>
</li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git 初始设置及常用命令]]></title>
      <url>https://draapho.github.io/2016/10/24/1614-CheatSheet-git/</url>
      <content type="html"><![CDATA[<h1 id="git示意图"><a href="#git示意图" class="headerlink" title="git示意图"></a>git示意图</h1><p>  <img src="https://draapho.github.io/images/1614/git.jpg" alt="git"></p>
<h1 id="资料和参考"><a href="#资料和参考" class="headerlink" title="资料和参考"></a>资料和参考</h1><ul>
<li><a href="http://ndpsoftware.com/git-cheatsheet.html" target="_blank" rel="external">Visual Git Cheat Sheet</a></li>
<li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">Pro Git book</a></li>
<li>廖雪峰的 <a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">Git教程</a></li>
<li>设置SSH, 参考 <a href="https://help.github.com/categories/ssh/" target="_blank" rel="external">GitHub Help - SSH</a></li>
<li>设置GPG, 参考 <a href="https://help.github.com/categories/gpg/" target="_blank" rel="external">GitHub Help - GPG</a></li>
</ul>
<h1 id="一些理解"><a href="#一些理解" class="headerlink" title="一些理解"></a>一些理解</h1><ul>
<li>git的核心理解为指针即可, 包括 <code>workspace</code>, <code>index</code>, <code>commitHash</code><ul>
<li><code>repository</code>是基于<code>commitHash</code>管理版本的.</li>
<li><code>HEAD</code>, <code>HEAD^1</code>, <code>HEAD~3</code>, <code>branch</code>, <code>tags</code>都是<code>commitHash</code>的别名, 便于人们记忆和理解.</li>
<li>可以基于 <code>git reset</code> 来检测是否完全理解git基于指针的设计思路.  </li>
<li><code>HEAD^1</code>基于父节点, <code>HEAD~1</code>基于层次. 单层结构下没有差别. 复杂多层结构建议直接用 <code>commitHash</code></li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">       A ---------------------  A =      = A^0                       </div><div class="line">      / \                       </div><div class="line">     B   C                      B = A^   = A^1     = A~1</div><div class="line">    /|\  |                      C = A^2  = A^2     </div><div class="line">   / | \ |                                     </div><div class="line">  D  E   F -------------------  D = A^^  = A^1^1   = A~2  </div><div class="line"> / \    / \                     E = B^2  = A^^2</div><div class="line">/   \  /   \                    F = B^3  = A^^3   </div><div class="line">G   H  I   J -----------------  G = A^^^ = A^1^1^1 = A~3                               </div><div class="line">                                H = D^2  = B^^2    = A^^^2  = A~2^2</div><div class="line">                                I = F^   = B^3^    = A^^3^</div><div class="line">                                J = F^2  = B^3^2   = A^^3^2</div></pre></td></tr></table></figure>
<ul>
<li>git的命令, 常见格式为 <code>git diff p1 p2 -- file</code>. 意为, 比较<code>p1</code>与<code>p2</code>两处指定file的区别<ul>
<li><code>p1</code> 缺省指向workspace, <code>p2</code> 缺省指向index. </li>
<li><code>--</code> 接文件或目录, 名字无歧义时可以省去<code>--</code>. (如 git checkout name 就可能有歧义, branch OR file?)</li>
<li><code>.</code> 表示所有的文件, 如 <code>git add .</code></li>
</ul>
</li>
<li>学会查看帮助, 加上 <code>-h</code> 即可. 如 <code>git checkout -h</code><ul>
<li><code>[]</code> 表示可选项, <code>&lt;&gt;</code> 表示必填项</li>
</ul>
</li>
</ul>
<h1 id="初始安装"><a href="#初始安装" class="headerlink" title="初始安装"></a>初始安装</h1><ul>
<li><p>新建git仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># Create local repository</div><div class="line"># put &quot;.gitignore&quot; to project root direct.</div><div class="line">git init                        # create local repository</div><div class="line">git add README.md               # add somefiles</div><div class="line">git commit -m &quot;first commit&quot;    # commit to local repository</div><div class="line"></div><div class="line"># link with remote repository</div><div class="line">git remote add origin url       # add remote repository, &lt;url&gt; like https://... OR ssh://...</div><div class="line">git push -u origin master       # -u, 指定默认远程主机为 origin</div><div class="line"></div><div class="line"># Clone existing repository</div><div class="line">git clone url                   # &lt;url&gt; like https://... OR ssh://...</div><div class="line"></div><div class="line"># more cmd about config</div><div class="line">git config --list               # show config</div><div class="line">git config -e                   # edit local config file</div></pre></td></tr></table></figure>
</li>
<li><p>单独设置参数, –global表示全局参数, 不写就是仓库自有参数</p>
</li>
<li>需要安装 <a href="https://www.perforce.com/product/components/perforce-visual-merge-and-diff-tools" target="_blank" rel="external">p4merge</a> 用于支持 <code>difftool</code> 及 <code>mergetool</code></li>
<li><p>安装位置以 <code>D:\Program\Perforce\p4merge.exe</code> 为例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"># global setting</div><div class="line">git config --global user.name &quot;Your Name&quot;</div><div class="line">git config --global user.email &quot;email@example.com&quot;</div><div class="line"></div><div class="line"># alise setting</div><div class="line">git config --global alias.a &apos;add&apos;</div><div class="line">git config --global alias.aa &apos;add .&apos;</div><div class="line">git config --global alias.b &apos;branch&apos;</div><div class="line">git config --global alias.bb &apos;branch -a -v&apos;</div><div class="line">git config --global alias.co &apos;checkout&apos;</div><div class="line">git config --global alias.cm &apos;commit -m&apos;</div><div class="line">git config --global alias.lg &quot;log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit&quot;</div><div class="line">git config --global alias.ll &quot;log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit -10&quot;</div><div class="line">git config --global alias.st &apos;status&apos;</div><div class="line"></div><div class="line"># set diff color</div><div class="line">git config --global color.diff.old &quot;red normal bold&quot;</div><div class="line">git config --global color.diff.new &quot;green normal bold&quot;</div><div class="line"></div><div class="line"># solve the warning, LF will be replaced by CRLF</div><div class="line">git config --global core.autocrlf false</div><div class="line">git config --global core.safecrlf false</div><div class="line"></div><div class="line"># set difftool mergetool (need p4merge)</div><div class="line">git config --global diff.tool p4merge</div><div class="line">git config --global difftool.p4merge.cmd &apos;&quot;D:\Program\Perforce\p4merge.exe&quot; &quot;$LOCAL&quot; &quot;$REMOTE&quot;&apos;</div><div class="line">git config --global difftool.prompt false</div><div class="line">git config --global merge.tool p4merge</div><div class="line">git config --global mergetool.p4merge.cmd &apos;&quot;D:\Program\Perforce\p4merge.exe&quot; &quot;$PWD/$BASE&quot; &quot;$PWD/$REMOTE&quot; &quot;$PWD/$LOCAL&quot; &quot;$PWD/$MERGED&quot;&apos;</div><div class="line">git config --global mergetool.p4merge.trustExitCode false</div><div class="line">git config --global mergetool.keepBackup false</div></pre></td></tr></table></figure>
</li>
<li><p>也可使用 <code>git config -e --global</code> 打开全局配置文件, 直接设置全局参数</p>
</li>
<li>需要安装 <a href="https://www.perforce.com/product/components/perforce-visual-merge-and-diff-tools" target="_blank" rel="external">p4merge</a> 用于支持 <code>difftool</code> 及 <code>mergetool</code></li>
<li>安装位置以 <code>D:\Program\Perforce\p4merge.exe</code> 为例<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">[user]</div><div class="line">    name = https://draapho.github.io/</div><div class="line">    email = draapho@gmail.com</div><div class="line">[alias]</div><div class="line">    a = add</div><div class="line">    aa = add .</div><div class="line">    b = branch</div><div class="line">    bb = branch -a -v</div><div class="line">    co = checkout</div><div class="line">    cm = commit -m</div><div class="line">    lg = log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit</div><div class="line">    ll = log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit -10</div><div class="line">    st = status</div><div class="line">[color &quot;diff&quot;]</div><div class="line">	old = red normal bold</div><div class="line">	new = green normal bold</div><div class="line">[core]</div><div class="line">    autocrlf = false</div><div class="line">    safecrlf = false</div><div class="line">[diff]</div><div class="line">	tool = p4merge</div><div class="line">[difftool &quot;p4merge&quot;]</div><div class="line">	cmd = \&quot;D:\\Program\\Perforce\\p4merge.exe\&quot; \&quot;$LOCAL\&quot; \&quot;$REMOTE\&quot;</div><div class="line">[difftool]</div><div class="line">	prompt = false</div><div class="line">[merge]</div><div class="line">	tool = p4merge</div><div class="line">[mergetool &quot;p4merge&quot;]</div><div class="line">	cmd = \&quot;D:\\Program\\Perforce\\p4merge.exe\&quot; \&quot;$PWD/$BASE\&quot; \&quot;$PWD/$REMOTE\&quot; \&quot;$PWD/$LOCAL\&quot; \&quot;$PWD/$MERGED\&quot;</div><div class="line">	trustExitCode = false</div><div class="line">[mergetool]</div><div class="line">	keepBackup = false</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"># 查看信息</div><div class="line">git st                          # git status            # 显示工作区变更的文件</div><div class="line">git lg                          # git log 增强版        # 显示所有提交</div><div class="line">git ll                          # git lg -10            # 显示过去10次提交</div><div class="line">git shortlog -sn                                        # 显示所有提交过的用户</div><div class="line">git show --name-only commit                             # 显示某次提交发生变化的文件</div><div class="line"></div><div class="line"># stash                                                 # 少量且短时间的使用!</div><div class="line">git stash                                               # workspace-&gt;stash(藏匿处)</div><div class="line">git stash pop                                           # stash(不保存)-&gt;workspace</div><div class="line"></div><div class="line"># 提交文件</div><div class="line">git aa                          # git add .             # workspace-&gt;index</div><div class="line">git a *.c *.h                   # &lt;file | dir&gt;          # 添加指定文件</div><div class="line">git reset HEAD [file]           # discard file @index   # add的逆操作 HEAD-&gt;index</div><div class="line">git cm &quot;msg&quot;                    # git commit -m &quot;msg&quot;   # index-&gt;repository</div><div class="line">git commit --amend -m &quot;message&quot;                         # 修改/替换之前的提交</div><div class="line"> </div><div class="line"># 分支操作</div><div class="line">git b name                      # git branch name       # 创建分支</div><div class="line">git b name commit                                       # 基于指定 commit 创建分支</div><div class="line">git b -d name                   # branch delete         # 删除分支</div><div class="line">git b -dr origin/name           # delete remote         # 删除远程分支</div><div class="line">git b -m new_name               # git branch --move     # 重命名分支</div><div class="line">git bb                          # git branch -a         # 查看所有分支</div><div class="line">git remote -v                                           # 查看远程分支</div><div class="line">git co name                     # git checkout name     # 切换分支</div><div class="line">git co -b name                  # checkout &amp; branch     # 创建并切换分支</div><div class="line"></div><div class="line"># 版本合并和回退</div><div class="line">git merge branch                # 合并branch到当前分支</div><div class="line">git mergetool                   # 已图形化工具处理文件冲突 (如 p4merge.exe)</div><div class="line">git cherry-pick commit          # 合并commit到当前分支</div><div class="line">git rebase -i HEAD~3            # 修改/压缩多个提交, 根据提示操作, 第一行不能是squash!  </div><div class="line">git revert commit               # 提交逆操作来实现版本恢复, 不影响任何历史记录!        </div><div class="line">git push                                                # 推送到默认的远程主机</div><div class="line">git push -f                     # --force               # 忽略冲突, 强制推送</div><div class="line">git pull                        # fetch &amp; merge         # 合并远程分支到当前分支</div><div class="line"></div><div class="line"># tag                           # 用于标记一个版本, 可以替代 commitHash</div><div class="line">git tag                         # 查看版本</div><div class="line">git tag v100                    # 创建版本</div><div class="line">git tag -d v100                 # 删除版本</div><div class="line">git push --tags                 # 推送tag</div><div class="line"></div><div class="line"># 查看差异 </div><div class="line">git diff                        # workspace VS index (p1缺省指向workspace, p2缺省指向index)</div><div class="line">git diff p1 p2                  # p1 VS p2, 可以是 HEAD~1, commitHash值, TAG, 分支名称</div><div class="line">git diff p1 p2 -- *.c *.h       # -- 指定文件或目录, 可省</div><div class="line">git diff --name-status p1 p2    # 获得变更的文件列表</div><div class="line">git diff --stat p1 p2           # 统计变更的数据</div><div class="line">git difftool p1 p2 -- file      # 使用图形化工具显示差异 (如 p4merge.exe)</div><div class="line"></div><div class="line"># 撤销</div><div class="line">git checkout p1 -- file         # p1-&gt;index-&gt;workspace  # p1缺省为index, --和file可省</div><div class="line">git reset p1 -- file            # p1-&gt;HEAD-&gt;index,      # p1缺省为HEAD, --和file可省</div><div class="line">git reset --soft p1             # p1-&gt;HEAD                      # p1缺省为HEAD, 不可带file参</div><div class="line">git reset --hard p1             # p1-&gt;HEAD-&gt;index &amp; workspace   # p1缺省为HEAD, 不可带file参</div><div class="line"></div><div class="line">git checkout .                  # index-&gt;workspace      # 清除工作区的变更(!!!危险操作)</div><div class="line">git checkout branch             # branch-&gt;index-&gt;workspace      # 切换分支</div><div class="line">git reset --hard                # HEAD-&gt;index &amp; workspace       # 恢复仓库到HEAD状态</div><div class="line">git reset HEAD^ file            # HEAD^-&gt;HEAD-&gt;index            # 指定file, 进行版本回滚</div><div class="line">git reset --soft HEAD~3         # HEAD~3-&gt;HEAD                  # 版本回滚</div></pre></td></tr></table></figure>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python调用命令行]]></title>
      <url>https://draapho.github.io/2016/10/21/1613-python-cli/</url>
      <content type="html"><![CDATA[<h1 id="python调用CLI"><a href="#python调用CLI" class="headerlink" title="python调用CLI"></a>python调用CLI</h1><ul>
<li>CLI = Command Line Interface, 即命令行</li>
<li>方法有很多, 通用性和安全性最好的就是<code>subprocess.Popen</code>这个方法. 见文档<ul>
<li><a href="https://docs.python.org/2.7/library/subprocess.html#popen-constructor" target="_blank" rel="external">Subprocess management</a></li>
<li><del><a href="https://docs.python.org/2.7/library/os.html#os.popen" target="_blank" rel="external">os.popen</a></del></li>
<li><del><a href="https://docs.python.org/2/library/commands.html" target="_blank" rel="external">Utilities for running commands</a></del></li>
</ul>
</li>
<li>example:</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen, PIPE</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># CLI: Command Line Interface</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">runCLI</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># __cmd_link = self.cur_dir + "\\stlink_cli\\ST-LINK_CLI.exe -c SWD SWJCLK=5 UR"</span></div><div class="line">    __cmd_link = <span class="string">"dir"</span></div><div class="line"></div><div class="line">    <span class="comment"># 多用 shell=True. shell=False只能运行bat文件或直接在终端中执行. 此例中显示的内容也会有区别</span></div><div class="line">    _pp = Popen(__cmd_link, shell=<span class="keyword">True</span>, stdout=PIPE, stderr=PIPE)</div><div class="line">    out, err = _pp.communicate()</div><div class="line"></div><div class="line">    logging.debug(<span class="string">"cmd &gt; "</span> + __cmd_link)</div><div class="line">    logging.debug(<span class="string">"out &gt; "</span> + out.rstrip())</div><div class="line">    logging.debug(<span class="string">"err &gt; "</span> + err.rstrip())</div><div class="line">    <span class="keyword">return</span> _pp.returncode</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    logging.basicConfig(level=logging.DEBUG)</div><div class="line">    logging.debug(runCLI())</div></pre></td></tr></table></figure>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PyQt 的交互操作]]></title>
      <url>https://draapho.github.io/2016/10/20/1612-python-pyqtui/</url>
      <content type="html"><![CDATA[<h1 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h1><ul>
<li>Windows</li>
<li><a href="https://www.python.org/downloads/" target="_blank" rel="external">python 2.7</a></li>
<li><a href="https://riverbankcomputing.com/software/pyqt/download" target="_blank" rel="external">PyQt 4.11.4</a></li>
</ul>
<h1 id="useful-guide-startup"><a href="#useful-guide-startup" class="headerlink" title="useful guide / startup"></a>useful guide / startup</h1><ul>
<li><a href="http://www.training.prace-ri.eu/uploads/tx_pracetmo/QtGuiIntro.pdf" target="_blank" rel="external">Introduction to GUI development using Qt</a>, 简单明了的介绍了qt gui的基本特性</li>
<li><a href="https://www.tutorialspoint.com/pyqt/" target="_blank" rel="external">PyQt Tutorial</a>, learn PyQt step by step.</li>
<li><a href="https://nikolak.com/pyqt-threading-tutorial/" target="_blank" rel="external">PyQt: Threading Basics Tutorial</a>, 防止UI阻塞, 使用线程</li>
</ul>
<h1 id="Generate-basic-UI-file"><a href="#Generate-basic-UI-file" class="headerlink" title="Generate basic UI file"></a>Generate basic UI file</h1><ul>
<li>use <code>Qt Designer</code> to create basic UI<ul>
<li><code>New</code>-&gt;<code>Widget</code>-&gt;drag <code>PushButton</code> to <code>Form</code> Window</li>
<li>Save it, for example <code>demo.ui</code></li>
</ul>
</li>
<li>make sure <code>pyuic4.bat</code> is in the System PATH<ul>
<li>input <code>pyuic4.bat -h</code> in shell, check the response.</li>
</ul>
</li>
<li>change <code>.ui</code> to <code>.py</code> file<ul>
<li>run <code>pyuic4.bat -x -o demo.py demo.ui</code> in the working folder.</li>
<li><code>-o</code> means output, set the output filename.</li>
<li><code>-x</code> will generate <code>if __name__ == &#39;__main__&#39;:</code> then can run directly</li>
<li><code>pyuic4.bat demo.ui &gt; demo.py</code> is also OK.</li>
</ul>
</li>
<li><del>the sample of <code>demo.py</code>, generated automatically by pyuic4.bat</del></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="comment"># Form implementation generated from reading ui file 'demo.ui'</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Created by: PyQt4 UI code generator 4.11.4</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># WARNING! All changes made in this file will be lost!</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> PyQt4 <span class="keyword">import</span> QtCore, QtGui</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    _fromUtf8 = QtCore.QString.fromUtf8</div><div class="line"><span class="keyword">except</span> AttributeError:</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_fromUtf8</span><span class="params">(s)</span>:</span></div><div class="line">        <span class="keyword">return</span> s</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    _encoding = QtGui.QApplication.UnicodeUTF8</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_translate</span><span class="params">(context, text, disambig)</span>:</span></div><div class="line">        <span class="keyword">return</span> QtGui.QApplication.translate(context, text, disambig, _encoding)</div><div class="line"><span class="keyword">except</span> AttributeError:</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_translate</span><span class="params">(context, text, disambig)</span>:</span></div><div class="line">        <span class="keyword">return</span> QtGui.QApplication.translate(context, text, disambig)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ui_Form</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setupUi</span><span class="params">(self, Form)</span>:</span></div><div class="line">        Form.setObjectName(_fromUtf8(<span class="string">"Form"</span>))</div><div class="line">        self.pushButton = QtGui.QPushButton(Form)</div><div class="line">        self.pushButton.setGeometry(QtCore.QRect(<span class="number">40</span>, <span class="number">40</span>, <span class="number">75</span>, <span class="number">23</span>))</div><div class="line">        self.pushButton.setObjectName(_fromUtf8(<span class="string">"pushButton"</span>))</div><div class="line"></div><div class="line">        self.retranslateUi(Form)</div><div class="line">        QtCore.QMetaObject.connectSlotsByName(Form)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retranslateUi</span><span class="params">(self, Form)</span>:</span></div><div class="line">        Form.setWindowTitle(_translate(<span class="string">"Form"</span>, <span class="string">"Form"</span>, <span class="keyword">None</span>))</div><div class="line">        self.pushButton.setText(_translate(<span class="string">"Form"</span>, <span class="string">"PushButton"</span>, <span class="keyword">None</span>))</div><div class="line"></div><div class="line"><span class="comment"># using -x will generate the following code</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="keyword">import</span> sys</div><div class="line">    app = QtGui.QApplication(sys.argv)</div><div class="line">    Form = QtGui.QWidget()</div><div class="line">    ui = Ui_Form()</div><div class="line">    ui.setupUi(Form)</div><div class="line">    Form.show()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<ul>
<li><del>run &amp; check the　UI</del><ul>
<li>run <code>python demo.py</code> in the working folder.</li>
<li>OR run directly in editor like atom.</li>
</ul>
</li>
</ul>
<h1 id="click-then-do-sth"><a href="#click-then-do-sth" class="headerlink" title="click then do sth"></a>click then do sth</h1><ul>
<li>create a new py file, for example <code>show.py</code>. input code like:</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> demo  <span class="comment"># generated from xxx.ui</span></div><div class="line"><span class="keyword">from</span> PyQt4 <span class="keyword">import</span> QtGui</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyForm</span><span class="params">(QtGui.QWidget, demo.Ui_Form)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(self.__class__, self).__init__()  <span class="comment"># QtGui.QWidget.__init__()</span></div><div class="line">        self.setupUi(self)</div><div class="line">        self.pushButton.clicked.connect(</div><div class="line">            self.handleButton)  <span class="comment"># here is important line</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handleButton</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> (<span class="string">"hello, https://draapho.github.io/"</span>)</div><div class="line">        <span class="comment"># size = self.geometry()</span></div><div class="line">        <span class="comment"># self.resize(size.width() + 2, size.height() + 2)</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    app = QtGui.QApplication(sys.argv)</div><div class="line">    form = MyForm()</div><div class="line">    form.show()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<ul>
<li>look at <code>self.ui.pushButton.clicked.connect(self.handleButton)</code><br>it links clicked event with handleButton function.</li>
<li>if you want to resize the window after clicked the button. change <code>handleButton</code> to</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handleButton</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="comment"># print ("hello, https://draapho.github.io/")</span></div><div class="line">    size = self.geometry()</div><div class="line">    self.resize(size.width() + <span class="number">2</span>, size.height() + <span class="number">2</span>)</div></pre></td></tr></table></figure>
<h1 id="click-then-do-heavy-work"><a href="#click-then-do-heavy-work" class="headerlink" title="click then do heavy work"></a>click then do heavy work</h1><ul>
<li><p><del>bad code, UI totally dead</del></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PyQt4 <span class="keyword">import</span> QtGui</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> demo</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyForm</span><span class="params">(QtGui.QWidget, demo.Ui_Form)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(self.__class__, self).__init__()</div><div class="line">        self.setupUi(self)</div><div class="line">        self.pushButton.clicked.connect(self.startCount)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startCount</span><span class="params">(self)</span>:</span></div><div class="line">        self.pushButton.clicked.disconnect()</div><div class="line">        self.pushButton.clicked.connect(self.stopCount)</div><div class="line">        i = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> i &lt; <span class="number">15</span>:</div><div class="line">            i += <span class="number">1</span></div><div class="line">            self.pushButton.setText(str(i))</div><div class="line">            <span class="keyword">print</span> i</div><div class="line">            time.sleep(<span class="number">1</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stopCount</span><span class="params">(self)</span>:</span></div><div class="line">        self.pushButton.clicked.disconnect()</div><div class="line">        self.pushButton.clicked.connect(self.startCount)</div><div class="line">        self.pushButton.setText(<span class="string">"PushButton"</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app = QtGui.QApplication(sys.argv)</div><div class="line">    form = MyForm()</div><div class="line">    form.show()</div><div class="line">    app.exec_()</div></pre></td></tr></table></figure>
</li>
<li><p>use thread, can do everything in UI</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PyQt4 <span class="keyword">import</span> QtGui</div><div class="line"><span class="keyword">from</span> PyQt4.QtCore <span class="keyword">import</span> QThread, SIGNAL</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> demo</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">getCountThread</span><span class="params">(QThread)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        QThread.__init__(self)</div><div class="line">        self.count = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        self.wait()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">while</span> self.count &lt; <span class="number">15</span>:</div><div class="line">            self.count += <span class="number">1</span></div><div class="line">            self.emit(SIGNAL(<span class="string">'showCount(int)'</span>), self.count)</div><div class="line">            <span class="keyword">print</span> self.count</div><div class="line">            self.sleep(<span class="number">1</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyForm</span><span class="params">(QtGui.QWidget, demo.Ui_Form)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(self.__class__, self).__init__()</div><div class="line">        self.setupUi(self)</div><div class="line">        self.pushButton.clicked.connect(self.startCount)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startCount</span><span class="params">(self)</span>:</span></div><div class="line">        self.pushButton.clicked.disconnect()</div><div class="line">        self.get_thread = getCountThread()</div><div class="line">        self.connect(self.get_thread, SIGNAL(<span class="string">"showCount(int)"</span>), self.showCount)</div><div class="line">        self.connect(self.get_thread, SIGNAL(<span class="string">"finished()"</span>), self.done)</div><div class="line">        self.get_thread.start()</div><div class="line">        <span class="comment"># must be under the self.get_thread.start()</span></div><div class="line">        self.pushButton.clicked.connect(self.get_thread.terminate)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showCount</span><span class="params">(self, count)</span>:</span></div><div class="line">        self.pushButton.setText(str(count))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">done</span><span class="params">(self)</span>:</span></div><div class="line">        self.pushButton.clicked.disconnect()</div><div class="line">        self.pushButton.setText(<span class="string">"PushButton"</span>)</div><div class="line">        self.pushButton.clicked.connect(self.startCount)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app = QtGui.QApplication(sys.argv)</div><div class="line">    form = MyForm()</div><div class="line">    form.show()</div><div class="line">    app.exec_()</div></pre></td></tr></table></figure>
</li>
<li><p>explanation</p>
<ul>
<li><code>getCountThread</code> 子线程类, 执行繁重任务</li>
<li><code>MyForm</code>-&gt;<code>startCount</code> 点击按键后执行, 设置好信号, 启动子线程</li>
<li><code>self.connect(self.get_thread, SIGNAL(&quot;showCount(int)&quot;), self.showCount)</code><br>准备接收来自线程的信号, 并在 <code>showCount</code> 更新UI</li>
<li><code>self.connect(self.get_thread, SIGNAL(&quot;finished()&quot;), self.done)</code><br>准备接收来自线程的结束信号, 然后在 <code>done</code> 下更新标记和UI</li>
<li><code>self.get_thread.start()</code><br>启动子线程</li>
<li><code>self.pushButton.clicked.connect(self.get_thread.terminate)</code><br>将按键的功能设置为终止子线程, 必须放在 <code>self.get_thread.start()</code> 下面</li>
</ul>
</li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows 软件系列-开发软件]]></title>
      <url>https://draapho.github.io/2016/10/16/1611-WinSoft-other/</url>
      <content type="html"><![CDATA[<h1 id="eclipse"><a href="#eclipse" class="headerlink" title="eclipse"></a><a href="https://eclipse.org/downloads/" target="_blank" rel="external">eclipse</a></h1><ul>
<li><a href="https://eclipse.org/downloads/" target="_blank" rel="external">eclipse</a> 就不做介绍了.</li>
<li>设置主题<ul>
<li><code>Window</code>-&gt;<code>Preferences</code>-&gt;<code>General</code>-&gt;<code>Appearance</code>-&gt;<code>Color Theme</code>-&gt;<code>Sublime Text 2</code></li>
</ul>
</li>
<li>设置编辑界面<ul>
<li><code>Window</code>-&gt;<code>Preferences</code>-&gt; <code>General</code>-&gt;<code>Editors</code>-&gt;<code>Text Editors</code>-&gt;<ul>
<li><code>Insert spaces for tabs</code></li>
<li><code>Show print margin</code></li>
<li><code>Show whitespace characters</code>-&gt;<code>configure visibility</code>-&gt;<del><code>Carriage Return</code></del> <del><code>Line Feed</code></del></li>
</ul>
</li>
<li><code>Window</code>-&gt;<code>Preferences</code>-&gt; <code>General</code>-&gt;<code>Editors</code>-&gt;<code>Text Editors</code>-&gt;<code>Quick Diff</code><ul>
<li><code>Enable Quick Diff</code></li>
<li><code>Use this reference source:</code>-&gt;<code>A Git Revision</code></li>
<li>需要装好git</li>
</ul>
</li>
</ul>
</li>
<li>设置路径<ul>
<li><code>Window</code>-&gt;<code>Preferences</code>-&gt;<code>Team</code>-&gt;<code>Git</code>-&gt;<code>Default repository folder:</code>-&gt;<code>${project_loc}</code></li>
<li><code>Window</code>-&gt;<code>Preferences</code>-&gt;<code>Terminal</code>-&gt;<code>Local Terminal</code>-&gt;<code>Initial Working Directory</code>-&gt;<code>${project_loc}</code></li>
<li>注意, 上述两项需要有git项目并编译后, 才可以成功设置</li>
</ul>
</li>
<li>设置快捷键<ul>
<li><code>Window</code>-&gt;<code>Preferences</code>-&gt;<code>General</code>-&gt;<code>Keys</code> 可设置快捷键</li>
<li>快捷键设置要求见 <a href="https://draapho.github.io/2016/10/08/1607-Shortcut-win/">Windows快捷键</a></li>
<li>配置文件名为 <code>org.eclipse.ui.workbench.prefs</code>, 路径如下, $workspace$ 表示 eclipse 的工作路径.</li>
<li><code>$workspace$\.metadata\.plugins\org.eclipse.core.runtime\.settings</code>下</li>
<li>TrueSTUIDO版的快捷键见TureSTUDIO</li>
</ul>
</li>
</ul>
<h1 id="TrueSTUIDO"><a href="#TrueSTUIDO" class="headerlink" title="TrueSTUIDO"></a><a href="http://atollic.com/truestudio/" target="_blank" rel="external">TrueSTUIDO</a></h1><ul>
<li><a href="http://atollic.com/truestudio/" target="_blank" rel="external">TrueSTUIDO</a>是一款免费的ARM IDE, 基于eclipse. 免费版有5s广告.</li>
<li>快捷键配置文件<ul>
<li>我的配置文件 <a href="https://github.com/draapho/Blog/tree/master/_blog_stuff/eclipse/org.eclipse.ui.workbench.prefs" target="_blank" rel="external">org.eclipse.ui.workbench.prefs</a></li>
<li>下载后直接覆盖放入 <code>$workspace$/.metadata/.plugins/org.eclipse.core.runtime/.settings/</code></li>
</ul>
</li>
<li><a href="https://www.youtube.com/watch?v=R2hfq4S_-B0" target="_blank" rel="external">TrueSTUIDO Download and Reset (no debug)</a><ul>
<li><code>Run</code>-&gt;<code>Debug Configurations...</code>-&gt;<code>Embedded C/C++...</code>下的文件-&gt;<code>Startup Scripts</code></li>
<li>delete all context after <code>load</code> and input <code>quit</code></li>
<li><code>Window</code>-&gt;<code>Perspective</code>-&gt;<code>Customize Pespective...</code>-&gt;<code>Launch</code>-&gt;选择 <code>Debug</code> 和 <code>Run</code></li>
</ul>
</li>
<li>生成指定格式<ul>
<li>项目右键 <code>Properties</code>-&gt;<code>C/C++ Build</code>-&gt;<code>Settings</code>-&gt;<code>Tool Settings</code>-&gt;<code>Other</code>-&gt;<code>Output format</code>-&gt;<code>Convert build output</code>-&gt;<code>Intel Hex</code> or <code>Binary</code></li>
</ul>
</li>
</ul>
<h1 id="RealView-MDK"><a href="#RealView-MDK" class="headerlink" title="RealView MDK"></a>RealView MDK</h1><ul>
<li>RVMDK 设置成utf8格式. <code>Edit</code>-&gt;<code>Configuration</code>-&gt;<code>Editor</code>-&gt;<code>Encoding</code>-&gt;<code>UTF8</code></li>
</ul>
<h1 id="Source-Insight"><a href="#Source-Insight" class="headerlink" title="Source Insight"></a>Source Insight</h1><ul>
<li>添加完文件后, 需要同步. <code>Project</code>-&gt;<code>Synchronize Files...</code></li>
<li>添加文件类型. <code>Options</code>-&gt;<code>Document Options</code>-&gt;<code>Document Type</code>, 在file filter内增加文件类型即可</li>
</ul>
<h1 id="使用mingw编译C语言"><a href="#使用mingw编译C语言" class="headerlink" title="使用mingw编译C语言"></a>使用mingw编译C语言</h1><ul>
<li>主要用于写一些小程序用来验证或测试. 与linux开发习惯一致, 而且免费轻巧快捷.</li>
<li><p>下载 <a href="http://www.mingw.org/" target="_blank" rel="external">MinGW</a>, 安装并设置好环境变量.</p>
<ul>
<li>安装好后, 只是 MinGW Installation Manager, 实际上是个绿色软件. 打开后继续安装组件</li>
<li><code>Basic Setup</code>-&gt;<code>mingw32-base</code> 和 <code>mingw32-gcc-g++</code>-&gt;左上 <code>Installation</code>-&gt;<code>Apply changes</code>-&gt;等待安装完成.</li>
<li>这里只需要编译c和c++文件, 无需安装其它组件了.</li>
<li>设置 <code>...\MinGW\bin</code> 文件夹到系统环境变量中</li>
<li>复制一份 <code>mingw32-make.exe</code> 并重命名为 <code>make.exe</code>, 这样就能直接用 make 指令了</li>
<li>测试. 终端中输入 <code>make -v</code> 和 <code>gcc -v</code>, 看是否可以识别到指令</li>
</ul>
</li>
<li><p>建立一个工作目录, 建立2个文件即可. 一个 <code>.c</code>, 另一个 <code>makefile</code> 即可</p>
<ul>
<li><p>创建并命名为 <code>main.c</code></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\r\nhello: %s\r\n"</span>, <span class="string">"DRA&amp;PHO"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>创建并命名为 <code>makefile</code></p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">test:main.o</div><div class="line">    gcc -o hello main.o</div><div class="line"></div><div class="line">main.o:main.c</div><div class="line">    gcc -c main.c</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>打开终端, 切换到这个工作目录</p>
<ul>
<li>输入 <code>make</code> 即可编译, 会生成 <code>main.o</code> <code>hello.exe</code> 两个文件</li>
<li>输入 <code>./hello.exe</code> 执行, 终端就会输出 <code>hello: DRA&amp;PHO</code></li>
</ul>
</li>
<li>资料和参考<ul>
<li><a href="http://blog.csdn.net/zhanghan3/article/details/1334308" target="_blank" rel="external">windows下使用makefile编译C语言</a></li>
</ul>
</li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows 软件系列-atom插件]]></title>
      <url>https://draapho.github.io/2016/10/12/1610-WinSoft-atompack/</url>
      <content type="html"><![CDATA[<h1 id="atom简介"><a href="#atom简介" class="headerlink" title="atom简介"></a><a href="https://atom.io/" target="_blank" rel="external">atom</a>简介</h1><ul>
<li>界面简洁, 基本上手可用, 无需复杂设置</li>
<li>开源免费, 而且多平台支持, 有丰富的插件库</li>
<li>和git的整合度很好! 直观明了好用</li>
<li>启动相对较慢, 但可接受.</li>
<li>懒人不想折腾, atom无明显短板, 就作为主力代码编辑器了</li>
<li>定位是 Notepad++ 为快速处理文件, atom 处理项目</li>
<li>此篇重点介绍 atom 插件的选择和安装, 以及配置快捷键. 基础介绍见<a href="https://draapho.github.io/2016/09/30/1603-WinSoft-editor/">Windows 软件系列-文本编辑</a></li>
</ul>
<h1 id="atom-插件的安装方式"><a href="#atom-插件的安装方式" class="headerlink" title="atom 插件的安装方式"></a>atom 插件的安装方式</h1><ul>
<li><code>ctrl-,</code>-&gt;<code>Settings</code>-&gt;<code>Install</code>-&gt;选择要安装的插件</li>
<li>终端下使用命令行 <code>apm install</code>, 装完后需要重启atom.<br>有些插件只能通过这个方式安装. 譬如要安装 <code>linter</code>, 命令行输入<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apm install linter</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="atom-通用插件"><a href="#atom-通用插件" class="headerlink" title="atom 通用插件"></a>atom 通用插件</h1><ul>
<li><code>Sublime-Style-Column-Selection</code> 使用 <code>alt-鼠标左键</code> 进入列选模式</li>
<li><code>atom-beautify</code> 自动格式化代码,<ul>
<li>需设置 <code>ctrl-b</code> 美化</li>
</ul>
</li>
<li><del><code>autocomplete-paths</code></del> 辅助完成路径</li>
<li><code>block-comment-plus</code> 批量注释, 支持多种语言<ul>
<li>需设置 <code>ctrl-shift-/</code> 和 <code>ctrl-shift-\</code></li>
</ul>
</li>
<li><code>dash</code>  文档帮助, 配合 zeal (windows/linux) 或 dash(apple), 实现快速查询API<ul>
<li>需设置 <code>F1</code> 帮助</li>
</ul>
</li>
<li><del><code>disable-keybindings</code></del> 快速禁用atom的部分快捷键</li>
<li><code>docblockr</code> 注释辅助, 快速添加函数的注释<ul>
<li>支持 <code>tab</code> 键直接在参数间跳转</li>
<li><code>Align tags</code>-&gt;<code>deep</code></li>
<li><code>Auto add method tag</code></li>
<li><del><code>Extend double slash</code></del></li>
</ul>
</li>
<li><code>highlight-selected</code> 自动高亮匹配的词,</li>
<li><code>hyperclick</code> 快速跳转到定义处, 仅限单文件, 但可由别的插件扩展<ul>
<li><code>Trigger keys for Windows</code> <code>ctrl-shift-click</code>. 用ctrl键和系统多选冲突</li>
</ul>
</li>
<li><code>last-cursor-position</code> 浏览历史跳转<ul>
<li>需设置 <code>ctrl-shift-z</code> <code>ctrl-shift-y</code> 进行跳转</li>
</ul>
</li>
<li><code>linter</code> 语法检查基础包</li>
<li><code>minimap</code> 文件地图</li>
<li><code>minimap-highlight-selected</code> 在文件地图中显示匹配的词</li>
<li><code>platformio-ide-terminal</code> 终端软件 <ul>
<li>支持 <code>ctrl-~</code> 快速打开, <code>ctrl-enter</code> 输入选中的文本</li>
<li><code>Close Terminal on Exit</code></li>
<li><code>Shell Override</code>-&gt;<code>git-cmd.exe</code> 没有配置环境变量则需要使用绝对路径</li>
<li><code>Shell Arguments</code>-&gt;<code>--no-cd --command=usr/bin/bash.exe -l -i</code></li>
<li><code>Working Directory</code>-&gt;<code>Project</code></li>
<li><code>Theme</code>-&gt;<code>homebrew</code> 黑底绿字</li>
</ul>
</li>
<li><del><code>Project Manager</code></del> 加入项目的概念, 纯快捷键操作. 与<code>project-viewer</code>二选一即可.</li>
<li><code>project-viewer</code> 加入项目的概念,  带UI. 与<code>Project Manager</code>二选一即可.<ul>
<li><code>Status Bar Visibility</code></li>
<li><code>Autohide</code></li>
<li><code>Positon of the panel</code>-&gt;<code>Left</code></li>
<li><del><code>Convert Old Data</code></del></li>
</ul>
</li>
<li><code>script</code> 一键执行, 支持多种代码, 不弹窗<ul>
<li>需设置 <code>F5</code> 执行</li>
</ul>
</li>
<li><code>symbols-tree-view</code> 显示类/变量/函数列表<ul>
<li><code>Auto Hide</code></li>
<li><code>Auto Toggle</code></li>
</ul>
</li>
<li><code>tabs-to-spaces</code> tab空格互相转换</li>
<li><del><code>vim-mode</code></del> vim操作方式. 需要屏蔽按键 <code>ctrl-f</code>, 恢复为搜索按键<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&apos;atom-text-editor.vim-mode:not(.insert-mode)&apos;:</div><div class="line">  &apos;ctrl-f&apos;: &apos;unset!&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="git-插件"><a href="#git-插件" class="headerlink" title="git 插件"></a>git 插件</h1><ul>
<li><code>git-time-machine</code> 查看单文件的git历史<ul>
<li>需设置 <code>f6</code> 查看比较</li>
</ul>
</li>
<li><del><code>git-plus</code></del> git辅助, 我是通过 <code>platformio-ide-terminal</code> 打开终端敲git命令.</li>
<li>merge-conflicts 查看git文件冲突<ul>
<li>需设置 <code>ctrl-f6</code> 查看冲突</li>
</ul>
</li>
</ul>
<h1 id="python-插件"><a href="#python-插件" class="headerlink" title="python 插件"></a>python 插件</h1><ul>
<li>配置 <code>atom-beautify</code> 之python语言<ul>
<li>安装 <a href="https://www.python.org/" target="_blank" rel="external">python</a> </li>
<li>安装 <a href="https://github.com/hhatto/autopep8" target="_blank" rel="external">autopep8</a>, 调用 <code>pip install --upgrade autopep8</code></li>
<li>默认就是使用 <code>autopep8</code> 优化代码, 也推荐这个使用这个工具. <code>yapf</code>的优化结果无法满足<code>linter-flake8</code>的检查.</li>
<li>测试. 打开一个 <code>.py</code> 文件, 右键选择 <code>Beautify editor contents</code> 看是否成功了.</li>
</ul>
</li>
<li><del><code>atom-python-run</code></del> <code>F5</code>运行, 但是会弹cmd窗, 改用<code>script</code></li>
<li><code>autocomplete-python</code> python辅助, 配合 <code>hyperclick</code> 跳转很方便<ul>
<li>设置快捷键 <code>f4</code> 跳转</li>
<li><code>Show Descriptions</code></li>
<li><code>Autocomplete Function Parameters</code>-&gt;<code>all</code></li>
</ul>
</li>
<li><code>linter-flake8</code> 代码规范检查, 检查很严, 配合 autopep8 的自动格式化就很完美了.<ul>
<li>终端输入 <code>pip install flake8</code> python 安装 <code>flake8</code></li>
<li>终端输入 <code>apm install linter-flake8</code> atom 安装 <code>linter-flake8</code></li>
<li>插件配置 <code>Ignore Error</code>-&gt;<code>E501</code> 超过79列不要提示错误</li>
</ul>
</li>
</ul>
<h1 id="c-c-插件"><a href="#c-c-插件" class="headerlink" title="c/c++ 插件"></a>c/c++ 插件</h1><ul>
<li>配置 <code>atom-beautify</code> 之c/c++语言<ul>
<li>安装<a href="http://uncrustify.sourceforge.net/" target="_blank" rel="external">uncrustify</a>, 可以自动美化多种语言的格式.<ul>
<li>下载<a href="https://sourceforge.net/projects/uncrustify/files/uncrustify/uncrustify-0.63/" target="_blank" rel="external">uncrustify-0.63.0-g44ce0f1-win32.zip</a></li>
<li>解压后, 将uncrustify目录加入环境变量, 已 <code>D:\uncrustify\</code> 为例</li>
<li>终端内输入 <code>uncrustify -v</code>, 测试是否配置好 uncrustify</li>
</ul>
</li>
<li><code>atom-beautify</code> 插件的配置, 在c和c++下分别操作一次.<ul>
<li><code>Default Beautifier</code>-&gt;<code>Uncrustify</code> . <del>另一个选项 <code>clang-format</code> 需要安装clang, 里面带有指令<code>clang-format.exe</code></del></li>
<li><code>Config Path</code>-&gt;<code>D:\uncrustify\cfg\linux.cfg</code> 选择格式化模板</li>
</ul>
</li>
<li>测试, 打开一个 <code>.c</code> 文件, 右键选择 <code>Beautify editor contents</code> 看是否成功了.</li>
</ul>
</li>
<li><code>atom-gtags</code>, 能比较好的实现跳转<ul>
<li>设置快捷键 <code>f4</code> 跳转</li>
<li>右键项目根目录即可 <code>Build Gtags</code></li>
<li>放弃 <del><code>atom-ctags</code></del> 实测效果很差!</li>
<li>比较: <a href="https://github.com/OpenGrok/OpenGrok/wiki/Comparison-with-Similar-Tools" target="_blank" rel="external">https://github.com/OpenGrok/OpenGrok/wiki/Comparison-with-Similar-Tools</a></li>
</ul>
</li>
<li>基于gcc编译的配置<ul>
<li>下载 <a href="http://www.mingw.org/" target="_blank" rel="external">MinGW</a>, 安装并设置好环境变量<ul>
<li>安装好后, 只是 <code>MinGW Installation Manager</code>, 实际上是个绿色软件. 打开后继续安装组件</li>
<li><code>Basic Setup</code>-&gt;<code>mingw32-base</code> 和 <code>mingw32-gcc-g++</code>-&gt;左上 <code>Installation</code>-&gt;<code>Apply changes</code>-&gt;等待安装完成.</li>
<li>这里只需要编译c和c++文件, 无需安装其它组件了.</li>
<li>设置 <code>...\MinGW\bin</code> 文件夹到系统环境变量中</li>
<li>复制一份 <code>mingw32-make.exe</code> 并重命名为 <code>make.exe</code>, 这样就能直接用 <code>make</code> 指令了</li>
<li>测试. 终端中输入 <code>make -v</code> 和 <code>gcc -v</code>, 看是否可以识别到指令</li>
</ul>
</li>
<li><del><code>gpp-compiler</code></del> <code>f5</code>运行, 但会弹cmd窗, 决定使用内置终端</li>
<li><code>linter-gcc</code> 基于gcc进行语法检查<ul>
<li><code>GCC Excutable Path</code>-&gt;<code>gcc</code> 或 <code>g++</code>, 没有配置环境变量的话, 使用绝对路径, 注意斜杠!</li>
<li><code>GCC Include Paths</code>-&gt;<code>.../MinGW/include/*</code> 注意斜杠方向! 加入必要头文件.</li>
<li>只在保存时, 才会进行语法检查</li>
</ul>
</li>
</ul>
</li>
<li><del>基于clang编译的配置</del><ul>
<li>彻底放弃这个系列, 不用vs, 基于mingw的配置失败.</li>
<li>相关软件和参考如下</li>
<li><del><code>autocomplete-clang</code></del> 自动完成</li>
<li><del><code>linter-clang</code></del> 语法检查</li>
<li><a href="http://llvm.org/" target="_blank" rel="external">clang官网</a>. 官网进入的链接是找不到windows下编译好的版本的.</li>
<li>下载特定版本的clang, 如 <code>LLVM-3.9.0</code>, 使用链接:<a href="http://llvm.org/releases/3.9.0/" target="_blank" rel="external">http://llvm.org/releases/3.9.0/</a></li>
<li>参考 <a href="http://m.blog.csdn.net/article/details?id=49902519" target="_blank" rel="external">解决llvm/clang在windows下编译时找不到头文件和Lib的问题</a></li>
</ul>
</li>
</ul>
<h1 id="markdown插件"><a href="#markdown插件" class="headerlink" title="markdown插件"></a>markdown插件</h1><ul>
<li>atom已经支持markdown, 使用<code>ctrl-shift-m</code>即可预览. 如果要增强功能, 可以使用插件</li>
<li><del><code>markdown-preview-enhanced</code></del> markdown, 导出为pdf时, 制图显示有问题<ul>
<li><code>Break On Single Newline</code></li>
<li><code>Enable Typographer</code></li>
<li><code>Math Rendering Option</code>-&gt;<code>MathJax</code></li>
<li><del><code>Enable Wiki Link Syntax</code></del></li>
<li><del><code>Use GitHub.com syntax theme</code></del></li>
<li><del><code>Print Background when generating pdf</code></del> 否则pdf不显示制图</li>
<li><del><code>Use Github style when generating pdf</code></del> 否则pdf不显示制图</li>
<li><del><code>Open preview pane automatically when opening a markdown file</code></del></li>
<li><code>Image Uploader</code>-&gt;<code>sm.ms</code> 建议这个. <code>imgur</code> 有时限</li>
<li><code>Mermaid Theme</code>-&gt;<code>mermaid.forest.css</code></li>
</ul>
</li>
</ul>
<h1 id="atom快捷键配置"><a href="#atom快捷键配置" class="headerlink" title="atom快捷键配置"></a>atom快捷键配置</h1><ul>
<li>使用 <code>ctrl-.</code> 查看按键冲突. 如果无效, 试试点到非编辑区(如目录树)试试.</li>
<li><code>ctrl-,</code>-&gt;<code>Settings</code>-&gt;<code>Keybindings</code>-&gt;<code>your keymap file</code>-&gt;打开<code>keymap.cson</code></li>
<li>自定义快捷键方式可参考 <a href="http://flight-manual.atom.io/using-atom/sections/basic-customization/#_customizing_keybindings" target="_blank" rel="external">Basic Customization</a></li>
<li>很明显, 要备份自己的快捷键设置, 只需要保存这份 <code>keymap.cson</code> 文件</li>
<li>最后禁用插件里不需要的快捷键, 或者使用 <code>disable-keybindings</code>.<ul>
<li><code>Keybindings</code> -&gt; <del><code>Enable</code></del>. 屏蔽以下插件:</li>
<li><code>atom-beautify</code>, <code>atom-gtags</code>, <code>autocomplete-python</code></li>
<li><code>block-comment-plus</code>, <code>dash</code>, <code>git-time-machine</code></li>
<li><code>highlight-selected</code>, <code>hyperclick</code>, </li>
<li><code>script</code>, <code>symbols-tree-view</code>, <code>tabs-to-spaces</code></li>
</ul>
</li>
<li><p>我的 <code>keymap.cson</code> 配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line"># atom 大致原则是, 小窗口&gt;大窗口, 然后才是客户配置&gt;插件配置&gt;系统配置</div><div class="line"># 因此优先级 &apos;body&apos; &lt; &apos;atom-workspace&apos; &lt; &apos;atom-text-editor&apos; &lt; &apos;atom-text-editor:not([mini])&apos;</div><div class="line"></div><div class="line">&apos;atom-text-editor[data-grammar~=python]:not(.mini)&apos;:</div><div class="line">  &apos;f4&apos;: &apos;autocomplete-python:go-to-definition&apos;</div><div class="line">  &apos;shift-f4&apos;: &apos;autocomplete-python:go-to-definition&apos;</div><div class="line">  &apos;alt-shift-s&apos;: &apos;autocomplete-python:override-method&apos;</div><div class="line"></div><div class="line">&apos;atom-text-editor[data-grammar~=c]:not(.mini)&apos;:</div><div class="line">  &apos;f4&apos;: &apos;atom-gtags:get-definitions&apos;</div><div class="line">  &apos;shift-f4&apos;: &apos;atom-gtags:get-references&apos;</div><div class="line"></div><div class="line">&apos;.platform-win32 atom-workspace atom-text-editor:not([mini])&apos;:</div><div class="line"># character                            </div><div class="line">  &apos;ctrl-b&apos;: &apos;atom-beautify:beautify-editor&apos;</div><div class="line">  &apos;ctrl-d&apos;: &apos;core:delete&apos;</div><div class="line">  &apos;ctrl-shift-d&apos;: &apos;editor:delete-line&apos;</div><div class="line">  &apos;ctrl-j&apos;: &apos;core:move-down&apos; </div><div class="line">  &apos;ctrl-k&apos;: &apos;core:move-up&apos;   </div><div class="line">  &apos;ctrl-l&apos;: &apos;core:move-right&apos;</div><div class="line">  &apos;ctrl-h&apos;: &apos;core:move-left&apos;</div><div class="line">  &apos;ctrl-shift-j&apos;: &apos;editor:move-line-down&apos;</div><div class="line">  &apos;ctrl-shift-k&apos;: &apos;editor:move-line-up&apos;</div><div class="line">  &apos;ctrl-shift-l&apos;: &apos;editor:move-to-end-of-word&apos;</div><div class="line">  &apos;ctrl-shift-h&apos;: &apos;editor:move-to-beginning-of-word&apos;</div><div class="line">  &apos;alt-shift-j&apos;: &apos;editor:join-lines&apos;</div><div class="line">  &apos;ctrl-m&apos;: &apos;bookmarks:toggle-bookmark&apos;  </div><div class="line">  &apos;ctrl-r&apos;: &apos;core:redo&apos;</div><div class="line">  &apos;ctrl-u&apos;: &apos;core:undo&apos;</div><div class="line">  &apos;ctrl-shift-v&apos;: &apos;editor:duplicate-lines&apos;</div><div class="line">  &apos;ctrl-shift-W&apos;: &apos;tabs:close-other-tabs&apos;</div><div class="line">  &apos;ctrl-shift-x&apos;: &apos;editor:select-line&apos;</div><div class="line">  &apos;ctrl-shift-y&apos;: &apos;last-cursor-position:next&apos;</div><div class="line">  &apos;ctrl-shift-z&apos;: &apos;last-cursor-position:previous&apos;</div><div class="line"># special</div><div class="line">  &apos;ctrl-4&apos;: &apos;editor:move-to-end-of-screen-line&apos;         # ctrl-$</div><div class="line">  &apos;ctrl-6&apos;: &apos;editor:move-to-first-character-of-line&apos;    # ctrl-^</div><div class="line">  &apos;ctrl-$&apos;: &apos;editor:select-to-end-of-line&apos;              # ctrl-shift-$</div><div class="line">  &apos;ctrl-^&apos;: &apos;editor:select-to-first-character-of-line&apos;  # ctrl-shift-^</div><div class="line">  &apos;ctrl-?&apos;: &apos;block-comment-plus:toggle&apos;                 # ctrl-shift-/</div><div class="line">  &apos;ctrl-|&apos;: &apos;block-comment-plus:toggle&apos;                 # ctrl-shift-\</div><div class="line">  &apos;ctrl-]&apos;: &apos;bracket-matcher:select-inside-brackets&apos;</div><div class="line">  &apos;ctrl-[&apos;: &apos;bracket-matcher:go-to-matching-bracket&apos;</div><div class="line">  &apos;ctrl-.&apos;: &apos;tabs-to-spaces:untabify-all&apos;</div><div class="line">  &apos;ctrl-&gt;&apos;: &apos;tabs-to-spaces:tabify&apos;                     # ctrl-shift-.</div><div class="line"># alt</div><div class="line">  &apos;alt-0&apos;: &apos;editor:fold-all&apos;</div><div class="line">  &apos;alt-)&apos;: &apos;editor:unfold-all&apos;                          # alt-shift-0</div><div class="line">  &apos;alt-!&apos;: &apos;editor:unfold-all&apos;                          # alt-shift-1</div><div class="line">  &apos;alt-1&apos;: &apos;editor:fold-at-indent-level-1&apos;</div><div class="line">  &apos;alt-2&apos;: &apos;editor:fold-at-indent-level-2&apos;</div><div class="line">  &apos;alt-3&apos;: &apos;editor:fold-at-indent-level-3&apos;</div><div class="line">  &apos;alt-4&apos;: &apos;editor:fold-at-indent-level-4&apos;</div><div class="line">  &apos;alt-5&apos;: &apos;editor:fold-at-indent-level-5&apos;</div><div class="line">  &apos;alt-6&apos;: &apos;editor:fold-at-indent-level-6&apos;</div><div class="line">  &apos;alt-7&apos;: &apos;editor:fold-at-indent-level-7&apos;</div><div class="line">  &apos;alt-8&apos;: &apos;editor:fold-at-indent-level-8&apos;</div><div class="line">  &apos;alt-9&apos;: &apos;editor:fold-at-indent-level-9&apos;</div><div class="line"># f1-f6</div><div class="line">  &apos;f1&apos;: &apos;dash:shortcut&apos;</div><div class="line">  &apos;ctrl-f2&apos;: &apos;bookmarks:view-all&apos;</div><div class="line">  &apos;ctrl-shift-f2&apos;: &apos;bookmarks:clear-bookmarks&apos;</div><div class="line">  &apos;ctrl-f3&apos;: &apos;find-and-replace:select-all&apos;</div><div class="line">  &apos;f5&apos;: &apos;script:run&apos;</div><div class="line">  &apos;f6&apos;: &apos;git-time-machine:toggle&apos;</div><div class="line">  &apos;ctrl-f6&apos;: &apos;merge-conflicts:detect&apos;</div><div class="line">  &apos;shift-f6&apos;: &apos;merge-conflicts:next-unresolved&apos;</div><div class="line">  &apos;ctrl-shift-f6&apos;: &apos;merge-conflicts:previous-unresolved&apos;</div><div class="line"></div><div class="line">&apos;body&apos;:</div><div class="line">  &apos;ctrl-j&apos;: &apos;core:move-down&apos;</div><div class="line">  &apos;ctrl-k&apos;: &apos;core:move-up&apos;</div><div class="line">  &apos;ctrl-r&apos;: &apos;core:redo&apos;</div><div class="line">  &apos;ctrl-u&apos;: &apos;core:undo&apos;</div><div class="line">  &apos;ctrl-shift-S&apos;: &apos;window:save-all&apos;</div><div class="line"># unset ctrl-k *</div><div class="line">  &apos;ctrl-k up&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k down&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k left&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k right&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-w&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-alt-w&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-p&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-n&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-up&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-down&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-left&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-right&apos;: &apos;unset!&apos;</div><div class="line">&apos;atom-workspace atom-text-editor&apos;:</div><div class="line">  &apos;ctrl-k ctrl-u&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-l&apos;: &apos;unset!&apos;</div><div class="line">&apos;atom-workspace atom-text-editor:not([mini])&apos;:</div><div class="line">  &apos;ctrl-k ctrl-0&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-1&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-2&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-3&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-4&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-5&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-6&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-7&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-8&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k ctrl-9&apos;: &apos;unset!&apos;</div><div class="line">&apos;.platform-win32, .platform-linux&apos;: </div><div class="line">  &apos;ctrl-k ctrl-b&apos;: &apos;unset!&apos;</div><div class="line">&apos;.platform-win32 .tree-view, .platform-linux .tree-view&apos;:</div><div class="line">  &apos;ctrl-k right&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k l&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k left&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k h&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k up&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k k&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k down&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-k j&apos;: &apos;unset!&apos;</div><div class="line">&apos;.platform-win32 atom-text-editor, .platform-linux atom-text-editor&apos;:</div><div class="line">  &apos;ctrl-k ctrl-d&apos;: &apos;unset!&apos;</div><div class="line">  &apos;ctrl-u&apos;: &apos;unset!&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="参考和资料"><a href="#参考和资料" class="headerlink" title="参考和资料"></a>参考和资料</h1><ul>
<li><a href="http://flight-manual.atom.io/" target="_blank" rel="external">Atom Flight Manual</a>, atom手册</li>
<li><a href="https://atom.io/packages" target="_blank" rel="external">atom Packages</a>, atom插件中心</li>
<li>我的 <a href="https://draapho.github.io/2016/10/08/1607-Shortcut-win/">Windows快捷键</a></li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows 软件系列-终端]]></title>
      <url>https://draapho.github.io/2016/10/10/1609-WinSoft-terminal/</url>
      <content type="html"><![CDATA[<h1 id="ConEmu-简介"><a href="#ConEmu-简介" class="headerlink" title="ConEmu 简介"></a><a href="https://conemu.github.io/" target="_blank" rel="external">ConEmu</a> 简介</h1><ul>
<li><a href="https://conemu.github.io/" target="_blank" rel="external">ConEmu</a> 即 Console Emulate, 一款终端模拟器, 完全免费, 可以通过他加载多种终端如 cmd, shell, bash, putty 而且便于管理!</li>
<li>简而言之, 凡是喜欢用命令行方式的, windows就请使用这款软件, 分分钟变身geek或者hacker的感觉…</li>
<li>右键文件夹打开ConEmu就自动进入此文件夹, <code>ConEmu Inside</code> 甚至能嵌入到文件夹中.</li>
<li>顺便说一句, cmder就是他的马甲, 核心还是ConEmu.</li>
</ul>
<h2 id="我的ConEmu"><a href="#我的ConEmu" class="headerlink" title="我的ConEmu"></a>我的ConEmu</h2><ul>
<li>我希望的ConEmu, 就是想输命令行, 打开ConEmu就行!</li>
<li>本文的配置可以在ConEmu中执行:<ul>
<li><code>cmd</code> <code>shell</code> windows自带终端</li>
<li><code>git</code> windows下安装好git即可, 包含了<code>git-bash</code></li>
<li><code>mingw</code> windows下用gnu工具链编译c, c++</li>
<li><code>putty</code> ssh链接远程linux, 串口链接嵌入式linux</li>
<li><code>cygwin</code> windows下模拟linux运行环境 (目前尚未使用, 在用传统的虚拟机)</li>
<li>其它指令如: <code>hexo</code> 博客使用, <code>choco</code> 安装软件使用, <code>apm</code> atom下载插件使用.</li>
</ul>
</li>
<li>快速在指定文件夹下打开ConEmu, 可在 <code>Listary</code> 关联快捷键 <code>ctrl-~</code></li>
<li>快速在Notepad++下打开ConEmu, 关联快捷键 <code>ctrl-~</code></li>
</ul>
<h2 id="自制ConEmu绿色版"><a href="#自制ConEmu绿色版" class="headerlink" title="自制ConEmu绿色版"></a>自制ConEmu绿色版</h2><ul>
<li>下载 <a href="https://conemu.github.io/" target="_blank" rel="external">ConEmu便携版</a><ul>
<li>解压后放在理想的文件夹中. 下面以 <code>D:\Green\ConEmu</code> 路径为例.</li>
</ul>
</li>
<li>下载 <a href="https://mridgers.github.io/clink/" target="_blank" rel="external">clink便携版</a>, 用于增强终端操作, 如复制拷贝快捷键等<ul>
<li>解压后, 所有文件放入 <code>D:\Green\ConEmu\ConEmu\clink</code>, 这里面原来就有个 <code>Readme.txt</code>, 说的非常清楚了</li>
</ul>
</li>
<li>下载 <a href="https://git-scm.com/download/win" target="_blank" rel="external">git便携版</a>, 版本管理软件<ul>
<li>解压后命名为 <code>Git</code> 放到 <code>D:\Green\ConEmu\plugins</code>,</li>
</ul>
</li>
<li>下载并使用默认设置安装 <a href="http://www.mingw.org/" target="_blank" rel="external">mingw</a>, 用于在win下使用gnu工具编译<ul>
<li>只是装了 <code>MinGW Installation Manager</code> (实际上是个绿色软件). 打开后继续安装组件</li>
<li><code>Basic Setup</code>-&gt;<code>mingw32-base</code>和<code>mingw32-gcc-g++</code>-&gt;左上<code>Installation</code>-&gt;<code>Apply changes</code>-&gt;等待安装完成.</li>
<li>我只需要编译c和c++文件, <code>msys</code>也已经由git软件实现了, 因此无需安装其它组件了.</li>
<li>然后把整个 <code>MinGW</code> 文件夹放到 <code>D:\Green\ConEmu\plugins</code></li>
<li>复制一份 <code>mingw32-make.exe</code> 并重命名为 <code>make.exe</code>, 这样就能直接用 <code>make</code> 指令了</li>
</ul>
</li>
<li>下载 <a href="http://www.putty.org/" target="_blank" rel="external">putty.zip</a>, ssh远程连接软件及串口软件<ul>
<li>解压后命名为 <code>putty</code> 放到 <code>D:\Green\ConEmu\plugins</code></li>
</ul>
</li>
<li><p>然后需要将上述软件加入环境变量, 这个可以在ConEmu设置中完成!!!</p>
<ul>
<li><p>打开ConEmu, <code>Setting</code>-&gt;<code>Startup</code>-&gt;<code>Environment</code>-&gt;<code>set PATH=%ConEmuBaseDir%\Scripts;%PATH%</code> 下面加上如下语句</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># git PATH</div><div class="line">set PATH=%ConEmuDir%\plugins\Git;%PATH%</div><div class="line">set PATH=%ConEmuDir%\plugins\Git\cmd;%PATH%</div><div class="line"># mingw PATH</div><div class="line">set PATH=%ConEmuDir%\plugins\MinGW\bin;%PATH%</div><div class="line"># putty PATH%</div><div class="line">set PATH=%ConEmuDir%\plugins\putty;%PATH%</div></pre></td></tr></table></figure>
</li>
<li><p>这样, ConEmu在启动时, 会自动加入上述软件到PATH中</p>
</li>
<li>如果使用 <strong>更通用的做法</strong>, 把上述环境变量删除或注释掉.</li>
</ul>
</li>
<li>自制ConEmu绿色版就初步完成, 下面只需要配置了.</li>
</ul>
<h2 id="更通用的做法"><a href="#更通用的做法" class="headerlink" title="更通用的做法"></a>更通用的做法</h2><ul>
<li>用上述方法有三个缺点<ul>
<li>git便携版不支持ssh或GPG免密远程同步, 每次都要求输入用户名和密码, 非常麻烦.</li>
<li>如果不用ConEmu, 那么其它终端, 如atom下的终端就无法使用上述软件.</li>
<li>发现putty会新打开一个窗口, 而不是嵌入到ConEmu中.</li>
</ul>
</li>
<li>下载 <a href="https://git-scm.com/download/win" target="_blank" rel="external">git安装版</a>, 使用默认配置安装即可.<ul>
<li>为了便于使用, 建议把git的根目录也加入环境变量, 这样就能直接调用 <code>git-cmd.exe</code></li>
</ul>
</li>
<li>设置 <code>D:\Green\ConEmu\plugins\MinGW\bin</code> 文件夹到系统环境变量中</li>
<li>设置 <code>D:\Green\ConEmu\plugins\putty</code> 文件夹到系统环境变量中</li>
<li>还可以考虑下载安装 <a href="https://www.cygwin.com/" target="_blank" rel="external">cygwin</a> 并加入ConEmu中, 这是一款Windows下的Linux模拟器. 注意安装和卸载都比较麻烦.<h2 id="ConEmu的设置"><a href="#ConEmu的设置" class="headerlink" title="ConEmu的设置"></a>ConEmu的设置</h2></li>
<li>所有设置都会存放在 <code>conEmu.xml</code> 里, 所以设置的备份很简单</li>
<li>首次打开会有设置向导 <code>fast configuration</code>, 用于生成 <code>conEmu.xml</code></li>
<li>可以在设置好环境变量, 安装好git后, 删除<code>conEmu.xml</code>重新运行, 这样ConEmu会自动检测加入<code>Git bash</code> 和 <code>putty</code>, 省心不少. clink放在指定路径后, 其功能也会自动启用.</li>
<li>配置过程如下, 需要图文版可参考 <a href="https://higoge.github.io/2015/07/22/tools02/" target="_blank" rel="external">工具02：cmd的替代品ConEmu+Clink</a>, 配置上略有区别, 进入 <code>Settings</code> 后<ul>
<li><code>Main</code>-&gt;<code>Appearance</code>-&gt;<code>Generic</code>-&gt;<code>Single instance mode (...)</code></li>
<li><code>Main</code>-&gt;<code>Confirm</code>-&gt;<code>CLose confirmations</code>-&gt;<del><code>When running process was detected</code></del></li>
<li><code>Startup</code>-&gt;<code>Specified named task</code>-&gt;<code>Bash:: Git bash</code> 更改打开时默认使用的终端类型</li>
<li><code>Startup</code>-&gt;<code>Environment</code> 启动时, 会加载这里的环境变量. 配置好系统环境变量的话, 可以全部删除</li>
<li>注册鼠标右键 <code>ConEmu Here</code> 和 <code>ConEmu Inside</code>, 并设置为使用 <code>Git bash</code> 启动<ul>
<li><code>Integration</code>-&gt;<code>ConEmu Here</code>-&gt;<code>Command:</code>改为<code>{Git Bash} -cur_console:n</code>-&gt;<code>Register</code></li>
<li><code>Integration</code>-&gt;<code>ConEmu Inside</code>-&gt;<code>Command:</code>改为<code>{Git Bash} -cur_console:n</code>-&gt;<code>Register</code></li>
</ul>
</li>
<li><code>Integration</code>-&gt;<code>Default term</code>-&gt;<code>Force ConEmu as default terminal for console applications</code></li>
<li>添加 <code>tasks</code>. 选择 <code>Startup</code>-&gt;<code>Tasks</code>, 根据现有例子依样画葫芦即可.<ul>
<li><code>Bash::Git bash</code>: <code>git-cmd.lnk --no-cd --command=usr/bin/bash.exe -l -i</code> 也可以点击<code>File path...</code>使用绝对路径替代快捷方式.</li>
<li><code>Bash::Git bash(Admin)</code>: <code>*git-cmd.exe --no-cd --command=usr/bin/bash.exe -l -i</code> 最前面加个<code>*</code>就是管理员权限了.</li>
<li><code>Putty::default</code>: <code>putty.exe</code> 同样, 可能需要使用绝对路径, 点击<code>File path...</code>选择即可</li>
<li><code>Putty::Ubuntu</code>: <code>putty.exe -new_console -load &quot;ubuntu&quot;</code> 需要putty设置好名为<code>ubuntu</code>的session</li>
<li><code>Cygwin</code>: <code>set HOME=d:\cygwin\home\XXX &amp; &quot;d:\cygwin\bin\mintty.exe&quot; -i /Cygwin.ico -</code> 这条指令没有测试过.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="Putty"><a href="#Putty" class="headerlink" title="Putty"></a><a href="http://www.putty.org/" target="_blank" rel="external">Putty</a></h1><ul>
<li><a href="http://www.putty.org/" target="_blank" rel="external">Putty</a> 可用于ssh连接远程主机, 也支持串口. 使用简单, 完全免费</li>
<li>putty的配置, 一个配置就是一个<code>Session</code>. 可以参考<a href="http://blog.csdn.net/tianlesoftware/article/details/5831605" target="_blank" rel="external">Putty 工具 保存配置的 小技巧</a></li>
<li>putty免密登录, 没有尝试, 可以参考如下两篇文章.<ul>
<li><a href="https://segmentfault.com/a/1190000000639516" target="_blank" rel="external">PuTTY的自动登录设置</a></li>
<li><a href="http://blog.csdn.net/hxg130435477/article/details/9960187" target="_blank" rel="external">windows 上用程序putty使用 ssh自动登录linux</a></li>
</ul>
</li>
</ul>
<h2 id="设置Default"><a href="#设置Default" class="headerlink" title="设置Default"></a>设置Default</h2><ul>
<li><code>Window</code>-&gt;<code>Lines of scrollback</code>-<code>20000</code>  回看更多历史屏幕信息</li>
<li><code>Window</code>-&gt;<code>Apperance</code>-&gt;<code>Vertical line</code>, <code>Cursor blinks</code> 游标闪烁</li>
<li><code>Window</code>-&gt;<code>Colours</code>-&gt;<code>Default Backgroud</code>-&gt;<code>R0 G43 B54</code> 使用ConEmu背景色</li>
<li><code>Connection</code>-&gt;<code>Serial</code>-&gt;<code>Flow control</code>-&gt;<code>None</code> 默认串口不用流控制</li>
<li><code>Session</code>-&gt;<code>Saved Sessions</code>-&gt;输入 <code>Default Settings</code>-&gt;<code>Save</code> 默认值设置完成</li>
</ul>
<h2 id="设置ssh"><a href="#设置ssh" class="headerlink" title="设置ssh"></a>设置ssh</h2><ul>
<li><code>Session</code>-&gt;<code>Conncection type</code>选<code>SSH</code>-&gt;<code>Host Name (or IP address)</code>-&gt;<code>10.0.0.99</code> 或者  <code>username@10.0.0.99</code> 来指定登录名</li>
<li><code>Session</code>-&gt;<code>Saved Session</code> <code>Ubuntu</code>-&gt;<code>Save</code> 设置好配置名称, 保存即可.</li>
<li>如果需要免密登录, 明文的很简单, 调用 <code>putty.exe -load &quot;session_name&quot; -l &quot;username&quot; -pw &quot;password&quot;</code> 即可</li>
<li>如果需要密码加密, 稍微麻烦点. 参考 <a href="http://blog.csdn.net/hxg130435477/article/details/9960187" target="_blank" rel="external">windows 上用程序putty使用 ssh自动登录linux</a>. 我不需要这个功能, 略过不表.</li>
</ul>
<h2 id="设置serial"><a href="#设置serial" class="headerlink" title="设置serial"></a>设置serial</h2><ul>
<li><code>Session</code>-&gt;<code>Conncection type</code>选<code>Serial</code>-&gt;<code>Serial line</code> <code>COM4</code>-&gt;<code>Speed</code> <code>9600</code> 即串口4, 波特率9600</li>
<li><code>Connection</code>-&gt;<code>Serial</code>-&gt;<code>Flow control</code> <code>None</code> 这里可以设置其它串口参数, 不支持自动回显.</li>
<li><code>Session</code>-&gt;<code>Saved Session</code> <code>COM4-9600</code>-&gt;<code>Save</code> 设置好配置名称, 保存即可.</li>
</ul>
<h2 id="配置的导入和导出"><a href="#配置的导入和导出" class="headerlink" title="配置的导入和导出"></a>配置的导入和导出</h2><ul>
<li>putty直接把配置存放在注册表中. 所以思路就是导入导出注册表</li>
<li>cmd下-&gt;<code>regedit</code>-&gt;打开注册表</li>
<li>找到 <code>HKEY_CURRENT_USER\Software\SimonTatham</code></li>
<li>在 <code>SimonTatham</code> 这个节点上点击右键, 选择导出, 保存为<code>config.reg</code>. 这里不单单是putty的配置</li>
<li>恢复时, 管理员权限执行 <code>config.reg</code> 即可</li>
</ul>
<h2 id="putty的调用"><a href="#putty的调用" class="headerlink" title="putty的调用"></a>putty的调用</h2><ul>
<li>基本用法 <code>putty.exe -load &quot;session_name&quot;</code></li>
<li>自动登录 <code>putty.exe -load &quot;session_name&quot; -l &quot;username&quot; -pw &quot;password&quot;</code></li>
<li>更多调用方式可查看 <code>PUTTY.CHM 3.8.x</code> 包含于下载的<code>putty.zip</code>中</li>
</ul>
<h2 id="对比TeraTerm"><a href="#对比TeraTerm" class="headerlink" title="对比TeraTerm"></a>对比<a href="https://ttssh2.osdn.jp/index.html.en" target="_blank" rel="external">TeraTerm</a></h2><ul>
<li>TeraTerm相比于putty设置显得更复杂, 至少串口的功能比putty的要多一点</li>
<li>TeraTerm有自己的脚本语句, 可以实现比较复杂的自动化功能</li>
<li>TeraTerm在ConEmu字体显示有问题.</li>
<li>putty完全满足需求, 配置简单, 完美兼容ConEmu, 因此没有考虑TeraTerm</li>
</ul>
<h1 id="Cygwin"><a href="#Cygwin" class="headerlink" title="Cygwin"></a><a href="https://www.cygwin.com/" target="_blank" rel="external">Cygwin</a></h1><ul>
<li>是windows下的unix仿真环境, 可以用来做交叉编译, 因此可替代虚拟机安装linux.</li>
<li>安装, 可以参考 <a href="http://velep.com/archives/747.html" target="_blank" rel="external">cygwin介绍、安装及其使用</a></li>
<li>交叉编译, 可以参考<ul>
<li><a href="http://mazhijing.blog.51cto.com/215535/39539/" target="_blank" rel="external">Cygwin 安装  基本使用 交叉编译vivi kernel</a></li>
<li><a href="http://www.360doc.com/content/12/0929/14/5013584_238783155.shtml" target="_blank" rel="external">在cygwin中安装gcc编译器</a></li>
</ul>
</li>
<li>卸载, 因为权限问题, Cygwin卸载很麻烦. 可以参考两篇文章, 已经是最简单的方法了<ul>
<li><a href="http://blog.csdn.net/yelangjueqi/article/details/45199209" target="_blank" rel="external">window 下完全卸载Cygwin最简单方法</a>, 就是在运行一次 <code>setup.exe</code> 来卸载</li>
<li><a href="http://blog.163.com/zhuandi_h/blog/static/180270288201282204521376/" target="_blank" rel="external">Win7 完全删除cygwin（本人已删除成功）</a></li>
</ul>
</li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows 软件系列-自定义环境变量]]></title>
      <url>https://draapho.github.io/2016/10/09/1608-WinSoft-path/</url>
      <content type="html"><![CDATA[<h1 id="自定义环境变量"><a href="#自定义环境变量" class="headerlink" title="自定义环境变量"></a>自定义环境变量</h1><ul>
<li>测试过几个例子, 简单的调用没问题, 但带参调用就会有各种无法预料的问题.</li>
<li><code>ConEmu.lnk</code> 后面不支持带参数, <code>git-cmd.lnk</code> 支持带参, 但有奇怪现象.</li>
<li><code>Typora.lnk</code> <code>zeal.lnk</code> 没有问题.</li>
<li>使用此方法可以配合 <code>win-r</code> 快速打开文件夹, 软件等功能! 我没有使用, 因为有更好的替代方案.</li>
<li>!!!注意!!!, 带参调用 <code>.lnk</code> 不完全等同于 <code>.exe</code>, 还是没有linux的链接来的便捷</li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>做软件开发是绕不过环境变量 <code>PATH</code> 的设置的, 经常到后来 <code>PATH</code> 就变得非常长, 难以管理维护.</li>
<li>借助linux链接的概念, 实验了一下windows的快捷方式是否也可以用命令行执行, 发现是可行的!</li>
<li>譬如创建 <code>ConEmu.exe</code> 的快捷方式 <code>ConEmu.lnk</code> (.lnk不会显示). 此时, 在cmd内执行 <code>ConEmu.lnk</code> 等同于执行 <code>ConEmu.exe</code></li>
<li>这样, 就有办法简化自定义 <code>PATH</code> 的数量了, 只需添加一个用户路径到 <code>PATH</code> 中, 如<code>D:\Green\userpath\bin</code>, 然后把用户软件的 <code>.exe</code> 和 <code>.lnk</code> 放到这个目录下面就可以了.</li>
</ul>
<h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><ul>
<li>譬如, 配置 <code>D:\Green\cli\bin</code> 到环境变量中.</li>
<li><code>我的电脑</code>-&gt;右键<code>属性</code> 或者 <code>控制面板</code>-&gt;<code>系统和安全</code>-&gt;<code>系统</code>-&gt;<code>高级系统设置</code></li>
<li>弹出 <code>系统属性</code> 页面-&gt;<code>高级</code> 标签-&gt;最下面 <code>环境变量...</code>-&gt;<code>系统变量</code>-&gt;<code>Path</code>-&gt;加入自定义路径如 <code>D:\Green\cli\bin</code>, windows7的话需要分隔符<code>;</code></li>
<li><code>D:\Green\cli\bin</code> 只是个例子, 可以自己规定任意一个文件夹, 便于记忆即可.</li>
</ul>
<h2 id="添加软件"><a href="#添加软件" class="headerlink" title="添加软件"></a>添加软件</h2><ul>
<li>MinGW, windows下提供 gnu 工具链, 像linux下一样使用 make 编译即可<br>把 <code>.\MinGW\bin</code> 下的所有文件复制一份到 <code>D:\Green\cli\bin</code> 即可</li>
<li>Pandoc, 格式转换软件. 众多markdown编辑器需要此软件来转换格式<br>把 <code>pandoc.exe</code> 和 <code>pandoc-citeproc.exe</code> 复制一份到 <code>D:\Green\cli\bin</code> 即可</li>
<li>putty, ssh和串口终端软件, 多用于远程连接<br><del>putty所有文件复制一份到 <code>D:\Green\cli\bin</code></del>, 放个 <code>putty.exe</code> 即可</li>
<li>uncrustify, 编程语言格式化软件. 可格式化 c, c++, d, java 等众多语言<br>把 <code>uncrustify.exe</code> 复制到 <code>D:\Green\cli\bin</code> 即可</li>
<li>下述软件创建快捷方式, 然后放到 <code>D:\Green\cli\bin</code> 即可</li>
<li><del><code>ConEmu.lnk</code></del> 模拟终端软件, 可整合多种终端如cmd, shell, bash, putty</li>
<li><del><code>Cygwin.lnk</code></del> 模拟linux环境, 可以部分充当windows下的linux虚拟机使用</li>
<li><del><code>git-cmd.lnk</code></del> 启动git, 供ConEmu调用</li>
<li><code>Typora.lnk</code> 一款markdown编辑器</li>
<li><code>zeal.lnk</code> 软件API离线查询工具, windows下的dash</li>
</ul>
<h2 id="便捷性"><a href="#便捷性" class="headerlink" title="便捷性"></a>便捷性</h2><ul>
<li>上述软件主要是辅助作用, 我会在常用软件中调用上述软件. 如notepad++, atom, ConEmu中</li>
<li>以 notepad++ 调用 <code>zeal.lnk</code> 为例.</li>
<li><code>notepad++</code>-&gt;<code>Run</code>-&gt;<code>Run...</code>-&gt;输入 <code>zeal.lnk $(CURRENT_WORD)</code>-&gt;<code>Save...</code>-&gt;<code>Name:``help</code>, 快捷键<code>F1</code>-&gt;<code>OK</code></li>
<li>配置好以后, 写代码遇到需要查询的地方, 只要选中关键词, 按 <code>F1</code> 就会自动调用 zeal 了</li>
<li>以后环境变了, 只需要重新创建一下 <code>zeal.lnk</code> 然后放到 <code>D:\Green\userpath\bin</code> 即可.</li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows快捷键]]></title>
      <url>https://draapho.github.io/2016/10/08/1607-CheatSheet-win/</url>
      <content type="html"><![CDATA[<h1 id="专用快捷键"><a href="#专用快捷键" class="headerlink" title="专用快捷键"></a>专用快捷键</h1><table>
<thead>
<tr>
<th>atom</th>
<th>备注</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ctrl-shift-p</code></td>
<td>palette</td>
<td>调出命令板</td>
</tr>
<tr>
<td><code>ctrl-alt-i</code></td>
<td>information</td>
<td>调用控制台</td>
</tr>
<tr>
<td><code>ctrl-,</code></td>
<td></td>
<td>打开设置面板</td>
</tr>
<tr>
<td><code>ctrl-.</code></td>
<td>非编辑区有效</td>
<td>调试快捷键</td>
</tr>
<tr>
<td>+<code>ctrl-f6</code></td>
<td>merge-conflicts</td>
<td>显示有冲突的文件</td>
</tr>
<tr>
<td>+<code>shift-f6</code></td>
<td>merge-conflicts</td>
<td>显示下一个冲突</td>
</tr>
<tr>
<td>+<code>ctrl-shift-f6</code></td>
<td>merge-conflicts</td>
<td>显示上一个冲突</td>
</tr>
<tr>
<td><strong>eclipse</strong></td>
<td><strong>备注</strong></td>
<td><strong>说明</strong></td>
</tr>
<tr>
<td><code>ctrl-o</code></td>
<td></td>
<td>显示函数列表</td>
</tr>
<tr>
<td><code>ctrl-shift-o</code></td>
<td></td>
<td>自动处理 include/import</td>
</tr>
<tr>
<td><code>alt-shift-s</code></td>
<td>source</td>
<td>显示代码常用操作</td>
</tr>
<tr>
<td><code>alt-/</code></td>
<td></td>
<td>代码提示</td>
</tr>
<tr>
<td>+ <code>ctrl \</code></td>
<td><del><code>ctrl-tab</code></del></td>
<td>切换<code>.c``.h</code>文件</td>
</tr>
<tr>
<td>+ <code>alt-\</code></td>
<td><code>alt-shift-a</code></td>
<td>列选模式</td>
</tr>
<tr>
<td>+ <code>ctrl-f3</code></td>
<td><code>ctrl-1</code></td>
<td>快速修复</td>
</tr>
<tr>
<td>+ <code>alt-shift-f</code></td>
<td><code>ctrl-shift-t</code></td>
<td>查找类</td>
</tr>
</tbody>
</table>
<h1 id="编辑器快捷键"><a href="#编辑器快捷键" class="headerlink" title="编辑器快捷键"></a>编辑器快捷键</h1><table>
<thead>
<tr>
<th>文件操作</th>
<th>助记</th>
<th>说明</th>
<th>来源</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ctrl-n</code></td>
<td>new</td>
<td>创建文件</td>
<td>windows</td>
</tr>
<tr>
<td><code>ctrl-o</code></td>
<td>open</td>
<td>打开文件</td>
<td>windows</td>
</tr>
<tr>
<td><code>ctrl-s</code></td>
<td>save</td>
<td>保存</td>
<td>windows</td>
</tr>
<tr>
<td><code>ctrl-shift-s</code></td>
<td>save</td>
<td>保存所有</td>
<td>notepad++</td>
</tr>
<tr>
<td><code>ctrl-w</code></td>
<td>windows</td>
<td>关闭当前页</td>
<td>windows</td>
</tr>
<tr>
<td><code>ctrl-shift-w</code></td>
<td>windows</td>
<td>关闭其它页面</td>
<td>custom</td>
</tr>
<tr>
<td><code>ctrl-shift-t</code></td>
<td>tags</td>
<td>恢复关闭的文件</td>
<td>notepad++</td>
</tr>
<tr>
<td><code>ctrl-tab</code></td>
<td>tab</td>
<td>下一个标签</td>
<td>notepad++</td>
</tr>
<tr>
<td><code>ctrl-shift-tab</code></td>
<td>tab</td>
<td>上一个标签</td>
<td>notepad++</td>
</tr>
<tr>
<td><code>f1</code></td>
<td></td>
<td>help</td>
<td>windows</td>
</tr>
<tr>
<td><code>ctrl-f1</code></td>
<td></td>
<td>google搜索选定内容</td>
<td>custom</td>
</tr>
<tr>
<td><strong>文件编辑</strong></td>
<td><strong>助记</strong></td>
<td><strong>说明</strong></td>
<td><strong>来源</strong></td>
</tr>
<tr>
<td><code>ctrl-a</code></td>
<td>all</td>
<td>全部选中</td>
<td>windows</td>
</tr>
<tr>
<td><code>ctrl-c</code></td>
<td>copy</td>
<td>复制</td>
<td>windows</td>
</tr>
<tr>
<td><code>ctrl-shift-c</code></td>
<td>copy</td>
<td>复制文档路径</td>
<td>atom</td>
</tr>
<tr>
<td><code>ctrl-d</code></td>
<td>delete</td>
<td>删除</td>
<td>custom</td>
</tr>
<tr>
<td><code>ctrl-shift-d</code></td>
<td>delete</td>
<td>删除当前行</td>
<td>custom</td>
</tr>
<tr>
<td><code>ctrl-</code> <code>h</code> <code>j</code> <code>k</code> <code>l</code></td>
<td>vim</td>
<td>上下左右</td>
<td>custom</td>
</tr>
<tr>
<td><code>ctrl-shift-h</code> <code>ctrl-←</code></td>
<td>vim h</td>
<td>左移到词首</td>
<td>custom / sublime</td>
</tr>
<tr>
<td><code>ctrl-shift-l</code> <code>ctrl-→</code></td>
<td>vim l</td>
<td>右移到词尾</td>
<td>custom / sublime</td>
</tr>
<tr>
<td><code>ctrl-shift-j</code> <code>ctrl-↓</code></td>
<td>vim j</td>
<td>向下移行</td>
<td>custom / sublime</td>
</tr>
<tr>
<td><code>ctrl-shift-k</code> <code>ctrl-↑</code></td>
<td>vim k</td>
<td>向上移行</td>
<td>custom / sublime</td>
</tr>
<tr>
<td><code>alt-shift-j</code></td>
<td>vim J</td>
<td>合并行</td>
<td>custom</td>
</tr>
<tr>
<td><del><code>ctrl-t</code></del></td>
<td>禁用掉</td>
<td>避免<code>ctrl-y</code>失效</td>
<td>custom</td>
</tr>
<tr>
<td><code>ctrl-v</code></td>
<td>velcro</td>
<td>黏贴</td>
<td>windows</td>
</tr>
<tr>
<td><code>ctrl-shift-v</code></td>
<td>ctrl-v</td>
<td>复制当前行</td>
<td>custom</td>
</tr>
<tr>
<td><code>ctrl-x</code></td>
<td></td>
<td>剪切</td>
<td>windows</td>
</tr>
<tr>
<td><code>ctrl-shift-x</code></td>
<td>ctrl-x</td>
<td>剪切当前行</td>
<td>notepad++</td>
</tr>
<tr>
<td><code>ctrl-y</code> <code>ctrl-r</code></td>
<td>redo</td>
<td>恢复更改</td>
<td>windows / vim</td>
</tr>
<tr>
<td><code>ctrl-z</code> <code>ctrl-u</code></td>
<td>undo</td>
<td>撤销更改</td>
<td>windows / vim</td>
</tr>
<tr>
<td><code>ctrl-shift-y</code></td>
<td></td>
<td>下一个浏览记录</td>
<td>custom</td>
</tr>
<tr>
<td><code>ctrl-shift-z</code></td>
<td></td>
<td>上一个浏览记录</td>
<td>custom</td>
</tr>
</tbody>
</table>
<p>| <code>alt-鼠标</code> <code>alt-\</code>        |          | 列选模式          | notepad++ / custom |<br>| <code>ctrl-enter</code>            | enter    | 下面新增一行        | sublime            |<br>| <code>ctrl-shift-enter</code>      | enter    | 上面新增一行        | sublime            |<br>| <code>tab</code> <code>shift-tab</code>       |          | 插入缩进/删除缩进     | notepad++          |<br>| <code>ctrl-^</code>                | vim      | 移到行首          | custom             |<br>| <code>ctrl-shift-^</code>          | vim      | 选到行首          | custom             |<br>| <code>ctrl-$</code>                | vim      | 移到行尾          | custom             |<br>| <code>ctrl-shift-$</code>          | vim      | 选到行尾          | custom             |<br>| <strong>查找与替换</strong>               | <strong>助记</strong>   | <strong>说明</strong>        | <strong>来源</strong>             |<br>| <code>ctrl-f</code>                | find     | 查找            | windows            |<br>| <code>ctrl-shift-f</code>          | find     | 多文件查找         | sublime            |<br>| <code>f3</code> <code>shift-f3</code>         |          | 查找下一个 / 查找上一个 | windows            |<br>| <code>ctrl-f3</code>               |          | 选中所有匹配的关键字    | custom             |<br>| <code>ctrl-m</code>                | mark     | 打标记           | custom             |<br>| <code>f2</code> <code>shift-f2</code>         | tag      | 下一个标记/上一个标记   | notepad++          |<br>| <code>ctrl-f2</code>               | tag      | 显示所有标签        | custom             |<br>| <code>ctrl-shift-f2</code>         | tag      | 清空所有标签        | custom             |<br>| <code>ctrl-.</code>                | ..       | TAB转为空格       | custom             |<br>| <code>ctrl-shift-.</code>          | &gt;&gt;       | 空格转为TAB       | custom             |<br>| <strong>代码专用</strong>                | <strong>助记</strong>   | <strong>说明</strong>        | <strong>来源</strong>             |<br>| <code>ctrl-b</code>                | beautify | 格式化代码         | custom             |<br>| <code>ctrl-shift-m</code>          | markdown | markdown预览    | atom               |<br>| <code>alt-0</code> <code>alt-shift-0</code>   | 0-9      | 折叠代码/展开代码     | notepad++          |<br>| <code>ctrl-[</code> <code>ctrl-]</code>       |          | 移动/全选对应括号     | custom             |<br>| <code>ctrl-鼠标</code> <code>shift-鼠标</code>    |          | 跳转            | eclipse / custom   |<br>| <code>f4</code> <code>shift-f4</code>         |          | 跳转 / 跳回       | custom             |<br>| <code>f5</code>                    | run      | 运行            | notepad++          |<br>| <code>f6</code>                    |          | 比较文件          | custom             |<br>| <code>ctrl-/</code>                | <code>//</code>     | 单行注释翻转        | eclipse            |<br>| <code>ctrl-shift-/</code>          | <code>/*</code>     | 多行注释          | eclipse            |<br>| <code>ctrl-shift-\</code>          | <code>/*</code>     | 取消多行注释        | eclipse            |<br>| <code>ctrl-~</code>                |          | 打开终端          | sublime            |</p>
<h1 id="Win系统快捷键"><a href="#Win系统快捷键" class="headerlink" title="Win系统快捷键"></a>Win系统快捷键</h1><table>
<thead>
<tr>
<th>Listary</th>
<th>助记</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>win-~</code></td>
<td></td>
<td>打开Listary</td>
</tr>
<tr>
<td><code>enter</code></td>
<td>enter</td>
<td>打开文件</td>
</tr>
<tr>
<td><code>ctrl-enter</code></td>
<td>enter</td>
<td>打开路径</td>
</tr>
<tr>
<td><code>ctrl-c</code></td>
<td>copy</td>
<td>复制</td>
</tr>
<tr>
<td><code>ctrl-shift-c</code></td>
<td>copy</td>
<td>复制路径</td>
</tr>
<tr>
<td><code>ctrl+j</code> <code>ctrl+k</code></td>
<td>vim j,k</td>
<td>下一个 / 上一个(需设置)</td>
</tr>
<tr>
<td><strong>Ditto</strong></td>
<td><strong>助记</strong></td>
<td><strong>文件夹/应用</strong></td>
</tr>
<tr>
<td><code>ctrl-q</code></td>
<td>quick paste</td>
<td>打开ditto面板</td>
</tr>
<tr>
<td><code>enter</code></td>
<td>enter</td>
<td>黏贴</td>
</tr>
<tr>
<td><code>shift-enter</code></td>
<td>enter</td>
<td>纯文本黏贴</td>
</tr>
<tr>
<td><strong>AHK</strong></td>
<td><strong>助记</strong></td>
<td><strong>功能</strong></td>
</tr>
<tr>
<td><code>鼠标中键</code></td>
<td></td>
<td>复制</td>
</tr>
<tr>
<td><code>shift-鼠标中键</code></td>
<td></td>
<td>剪切</td>
</tr>
<tr>
<td><code>ctrl-shift-鼠标中键</code></td>
<td></td>
<td>复制当前路径</td>
</tr>
<tr>
<td><code>鼠标右键</code></td>
<td></td>
<td>首次黏贴</td>
</tr>
<tr>
<td><code>ctrl-鼠标右键</code></td>
<td></td>
<td>黏贴</td>
</tr>
<tr>
<td><code>ctrl-~</code></td>
<td></td>
<td>打开终端 (关联路径)</td>
</tr>
<tr>
<td><code>alt-win-鼠标中键</code></td>
<td></td>
<td>复制屏幕颜色</td>
</tr>
<tr>
<td><code>alt-win-←↑↓→</code></td>
<td></td>
<td>单像素移动鼠标</td>
</tr>
<tr>
<td><code>alt-win-d</code></td>
<td>date</td>
<td>输入当前日期</td>
</tr>
<tr>
<td><strong>AHK快捷方式</strong></td>
<td><strong>助记</strong></td>
<td><strong>文件夹/应用</strong></td>
</tr>
<tr>
<td><code>alt-a</code> <code>win-a</code></td>
<td>all / audio</td>
<td>我的电脑 / 音频处理软件</td>
</tr>
<tr>
<td><code>alt-b</code> <code>win-b</code></td>
<td>backup</td>
<td>backup / FreeFileSync</td>
</tr>
<tr>
<td><code>alt-c</code> <code>win-c</code></td>
<td>c盘 / caculate</td>
<td>c盘 / 计算器</td>
</tr>
<tr>
<td><code>alt-d</code> <code>win-d</code></td>
<td>download</td>
<td>download / 迅雷</td>
</tr>
<tr>
<td><code>alt-e</code> <code>win-e</code></td>
<td>e盘 / editor</td>
<td>e盘 / 编辑器</td>
</tr>
<tr>
<td><code>alt-f</code> <code>win-f</code></td>
<td>f盘 / find</td>
<td>f盘 / everything</td>
</tr>
<tr>
<td><code>alt-g</code> <code>win-g</code></td>
<td>green / google</td>
<td>绿色软件 / 浏览器</td>
</tr>
<tr>
<td><code>win-h</code></td>
<td>help</td>
<td>zeal 文档帮助</td>
</tr>
<tr>
<td><code>win-i</code></td>
<td>ie</td>
<td>IE核浏览器</td>
</tr>
<tr>
<td><code>win-j</code></td>
<td>记账</td>
<td>MoneyHome</td>
</tr>
<tr>
<td><code>alt-l</code> <code>win-l</code></td>
<td>life / look</td>
<td>life / 视频搜索</td>
</tr>
<tr>
<td><code>alt-m</code> <code>win-m</code></td>
<td>music</td>
<td>music / mcool</td>
</tr>
<tr>
<td><code>win-n</code></td>
<td>notepad</td>
<td>notepad++</td>
</tr>
<tr>
<td><code>alt-p</code> <code>win-p</code></td>
<td>picture</td>
<td>picture / Paint.Net</td>
</tr>
<tr>
<td><code>alt-s</code> <code>win-s</code></td>
<td>study / ScreenShot</td>
<td>study / 截屏</td>
</tr>
<tr>
<td><code>alt-v</code> <code>win-v</code></td>
<td>video</td>
<td>video / PotPlayer</td>
</tr>
<tr>
<td><code>alt-w</code> <code>win-w</code></td>
<td>work / word</td>
<td>work / word</td>
</tr>
<tr>
<td><code>win-x</code></td>
<td>虚拟机</td>
<td>Hyper-V</td>
</tr>
<tr>
<td><code>alt-y</code> <code>win-y</code></td>
<td>移动硬盘 / 翻译</td>
<td>y盘 / 有道词典</td>
</tr>
<tr>
<td><code>win-z</code></td>
<td>证券</td>
<td>证券</td>
</tr>
</tbody>
</table>
<h1 id="大致原则"><a href="#大致原则" class="headerlink" title="大致原则"></a>大致原则</h1><ul>
<li><code>ctrl</code> 基本操作</li>
<li><code>shift</code> 反向操作/块操作</li>
<li><code>alt</code> 处理文件-AHK使用</li>
<li><code>win</code> 打开应用-AHK使用</li>
<li><code>alt-win</code> 特殊应用-AHK使用</li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows 软件系列-基于NFS的家庭网]]></title>
      <url>https://draapho.github.io/2016/10/03/1606-WinSoft-cloud/</url>
      <content type="html"><![CDATA[<h1 id="家庭网设想"><a href="#家庭网设想" class="headerlink" title="家庭网设想"></a>家庭网设想</h1><h2 id="理想的云"><a href="#理想的云" class="headerlink" title="理想的云"></a>理想的云</h2><ul>
<li>理想的家庭网是由NAS做数据中心, 是家里的云</li>
<li>需要使用千兆网来支持数据分享(如视频流)</li>
<li>考虑到设备多样性, 可使用多种分享模式, 如NFS, windows共享服务等等</li>
<li>理想很丰满, 现实很骨干. 由于预算, 稳定性, 易用性等问题, 多半会用折中方案</li>
<li>可以看看混乱的方案推荐: <a href="https://www.zhihu.com/question/20791825" target="_blank" rel="external">如何实现一个简单的家庭云存储（NAS）系统？</a></li>
</ul>
<h2 id="现实的云"><a href="#现实的云" class="headerlink" title="现实的云"></a>现实的云</h2><ul>
<li>理想之所以遥远, 往往是因为没有明确需求, 导致什么都想要! 所以, 先明确需求<ul>
<li>NAS是用来折腾和看电影的(电影存在硬盘上, 能在沙发上和床上观影).</li>
<li>日常资料还是存储在本地硬盘比较便捷</li>
<li>有安全需求, 要备份或镜像本地资料到家庭云(<strong>双设备备份</strong>, 相比NAS的各种RAID, 一大优势是<strong>防偷</strong>)</li>
<li>做嵌入式开发, 需要在windows上装linux虚拟机, 然后数据共享</li>
<li>关键数据出问题时, 在可靠和有把握的环境下来恢复数据.</li>
</ul>
</li>
<li>给出最终使用的方案. 折腾记就不写在此文了.<ul>
<li>使用 Intel NUC 作为桌面主机和云服务器. 小巧, 够用(不玩游戏), 省电.</li>
<li>使用 Hyper-V 安装 家用NAS 和 Ubuntu.</li>
<li>另有嵌入式linux开发板, 投影仪, 手机等设备需要和云交换数据.</li>
<li>使用 <a href="https://www.hanewin.net/nfs-e.htm" target="_blank" rel="external">HaneWIN</a> 向其它设备提供NFS服务</li>
<li>使用 <a href="http://www.freefilesync.org/" target="_blank" rel="external">freefilesync</a> 备份资料到移动硬盘(和理想中的备份方式差好多…)</li>
</ul>
</li>
</ul>
<h1 id="HaneWIN"><a href="#HaneWIN" class="headerlink" title="HaneWIN"></a><a href="https://www.hanewin.net/nfs-e.htm" target="_blank" rel="external">HaneWIN</a></h1><ul>
<li><a href="https://www.hanewin.net/nfs-e.htm" target="_blank" rel="external">HaneWIN</a>是收费软件, 个人用户收费 EUR 19.80. 只需简单功能可尝试免费的 <a href="http://freenfs.sourceforge.net/" target="_blank" rel="external">Free NFS</a></li>
<li>需要支持嵌入式linux端的NFS(只支持NFS v2), 配置见图:<br><img src="https://draapho.github.io/images/1606/haneWIN_NFS.PNG" alt="haneWIN_NFS"></li>
<li>务必使用<code>UTF-8 character set</code><br><img src="https://draapho.github.io/images/1606/haneWIN_Server.PNG" alt="haneWIN_Server"></li>
<li><p>重点说一下<code>Exports</code>这一块, 即把文件通过NFS分享出去.<br><img src="https://draapho.github.io/images/1606/haneWIN_Exports.PNG" alt="haneWIN_Exports"></p>
<ul>
<li><code>E:\Downloads -name:Downloads 10.0.0.99</code><br>就是把本地<code>Downloads</code>文件夹分享给<code>ip=10.0.0.99</code>的机器, 对外名称为<code>Downloads</code></li>
<li><code>-mapall:0:0</code> 是提供给linux端root权限. (这句最短? 花了一周时间才实验成功啊…)</li>
<li><code>-range 10.0.0.1 10.0.0.111</code> 是设置ip范围, 这里是从<code>10.0.0.1</code>-<code>10.0.0.111</code></li>
<li><p>语法规则不多, 详见<a href="https://www.hanewin.net/doc/nfs/nfsd.htm" target="_blank" rel="external">官网说明</a>. 可用参数如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># The following options are supported:</div><div class="line">-name:&lt;sharename&gt;   assigns a name to the exported path as an alternate name for mounting.</div><div class="line">-alldirs    allows the host(s) to mount at any point within the filesystem.</div><div class="line">-umask:&lt;mask&gt;   set the umask for group and world permissions on the filesystem, default 022</div><div class="line">-readonly   limits access to reading</div><div class="line">-public Enables WebNFS access.</div><div class="line">-lowercase  maps all file names to lowercase, otherwise case is preserved.</div><div class="line">-exec   forces in access rights the x bit for all files.</div><div class="line">-mapall:&lt;uid&gt;[:&lt;gid&gt;]   all Unix user-ids and group-ids are mapped to the specified user-id and group-id.</div><div class="line">-maproot:&lt;uid&gt;[:&lt;gid&gt;]  the Unix super user root is mapped to the specified user-id, group-id. Without a mapping entry root will be mapped to user and group nobody.</div><div class="line">-range  IP adresses are interpreted in pairs as from-to ranges enabling client access from all addresses in a range (more flexible than the unix -net -mask options).</div></pre></td></tr></table></figure>
</li>
<li><p>再举几个例子:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># exports example</div><div class="line">c:\ftp -range 192.168.1.1 192.168.1.10</div><div class="line">c:\public -public -readonly</div><div class="line">c:\tools -readonly 192.168.1.4</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>如果NFS被成功加载, 那么会在<code>Mounts</code>页显示出来<br><img src="https://draapho.github.io/images/1606/haneWIN_Mounts.PNG" alt="haneWIN_Mounts"></p>
</li>
<li>参考<ul>
<li><a href="http://www.nasyun.com/thread-25086-1-1.html" target="_blank" rel="external">GEN8折腾日记-第三方NFS工具 hanewin 设置(需登录)</a></li>
<li><a href="http://wenku.baidu.com/view/c78baefefad6195f302ba665.html" target="_blank" rel="external">GEN8折腾日记-第三方NFS工具 hanewin 设置(百度文库)</a></li>
<li><a href="https://www.chiphell.com/thread-1240623-1-1.html" target="_blank" rel="external">群晖加载Windows NFS文件</a></li>
</ul>
</li>
</ul>
<h1 id="Hyper-V"><a href="#Hyper-V" class="headerlink" title="Hyper-V"></a>Hyper-V</h1><ul>
<li>从Win8开始, Hyper-V是Windows自带的软件.</li>
<li>启用Hper-V, <code>控制面板</code>-&gt;<code>程序和功能</code>-&gt;<code>启用或关闭Windows功能</code>-&gt;<code>Hyper-V</code><br><img src="https://draapho.github.io/images/1606/HyperV_Enable.PNG" alt="HyperV_Enable"></li>
<li>设置虚拟网络<br><img src="https://draapho.github.io/images/1606/HyperV_NIC1.PNG" alt="HyperV_NIC1"><br><img src="https://draapho.github.io/images/1606/HyperV_NIC2.PNG" alt="HyperV_NIC2"></li>
<li>新建虚拟机<br><img src="https://draapho.github.io/images/1606/HyperV_Install1.png" alt="HyperV_Install1"><br><img src="https://draapho.github.io/images/1606/HyperV_Install2.png" alt="HyperV_Install2"><br><img src="https://draapho.github.io/images/1606/HyperV_Install3.png" alt="HyperV_Install3"></li>
<li>安装Ubuntu 32位服务器版本, 用于交叉编译. (另一个备选方案是用cygwin)</li>
<li>安装家用NAS, 用于多设备(投影仪, 平板, 手机)看硬盘上的影片.</li>
</ul>
<h1 id="NAS和智能路由器"><a href="#NAS和智能路由器" class="headerlink" title="NAS和智能路由器"></a>NAS和智能路由器</h1><h2 id="两者的区别"><a href="#两者的区别" class="headerlink" title="两者的区别"></a>两者的区别</h2><ul>
<li>NAS, Network Attached Storage. 家用的话, 大多定位于多媒体观赏和数据备份两个核心功能.</li>
<li>专做NAS的厂家, <a href="https://www.synology.com/" target="_blank" rel="external">Synology(群晖)</a> 和 <a href="https://www.qnap.com/" target="_blank" rel="external">QNAP(威联通)</a> 比较有名</li>
<li>智能路由器, 从小米路由器到airport extreme.</li>
<li>两者区别的话, 就是一个更专业, 一个更娱乐.<br>所谓专业, 就是更多的权限设置和管理(对用户不友好), 更多的功能, 更高的安全要求.<br>所谓娱乐, 就是傻瓜易上手, 能用好用为主要需求.<br>简而言之, 一个是专业单反, 一个是傻瓜机, 然后有一些就是处于中间位置的微单…</li>
</ul>
<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ul>
<li>大多数的家庭, 对此类产品的第一要求就是<strong>好用</strong>. 只有Geek一类的人需要<strong>好玩</strong>.</li>
<li>NAS在宣传上, 必然会强调数据安全, 列出诸如支持多种RAID这种让非专业人士云里雾里的概念.</li>
<li>而普通家庭最大的数据安全问题就是数据过于集中, 防偷防意外损坏之类的风险防范反而不足了.</li>
<li>因此, 家用云市场应该侧重于易于配置和使用. 家庭的数据安全问题不是靠一台专业NAS设备就能解决的.</li>
<li>结论: 在家用市场, 智能路由器有更好的市场前景.</li>
</ul>
<h2 id="数据安全"><a href="#数据安全" class="headerlink" title="数据安全"></a>数据安全</h2><ul>
<li>家庭环境的话, 建议用移动硬盘备份关键资料(即RAID1), 然后分开存储, 当然也可以基于SFTP等服务自动备份. 这样可以做到物理上相对独立, 而且因为用的是RAID1, 数据出问题后的恢复也非常简单.</li>
<li>中小企业就需要用到稍微专业一点的NAS才比较好了. 话说, 很多本土企业对数据安全这一块很不上心啊…</li>
<li>推荐完全免费的同步软件<a href="http://www.freefilesync.org/" target="_blank" rel="external">freefilesync</a>, 买块硬盘, 家用足够了.</li>
</ul>
<h2 id="个人推荐"><a href="#个人推荐" class="headerlink" title="个人推荐"></a>个人推荐</h2><ul>
<li>听说过家庭云, 不知道具体需求, 买个便宜的小米路由器先体验体验.</li>
<li>苹果爱好者直接上 airport extreme, 二千元可以给手机平板太多额外的存储空间了.</li>
<li>想要玩NAS的, 可以先用虚拟机装了体验一下效果.</li>
<li>如果买专业的NAS, 推荐直接用企业入门级产品QNAP的<code>TS-251</code>或<code>TS-253 Pro</code>,内置虚拟机, 可玩性很高.</li>
<li>群晖的机器不太推荐, 因为数据的存储格式很奇怪, 万一出点问题自己一点办法也没有!</li>
<li>组装机也不是太推荐, 因为功耗美观服务都要考虑进去.</li>
</ul>
<h1 id="同步软件freefilesync"><a href="#同步软件freefilesync" class="headerlink" title="同步软件freefilesync"></a>同步软件<a href="http://www.freefilesync.org/" target="_blank" rel="external">freefilesync</a></h1><ul>
<li><a href="http://www.freefilesync.org/" target="_blank" rel="external">freefilesync</a>是一款完全免费的同步软件, 可以完全媲美GoodSync</li>
<li>支持sftp, 所以也可以通过网络自动备份数据</li>
<li>家庭用户使用RAID1, 即关键资料双硬盘完整备份, 然后分开存放就足够了.</li>
</ul>
<h1 id="远程开机"><a href="#远程开机" class="headerlink" title="远程开机"></a>远程开机</h1><p>如果是7x24小时开机当服务器用, 则不用考虑这一块. 远程开机是针对虚拟机和组装机用户说的.</p>
<h2 id="LAN唤醒"><a href="#LAN唤醒" class="headerlink" title="LAN唤醒"></a>LAN唤醒</h2><ul>
<li>LAN唤醒需要主板的支持, 不支持无线网络, 必须使用有线. 新一点的机器一般都能支持.</li>
<li>启用主板的WOL功能<ul>
<li>开机进入BIOS, 寻找<code>wake on lan``resume on lan``power on PME``power on by PCI-E device``Power on by Onboard LAN</code>等与电源管理和唤醒有关的选项并使能</li>
</ul>
</li>
<li>设置网卡驱动<ul>
<li><code>设备管理器</code>-&gt;<code>网络适配器</code>-&gt;选择有线网卡设备-&gt;右键<code>属性</code>-&gt;在<code>高级</code>和<code>电源管理</code>标签下-&gt;启用<code>唤醒模式``唤醒魔包``幻数据包``唤醒计算机</code>之类的选项</li>
</ul>
</li>
<li>配置 WIN10 WOL(Wake on Lan 远程唤醒) 最大的坑就是要关闭 “启用快速启动(推荐)”, 而默认是打开的. 另外, <ul>
<li><code>控制面板</code>-&gt;<code>硬件和声音</code>-&gt;<code>电源选项</code>-&gt;左边栏<code>选择电源按钮的功能</code>-&gt;弹出<code>系统设置</code>页面-&gt;<code>关机设置</code>-&gt;<del><code>启用快速启动(推荐)</code></del></li>
</ul>
</li>
<li>电脑非正常关机后, 是无法远程唤醒的.</li>
<li>建议分级测试.<ol>
<li>可以先确定bios配置正确. 配置好bios, 进入winPE之类的系统, 选择关机, 看WOL是否起作用.</li>
<li>然后进入win10配置网卡的相关选项, 然后让机器进入睡眠模式, 看WOL是否起作用.</li>
<li>最后win10关机, 测试WOL是否起作用.</li>
<li>“启用快速启动(推荐)”, 位于 控制面板\硬件和声音\电源选项\唤醒时需要密码(系统设置)\关机设置.</li>
<li>注意: bios设置内关于PCI节能的设置特别注意, 考虑全部关闭</li>
</ol>
</li>
<li>Android端WOL软件推荐. <code>Wake On LAN</code> 配置简单, 界面友好.</li>
<li>参考链接<ul>
<li><a href="https://www.teamviewer.com/zhCN/res/pdf/Teamviewer9-Manual-Wake-on-LAN-zhCN.pdf" target="_blank" rel="external">TeamViewer手册-LAN唤醒</a></li>
<li><a href="http://www.iplaysoft.com/wol.html" target="_blank" rel="external">WOL 网络唤醒远程开机设置方法教程 + 多款软件下载！(手机远程开启电脑)</a></li>
</ul>
</li>
</ul>
<h2 id="WAN远程唤醒"><a href="#WAN远程唤醒" class="headerlink" title="WAN远程唤醒"></a>WAN远程唤醒</h2><ul>
<li>WAN远程唤醒的前提是配置好LAN唤醒.</li>
<li>需要设置路由器, 设置过程非常复杂, 而且免费的不稳定.</li>
<li>我买了向日葵开机棒, 但实际体验不好. 一是向日葵的服务器不太稳定, 而是远程操作意义不大, 纯玩性质.</li>
<li>所以, 建议普通用户不用折腾这块了. 真有异地工作, 资料同步的需求, 用公共云, github, BitBucket都很好.</li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[stm32选型及资料搜索指南]]></title>
      <url>https://draapho.github.io/2016/10/01/1605-Stm32Selection/</url>
      <content type="html"><![CDATA[<h1 id="stm32选型及手册搜索"><a href="#stm32选型及手册搜索" class="headerlink" title="stm32选型及手册搜索"></a>stm32选型及手册搜索</h1><ul>
<li>进入搜索网页<a href="http://www.st.com/content/st_com/en/products/microcontrollers.html" target="_blank" rel="external">STM选型</a></li>
<li>在搜索框输入指定型号, 点击进入具体型号的页面. 如<a href="http://www.st.com/content/st_com/en/products/microcontrollers/stm32-32-bit-arm-cortex-mcus/stm32f1-series/stm32f103/stm32f103rc.html" target="_blank" rel="external">STM32F103RC</a></li>
<li><a href="http://www.st.com/content/ccc/resource/technical/document/datasheet/59/f6/fa/84/20/4e/4c/59/CD00191185.pdf/files/CD00191185.pdf/jcr:content/translations/en.CD00191185.pdf" target="_blank" rel="external">DS5792</a> -  <strong>DataSheet, 数据手册. 电气参数详解, 软硬件必备</strong></li>
<li><a href="http://www.st.com/content/ccc/resource/technical/document/reference_manual/59/b9/ba/7f/11/af/43/d5/CD00171190.pdf/files/CD00171190.pdf/jcr:content/translations/en.CD00171190.pdf" target="_blank" rel="external">RM0008</a> - <strong>Reference Manuals, 参考手册. 寄存器详解. 软件开发必备</strong></li>
<li><a href="http://www.st.com/content/ccc/resource/technical/document/application_note/a2/9c/07/d9/2a/b2/47/dc/CD00004479.pdf/files/CD00004479.pdf/jcr:content/translations/en.CD00004479.pdf" target="_blank" rel="external">AN1709</a> - <strong>Application Notes, 应用指南. 需要仔细看这类文档</strong>. 是针对具体问题的指南, 如这一篇是EMC设计指南</li>
<li><a href="http://www.st.com/content/ccc/resource/technical/document/programming_manual/10/98/e8/d4/2b/51/4b/f5/CD00283419.pdf/files/CD00283419.pdf/jcr:content/translations/en.CD00283419.pdf" target="_blank" rel="external">PM0075</a> - Programming Manuals, 烧录手册. 介绍擦写flash相关的流程和寄存器</li>
<li><a href="http://www.st.com/content/ccc/resource/technical/document/errata_sheet/f5/50/c9/46/56/db/4a/f6/CD00197763.pdf/files/CD00197763.pdf/jcr:content/translations/en.CD00197763.pdf" target="_blank" rel="external">ES0340</a> - Errata Sheets, 勘误表. 遇到非常奇怪的问题时, 可以先来看看勘误表, 是否源文件就是错的!</li>
<li><a href="http://www.st.com/content/ccc/resource/technical/document/technical_note/92/30/3c/a1/4c/bb/43/6f/DM00103228.pdf/files/DM00103228.pdf/jcr:content/translations/en.DM00103228.pdf" target="_blank" rel="external">TN1163</a> - Technical Notes &amp; Articles, 技术指南, 存储焊接, 开发工具配置之类的解答. <strong>生产必备</strong></li>
<li><a href="http://www.st.com/content/ccc/resource/technical/document/user_manual/f9/4a/8d/e6/b8/20/4a/46/DM00062592.pdf/files/DM00062592.pdf/jcr:content/translations/en.DM00062592.pdf" target="_blank" rel="external">UM1561</a> - User Manuals, 对官方开发板或开发工具的用户说明书</li>
</ul>
<h1 id="其它设计资料的搜索"><a href="#其它设计资料的搜索" class="headerlink" title="其它设计资料的搜索"></a>其它设计资料的搜索</h1><ul>
<li>根据型号并不能找出期望的文档. 譬如需要一份电源设计参考.</li>
<li>进去搜索网页<a href="http://www.st.com/content/st_com/en/products/microcontrollers.html" target="_blank" rel="external">STM选型</a></li>
<li>在搜索框输入关键词<code>hardware power</code>, 在搜索结果页面, 选择<code>Resouces</code>标签</li>
<li>这里第一条就是 <a href="http://www.st.com/content/ccc/resource/technical/document/application_note/87/b8/0f/5e/ab/d0/4f/2d/DM00071779.pdf/files/DM00071779.pdf/jcr:content/translations/en.DM00071779.pdf" target="_blank" rel="external">AN4218: Hardware design guideline power supply and voltage measurement</a></li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vim常用快捷键]]></title>
      <url>https://draapho.github.io/2016/10/01/1604-CheatSheet-vim/</url>
      <content type="html"><![CDATA[<h1 id="Vim常用快捷键"><a href="#Vim常用快捷键" class="headerlink" title="Vim常用快捷键"></a>Vim常用快捷键</h1><h2 id="进入输入模式"><a href="#进入输入模式" class="headerlink" title="进入输入模式"></a>进入输入模式</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>助记</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>i</code></td>
<td>insert</td>
<td>光标前插入文本</td>
</tr>
<tr>
<td><code>I</code></td>
<td>insert</td>
<td>行首插入文本</td>
</tr>
<tr>
<td><code>ea</code></td>
<td>end append</td>
<td>单词末插入文本</td>
</tr>
<tr>
<td><code>a</code></td>
<td>append</td>
<td>光标后插入文本</td>
</tr>
<tr>
<td><code>A</code></td>
<td>append</td>
<td>行尾插入文本</td>
</tr>
<tr>
<td><code>o</code></td>
<td>open new line</td>
<td>向下插入新行</td>
</tr>
<tr>
<td><code>O</code></td>
<td>open new line</td>
<td>向上插入新行</td>
</tr>
<tr>
<td><code>cw</code></td>
<td>change word</td>
<td>修改单词</td>
</tr>
<tr>
<td><code>cc</code></td>
<td>change</td>
<td>删除整行后修改</td>
</tr>
<tr>
<td><code>c^</code> <code>c$</code></td>
<td>change</td>
<td>删除到行首/行尾后修改</td>
</tr>
</tbody>
</table>
<h2 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>助记</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>h</code> <code>j</code> <code>k</code> <code>l</code></td>
<td></td>
<td>左/下/上/右</td>
</tr>
<tr>
<td><code>^</code> <code>0</code> <code>$</code></td>
<td></td>
<td>行首/首字母/行尾</td>
</tr>
<tr>
<td><code>w</code></td>
<td>word</td>
<td>下个字开头</td>
</tr>
<tr>
<td><code>e</code></td>
<td>end</td>
<td>本字结尾</td>
</tr>
<tr>
<td><code>b</code></td>
<td>before</td>
<td>上个字开头</td>
</tr>
<tr>
<td><code>fx</code></td>
<td>find+字符</td>
<td>移动到x字符处</td>
</tr>
<tr>
<td><code>5enter</code></td>
<td></td>
<td>向下移5行</td>
</tr>
<tr>
<td><code>gg</code> <code>1G</code></td>
<td>go</td>
<td>回首行</td>
</tr>
<tr>
<td><code>G</code></td>
<td>go</td>
<td>到末行</td>
</tr>
<tr>
<td><code>5G</code></td>
<td>num+go</td>
<td>到第5行</td>
</tr>
<tr>
<td><code>ctrl+u</code></td>
<td>up</td>
<td>向上翻半页</td>
</tr>
<tr>
<td><code>ctrl+d</code></td>
<td>down</td>
<td>向下翻半页</td>
</tr>
<tr>
<td><code>{</code> <code>}</code></td>
<td></td>
<td>块首/块尾</td>
</tr>
<tr>
<td><code>H</code></td>
<td>high</td>
<td>屏幕顶部</td>
</tr>
<tr>
<td><code>M</code></td>
<td>medium</td>
<td>屏幕中部</td>
</tr>
<tr>
<td><code>L</code></td>
<td>low</td>
<td>屏幕底部</td>
</tr>
</tbody>
</table>
<h2 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a>文本编辑</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>助记</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>r</code></td>
<td>repalce</td>
<td>替换单个字符</td>
</tr>
<tr>
<td><code>~</code></td>
<td></td>
<td>改变字符大小写</td>
</tr>
<tr>
<td><code>x</code> <code>5x</code></td>
<td></td>
<td>删除字符</td>
</tr>
<tr>
<td><code>dw</code> <code>5dw</code></td>
<td>delete word</td>
<td>删除单词</td>
</tr>
<tr>
<td><code>db</code> <code>5db</code></td>
<td>delete befor</td>
<td>向前删除单词</td>
</tr>
<tr>
<td><code>dd</code> <code>5dd</code></td>
<td>delete</td>
<td>删除整行</td>
</tr>
<tr>
<td><code>d^</code> <code>d$</code></td>
<td>delete</td>
<td>删除到行首/行尾</td>
</tr>
<tr>
<td><code>d1G</code> <code>dG</code></td>
<td>delete</td>
<td>删除到第一行/最后一行</td>
</tr>
<tr>
<td><code>yw</code> <code>5yw</code></td>
<td>yank word</td>
<td>复制单词</td>
</tr>
<tr>
<td><code>yy</code> <code>5yy</code></td>
<td>yank</td>
<td>复制整行</td>
</tr>
<tr>
<td><code>y^</code> <code>y$</code></td>
<td>yank</td>
<td>复制到行首/行尾</td>
</tr>
<tr>
<td><code>&gt;&gt;</code> <code>&lt;&lt;</code></td>
<td></td>
<td>单行缩进</td>
</tr>
<tr>
<td><code>p</code> <code>P</code></td>
<td>paste</td>
<td>黏贴(光标后/光标前)</td>
</tr>
<tr>
<td><code>J</code></td>
<td>join</td>
<td>将下一行合并到当前行</td>
</tr>
<tr>
<td><code>u</code></td>
<td>undo</td>
<td>撤销更改/撤销输入</td>
</tr>
<tr>
<td><code>ctrl+r</code></td>
<td>redo</td>
<td>恢复</td>
</tr>
<tr>
<td><code>ctrl+r</code></td>
<td>redo</td>
<td>恢复</td>
</tr>
<tr>
<td><code>.</code></td>
<td></td>
<td>重复编辑动作</td>
</tr>
</tbody>
</table>
<h2 id="视图模式"><a href="#视图模式" class="headerlink" title="视图模式"></a>视图模式</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>助记</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>v</code></td>
<td>visual</td>
<td>进入视图模式</td>
</tr>
<tr>
<td><code>&gt;</code> <code>&lt;</code></td>
<td></td>
<td>代码缩进</td>
</tr>
<tr>
<td><code>d</code> <code>y</code></td>
<td>delete yank</td>
<td>剪切/复制</td>
</tr>
<tr>
<td><code>~</code></td>
<td></td>
<td>改变大小写</td>
</tr>
</tbody>
</table>
<h2 id="查找与替换"><a href="#查找与替换" class="headerlink" title="查找与替换"></a>查找与替换</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>助记</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>/str</code></td>
<td></td>
<td>查找str</td>
</tr>
<tr>
<td><code>n</code> <code>N</code></td>
<td>next</td>
<td>查找下一个/上一个</td>
</tr>
<tr>
<td><code>:s/old/new/g</code></td>
<td>start…go</td>
<td>所在行old替换为new</td>
</tr>
<tr>
<td><code>:n1,n2s/old/new/g</code></td>
<td>start…go</td>
<td>n1-n2行old替换为new</td>
</tr>
<tr>
<td><code>:0,$/old/new/g</code></td>
<td>start…go</td>
<td>全文old替换为new</td>
</tr>
<tr>
<td><code>:%s/old/new/g</code></td>
<td>start…go</td>
<td>全文old替换为new</td>
</tr>
<tr>
<td><code>:n1,n2s/^/\/\//g</code></td>
<td><code>^</code> 行首 <code>/</code> 转义</td>
<td>行首替换为//, 即注释掉</td>
</tr>
</tbody>
</table>
<h2 id="保存与退出"><a href="#保存与退出" class="headerlink" title="保存与退出"></a>保存与退出</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>助记</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>esc</code></td>
<td></td>
<td>返回命令模式</td>
</tr>
<tr>
<td><code>:wq</code> <code>:wq!</code></td>
<td>write &amp; quit</td>
<td>保存并退出</td>
</tr>
<tr>
<td><code>:q</code> <code>:q!</code></td>
<td>quit  <code>!</code> sudo</td>
<td>退出</td>
</tr>
</tbody>
</table>
<h2 id="Vim-助记图-总有一款适合你"><a href="#Vim-助记图-总有一款适合你" class="headerlink" title="Vim 助记图, 总有一款适合你"></a>Vim 助记图, 总有一款适合你</h2><ul>
<li><p><a href="http://vim.rtorr.com/lang/zh_cn/" target="_blank" rel="external">中文版 Vim Cheat Sheet</a> 网页版, 支持多语言</p>
</li>
<li><p><a href="http://vimsheet.com/" target="_blank" rel="external">A Great Vim Cheat Sheet</a> 网页版</p>
</li>
<li><p><a href="http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html" target="_blank" rel="external">Graphical vi-vim Cheat Sheet and Tutorial</a><br><img src="http://www.viemu.com/vi-vim-cheat-sheet.gif" alt="vi/vim graphical cheat sheet"></p>
</li>
<li><a href="http://vimcheatsheet.com/" target="_blank" rel="external">Beautiful Vim Cheat-Sheet</a><br><img src="https://cdn.shopify.com/s/files/1/0165/4168/files/preview.png" alt="Vim Cheat-Sheet Preview"></li>
<li><a href="https://www.gosquared.com/blog/vi-linux-terminal-help-sheet" target="_blank" rel="external">VI (Linux Terminal) Help Sheet</a><br><img src="https://downloads.gosquared.com/help_sheets/10/VI-Help-Sheet-large.jpg" alt="VI Help Sheet"></li>
<li><a href="http://blog.vgod.tw/2009/12/08/vim-cheat-sheet-for-programmers/" target="_blank" rel="external">給程式設計師的Vim入門圖解說明</a><br><img src="http://blog.vgod.tw.s3.amazonaws.com/wp-content/uploads/2009/12/vim-cheat-sheet-diagram.png" alt="Vim入門圖解說明"></li>
<li><a href="http://linux.vbird.org/linux_basic/0310vi.php" target="_blank" rel="external">vim极简中文示意图</a>-&gt;<code>9.3.6 vim 常用指令示意图</code><br><img src="https://draapho.github.io/images/1604/vimCheatSheet.jpg" alt="vim极简中文示意图"></li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows 软件系列-文本编辑]]></title>
      <url>https://draapho.github.io/2016/09/30/1603-WinSoft-editor/</url>
      <content type="html"><![CDATA[<h1 id="Notepad"><a href="#Notepad" class="headerlink" title="Notepad++"></a><a href="https://notepad-plus-plus.org/" target="_blank" rel="external">Notepad++</a></h1><h2 id="Npp简介"><a href="#Npp简介" class="headerlink" title="Npp简介"></a>Npp简介</h2><ul>
<li><a href="https://notepad-plus-plus.org/" target="_blank" rel="external">Notepad++</a>简称Npp, 是免费好用的记事本</li>
<li>轻便小巧, 打开速度快. 自带丰富功能且有插件, 如语法高亮</li>
<li>建议用他彻底替换windows自带的记事本</li>
<li>目前出到npp7, <strong>不要装64位版本</strong>, 很多插件都不支持</li>
<li>有绿色便携版, 但需要额外设置右键打开和文件关联功能</li>
</ul>
<h2 id="Npp设置"><a href="#Npp设置" class="headerlink" title="Npp设置"></a>Npp设置</h2><h3 id="首选项设置"><a href="#首选项设置" class="headerlink" title="首选项设置"></a>首选项设置</h3><ul>
<li><code>Setting</code>-&gt;<code>Preferences</code> 打开首选项页面</li>
<li><code>General</code>-&gt;<code>Double click to close document</code></li>
<li><code>Editing</code>-&gt;<code>Muli-Editing Setting</code>-&gt;<code>Enable (Ctrl...)</code></li>
<li><code>Editing</code>-&gt;<code>Vertical Edge Setting</code>-&gt;<code>Show vertical edge</code>-&gt;<code>Line mode</code>-&gt;<code>Number of columns: 80</code></li>
<li><code>File Association</code>-&gt;选择需要关联的文件后缀, 加入到<code>Registered extensions</code><br>关联其它后缀名, 只需在<code>customize</code>-&gt;填入后缀并加入, 如 <code>.config</code> <code>.gitignore</code><br>注意: <strong>绿色便携版设置了文件关联也是没有效果的</strong>, 用windows下右键<code>打开方式</code>设置吧</li>
<li><code>Tab Setting</code>-&gt;<code>[Default]</code>-&gt;<code>Tab size:4</code>-&gt;<code>Replace by space</code></li>
<li><code>Tab Setting</code>-&gt;<code>makefile</code>-&gt;<del><code>Use default value</code></del>-&gt;<del><code>Replace by space</code></del>, 因为make只认TAB键</li>
<li><code>Auto-Completion</code>-&gt;<code>Auto-Completion</code>-&gt;<code>From 2 th character</code></li>
<li><code>Auto-Completion</code>-&gt;<code>Auto-Insert</code>-&gt;<code>&#39;</code></li>
<li><code>Auto-Completion</code>-&gt;<code>Auto-Insert</code>-&gt;<code>html/xml close tag</code></li>
<li><del><code>Auto-Completion</code>-&gt;<code>Auto-Insert</code>-&gt;<code>Matched pair</code></del> 加入 <code>*</code> 和 <code>(即</code>~`键), !!!重启后失效, 原因不明.</li>
</ul>
<h3 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h3><ul>
<li><code>Settings</code>-&gt;<code>Style Configurator</code>-&gt;<code>Select theme</code>-&gt;<code>Twilight</code></li>
<li>对<code>Monokai</code>注释配色非常无语, 而且对python的配色也太不友好了, 只好放弃.</li>
</ul>
<h3 id="自定义语法高亮"><a href="#自定义语法高亮" class="headerlink" title="自定义语法高亮"></a>自定义语法高亮</h3><ul>
<li>以导入自定义的 markdown 语法高亮为例</li>
<li>可以去网上搜索<a href="https://github.com/draapho/Blog/tree/master/_blog_stuff/Notepad%2B%2B/markdown" target="_blank" rel="external">下载markdown语法高亮文件</a></li>
<li><code>Language</code>-&gt;<code>Define your language ...</code>-&gt;<code>Import</code>-&gt;选择下载的<code>markdown_*.xml</code>文件即可</li>
<li>导入成功后, <code>Language</code>-&gt;<code>Define your language ...</code>下面就会有markdown语言了</li>
</ul>
<h3 id="Npp插件"><a href="#Npp插件" class="headerlink" title="Npp插件"></a>Npp插件</h3><ul>
<li>插件的安装 (<strong>64位版本无法支持大多数插件</strong>)<ol>
<li><code>Plugins</code>-&gt;<code>Plugin Manager</code>-&gt;<code>Show Plugin Manager</code>-&gt;安装插件</li>
<li>将插件的<code>.dll</code>文件直接放到<code>plugins</code>目录下. (说明插件可以免安装)</li>
</ol>
</li>
<li><code>compare</code> 文件比较功能.<br>由于使用了深色主题, 需要使用深色作为背景<br><code>Plugins</code>-&gt;<code>compare</code>-&gt;<code>Option</code>-&gt;<code>Clolr setting</code>-&gt;点选颜色<code>More Colors</code> 调深即可</li>
<li><code>customize toolbar</code> 可自定义工具栏</li>
<li><code>File Switcher</code> 提供<code>ctrl+tab</code>在视图窗口切换标签的功能</li>
<li><code>Hex-Editor</code> 增加二进制编辑模式</li>
<li><code>Light Explorer</code> 增加资源管理器界面</li>
<li><code>Location Navigate</code> 浏览历史跳转<br>取消 <code>Mark Changed Line</code>, 配色看不清楚!</li>
<li><del><code>ViSimulator</code></del> vim模式, <code>ctrl+shift+alt+v</code> 使能或禁止. 可以从<a href="https://web.archive.org/web/20150515145616/http://www.visimulator.com/download.html" target="_blank" rel="external">这里下载</a></li>
<li><code>Zoom Disabler</code> 屏蔽ctrl+滚轮的缩放功能</li>
</ul>
<h2 id="Python-Script插件"><a href="#Python-Script插件" class="headerlink" title="Python Script插件"></a><a href="http://npppythonscript.sourceforge.net/index.shtml" target="_blank" rel="external">Python Script</a>插件</h2><ul>
<li><a href="http://npppythonscript.sourceforge.net/index.shtml" target="_blank" rel="external">Python Script</a>针对notepad++的python插件, 可以用来批量处理文件</li>
<li><a href="https://sourceforge.net/projects/npppythonscript/files/Python%20Script%201.0.8.0/" target="_blank" rel="external">下载最新版本1.0.8.0</a> <code>PythonScript_Full_1.0.8.0.zip</code> 即可</li>
<li><p>解压后将整个文件拷贝到notepad++的根目录下, 目录结构如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Notepad++ (Notepad++ 根目录, 例如&quot;C:\Program Files\npp&quot;)</div><div class="line"> +</div><div class="line"> |-- python26.dll</div><div class="line"> +-- plugins</div><div class="line">           |-- PythonScript.dll</div><div class="line">           |-- PythonScript</div><div class="line">           |   |-- lib</div><div class="line">           |   |     |-- (*.py)</div><div class="line">           |   |-- scripts</div><div class="line">           |             |-- (machine-level scripts)</div><div class="line">           |-- doc</div><div class="line">           |     |-- PythonScript</div><div class="line">           |             |-- PythonScript.chm</div><div class="line">           |-- Config (也可能在 %APPDATA%\Notepad++\plugins\config\)</div><div class="line">                         \-- PythonScript</div><div class="line">                                         |-- scripts</div><div class="line">                                                   |-- (用户脚本)</div></pre></td></tr></table></figure>
</li>
<li><p>检测是否安装成功. 重启notepad++. 按如下步骤进行测试<br><code>Plugins-&gt;Python Script</code>-&gt;<code>Show Console</code>-&gt;显示<code>Python ... Ready.</code></p>
</li>
<li><p><a href="https://github.com/draapho/Blog/tree/master/_blog_stuff/Notepad%2B%2B/Python%20Script" target="_blank" rel="external">一个实用的脚本示例</a>, <strong>注意</strong>, 需要使用Notepad++ 7及以上版本, 否则执行结果和预期会有差别.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os;</div><div class="line"><span class="keyword">import</span> sys;</div><div class="line"><span class="keyword">from</span> Npp <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="comment"># 对所有打开的文件去除行尾空格并将空格替换为TAB</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_menu_command</span><span class="params">()</span>:</span></div><div class="line">  <span class="comment"># Edit-&gt;Blank Operations</span></div><div class="line">  notepad.runMenuCommand(<span class="string">"Blank Operations"</span>, <span class="string">"Trim Trailing Space"</span>)</div><div class="line">  notepad.runMenuCommand(<span class="string">"Blank Operations"</span>, <span class="string">"Space to TAB (All)"</span>)</div><div class="line">  <span class="keyword">return</span></div><div class="line"></div><div class="line"><span class="comment"># Find and operate files opened at notepad</span></div><div class="line"><span class="comment"># There is something wrong run in NPP6.X</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_file_in_notepad</span><span class="params">()</span>:</span></div><div class="line">  file_list = notepad.getFiles()</div><div class="line">  <span class="keyword">for</span> file <span class="keyword">in</span> file_list:</div><div class="line">      fn = file[<span class="number">0</span>]</div><div class="line">      notepad.activateFile(fn)</div><div class="line">      run_menu_command()</div><div class="line"></div><div class="line">operate_file_in_notepad()</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="绿色版注册右键"><a href="#绿色版注册右键" class="headerlink" title="绿色版注册右键"></a>绿色版注册右键</h2><ul>
<li>基本思路是直接修改注册表, 增加右键<code>Notepad++ Here</code></li>
<li>写了批处理文件, 放到notepad++根目录, 管理员权限执行即可.<br><a href="https://github.com/draapho/Blog/blob/master/_blog_stuff/Notepad%2B%2B/_RegisterKey_Admin.bat" target="_blank" rel="external">_RegisterKey_Admin.bat</a> 注册右键, 需管理员权限执行.<br><a href="https://github.com/draapho/Blog/blob/master/_blog_stuff/Notepad%2B%2B/_UnregisterKey_Admin.bat" target="_blank" rel="external">_UnregisterKey_Admin.bat</a> 注销右键, 需管理员权限执行.</li>
<li>也可以手动创建文件 <code>注册右键.reg</code>, 内容如下.<br><strong>上述批处理的思路</strong>就是自动生成这个 <code>.reg</code> 文件然后导入注册表.<br><strong>需要替换notepad++安装路径</strong>. 然后管理员权限执行即可.<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Windows Registry Editor Version 5.00</div><div class="line">[HKEY_CLASSES_ROOT\*\Shell\NotePad++ Here]</div><div class="line">[HKEY_CLASSES_ROOT\*\Shell\NotePad++ Here\Command]</div><div class="line">@=&quot;\&quot;D:\\Program Files\\npp\\notepad++.exe\&quot; \&quot;%1\&quot;&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="快捷键设置"><a href="#快捷键设置" class="headerlink" title="快捷键设置"></a>快捷键设置</h2><ul>
<li>需按照<a href="https://draapho.github.io/2016/10/08/1607-Shortcut-win/">编辑器快捷键</a>设置</li>
<li>设置好的<a href="https://github.com/draapho/Blog/tree/master/_blog_stuff/Notepad%2B%2B/shortcuts.xml" target="_blank" rel="external">快捷键配置文件</a>, 直接替换原有的shortcuts.xml即可</li>
<li>说明一下<code>run</code>的设置, 可参考官方说明<a href="http://docs.notepad-plus-plus.org/index.php/External_Programs" target="_blank" rel="external">Notepad++调用外部程序</a><ul>
<li><code>Zeal.lnk $(CURRENT_WORD)</code> 在Zeal中查询选中内容</li>
<li><code>Typora.lnk &quot;$(FULL_CURRENT_PATH)&quot;</code> 在Typora中预览文件</li>
<li><code>ConEmu.lnk -Dir &quot;$(CURRENT_DIRECTORY)&quot;</code> 使用当前路径打开ConEmu</li>
<li>上述三个指令需要配置好全局变量, 或者使用绝对路径. </li>
<li>后缀名为lnk是因为我用了快捷方式放在同一个目录下, 简化设置全局变量的步骤</li>
<li><code>http://www.google.com/search?q=$(CURRENT_WORD)</code> 选中的内容直接google搜索</li>
</ul>
</li>
<li>环境变量的配置, 可以参考<a href="https://draapho.github.io/2016/10/09/1608-WinSoft-path/">Windows 软件系列-自定义环境变量</a></li>
<li>notepad++的宏录制功能也非常有用, 譬如可以录制一个 <code>TAB to Space</code> + <code>Trim Trailing Space</code> + <code>Save</code> 保存并设置快捷键为 <code>ctrl-s</code>, 这样就可以保存前自动完成空格处理了.</li>
</ul>
<h2 id="资源和参考"><a href="#资源和参考" class="headerlink" title="资源和参考"></a>资源和参考</h2><p><a href="https://notepad-plus-plus.org/" target="_blank" rel="external">Notepad++官网</a><br><a href="http://docs.notepad-plus-plus.org/index.php/Plugin_Central" target="_blank" rel="external">Notepad++插件中心</a><br><a href="http://docs.notepad-plus-plus.org/index.php/External_Programs" target="_blank" rel="external">Notepad++调用外部程序</a><br><a href="http://www.crifan.com/files/doc/docbook/rec_soft_npp/release/html/rec_soft_npp.html" target="_blank" rel="external">轻量级文本编辑器，Notepad最佳替代品：Notepad++</a><br><a href="http://jingyan.baidu.com/article/a24b33cd71f2d619ff002b60.html" target="_blank" rel="external">notepad++如何关联到右键菜单</a></p>
<h1 id="atom"><a href="#atom" class="headerlink" title="atom"></a><a href="https://atom.io/" target="_blank" rel="external">atom</a></h1><h2 id="atom简介"><a href="#atom简介" class="headerlink" title="atom简介"></a>atom简介</h2><ul>
<li>界面简洁, 基本上手可用, 无需复杂设置</li>
<li>开源免费, 而且多平台支持, 有丰富的插件库</li>
<li>和git的整合度很好! 直观明了好用</li>
<li>启动相对较慢, 但可接受.</li>
<li>懒人不想折腾, atom无明显短板, 就作为主力代码编辑器了</li>
<li>定位是 Notepad++ 为快速处理文件, atom 处理项目</li>
</ul>
<h2 id="两个快捷键"><a href="#两个快捷键" class="headerlink" title="两个快捷键"></a>两个快捷键</h2><ul>
<li>为了避免打开atom后一头雾水, 需要记住两个快捷键</li>
<li><code>ctrl+shift+p</code>, 打开atom命令窗口, 可以输入指令如<code>setting</code></li>
<li><code>ctrl+,</code> 打开设置页面</li>
</ul>
<h2 id="atom设置"><a href="#atom设置" class="headerlink" title="atom设置"></a>atom设置</h2><ul>
<li><code>ctrl+,</code>进入设置界面 <code>Settings</code></li>
<li><code>Editor</code> 界面下, 设置基本参数<ul>
<li><code>Show Ivisibles</code></li>
<li><code>Soft Tabs</code></li>
<li><code>Tab Length</code>-&gt;<code>4</code></li>
<li><code>Tab Type</code>-&gt;<code>auto</code>, 由于makefile必须为TAB, 否则可以设为 <code>soft</code> Tab键输入4个空格</li>
</ul>
</li>
<li><code>System</code> 界面下, 增加系统右键<ul>
<li><code>Register as file handler</code></li>
<li><code>Show in file context menus</code></li>
<li><code>Show in folder context menus</code></li>
</ul>
</li>
<li><code>Themes</code> 界面下, 选个喜欢的主题. 默认是<code>One Dark</code></li>
<li><code>Packages</code>-&gt;搜索<code>tree view</code>-&gt;<code>Core Packages</code>-&gt;<code>tree-view</code>-&gt;<code>Settings</code><ul>
<li><code>Hide Ignored Names</code> 隐藏atom指定的文件</li>
<li><code>Hide VCS Ignored Files</code> 隐藏<code>.gitignore</code>指定的文件</li>
</ul>
</li>
</ul>
<h2 id="atom插件"><a href="#atom插件" class="headerlink" title="atom插件"></a>atom插件</h2><ul>
<li>插件太多, 脱离需求讲插件是没有意义的. 新手的话, 先探索着玩玩吧.</li>
<li>记得仔细阅读插件的使用说明, 有些插件配置起来挺麻烦的. 但atom的插件管理已经很好了.</li>
<li>后续会根据自己的需求再写一篇atom的插件篇, 并详述如何配置.</li>
<li>下面推荐几个通用型的实用插件.</li>
<li><code>ctrl+,</code>进入设置界面 <code>Settings</code></li>
<li><code>Install</code> 界面下, 搜索安装如下插件<ul>
<li><code>atom-beautify</code> 代码格式美化, 需要安装辅助软件</li>
<li><code>git-time-machine</code> 查看比较文件的git历史</li>
<li><code>highlight-selected</code> 高亮选择的词</li>
<li><code>minimap</code> 文件小地图</li>
<li><code>minimap-highlight-selected</code> 在minimap内高亮选择的词</li>
<li><code>platformio-ide-terminal</code> 内嵌终端</li>
<li><code>project-manager</code> 管理项目.</li>
<li><code>project-viewer</code> 管理项目, 带UI</li>
<li><code>Sublime-Style-Column-Selection</code> 列操作使用<code>alt+drag</code></li>
<li><code>tabs-to-spaces</code> 空格/TAB自动转换</li>
<li><code>vim-mode</code> 提供vim模式.</li>
</ul>
</li>
</ul>
<h2 id="自定义快捷键"><a href="#自定义快捷键" class="headerlink" title="自定义快捷键"></a>自定义快捷键</h2><ul>
<li>以 <code>ctrl-f</code> 为例, 安装vim后, 变成翻页键, 但希望的是文件搜索和替换键.</li>
<li>可以禁止vim的<code>keybindings</code>, 但这里不适用, 因为还要用vim的其它快捷键.</li>
<li><code>ctrl+,</code>-&gt;进入设置界面 <code>Settings</code>-&gt;<code>Keybindings</code>-&gt;输入<code>ctrl-f</code></li>
<li>找到<code>vim-mode:scroll-full-screen-down</code>-&gt;点左边的复制图标</li>
<li><p>点击<code>your keymap file</code>-&gt;打开<code>keymap.cson</code>-&gt;黏贴内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&apos;atom-text-editor.vim-mode:not(.insert-mode)&apos;:</div><div class="line">  &apos;ctrl-f&apos;: &apos;vim-mode:scroll-full-screen-down&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>要屏蔽 vim 的 <code>ctrl-f</code>, 修改为<code>unset!</code>即可. 内容如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&apos;atom-text-editor.vim-mode:not(.insert-mode)&apos;:</div><div class="line">  &apos;ctrl-f&apos;: &apos;unset!&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>自定义详情可以参考官网的<a href="http://flight-manual.atom.io/using-atom/sections/basic-customization/#_customizing_keybindings" target="_blank" rel="external">Basic Customization</a></p>
</li>
<li>需按照<a href="https://draapho.github.io/2016/10/08/1607-Shortcut-win/">编辑器快捷键</a>设置</li>
<li>环境变量的配置, 可以参考<a href="https://draapho.github.io/2016/10/09/1608-WinSoft-path/">Windows 软件系列-自定义环境变量</a></li>
</ul>
<h1 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a><a href="http://www.typora.io/" target="_blank" rel="external">Typora</a></h1><h2 id="markdown简介"><a href="#markdown简介" class="headerlink" title="markdown简介"></a>markdown简介</h2><ul>
<li><strong><em>强烈推荐 Markdown</em></strong>, 基本可以放弃office word了!!!</li>
<li>markdown在专注于写作内容的同时, 快速便捷的自动美化格式</li>
<li><a href="https://draapho.github.io/about/markdownplus/">查看Markdown语法和效果</a></li>
<li>atom做编辑器也不错, 推荐插件 <code>markdown-preview-enhanced</code>. 但mermaid制图打印有问题.</li>
<li>而且什么都用atom, atom就太重了, 这里推荐 <a href="http://www.typora.io/" target="_blank" rel="external">Typora</a>.</li>
</ul>
<h2 id="Typora简介"><a href="#Typora简介" class="headerlink" title="Typora简介"></a>Typora简介</h2><ul>
<li><a href="http://www.typora.io/" target="_blank" rel="external">Typora</a>是一款极简的markdown编辑器. 多平台可用</li>
<li>单窗口显示, 使用 <code>ctrl+/</code> 切换预览和写作模式. 而且预览模式下也可直接写作.</li>
<li>支持<a href="https://en.wikibooks.org/wiki/LaTeX/Mathematics" target="_blank" rel="external">LaTex数学公式</a>, <a href="http://knsv.github.io/mermaid/" target="_blank" rel="external">mermaid制图</a>,<a href="http://www.webpagefx.com/tools/emoji-cheat-sheet/" target="_blank" rel="external">Emoji图标</a></li>
<li>借助<a href="http://pandoc.org/" target="_blank" rel="external">pandoc</a>,可导出多种格式</li>
<li>缺点: 打开较慢, 不支持列操作, 不能用鼠标右键.</li>
<li>熟悉markdown格式后, 可以用notepad++写作, 用Typora查看效果和转换格式.</li>
</ul>
<h2 id="Typora安装和设置"><a href="#Typora安装和设置" class="headerlink" title="Typora安装和设置"></a>Typora安装和设置</h2><ul>
<li>下载并安装<a href="http://www.typora.io/#windows" target="_blank" rel="external">Typora windows 版本</a></li>
<li>下载并安装<a href="http://pandoc.org/installing.html" target="_blank" rel="external">pandoc-xxx-windows.msi</a></li>
<li>打开<code>Typora</code>-&gt;<code>File</code>-&gt;<code>Preference</code></li>
<li><code>Syntax Support</code> 使能如下选项<ul>
<li><code>Inline math</code> 数学公式</li>
<li><code>Subscript</code> 下标</li>
<li><code>Superscript</code> 上标</li>
<li><code>Highlight</code> 高亮</li>
<li><code>Diagrams</code> 制图</li>
</ul>
</li>
<li><code>Syntax Preference</code><ul>
<li><code>Heading Style</code> <code>atx(#)</code> 偏好使用<code>#</code>标记为标题</li>
<li><code>Unodered List</code> <code>-</code> 偏好使用<code>-</code>标记为列表</li>
</ul>
</li>
</ul>
<h2 id="markdown语法参考"><a href="#markdown语法参考" class="headerlink" title="markdown语法参考"></a>markdown语法参考</h2><ul>
<li><a href="https://draapho.github.io/about/markdownplus/">Markdown语法</a></li>
<li><a href="http://knsv.github.io/mermaid/" target="_blank" rel="external">mermaid制图</a></li>
<li><a href="https://en.wikibooks.org/wiki/LaTeX/Mathematics" target="_blank" rel="external">LaTeX数学公式</a></li>
<li><a href="http://www.webpagefx.com/tools/emoji-cheat-sheet/" target="_blank" rel="external">Emoji图标</a></li>
</ul>
<h1 id="google-drive"><a href="#google-drive" class="headerlink" title="google drive"></a><a href="https://drive.google.com/" target="_blank" rel="external">google drive</a></h1><ul>
<li>主要作为云使用, 不少手机APP支持<a href="https://drive.google.com/" target="_blank" rel="external">google drive</a>, 而且还有好用的网页端应用</li>
<li>在线markdown编辑器<a href="https://stackedit.io/" target="_blank" rel="external">stackedit</a></li>
<li>在线制图软件<a href="https://www.draw.io" target="_blank" rel="external">draw.io</a></li>
<li>手机端markdown编辑器<a href="https://ia.net/writer" target="_blank" rel="external">iA Writer</a></li>
</ul>
<h1 id="默认新建utf-8文本文件"><a href="#默认新建utf-8文本文件" class="headerlink" title="默认新建utf-8文本文件"></a>默认新建utf-8文本文件</h1><ul>
<li>用notepad++建立一个样本文件, 命名为<code>UTF8.txt</code>, 设置为 <code>UTF-8</code> 编码(不带BOM), 放在 <code>C:\Windows\SHELLNEW</code> 下. 建议内容为空(内容会出现在新建文件中).</li>
<li><code>regedit</code>-&gt;打开 <code>注册表</code>-&gt;<code>HKEY_CLASSES_ROOT\.txt\ShellNew</code>-&gt;右侧新建 <code>字符串值</code>-&gt;名称 <code>FileName</code>-&gt; 数据 <code>UTF8.txt</code></li>
<li>此时, 新建的<code>文本文档</code>就是<code>UTF-8</code>编码的的文件. 事实上是复制了 <code>UTF8.txt</code> 这个样本文件.</li>
<li>参考 <a href="http://alanhou.org/windows-default-encoding-utf8/" target="_blank" rel="external">Windows新建文件改为默认UTF8</a></li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows 软件系列-提高效率]]></title>
      <url>https://draapho.github.io/2016/09/28/1602-WinSoft-efficiency/</url>
      <content type="html"><![CDATA[<h1 id="AutoHotKey"><a href="#AutoHotKey" class="headerlink" title="AutoHotKey"></a><a href="https://autohotkey.com/" target="_blank" rel="external">AutoHotKey</a></h1><h2 id="AHK-简介"><a href="#AHK-简介" class="headerlink" title="AHK 简介"></a>AHK 简介</h2><ul>
<li><a href="https://autohotkey.com/" target="_blank" rel="external">AutoHotkey</a>是一个windows下的开源, 免费, 自动化软件工具. </li>
<li>我主要用于绑定快捷键, 便于快速打开应用和文件夹. 以此提高<strong>工作效率</strong></li>
<li>常用符号含义<blockquote>
<p><code>#</code> 代表 Win 键<br><code>!</code> 代表 Alt 键<br><code>^</code> 代表 Ctrl 键<br><code>+</code> 代表 shift 键<br><code>::</code> 起分隔作用<br><code>run</code> 非常常用 的 AHK 命令之一<br><code>;</code>  注释后面一行内容</p>
</blockquote>
</li>
<li>举个例子<br>用 <code>Ctrl - Alt - Shift - Win - n</code> 打开记事本的脚本<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^!+#n::run C:\Windows\notepad.exe</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="AHK懒人用法-ezAHK"><a href="#AHK懒人用法-ezAHK" class="headerlink" title="AHK懒人用法: ezAHK"></a>AHK懒人用法: <a href="https://github.com/draapho/ezAHK" target="_blank" rel="external">ezAHK</a></h2><ul>
<li>安装 <a href="https://autohotkey.com/download/" target="_blank" rel="external">AutoHotKey</a> V1.1.* 版本</li>
<li>下载 <a href="https://github.com/draapho/ezAHK" target="_blank" rel="external">ezAHK</a> 放到任意位置</li>
<li>把文件或目录的<strong>快捷方式放到link目录</strong>里, 改成希望使用的<strong>快捷键名称</strong>即可.<br>譬如, 希望把notepad绑定到 <code>win-n</code>这个快捷键, 只需要:<ol>
<li>创建<strong>notepad.exe的快捷方式</strong>到<strong>link目录</strong></li>
<li>重命名该快捷方式为 <code>win-n</code></li>
<li>注意 <code>-</code> 的左右<strong>没有空格</strong>, <strong>删除后缀</strong> <code>.exe</code></li>
<li>可以考虑使用 <code>win-r</code> 的方式替代, 毕竟快捷键数量有限, 命令行更灵活.</li>
</ol>
</li>
<li>ezAHK 还包括如下几个实用功能<ul>
<li><code>鼠标中键</code> 复制</li>
<li><code>shift-鼠标中键</code> 剪切</li>
<li><code>ctrl-shift-鼠标中键</code> 复制路径</li>
<li><code>鼠标右键</code> 使用鼠标中键复制后, 首次黏贴</li>
<li><code>ctrl-鼠标右键</code> 黏贴</li>
<li><code>ctrl-~</code> 根据所在目录打开终端</li>
<li><code>alt-win-鼠标中键</code> 复制颜色</li>
<li><code>alt-win-↑ ↓ ← →</code> 单像素移动鼠标</li>
<li><code>alt-win-d</code> 输入当前日期</li>
</ul>
</li>
<li>添加到开机自启动: 创建<code>ezAHK.ahk</code>的快捷方式, 并放到如下 Windows 的 <strong>StartUp目录</strong>.<br>Windows 10 的 StartUp 目录如下:<br><code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</code></li>
</ul>
<h2 id="资源和参考"><a href="#资源和参考" class="headerlink" title="资源和参考"></a>资源和参考</h2><ul>
<li><a href="https://autohotkey.com/boards/viewtopic.php?t=4296" target="_blank" rel="external">实用 AutoHotkey 脚本推荐</a></li>
<li><a href="https://autohotkey.com/boards/viewtopic.php?t=4267" target="_blank" rel="external">AHK 快餐店系列索引</a></li>
<li><a href="https://autohotkey.com/docs/scripts/#AutoHotkey_Script_Showcase" target="_blank" rel="external">AutoHotkey_Script_Showcase</a></li>
<li><a href="https://autohotkey.com/board/topic/60985-get-paths-of-selected-items-in-an-explorer-window/" target="_blank" rel="external">Get paths of selected items in an explorer window</a></li>
<li>AutoHotKey<a href="https://autohotkey.com/" target="_blank" rel="external">官网</a> 及 <a href="http://ahkcn.sourceforge.net/docs/AutoHotkey.htm" target="_blank" rel="external">中文帮助</a></li>
<li><a href="http://www.jeffjade.com/2016/03/11/2016-03-11-autohotkey/" target="_blank" rel="external">Win下最爱效率神器:AutoHotKey</a></li>
</ul>
<h1 id="快速搜索和定位"><a href="#快速搜索和定位" class="headerlink" title="快速搜索和定位"></a>快速搜索和定位</h1><h2 id="Everything"><a href="#Everything" class="headerlink" title="Everything"></a><a href="https://www.voidtools.com/" target="_blank" rel="external">Everything</a></h2><ul>
<li><a href="https://www.voidtools.com/" target="_blank" rel="external">Everything</a>是免费软件, 有<strong>便携版</strong>.</li>
<li><a href="https://www.voidtools.com/" target="_blank" rel="external">Everything</a>是<strong>普通搜索工具</strong>, 便于在搜索结果中慢慢查阅.</li>
</ul>
<h2 id="Listary"><a href="#Listary" class="headerlink" title="Listary"></a><a href="http://www.listary.com/" target="_blank" rel="external">Listary</a></h2><ul>
<li><a href="http://www.listary.com/" target="_blank" rel="external">Listary</a>分为免费版和专业版.</li>
<li>相比于 <a href="https://www.voidtools.com/" target="_blank" rel="external">Everything</a>, 索引方式相似,但操作体验完全不同.</li>
<li><a href="http://www.listary.com/" target="_blank" rel="external">Listary</a>是<strong>随时随地的查找定位</strong>, 目标明确时很方便. </li>
<li>强烈推荐都尝试一下后决定用哪个, 或和我一样同时使用.</li>
<li>Listary 实用快捷键</li>
</ul>
<table>
<thead>
<tr>
<th>Listary</th>
<th>助记</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>win-~</code></td>
<td></td>
<td>打开Listary</td>
</tr>
<tr>
<td><code>enter</code></td>
<td>enter</td>
<td>打开文件</td>
</tr>
<tr>
<td><code>ctrl-enter</code></td>
<td>enter</td>
<td>打开路径</td>
</tr>
<tr>
<td><code>ctrl-c</code></td>
<td>copy</td>
<td>复制</td>
</tr>
<tr>
<td><code>ctrl-shift-c</code></td>
<td>copy</td>
<td>复制路径</td>
</tr>
<tr>
<td><code>ctrl+j</code> <code>ctrl+k</code></td>
<td>vim j,k</td>
<td>下一个 / 上一个(需设置)</td>
</tr>
</tbody>
</table>
<h2 id="使用-win-r-快速启动"><a href="#使用-win-r-快速启动" class="headerlink" title="使用 win-r 快速启动"></a>使用 <code>win-r</code> 快速启动</h2><ul>
<li>基本原理是使用 <code>Run</code> 来直接运行配置在环境变量中的快捷方式 <code>.lnk</code>, </li>
<li>由于是执行命令行, 比快捷键方式有更好的扩展性和灵活性更好. 也可以在任何终端中直接调用!</li>
<li>运行环境的搭建可以参考 <a href="https://draapho.github.io/2016/10/09/1608-WinSoft-path/">Windows 软件系列-自定义环境变量</a></li>
<li>详细介绍可参考 <a href="https://xbeta.info/win-run.htm#h-6" target="_blank" rel="external">最绿色最高效，用win+r启动常用程序和文档</a></li>
<li>为了更省事, 可以使用AHK设置为<code>win</code>键替代<code>win-r</code>键</li>
<li>要把win键也省了的话, 专业版 <a href="http://www.listary.com/" target="_blank" rel="external">Listary</a> 可以满足这个需求</li>
</ul>
<h1 id="Ditto"><a href="#Ditto" class="headerlink" title="Ditto"></a><a href="http://ditto-cp.sourceforge.net/" target="_blank" rel="external">Ditto</a></h1><ul>
<li><a href="http://ditto-cp.sourceforge.net/" target="_blank" rel="external">Ditto</a> 一款剪切板增强软件, 免费开源. 有绿色便携版(无法支持部分功能)</li>
<li>对复制黏贴功能多多支持总是好的, 使用频率太高了! 这个软件的功能非常实用.<ul>
<li>软件的核心在于 <code>ctrl-~</code> 调用出 Ditto 信息板</li>
<li><code>shift-enter</code> 忽略格式黏贴纯文本</li>
<li><code>新建剪辑</code>-&gt;<code>项目标题</code> <code>email</code>-&gt;<code>快速黏贴文本</code> <code>myemail@gmail.com</code>-&gt;设置为<code>禁止自动删除</code>, 也可以归类到组. 以后只需输入email, 就可以直接黏贴具体email地址了</li>
<li>轻松管理复制历史, 可用作搜索资料, 然后批量黏贴</li>
</ul>
</li>
<li>重新设置 <code>激活Ditto</code> 快捷键为 <code>ctrl-q</code>, 因为 <code>ctrl-~</code>默认用于打开终端</li>
<li>参考 <a href="https://xbeta.info/ditto.htm" target="_blank" rel="external">Ditto:首选的剪贴板增强软件</a></li>
</ul>
<h1 id="Chocolatey"><a href="#Chocolatey" class="headerlink" title="Chocolatey"></a><del><a href="https://chocolatey.org/" target="_blank" rel="external">Chocolatey</a></del></h1><p><strong><a href="https://chocolatey.org/" target="_blank" rel="external">Chocolatey</a>可以作为软件安装的补充, 但不做推荐</strong> </p>
<h2 id="Chocolatey-简介"><a href="#Chocolatey-简介" class="headerlink" title="Chocolatey 简介"></a>Chocolatey 简介</h2><ul>
<li><a href="https://chocolatey.org/" target="_blank" rel="external">Chocolatey</a>是windows下的软件管理工具. 软件源由社区成员提交和维护. 基础版免费.</li>
<li>基于命令行来查找和安装软件,方便快捷,<del>耍酷</del>.</li>
<li>安装包的类型:<ul>
<li>无后缀, 如 git</li>
<li><em>.install, 如 git.install, 这个会出现在系统的 <em>*卸载或更改程序</em></em> 界面里</li>
<li>*.commandline, 如 git.commandline. 不建议使用</li>
<li>*.portable, 如 putty.portable, zip包, 我的理解就是绿色便携软件</li>
</ul>
</li>
<li>软件都是自动静默安装, 无法指定安装位置, 无法再安装时配置.</li>
<li>由于运行在管理员权限且不能保证软件绝对无毒, 所以有安全风险. <a href="https://chocolatey.org/about" target="_blank" rel="external">Chocolatey官网</a>有如下语句:<blockquote>
<p>If you need better peace of mind, we offer <a href="https://chocolatey.org/docs/features-virus-check" target="_blank" rel="external">runtime malware protection</a> in <a href="https://chocolatey.org/pricing" target="_blank" rel="external">Chocolatey Pro</a> and <a href="https://chocolatey.org/pricing" target="_blank" rel="external">Chocolatey for Business</a></p>
</blockquote>
</li>
<li>搜索和下载指定版本的软件也没有想象中方便.</li>
<li>综合考虑后, <a href="https://chocolatey.org/" target="_blank" rel="external">Chocolatey</a>可以作为软件安装的补充(如制作安装脚本), 但不做推荐</li>
</ul>
<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><ul>
<li><p>windows <a href="https://chocolatey.org/install" target="_blank" rel="external">安装 Chocolatey</a>. 使用管理员权限打开 cmd.exe, 输入:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@powershell -NoProfile -ExecutionPolicy Bypass -Command &quot;iex ((New-Object System.Net.WebClient).DownloadString(&apos;https://chocolatey.org/install.ps1&apos;))&quot; &amp;&amp; SET &quot;PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>几个常用指令</p>
<ul>
<li><code>choco -?</code> 帮助指令, 获取choco指令的详细说明</li>
<li><code>choco search</code> 搜索. 用 <code>-all</code> 可显示所有版本. 也可以查看<a href="https://chocolatey.org/packages/" target="_blank" rel="external">网页版</a></li>
<li><code>choco install</code> 安装. 用 ‘-version’ 可指定版本</li>
<li><code>choco upgrade</code> 升级</li>
<li><code>choco uninstall</code> 删除</li>
<li><code>choco list -localonly</code> 查看本地已安装的软件</li>
</ul>
</li>
<li>以nodejs为例<ul>
<li><code>choco search nodejs</code> 加 <code>-all</code> 会显示所有版本!!! </li>
<li>建议网页端搜索 <a href="https://chocolatey.org/packages/" target="_blank" rel="external"><strong>软件源列表</strong></a></li>
<li><code>choco install nodejs -version 5.0.0</code>  安装nodejs 5.0.0这个版本, 默认使用安装 <strong>.install</strong></li>
<li><code>choco upgrade nodejs</code>  升级nodejs到最新版本</li>
<li><code>choco uninstall nodejs</code>  删除nodejs</li>
<li><code>choco list -localonly</code> 确认是否已删除</li>
</ul>
</li>
</ul>
<h2 id="资料和参考"><a href="#资料和参考" class="headerlink" title="资料和参考"></a>资料和参考</h2><ul>
<li>Chocolatey 官方说明的 <a href="https://chocolatey.org/install" target="_blank" rel="external">安装方式</a></li>
<li><a href="https://chocolatey.org/packages/" target="_blank" rel="external">Chocolatey 软件源列表</a></li>
<li><a href="http://ninghao.net/blog/2071" target="_blank" rel="external">更好的安装软件的方法</a></li>
<li><a href="http://www.jianshu.com/p/831aa4a280e7" target="_blank" rel="external">Windows下的包管理器Chocolatey</a></li>
<li><a href="https://medium.com/@keivan/why-chocolatey-is-broken-beyond-any-hope-d1a4e33b3d23#.jzmj9o5cd" target="_blank" rel="external">Why Chocolatey is broken beyond any hope</a></li>
</ul>
<h1 id="Zeal"><a href="#Zeal" class="headerlink" title="Zeal"></a><a href="https://zealdocs.org/" target="_blank" rel="external">Zeal</a></h1><ul>
<li><a href="https://zealdocs.org/" target="_blank" rel="external">Zeal</a>是一款在windows和Linux上, 功能类似于Mac上Dash的一款离线文档查看软件.</li>
<li>免费软件, 有绿色便携版, 支持的手册种类和Dash是一样的. 应该是为了跨平台, 基于Qt5开发, 反应有点慢.</li>
<li>下载安装完成后, <code>Tool</code>-&gt;<code>Docksets...</code>-&gt;窗口<code>Docsets</code>下-&gt;<code>Available</code>-&gt;选择语言-&gt;<code>Download</code>即可.</li>
<li><strong>软件开发人员必备</strong>. 还可以在atom直接调用查看API, 省去大量的文档搜索时间.</li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a></em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows下使用github和hexo建独立博客]]></title>
      <url>https://draapho.github.io/2016/09/24/1601-InitBlog/</url>
      <content type="html"><![CDATA[<h1 id="我需要一个博客"><a href="#我需要一个博客" class="headerlink" title="我需要一个博客"></a>我需要一个<a href="https://draapho.github.io">博客</a></h1><p>三年前学linux的时候, 深感复杂,  然后也略微记录了些笔记放在电脑里. 但是真要用的时候, 依旧会google或baidu, 原因很简单: 电脑的笔记用起来不方便, 找文档慢不说, 找到后要么是没有格式的txt文档, 有些是花了力气排版好的word, 又觉得打开很慢. 于是觉得需要一个博客, 在CSDN开了博, 坚持不到10篇文章就放弃了, 原因很简单: 太麻烦了. 我的本意只是学习笔记加资料仓库, 但维护它的时间成本太高了. 一晃三年, 工作上进入一个新领域, 需要系统的学习嵌入式linux和python, 再度觉得需要建一个博客来管理和维护一些笔记和资料.</p>
<p><strong>工欲善其事, 必先利其器</strong>. 所以, 我需要一个博客. 寻寻觅觅, 幸运寻得github.io和markdown写作这么一个方案.</p>
<h1 id="折腾记-jekyII方案"><a href="#折腾记-jekyII方案" class="headerlink" title="折腾记, jekyII方案"></a><del>折腾记, jekyII方案</del></h1><p>不过依旧走了一点弯路, 因为github.io推荐的是jekyII环境, 如果对这个方案感兴趣, 点击<a href="https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/" target="_blank" rel="external">这里</a>可以按照官方教程来操作. 人家第一句话就是<a href="https://help.github.com/articles/setting-up-your-github-pages-site-locally-with-jekyll/" target="_blank" rel="external"><strong>jekyII并不原生支持Windows</strong></a> , 但我岂是会轻易投降的人, 遇到问题就解决问题, 这不还有另外一句 <a href="http://jekyllrb.com/docs/windows/#installation" target="_blank" rel="external"><strong>Jekyll on Windows</strong></a>, 流程如下, 然后还要注意编码问题.</p>
<ul>
<li>装<a href="http://rubyinstaller.org/downloads/" target="_blank" rel="external">Ruby</a> 或者 <code>choco install ruby -y</code></li>
<li>装jekyII,   <code>gem install jekyll</code><br>最终, 我是安装失败了…具体卡在哪个错误提示也给忘了. 所幸的是搜到了对windows友好的hexo方案.</li>
</ul>
<h1 id="Hexo方案"><a href="#Hexo方案" class="headerlink" title="Hexo方案"></a>Hexo方案</h1><p>恩, 这里才是正文的开始! windows下安装hexo这个任务非常简单!</p>
<ul>
<li>对<a href="https://git-scm.com/" target="_blank" rel="external">Git软件</a>和<a href="https://github.com/" target="_blank" rel="external">GitHub网站</a>不熟的话, 建议安装<a href="https://desktop.github.com/" target="_blank" rel="external">GitHub Windows</a>, 安装后根据提示操作.</li>
<li>安装<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.JS</a>, 选推荐版本, 目前是v4.5.0 LTS (即 Long Term Support), 环境变量默认会设置好.</li>
<li><p>安装Hexo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure>
</li>
<li><p>创建并初始化博客文件夹,这里命名为<strong><em>Blog</em></strong>, 右键点”Git Bash Here”, 或者打开cmd进入到<strong><em>Blog</em></strong>目录下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">cd Blog           # 确保在Blog这文件夹下</div><div class="line">npm install hexo --save # 安装hexo</div><div class="line">hexo init         # 初始化Blog文件夹内容</div><div class="line">npm install       # 安装必要的依赖包</div><div class="line"># 下面是必要的插件包</div><div class="line">npm install hexo-deployer-git --save      # 使用github发布</div><div class="line">npm install hexo-deployer-rsync --save    # 不装, 使用 rysnc发布</div><div class="line">npm install hexo-deployer-openshift --save    # 不装, 使用OpenShift发布</div><div class="line">npm install hexo-generator-feed --save    # 不装, 生成atom.xml, 供RSS使用</div><div class="line">npm install hexo-generator-sitemap --save # 不装, 生成sitemap.xml, 用于提高搜索量</div><div class="line">npm install hexo-generator-search --save  # 用于本地搜索</div></pre></td></tr></table></figure>
</li>
<li><p>本地查看效果, 输入<code>hexo s</code>成功后登录 <code>localhost:4000</code>查看效果<br>这里, 我遇到了错误, 提示是 4000 端口已经被占用.<br>最后发现是 foxitProtect.exe (福昕PDF保护进程)占用此端口, 先结束, 然后直接删除.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">netstat -aon | findstr &quot;4000&quot;     # 查找占用4000端口的PID, 譬如, 结果为1234</div><div class="line">tasklist | findstr &quot;1234&quot;         # 查找PID=1234的进程名称, 譬如, 结果为foxitProtect.exe</div><div class="line">taskkill /f /t /im foxitProtect.exe   # 强制杀死此进程</div></pre></td></tr></table></figure>
</li>
<li><p>配置 hexo 的 <code>_config.yml</code></p>
<blockquote>
<p># Site<br>title: DRA&amp;PHO                  # 博客名字<br>subtitle: thinking &amp; logging    # 副标题<br>description: Embedded System, IoT, M2M  # 博客描述<br>author: draapho                 # 作者<br>language: en        # 语言, 中文为 zh-Hans, 需设置category_map和tag_map</p>
<p># URL<br>url: <a href="https://YourGitHubName.github.io/" target="_blank" rel="external">https://YourGitHubName.github.io/</a>  # 替换<strong><em>YourGitHubName</em></strong><br># 譬如: <a href="https://draapho.github.io/">https://draapho.github.io/</a> 我的GitHub注册名是<strong><em>draapho</em></strong></p>
<p># Directory<br>source_dir: source      # source文件夹, 用来写文章<br>public_dir: public      # public文件夹, 自动生成的静态页面都放在这里<br>tag_dir: tags           # 标签文件夹, 需要安装 hexo-generator-tag<br>archive_dir: archives   # 归档文件夹, 需安装 hexo-generator-archive<br>category_dir: categories    # 分类文件夹, 需安装 hexo-generator-category</p>
<p># Extensions<br>theme: next         # 随了大流, 用了next主题</p>
<p># Deployment<br>deploy:<br>  type: git         # 使用git部署, 需安装 hexo-deployer-git<br>  repository: <a href="https://github.com/YourGitHubName/YourGitHubName.github.io.git" target="_blank" rel="external">https://github.com/YourGitHubName/YourGitHubName.github.io.git</a><br>  # 我的注册名是<strong><em>draapho</em></strong>, 就写成: <a href="https://github.com/draapho/draapho.github.io.git" target="_blank" rel="external">https://github.com/draapho/draapho.github.io.git</a><br>  branch: master</p>
<p># search Settings, 默认没有这行内容, 自己添加即可<br>search:             # 本地搜索功能, 需安装 hexo-generator-search<br>   path: search.xml<br>   field: post</p>
</blockquote>
</li>
<li><p>创建about,categories,tags文件夹及文件<br>在<code>Blog\source</code>下, 新建文件夹about, 然后新建文件index.md, 用于生成关于页面</p>
<blockquote>
<p>-–<br>title: about<br>date: 2016-09-08<br>comments: false<br>-–<br>这一篇的内容是自我介绍</p>
</blockquote>
<p>在<code>Blog\source</code>下, 新建文件夹categories, 然后新建文件index.md, 用于生成分类页面</p>
<blockquote>
<p>-–<br>title: categories<br>date: 2016-09-08<br>type: “categories”<br>comments: false<br>-–</p>
</blockquote>
<p>在<code>Blog\source</code>下, 新建文件夹tags, 然后新建文件index.md, 用于生成标签页面</p>
<blockquote>
<p>-–<br>title: tags<br>date: 2016-09-08<br>type: “tags”<br>comments: false<br>-–</p>
</blockquote>
</li>
</ul>
<h1 id="github端的配置"><a href="#github端的配置" class="headerlink" title="github端的配置"></a>github端的配置</h1><ul>
<li>如果之前没有使用过github, 第一次上传应该要求输入用户名和密码. 但如果每次部署都要这样, 就显得很麻烦. github端可以使用SSH 或 GPG keys来免去这个步骤. 建议使用GPG keys.</li>
<li>这里就不详细展开了, 具体步骤参考github, <a href="https://help.github.com/articles/generating-a-gpg-key/" target="_blank" rel="external">生成一个GPG key</a></li>
</ul>
<h1 id="使用mermaid插件支持流程图等"><a href="#使用mermaid插件支持流程图等" class="headerlink" title="使用mermaid插件支持流程图等"></a><del>使用mermaid插件支持流程图等</del></h1><ul>
<li><p>安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-tag-mermaid --save</div></pre></td></tr></table></figure>
</li>
<li><p>添加mermaid依赖到主题模板<br>进入themes/your_theme_folder/layout/partial目录，添加mermaid相关文件。<br>head.jade 添加如下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">link(rel=&quot;stylesheet&quot;, href=url_for(&quot;https://cdn.bootcss.com/mermaid/6.0.0/mermaid.min.css&quot;))</div></pre></td></tr></table></figure>
<p>scripts.jade 添加如下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">link(rel=&quot;stylesheet&quot;, script(src=&quot;//cdn.bootcss.com/mermaid/6.0.0/mermaid.min.js&quot;)</div></pre></td></tr></table></figure>
</li>
<li><p>我暂时放弃了<br>next用的swig, 不知道和jade文件是什么关系. 暂时不愿去研究.<br>看了下此插件的格式, 和我常用的Typora使用的mermaid不一样.<br>博客上用到流程图之类的机会不多, 偶尔需要使用图片即可.<br>如有兴趣, 可参考 <a href="http://jcchow.com/2016/07/11/mermaid-sequence/" target="_blank" rel="external">Hexo流程图等插件安装教程</a></p>
</li>
</ul>
<h1 id="NexT主题"><a href="#NexT主题" class="headerlink" title="NexT主题"></a>NexT主题</h1><p>主题的选择我没有花太多时间, 测试了2-3个主题后, 最终还是随大流的用了NexT主题. 说实话, 设计感很好, 用的人很多, 略有审美疲劳. 好在博客目标明确, NexT能很好的覆盖我几个基本需求, 文档又写的很完善, 就不折腾了.</p>
<ul>
<li>安装NexT, 见<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">官方文档</a></li>
<li>menu_icons 图标配置, 名称用的是<a href="http://fontawesome.io/icons/" target="_blank" rel="external">Font Awesome</a></li>
<li>about 页面的链接是 <a href="https://YourGitHubName.github.io/about" target="_blank" rel="external">https://YourGitHubName.github.io/about</a><br>我的注册名是<strong><em>draapho</em></strong>, 就写成 <a href="https://draapho.github.io/about">https://draapho.github.io/about</a></li>
<li><code>\themes\next\_config.yml</code>文件内找到<code>use_motion:</code> 设置为<code>false</code>. 表示禁止动画效果, 立刻显示页面</li>
</ul>
<h1 id="Hexo的日常使用"><a href="#Hexo的日常使用" class="headerlink" title="Hexo的日常使用"></a>Hexo的日常使用</h1><ul>
<li>习惯于直接在 \Blog\source_posts\ 下面直接新建文件 xxx.md<br>然后打开文件, 添加并修改如下内容:<blockquote>
<p>title: Windows下使用github和hexo建立自己的博客<br>date: 2016-09-08<br>categories: environment<br>tags: [blog, hexo, next]</p>
</blockquote>
</li>
<li>Hexo的常用指令<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hexo clean    #更换hexo主题后, 建议先执行此条命令清空</div><div class="line">hexo g        # g=generate, 生成public静态文件</div><div class="line">hexo s        # s=server, 本地发布预览效果, 默认地址是 localhost:4000</div><div class="line">hexo d        # d=deploy, 自动部署</div><div class="line">hexo d -g     # 我最常用的指令, 意思是先generate再deploy.</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://wsgzao.github.io/post/hexo-guide/" target="_blank" rel="external">使用GitHub和Hexo搭建免费静态Blog</a></li>
<li><a href="http://www.jianshu.com/p/35e197cb1273" target="_blank" rel="external">Hexo搭建Github-Pages博客填坑教程</a></li>
<li><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">Hexo 文档</a></li>
<li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">Next 主题</a></li>
</ul>
<hr>
<p><strong><em>原创于 <a href="https://draapho.github.io/">DRA&amp;PHO</a></em></strong></p>
]]></content>
    </entry>
    
  
  
</search>
